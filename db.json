{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":0},{"_id":"source/images/2021-06-21-Hierarchical-Attention.images/1624323245414_src","path":"images/2021-06-21-Hierarchical-Attention.images/1624323245414_src","modified":0,"renderable":0},{"_id":"source/images/2021-06-22-Decomposable-Attention-1.images/1624336820545_src","path":"images/2021-06-22-Decomposable-Attention-1.images/1624336820545_src","modified":0,"renderable":0},{"_id":"source/images/2021-06-22-Decomposable-Attention.images/1624336820545_src","path":"images/2021-06-22-Decomposable-Attention.images/1624336820545_src","modified":0,"renderable":0},{"_id":"source/images/Decomposable-Attention.images/1624336820545_src","path":"images/Decomposable-Attention.images/1624336820545_src","modified":0,"renderable":0},{"_id":"source/images/Hierarchical-Attention.images/1624323245414_src","path":"images/Hierarchical-Attention.images/1624323245414_src","modified":0,"renderable":0},{"_id":"source/images/Hierarchical-Attention.images/1624323245414_src-1624427147187","path":"images/Hierarchical-Attention.images/1624323245414_src-1624427147187","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"8d75599ec6eef078a536c367b53d4bf11168d77c","modified":1624723186000},{"_id":"source/.DS_Store","hash":"ffc05c536594f7ca5ebae055eeeb809117f60bd9","modified":1646105809259},{"_id":"source/about/index.md","hash":"f1239d0423df421d54eabbef732fd66a89ff6b5f","modified":1629908226000},{"_id":"source/categories/index.md","hash":"9b54c51e63124bf2eee66df64dc8ea69b4de7565","modified":1629908210000},{"_id":"source/_posts/.DS_Store","hash":"45c772f56a248081df62a54e62068fa3b0e4a9b0","modified":1646105809260},{"_id":"source/tags/index.md","hash":"cb4c64cdebfe4f0330fa25b80096846aad5bab54","modified":1629908240000},{"_id":"source/_posts/2_算法相关/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising.md","hash":"e10930120dee1a3c94dec199640836f699df4083","modified":1646107170985},{"_id":"source/_posts/1_思维导图/FL源码思维导图.xmind","hash":"963272a1eed6b204c1cce1160b1a0876d249762c","modified":1589872408000},{"_id":"source/_posts/2_算法相关/FM.md","hash":"51320f42a9629e16233f47c2d4d53aa75d683419","modified":1646107170994},{"_id":"source/_posts/2_算法相关/LDA算法.md","hash":"c3ddf1613a175165d920d0f24b9a88ef0a09282b","modified":1646107170994},{"_id":"source/_posts/2_算法相关/Uplift Modeling.md","hash":"934be8745c03a9258d9ef0e153a51e29f83f08ed","modified":1646107170990},{"_id":"source/_posts/2_算法相关/Learning to Rank：Point-wise、Pair-wise 和 List-wise区别.md","hash":"db49260ba379d7597b3b2d94590cc2a8efd6c47e","modified":1646107170984},{"_id":"source/_posts/2_算法相关/[comment]Deep Learning based Recommender System A Survey and New Perspectives.md","hash":"758eb9cbf7e0dbfccac5c382d5d3af60d919d262","modified":1646107332188},{"_id":"source/_posts/2_算法相关/[comment]Exact-K Recommendation.md","hash":"54ddb881137537ed24967997b383783691598bde","modified":1646107336574},{"_id":"source/_posts/2_算法相关/[comment]XGBOOST文献.md","hash":"e04efc6274e7074f19044886bc021ad7b9f83d14","modified":1646107346966},{"_id":"source/_posts/2_算法相关/[comment]silk_road.md","hash":"c2ef1eeee75a34e28df63397e4d31311cffdd5b3","modified":1646107341603},{"_id":"source/_posts/2_算法相关/embedding相关笔记.md","hash":"a9333ec15ce6663c5d980f3a10d718cf0419b0da","modified":1646107170978},{"_id":"source/_posts/2_算法相关/deep learning based推荐系统论文笔记.md","hash":"fee9743cc72f7bbeb13e80ad5be19cf292674fb4","modified":1646107170976},{"_id":"source/_posts/2_算法相关/[comment]airbnb embedding.md","hash":"88589795a7ee2d450de2baf6464eb56422ffd6fc","modified":1646107329151},{"_id":"source/_posts/2_算法相关/中文分词.md","hash":"b6aae99e3754af583a05f4cf938ac5865b652f9d","modified":1646107170981},{"_id":"source/_posts/2_算法相关/时间序列模型.md","hash":"ba1ad9bbeeb9e1f6c50516eb07b18ee5df8c5d62","modified":1646107170977},{"_id":"source/_posts/2_算法相关/机器学习基础.md","hash":"52a05ff4b097daa9bf3b1d5768bd1789238a7d19","modified":1646107170976},{"_id":"source/_posts/2_算法相关/李宏毅强化学习笔记.md","hash":"542ec789f98fc30a038a5e10d38b38cbb8e42f93","modified":1646107170983},{"_id":"source/_posts/2_算法相关/深度学习笔记.md","hash":"25faea6384f6cb063d64da9e25c472ccb6da430a","modified":1646107170989},{"_id":"source/_posts/2_算法相关/吴恩达卷积神经网络笔记.md","hash":"69c173ddb7919342d29ff708bc41f46b85b3626a","modified":1646107170987},{"_id":"source/_posts/2_算法相关/自然语言处理笔记.md","hash":"851018fe388e26497cdb828b5e688339f6027339","modified":1646107170990},{"_id":"source/_posts/2_算法相关/联邦树模型.md","hash":"105da8e3b52a74ffd200683904d5f20295b674c8","modified":1646107170993},{"_id":"source/_posts/2_算法相关/计算广告学笔记.md","hash":"e4f3803f1f69c76cc4455d5d6f2dc4f060304e76","modified":1646107170992},{"_id":"source/_posts/2_算法相关/表示学习调研.md","hash":"0a756b3b6edab8711f2650d15eeec58ae303d96a","modified":1646107170980},{"_id":"source/_posts/2_算法相关/计算广告.md","hash":"7047af5406c2ac4195969c0189c2b436f4380335","modified":1646107170974},{"_id":"source/_posts/2_算法相关/评估指标.md","hash":"b48da5ec1b84790be84310ffde09eaa38eff065f","modified":1646107170995},{"_id":"source/_posts/0_代码相关/.DS_Store","hash":"3907e014d04fd814ee057149091bc119bc122e99","modified":1646063131818},{"_id":"source/_posts/0_代码相关/2021-06-23-搭建hexo博客.md","hash":"aca256825456119e5662dd4597672aad6238d17f","modified":1646108376324},{"_id":"source/_posts/0_代码相关/01_日期操作.md","hash":"dcb3f39d3f81d76b3390a4ce73d2ff93cb8d6c94","modified":1646106469557},{"_id":"source/_posts/0_代码相关/C语言学习.md","hash":"c307c4720a7adf57d58b35ffa3de7fd53d160978","modified":1646106584240},{"_id":"source/_posts/0_代码相关/VPN搭建.md","hash":"0c3907a0421f44db4513687fb723f972d079d3dc","modified":1646106896552},{"_id":"source/_posts/0_代码相关/anaconda+tensorflow安装教程.md","hash":"36651cdda19ebf0146b513d61532d7e4d93eb8df","modified":1646106560045},{"_id":"source/_posts/0_代码相关/FL源码注释.py","hash":"1a86772004946097f01676e6bd40e29b21049c26","modified":1591013140000},{"_id":"source/_posts/0_代码相关/awk.md","hash":"f4fc2796fc1b77b218369ec3d555a5f9b7cf28c0","modified":1646106575124},{"_id":"source/_posts/0_代码相关/XGB.md","hash":"355c82bce9ee08688f75eb5bb244d94f9cd240a3","modified":1646106910052},{"_id":"source/_posts/0_代码相关/final_cut_pro基础知识.md","hash":"de5d9c01eec6edf2a6e034d01b8d610aa754119d","modified":1646106602090},{"_id":"source/_posts/0_代码相关/hdfs常用命令.md","hash":"f0a707ce11e12ee4178a3eb5d909b77e72048e67","modified":1646106621521},{"_id":"source/_posts/0_代码相关/git基础操作笔记.md","hash":"f646faa7458448cab33950ace7bf68afeaad37c8","modified":1646106609518},{"_id":"source/_posts/0_代码相关/iterm奇淫技巧.md","hash":"2ddd2d9641c703662c4d03e9fe649404daa8344a","modified":1646106646670},{"_id":"source/_posts/0_代码相关/mac使用rz sz.md","hash":"b0ec610a90b27b316dec0d25fa9cac147ba5ef2d","modified":1646106674038},{"_id":"source/_posts/0_代码相关/hive.md","hash":"39d6c602a4783deb7a531eb852f6c6afc3b49922","modified":1646106637791},{"_id":"source/_posts/0_代码相关/mathtype破解教程.md","hash":"681c0a4be2325b972294e54febc83bbb281b0b3e","modified":1646106684161},{"_id":"source/_posts/0_代码相关/numpy.md","hash":"ab08d763185b67c6945160615470b60cc597a387","modified":1646106693636},{"_id":"source/_posts/0_代码相关/pandas常用命令.md","hash":"b0cb8677c40c82a9e0758379384e10193e39839e","modified":1646106719386},{"_id":"source/_posts/0_代码相关/pandas.md","hash":"397f1841aacf886548d975bbcd05479c347bd929","modified":1646106705541},{"_id":"source/_posts/0_代码相关/pyplot.md","hash":"49e598e31fe73657411fc2c9eae6da1730fd934f","modified":1646106731097},{"_id":"source/_posts/0_代码相关/pyspark.md","hash":"c457098a669c34915f1aa6808962ad4d2cdc4b86","modified":1646106745787},{"_id":"source/_posts/0_代码相关/python.md","hash":"436b674a7e4c93847632866203d5c5f6e08fa137","modified":1646106761060},{"_id":"source/_posts/0_代码相关/python面向对象编程.md","hash":"2df80148648a3539a7643ff815fe61b791cc83ec","modified":1646106771421},{"_id":"source/_posts/0_代码相关/shellcheck.md","hash":"e63d60f4e45e252dddb4f2dc332fb81701d5d4e9","modified":1646106822910},{"_id":"source/_posts/0_代码相关/scala.md","hash":"cab484d8cf723ee9b2343ed6ecd64533cb907e2f","modified":1646106783951},{"_id":"source/_posts/0_代码相关/shell.md","hash":"c2e7d4a1ccdb2921f632d61ac989413e34cddc12","modified":1646106804234},{"_id":"source/_posts/0_代码相关/shell日期运算.md","hash":"bd08b6a00f4a51a921a80e5c5c5cbf51bad695ab","modified":1646106832697},{"_id":"source/_posts/0_代码相关/tensroflow各种模型保存和加载.md","hash":"1f83ddac2405e74fa6663ab28fd139794daaeeee","modified":1646106872601},{"_id":"source/_posts/0_代码相关/tensorflow.md","hash":"368fb6a0e4a7214549ebf99ffd38dffe01b87763","modified":1646106859148},{"_id":"source/_posts/0_代码相关/typora主题.md","hash":"d99a99f7443c6a10bd90934b7acb8f63fbcfcec9","modified":1646106885056},{"_id":"source/_posts/0_代码相关/xgboost包.md","hash":"7a06fee53b1de76fb628d58adae5f48aaebfe50c","modified":1646106928335},{"_id":"source/_posts/0_代码相关/作业，进程，线程管道梳理.md","hash":"93fe0cc9b7d32a86344b4eb53a82f6f0beb3d871","modified":1646106951322},{"_id":"source/_posts/0_代码相关/初识Thrift.md","hash":"aaf562e778cd440888c296103f31c979c15953dc","modified":1646106960372},{"_id":"source/_posts/0_代码相关/单机模型的Spark分布式预测.md","hash":"dc8b114b52502793efd75014516caff048040524","modified":1646106976338},{"_id":"source/_posts/6_高效tips/Zotero高效管理文献.md","hash":"501ca0edf0621088ef54cb4acfb27cfd001a241a","modified":1646107544870},{"_id":"source/_posts/6_高效tips/marginnote.md","hash":"df9fdda4415c54b466cf5a28e78512a00b138e55","modified":1646107544872},{"_id":"source/_posts/3_数理统计/大话数据结构笔记.md","hash":"fb6c4a63beb148e52d69f6818714646861f43f85","modified":1646107500634},{"_id":"source/_posts/3_数理统计/拉格朗日乘子法.md","hash":"ab529a66209f3047e35d53b8b509a2353bc46373","modified":1646107510345},{"_id":"source/_posts/3_数理统计/拉普拉斯矩阵映射.md","hash":"1210933a11c376d304ab6ea5ecf42d57d55eb4f1","modified":1646107505864},{"_id":"source/_posts/3_数理统计/概率论与数理统计--浙大.md","hash":"13e929c05bf8f567192792e9b37f1872b5c6937e","modified":1646107514360},{"_id":"source/_posts/3_数理统计/股价问题动态规划.md","hash":"d720ed46254813e04c0ca9795402a91c0ca59c69","modified":1646107520500},{"_id":"source/_posts/0_代码相关/pics/.DS_Store","hash":"f78d727637251c126752ac47a9b3bfb2b3ceac35","modified":1646063116641},{"_id":"source/_posts/2_算法相关/pics/FM.assets/11944360-479d4c5f93627025.webp","hash":"ae943333fd808ea12268bf85fc949ebd3194aabc","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/FM.assets/11944360-019eef148af27cb3.webp","hash":"510a35a9ace409d3c6f0be551cc3bbd85b38901c","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/FM.assets/11944360-a70478586c11ed6f.webp","hash":"3b32a16a7b5f4bf0732cf626f0facbc4027bc31c","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/FM.assets/11944360-2f4397b3680dc239.webp","hash":"ddc8132e2f921eb0bdf04f70d2faee6bddd64a66","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/FM.assets/11944360-adafd0f533517322.webp","hash":"6b720abb71c0444a07e2d01dccad4fec80438cd5","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/FM.assets/11944360-c69f278cdaf982b5.webp","hash":"0a8b77a40e570a4e5ad21b870e2263932c263ed8","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/FM.assets/11944360-f0de213892c4d1c6.webp","hash":"181325949a97c7e35f044bbe570104942ec8103b","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/FM.assets/11944360-fe15425d75e7f0cc.webp","hash":"3759a17070587e01adc26c7c115d28967831b817","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/深度学习笔记.assets/image%5C1541387157791.png","hash":"77e314b109dc29a197ee828c7ef26cbce09e5ce5","modified":1570764904000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564567470922.png","hash":"f8153e6851e32ea121e9c07b060df8feba7bc455","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564567484011.png","hash":"fd44dc00ce8bb5bcec151d73a51deda50ac6d07a","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564567260591.png","hash":"683f96cdd36363c6fb0503f0fd8889cc4bbd465d","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564567208976.png","hash":"d7498157b1a2256b1d36600c742f2212ac8890df","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564568639155.png","hash":"57c6f9f391cb36a06fce70275fdfcc82db155199","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564568681554.png","hash":"155d1fb10bbabfbca7d5411224b2e5f7cfd319e8","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564568556532.png","hash":"6451e75d3eb2b7edf4805184d6d9065e971792cd","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564568582595.png","hash":"a2f0eb829a796de6d40a83ec5e1ebab41229f00b","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564568431095.png","hash":"27739b24214fc1fd0b81fd028cb697597e27287c","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564568769585.png","hash":"dc3b832174ea2f7bea46a03645a4cf23b66c677b","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565509483053.png","hash":"9fdfbdaa6075357438dfaaa05336431385fc193d","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565511169038.png","hash":"46d5975f186d69e0c8b5f499a6b5c13d6dd1e239","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565511208880.png","hash":"4d56248ae8d420a1042150e18ae580043bb148c2","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565508976037.png","hash":"f84d6bcbf9f93900f2c731f50c7bd6d7f10d70a5","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565591363136.png","hash":"2ca225d5bc8425d11362709acbb276a09b1aa9ba","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565752490760.png","hash":"ae54a89e71a9b2586732a06706e454f3afc6247e","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565591743658.png","hash":"edc3ec42a94a3e0e202427a9be64b99ed7e651bb","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565752607321.png","hash":"b642eb0385078ec66be762c7c085ac1750b5d541","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565515181975.png","hash":"864b3d543b5e6563935d6d7318583780bb640f89","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565752698105.png","hash":"f6ed681f8cba7167e3f708488d697f30a4096e72","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/中文分词.assets/1564539118443.png","hash":"2fc505ee8a763531c33bf87b8fd252e27e3c78e1","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/FL源码阅读/FL源码框架.xmind","hash":"dcd21efeb88b910c7a5e5e24f78aa42827831e4b","modified":1591013142000},{"_id":"source/_posts/0_代码相关/pics/XGB.assets/1565232108098.png","hash":"9451069298a18b18160d0a2de0d2beae8b3cf817","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/XGB.assets/1565232794674.png","hash":"53a3d51ffa0e8541795a468d532ef98c7ad85fa6","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/numpy.assets/1564645476097.png","hash":"d2e4df41faa797b333b3c0d930b0bccb5c48ad7f","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/XGB.assets/1565232255682.png","hash":"9451069298a18b18160d0a2de0d2beae8b3cf817","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/pandas.assets/1565143077610.png","hash":"89e29bc9597980100c00b256df5b35d6ec659546","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/pandas.assets/1565143146339.png","hash":"c14aa0a24dfd32066c4520a0cb4f6a757d65520a","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/pandas.assets/1565172887387.png","hash":"03720d66105da56a87fa56a65e109f741f2b7513","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/pandas.assets/1565172989950.png","hash":"07d9660b74def7ab8ec850471bb9739ed9842cbc","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/pyplot.assets/1566376082129.png","hash":"31ad5f07db342fc846ea387d0c1f340c10c57593","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/1565317459057.png","hash":"8ffffd0dcb0b75800e79e67798fe9e3aad9be7f6","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161020175232498-1872971817.png","hash":"8c6677f21e726cc4cdc1c69565b902d80da88ee6","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161020180119123-417194644.png","hash":"565f08af6495262605ceeaa2a2c1420a8fa7bd2b","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161020175721045-34264600.png","hash":"4dd4daed3e2df85a7dbb2d12047ebd77f4b4672c","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161020180953357-871156867.png","hash":"6a19583a8231a9f6334fb9787565e25a3182119b","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161117105613529-1331892400.png","hash":"6d793137c5a7e8a20b52d4eafa4c90075d6357b1","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161020180830388-1568291414.png","hash":"fabd4cbac11b49337ab26a00f9c1849106039231","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161117105642248-437211863.png","hash":"5bfd75795b19d92eb00e2e66f1331936abdc7289","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161026120125703-263387261.png","hash":"8f7b430eca29f97006571614661ddeace707ca38","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161117105723982-456456864.png","hash":"256bf4766348d3d53f945ec719c499846e294317","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161117105800279-1083550297.png","hash":"151b5785b3ae2cadc66827f4abfba558f725d3e5","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/643024-20161117105822107-1011418356.png","hash":"fc7cdc2538719a5adac32a06f1c2b89b778133e8","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/python面向对象编程.assets/image-20200710093718795.png","hash":"a8bc41a40adf73a097fabdabef6e76d108e9a014","modified":1594345038000},{"_id":"source/_posts/0_代码相关/pics/python面向对象编程.assets/image-20200710093905513.png","hash":"3e2fd2fd3ae73dfcb771ef03f3ce1664d5b64cd1","modified":1594345146000},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/image-20210202171431394.png","hash":"4ae4537e27e5c3209d5d1f25c33859472fb209da","modified":1612257272000},{"_id":"source/_posts/0_代码相关/pics/python.assets/1571902419379.png","hash":"0f0cfe2001d58b0922af040d35401b5a447fb174","modified":1575430322000},{"_id":"source/_posts/0_代码相关/pics/作业，进程，线程管道梳理.assets/image-20200331114405031.png","hash":"715b309cc52dcaf0bc4b576615d4a535300a140d","modified":1585626246000},{"_id":"source/_posts/0_代码相关/pics/tensroflow各种模型保存和加载/v2-da8a1fcd82fbe5f7206ac58cee088681_xs.jpg","hash":"9b05fc166c05f5ebcdbf6a0f3b5dc475ab4d8f15","modified":1632797096461},{"_id":"source/_posts/0_代码相关/pics/xgboost包.assets/image-20201026101441254.png","hash":"1df0d21df25ce7532e6f990529586df8b76ab13e","modified":1603678482000},{"_id":"source/images/avatar.png","hash":"b57a5396173ca1573eeb647ae73ede49c94249e9","modified":1624783026000},{"_id":"source/images/Decomposable-Attention.images/1624336820545_src","hash":"d1fbfeed5d1b0f94cefc3a907042dc30c42adf6b","modified":1624411772000},{"_id":"source/images/2021-06-22-Decomposable-Attention-1.images/1624336820545_src","hash":"d1fbfeed5d1b0f94cefc3a907042dc30c42adf6b","modified":1624411478000},{"_id":"source/images/2021-06-22-Decomposable-Attention.images/1624336820545_src","hash":"d1fbfeed5d1b0f94cefc3a907042dc30c42adf6b","modified":1624402198000},{"_id":"source/_posts/2_算法相关/pics/FM.assets/1571637924127.png","hash":"5a9caa60dbd1045caf496af0a5e84efb2796f2f5","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/深度学习笔记.assets/1541386887738.png","hash":"8b7f5fac9083f752f3cb46f083ada7d3f8e8fa62","modified":1570764904000},{"_id":"source/_posts/2_算法相关/pics/[comment]silk_road.assets/1564567058965.png","hash":"b685b6acd97f13d647feab6702af3f3be814aff1","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/[comment]XGBOOST文献.assets/1565762051024.png","hash":"c970335a1e37fcac3d13c31db4650911f0cbfa9b","modified":1570764902000},{"_id":"source/_posts/2_算法相关/pics/计算广告/image-20210805152419480.png","hash":"06cad96067fd620281823deca5e39ed03a89b96d","modified":1628148259480},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200922184134064.png","hash":"8cad186d795f24c326500a1293a73e27d20d31c7","modified":1600771294000},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200921181028180.png","hash":"9fed8740c6e304ac9d48118179e23c7e514eb766","modified":1600683028000},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200922184214940.png","hash":"67cd6417061475d20bf32d0ed1edefb2c58fb019","modified":1600771334000},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200922184307661.png","hash":"32f88404618b16792fb48012bf716136746e9a6e","modified":1600771388000},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200922184453513.png","hash":"50817fd862a635b893428dbede871accb11150fd","modified":1600771494000},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200922184636150.png","hash":"da81056d5a1ce5e3d2ce3d3884781667b910b485","modified":1600771596000},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200922184953521.png","hash":"5bced3035019c5240733d2b418ad0a8b6b4ad970","modified":1600771794000},{"_id":"source/_posts/0_代码相关/pics/anaconda+tensorflow安装教程/image-20211013142113102.png","hash":"a2494bee27026b1231c0c5c714ade9fd0bd95b92","modified":1634106073102},{"_id":"source/_posts/0_代码相关/pics/git基础操作笔记.assets/1541381811863.png","hash":"0f4d8737d5d0435fdbeee2cadf71e30aa5089eab","modified":1570764902000},{"_id":"source/_posts/0_代码相关/pics/python.assets/image-20200409175624696.png","hash":"6647a0dc7d8f6ef6a921da61117500a06661e3ab","modified":1586426184000},{"_id":"source/images/wechat.png","hash":"d25a5c9a7321b90b2c1259ed45e13470c15d0553","modified":1626365878000},{"_id":"source/_posts/1_思维导图/相关性检验.xmind","hash":"0cfd7305f80efc025a1a8ef9a0a0eeb76cad9120","modified":1593320750000},{"_id":"source/images/2021-06-21-Hierarchical-Attention.images/1624323245414_src","hash":"4d44af960a07e1517e8c8281f0b2dc0bca5d8dae","modified":1624402170000},{"_id":"source/images/Hierarchical-Attention.images/1624323245414_src","hash":"4d44af960a07e1517e8c8281f0b2dc0bca5d8dae","modified":1624411602000},{"_id":"source/images/Hierarchical-Attention.images/1624323245414_src-1624427147187","hash":"4d44af960a07e1517e8c8281f0b2dc0bca5d8dae","modified":1624427146000},{"_id":"source/_posts/2_算法相关/pics/吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午3.00.23.png","hash":"4233038a6e3e7803b7a54109bd7a5bf694ea8bdc","modified":1575430322000},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1628079968000},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1628079968000},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1628079968000},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1628079968000},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1628079968000},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1628079968000},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1628079968000},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1628079968000},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1628079968000},{"_id":"themes/next/_config.yml","hash":"32294ed2a8945f584f8b772b01a465efb6cfeda3","modified":1628553376000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1628079968000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1628079968000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1628079968000},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1628079968000},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1628079968000},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1628079968000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1628079968000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1628079968000},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1628079968000},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1628079968000},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1628079968000},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1628079968000},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1628079968000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1628079968000},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1628079968000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1628079968000},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1628079968000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1628079968000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1628079968000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1628079968000},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1628079968000},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1628079968000},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1628079968000},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1628079968000},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1628079968000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1628079968000},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1628079968000},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1628079968000},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1628079968000},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1628079968000},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1628079968000},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1628079968000},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1628079968000},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1628079968000},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1628079968000},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1628079968000},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1628079968000},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1628079968000},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1628079968000},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1628079968000},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1628079968000},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1628079968000},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1628079968000},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1628079968000},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1628079968000},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1628079968000},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1628079968000},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1628079968000},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1628079968000},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1628079968000},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1628079968000},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1628079968000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1628079968000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1628079968000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1628079968000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1628079968000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1628079968000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1628079968000},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1628079968000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1628079968000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1628079968000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1628079968000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1628079968000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1628079968000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1628079968000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1628079968000},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1628079968000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1628079968000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1628079968000},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1628079968000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1628079968000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1628079968000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1628079968000},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1628079968000},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1628079968000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1628079968000},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1628079968000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1628079968000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1628079968000},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1628079968000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1628079968000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1628079968000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1628079968000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1628079968000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1628079968000},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1628079968000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1628079968000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1628079968000},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1628079968000},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1628079968000},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1628079968000},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1628079968000},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1628079968000},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1628079968000},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1628079968000},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1628079968000},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1628079968000},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1628079968000},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1628079968000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1628079968000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1628079968000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1628079968000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1628079968000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1628079968000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1628079968000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1628079968000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1628079968000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1628079968000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1628079968000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1628079968000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1628079968000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1628079968000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1628079968000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"51269771503ed684701ede177550fd628cd79590","modified":1628081930000},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1628079968000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1628079968000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"904f4b2924e0b982e9d84398ced3359936a71cab","modified":1628553578000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1628079968000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1628079968000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1628079968000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1628079968000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1628079968000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1628079968000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1628079968000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1628079968000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1628079968000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1628079968000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1628079968000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1628079968000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1628079968000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1628079968000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1628079968000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1628079968000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1628079968000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1628079968000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1628079968000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1628079968000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1628079968000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1628079968000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1628079968000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1628079968000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1628079968000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1628079968000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1628079968000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1628079968000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1628079968000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1628079968000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1628079968000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1628079968000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1628079968000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1628079968000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1628079968000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1628079968000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1628079968000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1628079968000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1628079968000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1628079968000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1628079968000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1628079968000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1628079968000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1628079968000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1628079968000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1628079968000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1628079968000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1628079968000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1628079968000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1628079968000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1628079968000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1628079968000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1628079968000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1628079968000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1628079968000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1628079968000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1628079968000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1628079968000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1628079968000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1628079968000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1628079968000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1628079968000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1628079968000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1628079968000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1628079968000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1628079968000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1628079968000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1628079968000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1628079968000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1628079968000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1628079968000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1628079968000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1628079968000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1628079968000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1628079968000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1628079968000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1628079968000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1628079968000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1628079968000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1628079968000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1628079968000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1628079968000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1628079968000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1628079968000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1628079968000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1628079968000},{"_id":"source/_posts/2_算法相关/pics/计算广告学笔记.assets/image-20200414143343558.png","hash":"3fe13f23cb13406f9b0f4a7358b2a5ef8d47f106","modified":1586846024000},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200922184406252.png","hash":"a5e31089fed62268d08da144485263cfab4b8636","modified":1600771446000},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200922184518931.png","hash":"8eb23ff5969a9fe46340e1447e8fc61f0e4b6722","modified":1600771518000},{"_id":"source/_posts/0_代码相关/pics/anaconda+tensorflow安装教程/image-20211013142621551.png","hash":"4bba15e54164a77de3499f93de5aba2e37f3147d","modified":1634106381551},{"_id":"source/_posts/0_代码相关/pics/iterm奇淫技巧/image-20210901114300463.png","hash":"2822ae695559f3c1e5b4c66c03f0d6c91db8c558","modified":1630467780464},{"_id":"source/_posts/0_代码相关/pics/iterm奇淫技巧/image-20210901114244949.png","hash":"2822ae695559f3c1e5b4c66c03f0d6c91db8c558","modified":1630467764949},{"_id":"source/_posts/2_算法相关/pics/吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.56.18.png","hash":"a1d1096c3b614cb6d48fcf7ed87e6b9b5d08800f","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.40.29.png","hash":"8e3448ef73b21d24fc1a1a46db5a3ef705e9dfc9","modified":1575430322000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1628079968000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1628079968000},{"_id":"source/_posts/0_代码相关/pics/JRM接口开发流程.assets/image-20200921182607916.png","hash":"260d34bbdf2e794b064f8e53925c0742da42619f","modified":1600683968000},{"_id":"source/_posts/2_算法相关/Learning to Rank：Point-wise、Pair-wise 和 List-wise区别.pdf","hash":"aa1ef696424e1023c6aa51d391f2552f4073eeb2","modified":1592285498000},{"_id":"source/_posts/0_代码相关/2021-06-26-hexo图片路径配置/image-20210626204629384.png","hash":"8ce2ec0c64ebb1698ce18d82e926bfc9815457ec","modified":1624711589000},{"_id":"source/_posts/2_算法相关/pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228145221827.png","hash":"d5905040a3652de68eba97c2b60278ae85c08cb7","modified":1646031141829},{"_id":"source/_posts/2_算法相关/pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228150641871.png","hash":"e479f41f35a44f145bb0498421656ed75ae34ebb","modified":1646032001872},{"_id":"source/_posts/0_代码相关/pics/iterm奇淫技巧/image-20210901114353748.png","hash":"6304c2d453d90213d84a8704bd2e168029dc9a84","modified":1630467833749},{"_id":"source/_posts/2_算法相关/隐私保护ID匹配笔记.pdf","hash":"01ba4721ce24c211067bdc1d5ba79acbcd18192f","modified":1584691510000},{"_id":"source/_posts/2_算法相关/pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228121702691.png","hash":"aeeea76140ffc880743e570679cfd0a51557fb14","modified":1646021822692},{"_id":"source/_posts/2_算法相关/pics/吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.11.06.png","hash":"08a138b15bf12ee4b4157a6f8bf6006751b0a235","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.20.45.png","hash":"7540a40fc59aaae41e4168370589753cc5317099","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/计算广告/image-20210805152357961.png","hash":"4132ecfe5d303d8b144cb6f9cf58f7e0dcf6f6c1","modified":1628148237962},{"_id":"source/_posts/2_算法相关/pics/吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-12 下午6.32.06.png","hash":"8c0e5a27a10c0be7818952a1cc27bf606def6330","modified":1575430322000},{"_id":"source/_posts/2_算法相关/pics/计算广告/image-20210805152447320.png","hash":"71a5566a84b08f53ff534091fcfc416b6020b413","modified":1628148287320},{"_id":"source/_posts/0_代码相关/pics/tensorflow.assets/image-20200422180419725.png","hash":"98d9d0886dad342510b2423e4671f9100035c824","modified":1587549860000},{"_id":"source/_posts/0_代码相关/awk.pdf","hash":"feadce5d48251358ac42492debde380df969dd12","modified":1584691510000},{"_id":"source/_posts/0_代码相关/PySpark_Cheat_Sheet_Python.pdf","hash":"ebc694910d2a6cc72552940d2765144193ea8d6d","modified":1593592894000},{"_id":"source/_posts/2_算法相关/评估指标.pdf","hash":"21bc8c7ac6e5834fe44ca57149e0c9bbeb4e4c81","modified":1584691510000},{"_id":"source/_posts/0_代码相关/pics/pyspark.assets/image-20200702140518336.png","hash":"4c1aaab01c9f0284afb555ff7113509f53ebe3f2","modified":1593669918000},{"_id":"public/atom.xml","hash":"ddf6e9873393618c02caeb4024237dc2100919c4","modified":1646108684031},{"_id":"public/sitemap.xml","hash":"47244449a6f09df51cd5a15268c2937d8cda43cd","modified":1646108684031},{"_id":"public/about/index.html","hash":"23878873a9fba131facb04fd3b0b87186380c00d","modified":1646108684031},{"_id":"public/tags/index.html","hash":"e7a2803c159a0d447a515ca02c25b5f17d92f19c","modified":1646108684031},{"_id":"public/categories/index.html","hash":"5431936fe9f04d5230c04235128fee72c4b5fd28","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/LDA算法/index.html","hash":"cff72f95b1c1d31ca9f253b122aab94cfb716bf6","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/Uplift Modeling/index.html","hash":"fb946c3f520d6a41f1d0f1093902a12df0eb04e2","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/[comment]Exact-K Recommendation/index.html","hash":"eb830bb2b4fefb651e396eed00ae1d85b4e1b48f","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/[comment]airbnb embedding/index.html","hash":"1bf1182d09ced0bd0937c11119f0d7bd6ddcfdec","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/deep learning based推荐系统论文笔记/index.html","hash":"0960b470df76cf01c299de498f9434c3d171cd5e","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/embedding相关笔记/index.html","hash":"9994f76b70b77ee623ef92cb24dd443d9bd97b56","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/机器学习基础/index.html","hash":"da966d72df2ccbe9463b3c6284852b3010c81c9a","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/李宏毅强化学习笔记/index.html","hash":"6bc36dcadd07422b083d48d805dd5938a6fc398c","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/联邦树模型/index.html","hash":"1696ad82f9b84a6261c64606c12e42ea4df5525b","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/VPN搭建/index.html","hash":"e9bd0d538db896af80ba5b98155f9b637ea30bb8","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/iterm奇淫技巧/index.html","hash":"fad92aafe2280672ddcedfe5d2571a63efbe3c09","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/mathtype破解教程/index.html","hash":"e8545e4a3406610d7e107a05c96e5553e9208f91","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/numpy/index.html","hash":"3ffe6cc7c50cb95affd1bca94816c62e110541c1","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/shellcheck/index.html","hash":"dde021262b690f3a5db6c3e0dea7a9981cfcd26c","modified":1646108684031},{"_id":"public/2022/03/01/6_高效tips/marginnote/index.html","hash":"8da6f5af25ce9fad69bf6b2aca7891ef6a833666","modified":1646108684031},{"_id":"public/2022/03/01/3_数理统计/拉普拉斯矩阵映射/index.html","hash":"a965ba2bb21ca300f9f62ef6d19c62d8af775b63","modified":1646108684031},{"_id":"public/2022/03/01/3_数理统计/拉格朗日乘子法/index.html","hash":"bb921e28460f85dedb194459a463a72c2daddda4","modified":1646108684031},{"_id":"public/archives/page/7/index.html","hash":"c73dcd5b6db8c5b122d165ad38e00d42112ba321","modified":1646108684031},{"_id":"public/archives/2021/index.html","hash":"8ddf392dc1b2acaff196d6955fcac50dbd78df1f","modified":1646108684031},{"_id":"public/archives/2021/06/index.html","hash":"2eec4ef73569503b07a6a72246f51c66ae51b314","modified":1646108684031},{"_id":"public/archives/2022/page/7/index.html","hash":"5ae04a0f3425f6e3e2474e6c5fb66190d77c4c91","modified":1646108684031},{"_id":"public/archives/2022/03/page/7/index.html","hash":"efedb2cb0acbb14ba4b4426877a2ed3d111b235f","modified":1646108684031},{"_id":"public/categories/算法相关/page/3/index.html","hash":"8b60bba7f5656e78e745d436663f1c245a1a58fc","modified":1646108684031},{"_id":"public/categories/代码相关/page/4/index.html","hash":"19c04fd03bba6ee1ead69f18f6c5457bb7a45327","modified":1646108684031},{"_id":"public/categories/高效tips/index.html","hash":"753c7a0faa20ba6f193357802c7ae61cfb785717","modified":1646108684031},{"_id":"public/categories/数理统计/index.html","hash":"56dd0a1888333310e6298e66ab5f74a366348756","modified":1646108684031},{"_id":"public/tags/算法相关/page/3/index.html","hash":"779f269554131923717c8855928aa4b65957c22d","modified":1646108684031},{"_id":"public/tags/default/page/7/index.html","hash":"94501e00a000d4dfaff672de7f67b5f3d8f094c4","modified":1646108684031},{"_id":"public/tags/代码相关/page/4/index.html","hash":"abe222204124655051f8722e0118de2f59179f9a","modified":1646108684031},{"_id":"public/tags/配置环境-安装工具/index.html","hash":"5db4ae86c0ab840503d80f419a4d17eec92042e0","modified":1646108684031},{"_id":"public/tags/高效tips/index.html","hash":"4f06b9fa4248f3ed048ddab9c5d35f8477bf9374","modified":1646108684031},{"_id":"public/tags/数理统计/index.html","hash":"94503ad4cbc276d5abce8a2ebf3e192f30192504","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/index.html","hash":"9f6a80da9ef976d8212c04a101621993fd76cf3b","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/FM/index.html","hash":"d39a5293e816da575ad68e48b27141f725321a97","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/Learning to Rank：Point-wise、Pair-wise 和 List-wise区别/index.html","hash":"03046a8207eeefff866c29aa5130a009fa15b8f3","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/[comment]Deep Learning based Recommender System A Survey and New Perspectives/index.html","hash":"ad4b7e07a78eae898c23b08d3103fccb4f98c2e5","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/[comment]XGBOOST文献/index.html","hash":"0687333b5f9fc248ddb5c0acb9070bf4227f6542","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/[comment]silk_road/index.html","hash":"e507f573622f3d9f329e24f6b49c0c03a89c2d3e","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/中文分词/index.html","hash":"4e7a11959a4e8bced3953ffc74a8798c9b44a042","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/吴恩达卷积神经网络笔记/index.html","hash":"34b23b9c4f9d023fb49f287378ae9288033f38c7","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/时间序列模型/index.html","hash":"a6b0c869a078b4eeda31f4bff1e9360b45339a4b","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/深度学习笔记/index.html","hash":"44c55fdb189cfa627a80d8d6ba91bfb5b10eade0","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/自然语言处理笔记/index.html","hash":"a240ce44cc5c84e4efd366f51bc5fd373d53b5e3","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/表示学习调研/index.html","hash":"33b8933ee7d35ddd0b6cd157d42f26c946cfcc32","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/计算广告/index.html","hash":"15d006b776bf94007a3481560f21e263e3068436","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/计算广告学笔记/index.html","hash":"9abc50dfc50e78ae3b7cbd495602bc8e5a37f941","modified":1646108684031},{"_id":"public/2022/03/01/2_算法相关/评估指标/index.html","hash":"3c7e5d1d9303633832969a876472d05f77486dbe","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/01_日期操作/index.html","hash":"811422e149c99c864fcd03e7f1b154e19f17e866","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/C语言学习/index.html","hash":"13dcf2994b00f99efae40386138427213035ed2b","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/XGB/index.html","hash":"6ef20669592ce57518d85a875a482919617d563e","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/anaconda+tensorflow安装教程/index.html","hash":"b4aa6c61370fd58b2fc7b0eabb3225c2cd30d3c8","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/awk/index.html","hash":"caaa8619ba912b5da8555ddedafaa02821831da5","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/final_cut_pro基础知识/index.html","hash":"961c2925297b81c0623bf2951bd38c86e71e4695","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/git基础操作笔记/index.html","hash":"0e8fe7b490ddafc26eeeac6a818b6dc659400a1b","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/hdfs常用命令/index.html","hash":"2362799c100bca060a309e4a55149537ed0ae36d","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/hive/index.html","hash":"88136249b86384685434ec0002bf9e5a8788a401","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/mac使用rz sz/index.html","hash":"a959df499d9b992580b53aa3a9fd521387f19433","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/pandas/index.html","hash":"60bf72cf9bac289205ebc616ab176f800834af85","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/pandas常用命令/index.html","hash":"8dfce3868e7e05ee379fbce7f86e205604855bf3","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/pyplot/index.html","hash":"e1745bb90b60077dcc9dd2e3c1542d09a993ed9d","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/pyspark/index.html","hash":"1e07acdd143d70aa027d2c996ec44122c3ae5b07","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/python/index.html","hash":"a921df8caed604c98c52e8dfb99b76481875b1b2","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/scala/index.html","hash":"bd518625919fcd1e02899f797ff6457fc4e1eca2","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/python面向对象编程/index.html","hash":"b07137174d440fdf74d93c44b62088902be35df0","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/shell/index.html","hash":"d6688c8f85233b976980d987a38933252b798776","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/shell日期运算/index.html","hash":"0d1e735a0c8d6005d147b5d4ae679bbdbe41a209","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/tensorflow/index.html","hash":"62cba213ea59b288273cd4f481d37b62bc0f5313","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/tensroflow各种模型保存和加载/index.html","hash":"2ea04e6bdaf05b690e14c95300127da2d788f8e6","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/typora主题/index.html","hash":"353f0c569b1dc5f070b1bb6615e4aa6c03e5fc06","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/xgboost包/index.html","hash":"f303142bbd0cc5d5caf9a1c81d06cc48fce53429","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/作业，进程，线程管道梳理/index.html","hash":"e3ca5cf19bed3118066bb724ee2e0a90cc8cc3b9","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/初识Thrift/index.html","hash":"870d2d7245c663351f37a296333d8674f882380c","modified":1646108684031},{"_id":"public/2022/03/01/0_代码相关/单机模型的Spark分布式预测/index.html","hash":"e8504389bf4631a605b187f7ab865ebe169d7aa6","modified":1646108684031},{"_id":"public/2022/03/01/6_高效tips/Zotero高效管理文献/index.html","hash":"88296b91c3d07c66061028f33521b5ead43ef5ab","modified":1646108684031},{"_id":"public/2022/03/01/3_数理统计/大话数据结构笔记/index.html","hash":"004524afe7c5fe1381b8a1f4350487069ee415ec","modified":1646108684031},{"_id":"public/2022/03/01/3_数理统计/股价问题动态规划/index.html","hash":"ee1f5e7d130f8ce6b80cc8751eab8516ef3b6ca9","modified":1646108684031},{"_id":"public/2022/03/01/3_数理统计/概率论与数理统计--浙大/index.html","hash":"b2a8821dff20007e87c46291b2309411d9d01ccf","modified":1646108684031},{"_id":"public/archives/page/2/index.html","hash":"f6cc7117767427dd1d4638075eb8b86a52786bc3","modified":1646108684031},{"_id":"public/archives/index.html","hash":"98ace653134e49374d3b5ac26683a5634f896618","modified":1646108684031},{"_id":"public/2021/06/23/0_代码相关/2021-06-23-搭建hexo博客/index.html","hash":"caba107e04dfbc9d134d6b2342f6c9afb178d200","modified":1646108684031},{"_id":"public/archives/page/3/index.html","hash":"7f4e9beee77818640f3498cad1420087c9529b8a","modified":1646108684031},{"_id":"public/archives/page/4/index.html","hash":"e3faa1d012190b5a098578d174fb4fb5c041bd97","modified":1646108684031},{"_id":"public/archives/page/5/index.html","hash":"a822fe4013de1b27c4edda65331084c526b8ddc8","modified":1646108684031},{"_id":"public/archives/page/6/index.html","hash":"de6dae37153ef3975e536f804afc909ac974ea9f","modified":1646108684031},{"_id":"public/archives/2022/index.html","hash":"61d93cfb20ec0106670e5b6d809fe8cbba74f028","modified":1646108684031},{"_id":"public/archives/2022/page/2/index.html","hash":"58fbf0a853c5be64e50a272316dae84e70e12464","modified":1646108684031},{"_id":"public/archives/2022/page/3/index.html","hash":"35f9b6e37a99661eb24df3d2605cfe78748bd85e","modified":1646108684031},{"_id":"public/archives/2022/page/4/index.html","hash":"7c11f7d9ab89fa688b8b1b722f478119168bb5f7","modified":1646108684031},{"_id":"public/archives/2022/page/5/index.html","hash":"f30730e9f4556d4e514a52235f71c2c10c4c84ef","modified":1646108684031},{"_id":"public/archives/2022/page/6/index.html","hash":"f04ae7b594ab54c8919f389acbdec862115cea78","modified":1646108684031},{"_id":"public/archives/2022/03/index.html","hash":"3b32b6bedfa361a9d557a9c3dc496d6a498b3044","modified":1646108684031},{"_id":"public/archives/2022/03/page/2/index.html","hash":"06bb4a1fc594364e15d826a95b571be8ee4b396a","modified":1646108684031},{"_id":"public/archives/2022/03/page/3/index.html","hash":"89d0bbb0b82a42596c7e1f2ec01b683a42169f83","modified":1646108684031},{"_id":"public/archives/2022/03/page/4/index.html","hash":"3855e8c93afd4521ecbe7b8a9a8715a7c1e0844e","modified":1646108684031},{"_id":"public/archives/2022/03/page/5/index.html","hash":"237d581f1c4301fec9a4a0bdbdc9da191fcb31ca","modified":1646108684031},{"_id":"public/archives/2022/03/page/6/index.html","hash":"eb35971332f03785bd46b0dae150ceedf9de8d02","modified":1646108684031},{"_id":"public/categories/算法相关/index.html","hash":"e822425bc3259af52f9cee1db8861c384975ce13","modified":1646108684031},{"_id":"public/categories/算法相关/page/2/index.html","hash":"7a966d2efdd056942084bf3529eb26aadc3d3a66","modified":1646108684031},{"_id":"public/categories/代码相关/index.html","hash":"0d92197fd3a6b52908adf268afc5182f334750f9","modified":1646108684031},{"_id":"public/categories/代码相关/page/2/index.html","hash":"df611b5211e5dc1157b3a39fac963ceff4af461e","modified":1646108684031},{"_id":"public/categories/代码相关/page/3/index.html","hash":"7da2bf697c15684f90ad044925c8d613a89bddc6","modified":1646108684031},{"_id":"public/index.html","hash":"e4252e72d91915f5737dd49a3cf4b927ad1ffa9c","modified":1646108684031},{"_id":"public/page/2/index.html","hash":"29dac1bfb89a8091df72b3c1d3ce55a94fb95d59","modified":1646108684031},{"_id":"public/page/3/index.html","hash":"da592e34580880a88c929ab906c7af13e1f97782","modified":1646108684031},{"_id":"public/page/4/index.html","hash":"9e9f57fc8aa996a9034296767dfd938574a8f941","modified":1646108684031},{"_id":"public/page/5/index.html","hash":"e03d78f10adf07597b93874cac7e6ff4945d5fa3","modified":1646108684031},{"_id":"public/page/6/index.html","hash":"a3de5344c61114b48bd32921fe03e4e437b67497","modified":1646108684031},{"_id":"public/page/7/index.html","hash":"c0f778fbe89751bb22439dfc97b05bb4eeab3403","modified":1646108684031},{"_id":"public/tags/算法相关/index.html","hash":"1899f08d6d208c51a6daff20c5acc7b115fe208b","modified":1646108684031},{"_id":"public/tags/算法相关/page/2/index.html","hash":"a62bfa41184497c8d2d27a77e9849b219c25cadd","modified":1646108684031},{"_id":"public/tags/default/index.html","hash":"f7bc0f2bddbe5d6d39729b27c234209b33cc8182","modified":1646108684031},{"_id":"public/tags/default/page/2/index.html","hash":"e386834192e5c2ebd51616dc9d2831af63504316","modified":1646108684031},{"_id":"public/tags/default/page/3/index.html","hash":"ca46db7deb2a4f4b1a1e725a6418d4cc5d9a0d74","modified":1646108684031},{"_id":"public/tags/default/page/4/index.html","hash":"6b6dddb2313bd51c5aa12d49c38876ccf4346ee9","modified":1646108684031},{"_id":"public/tags/default/page/5/index.html","hash":"ba6e69dbac6cde6a8c809bc53166ef6e797b1b5e","modified":1646108684031},{"_id":"public/tags/default/page/6/index.html","hash":"e67819234ff8628901df2b595ab12f7e583e8b97","modified":1646108684031},{"_id":"public/tags/代码相关/index.html","hash":"4198190d4133daa31d7807410aa138b17440b66d","modified":1646108684031},{"_id":"public/tags/代码相关/page/2/index.html","hash":"6eb57b38e99d19a1f6299d8f0b43be1c6429d4b5","modified":1646108684031},{"_id":"public/tags/代码相关/page/3/index.html","hash":"073cc5a29c4d283227eeb98b154b148a9e3dfb4e","modified":1646108684031},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1646108684031},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1646108684031},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1646108684031},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1646108684031},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1646108684031},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1646108684031},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1646108684031},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1646108684031},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1646108684031},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1646108684031},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1646108684031},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1646108684031},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1646108684031},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1646108684031},{"_id":"public/CNAME","hash":"8d75599ec6eef078a536c367b53d4bf11168d77c","modified":1646108684031},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1646108684031},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1646108684031},{"_id":"public/images/avatar.png","hash":"b57a5396173ca1573eeb647ae73ede49c94249e9","modified":1646108684031},{"_id":"public/images/2021-06-22-Decomposable-Attention-1.images/1624336820545_src","hash":"d1fbfeed5d1b0f94cefc3a907042dc30c42adf6b","modified":1646108684031},{"_id":"public/images/Decomposable-Attention.images/1624336820545_src","hash":"d1fbfeed5d1b0f94cefc3a907042dc30c42adf6b","modified":1646108684031},{"_id":"public/images/2021-06-22-Decomposable-Attention.images/1624336820545_src","hash":"d1fbfeed5d1b0f94cefc3a907042dc30c42adf6b","modified":1646108684031},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1646108684031},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1646108684031},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1646108684031},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1646108684031},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1646108684031},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1646108684031},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1646108684031},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1646108684031},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1646108684031},{"_id":"public/css/main.css","hash":"d39bbd679c3ac7deda73fc54acfd0aefb83e644a","modified":1646108684031},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1646108684031},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1646108684031},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1646108684031},{"_id":"public/images/wechat.png","hash":"d25a5c9a7321b90b2c1259ed45e13470c15d0553","modified":1646108684031},{"_id":"public/images/2021-06-21-Hierarchical-Attention.images/1624323245414_src","hash":"4d44af960a07e1517e8c8281f0b2dc0bca5d8dae","modified":1646108684031},{"_id":"public/images/Hierarchical-Attention.images/1624323245414_src","hash":"4d44af960a07e1517e8c8281f0b2dc0bca5d8dae","modified":1646108684031},{"_id":"public/images/Hierarchical-Attention.images/1624323245414_src-1624427147187","hash":"4d44af960a07e1517e8c8281f0b2dc0bca5d8dae","modified":1646108684031}],"Category":[{"name":"算法相关","_id":"cl07mly4000048s32a1vn1x43"},{"name":"代码相关","_id":"cl07mly4o00278s328de4c5f0"},{"name":"高效tips","_id":"cl07mly5800518s3229sv9chk"},{"name":"数理统计","_id":"cl07mly59005b8s32ekpzccbg"}],"Data":[],"Page":[{"title":"about","date":"2021-08-25T16:14:08.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-08-26 00:14:08\ntype: \"about\"\n---\n","updated":"2021-08-25T16:17:06.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl07mly3u00008s328utf7wzj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-08-25T16:14:09.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-08-26 00:14:09\ntype: \"tags\"\n---\n","updated":"2021-08-25T16:17:20.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl07mly3z00028s32g0d2dkkd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-08-25T16:14:11.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-08-26 00:14:11\ntype: \"categories\"\n---\n","updated":"2021-08-25T16:16:50.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl07mly4200068s326xk74xo4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising","date":"2022-03-01T03:32:38.000Z","_content":"\nAwesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\n\n<!-- more -->\n\n\n---\ntitle: Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\ndate: 2021-06-21 09:26:17\ntags:\n    - 深度学习\n    - Attention\n    - Transformer\n    - 机器学习\n    - 每日论文\n    - 经典算法\n    - NLP\nmathjax: true\ncategories: \n    - 论文学习\n\n---\n\nSelf-Attention谁先提出的，各文章里写的不一样，[Attention Is All You Need](https://papers.nips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf)中说是[Jakob.2016](https://arxiv.org/pdf/1606.01933.pdf)年提出的，[An Attentive Survey of Attention Models](https://arxiv.org/pdf/1904.02874.pdf)中说是[Yang et al. 2016](https://www.aclweb.org/anthology/N16-1174.pdf)，本篇介绍后者。\n\n\n\n<!-- more -->\n\n[TOC]\n\n# Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\n阅读等级：精，粗，to粗\n\n## 0_New_Papers\n\n## 1_Embedding\n\n## 2_Maching\n\n## 3_Ranking\n\n### 【页面维度信息+负反馈】2022 (Alibaba) (WSDM)(ZhifangFan)[RACP]Modeling Users’ Contextualized Page-wise Feedback for Click-Through Rate Prediction in E-commerce Search\n\n- 简介：建模用户的历史行为对个性化搜索和推荐都很重要，现有方法主要是对用户历史正反馈的建模（点击序列），忽略了产生反馈的上下文信息。本文通过加入历史**页面维度的曝光和反馈**做一位用户历史行为序列，提出了一种新的上下文感知的用户行为建模方式。通过捕捉页面内的信息和页面间的演化可以更详细的学习用户的偏好。 RACP(Recurrent Attention over Contextualized Page sequence)模型通过**page-context aware attention** 学习页面内的关系。**recurrent attention**学习页面间的关系\n- 模型结构：\n\n![image-20220228121702691](file:///Users/hetianqi/Documents/0_charging/hexo_init/source/_posts/notes_of_the_world/2_%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228121702691.png?lastModify=1646028941)\n\n- quote\n  - \"However, they treat users’ positive and negative feedback separately, and rep- resent users’ feedback as a clicked item sequence and a non-clicked item sequence, which cannot generate the mutual context between clicks and non-clicks and ignores other page context information in the page-sequence\" 历史工作很少考虑负反馈，即便考虑也是和正反馈分开处理的，这忽略了**正负反馈之间的相互作用**\n  - 页面信息的增益：1）**正反馈是有噪音的**，避免过拟合。一个用户点了一个品牌不一定是他就偏好这个品牌，有可能是整个页面都是这个品牌 2) 用户对item的行为受曝光的其他item影响\n  - 页面间的增益：搜索场景下用户的行为和意图是一个逐渐收敛的过程。例如：搜索---曝光---点击---搜索---曝光---点击---购买\n  - \"Recently, some pioneering work (**DFN** [33], **DSTN** [25]) high- light the importance of modeling both users’ positive and negative feedback for CTR prediction.\" 一些负反馈的工作\n  - item画像：item id,品类id,shop id,统计类（成单量等）\n  - query画像：query id,字符串，分词，类别\n  - **页内的attention聚合+页间兴趣回溯(GRU，由下一个page表征当前的query) + 页间兴趣融合(attention)**\n\n### 【长期行为+SimHash相似度】2021(Alibaba)(ArXiv)[ETA]End-to-End User Behavior Retrieval in Click-Through Rate Prediction Model\n\n- 简介：用户的长期行为对CTR预估很重要，但由于性能的约束，超长期用户行为通常是通过两段式训练进行处理的。第一阶段通过长期行为召回topK,第二阶段结合短期行为进行排序。两阶段由于优化目标不一致降低了长期用户行为带来的CTR增益。本文通过**locality- sensitive hashing (LSH)**方法提出端到端的ETA模型，使得满足训练和推理性能要求的前提下端到端训练的长期用户行为ctr模型。主要是通过**SimHash**的方法计算相似度，使得相似度的计算复杂度由O(L* B * d)变为O(L*B)，其中L是序列长度，B是candidate梳理，d是embedding维度\n\n- 模型结构：\n\n  <img src=\"pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228145221827.png\" alt=\"image-20220228145221827\" style=\"zoom:50%;\" />\n\n### 2021 (Alibaba) (CIKM) [ZEUS] Self-Supervised Learning on Users’ Spontaneous Behaviors for Multi-Scenario Ranking in E-commerce\n\n\n\n### 2020 (JD) (WSDM) [HUP] Hierarchical User Profiling for E-commerce Recommender Systems\n\n### 【加入负反馈+显反馈对隐反馈去噪】2021(Alibaba)(ACM)[DUMN]Denoising User-aware Memory Network for Recommendation\n\n- 简介：最近推荐领域非常多的工作聚焦在用户行为建模。用户的反馈包含显式和隐式的，大部分工作忽略了**隐式反馈的噪音**（用显示反馈对隐式反馈进行去噪），这会导致对于用户兴趣的有偏理解，本文1）通过正交映射( orthogonal mapping)对隐反馈进行去噪  2)基于内存的用户长期行为建模  3)短期行为和长期行为的融合。输入包括4个部分，**显示反馈：喜欢，不喜欢 ；隐式反馈：点击，未点击**\n- 外卖场景下的显示隐式反馈是什么？？？<img src=\"pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228150641871.png\" alt=\"image-20220228150641871\" style=\"zoom:50%;\" />\n\n## 4_Post_Ranking\n\n## 5_Multi-task\n\n## 6_Graph_Neural_Network\n\n## 7_Transfer_Learning\n\n## 8_Reignforcement_Learning\n\n## 9_Self_Supervised_Learning\n\n## 10_Corporation\n\n\n\n## 参考资料\n\n参考github awosome paper repository: [Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising](https://github.com/guyulongcs/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising)\n\n\n\n","source":"_posts/2_算法相关/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising.md","raw":"---\ntitle: Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nAwesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\n\n<!-- more -->\n\n\n---\ntitle: Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\ndate: 2021-06-21 09:26:17\ntags:\n    - 深度学习\n    - Attention\n    - Transformer\n    - 机器学习\n    - 每日论文\n    - 经典算法\n    - NLP\nmathjax: true\ncategories: \n    - 论文学习\n\n---\n\nSelf-Attention谁先提出的，各文章里写的不一样，[Attention Is All You Need](https://papers.nips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf)中说是[Jakob.2016](https://arxiv.org/pdf/1606.01933.pdf)年提出的，[An Attentive Survey of Attention Models](https://arxiv.org/pdf/1904.02874.pdf)中说是[Yang et al. 2016](https://www.aclweb.org/anthology/N16-1174.pdf)，本篇介绍后者。\n\n\n\n<!-- more -->\n\n[TOC]\n\n# Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\n阅读等级：精，粗，to粗\n\n## 0_New_Papers\n\n## 1_Embedding\n\n## 2_Maching\n\n## 3_Ranking\n\n### 【页面维度信息+负反馈】2022 (Alibaba) (WSDM)(ZhifangFan)[RACP]Modeling Users’ Contextualized Page-wise Feedback for Click-Through Rate Prediction in E-commerce Search\n\n- 简介：建模用户的历史行为对个性化搜索和推荐都很重要，现有方法主要是对用户历史正反馈的建模（点击序列），忽略了产生反馈的上下文信息。本文通过加入历史**页面维度的曝光和反馈**做一位用户历史行为序列，提出了一种新的上下文感知的用户行为建模方式。通过捕捉页面内的信息和页面间的演化可以更详细的学习用户的偏好。 RACP(Recurrent Attention over Contextualized Page sequence)模型通过**page-context aware attention** 学习页面内的关系。**recurrent attention**学习页面间的关系\n- 模型结构：\n\n![image-20220228121702691](file:///Users/hetianqi/Documents/0_charging/hexo_init/source/_posts/notes_of_the_world/2_%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228121702691.png?lastModify=1646028941)\n\n- quote\n  - \"However, they treat users’ positive and negative feedback separately, and rep- resent users’ feedback as a clicked item sequence and a non-clicked item sequence, which cannot generate the mutual context between clicks and non-clicks and ignores other page context information in the page-sequence\" 历史工作很少考虑负反馈，即便考虑也是和正反馈分开处理的，这忽略了**正负反馈之间的相互作用**\n  - 页面信息的增益：1）**正反馈是有噪音的**，避免过拟合。一个用户点了一个品牌不一定是他就偏好这个品牌，有可能是整个页面都是这个品牌 2) 用户对item的行为受曝光的其他item影响\n  - 页面间的增益：搜索场景下用户的行为和意图是一个逐渐收敛的过程。例如：搜索---曝光---点击---搜索---曝光---点击---购买\n  - \"Recently, some pioneering work (**DFN** [33], **DSTN** [25]) high- light the importance of modeling both users’ positive and negative feedback for CTR prediction.\" 一些负反馈的工作\n  - item画像：item id,品类id,shop id,统计类（成单量等）\n  - query画像：query id,字符串，分词，类别\n  - **页内的attention聚合+页间兴趣回溯(GRU，由下一个page表征当前的query) + 页间兴趣融合(attention)**\n\n### 【长期行为+SimHash相似度】2021(Alibaba)(ArXiv)[ETA]End-to-End User Behavior Retrieval in Click-Through Rate Prediction Model\n\n- 简介：用户的长期行为对CTR预估很重要，但由于性能的约束，超长期用户行为通常是通过两段式训练进行处理的。第一阶段通过长期行为召回topK,第二阶段结合短期行为进行排序。两阶段由于优化目标不一致降低了长期用户行为带来的CTR增益。本文通过**locality- sensitive hashing (LSH)**方法提出端到端的ETA模型，使得满足训练和推理性能要求的前提下端到端训练的长期用户行为ctr模型。主要是通过**SimHash**的方法计算相似度，使得相似度的计算复杂度由O(L* B * d)变为O(L*B)，其中L是序列长度，B是candidate梳理，d是embedding维度\n\n- 模型结构：\n\n  <img src=\"pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228145221827.png\" alt=\"image-20220228145221827\" style=\"zoom:50%;\" />\n\n### 2021 (Alibaba) (CIKM) [ZEUS] Self-Supervised Learning on Users’ Spontaneous Behaviors for Multi-Scenario Ranking in E-commerce\n\n\n\n### 2020 (JD) (WSDM) [HUP] Hierarchical User Profiling for E-commerce Recommender Systems\n\n### 【加入负反馈+显反馈对隐反馈去噪】2021(Alibaba)(ACM)[DUMN]Denoising User-aware Memory Network for Recommendation\n\n- 简介：最近推荐领域非常多的工作聚焦在用户行为建模。用户的反馈包含显式和隐式的，大部分工作忽略了**隐式反馈的噪音**（用显示反馈对隐式反馈进行去噪），这会导致对于用户兴趣的有偏理解，本文1）通过正交映射( orthogonal mapping)对隐反馈进行去噪  2)基于内存的用户长期行为建模  3)短期行为和长期行为的融合。输入包括4个部分，**显示反馈：喜欢，不喜欢 ；隐式反馈：点击，未点击**\n- 外卖场景下的显示隐式反馈是什么？？？<img src=\"pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228150641871.png\" alt=\"image-20220228150641871\" style=\"zoom:50%;\" />\n\n## 4_Post_Ranking\n\n## 5_Multi-task\n\n## 6_Graph_Neural_Network\n\n## 7_Transfer_Learning\n\n## 8_Reignforcement_Learning\n\n## 9_Self_Supervised_Learning\n\n## 10_Corporation\n\n\n\n## 参考资料\n\n参考github awosome paper repository: [Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising](https://github.com/guyulongcs/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising)\n\n\n\n","slug":"2_算法相关/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising","published":1,"updated":"2022-03-01T03:59:30.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly3w00018s32dqy33yek","content":"<p>Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising</p>\n<span id=\"more\"></span>\n<hr>\n<p>title: Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising<br>date: 2021-06-21 09:26:17<br>tags:</p>\n<pre><code>- 深度学习\n- Attention\n- Transformer\n- 机器学习\n- 每日论文\n- 经典算法\n- NLP\n</code></pre><p>mathjax: true<br>categories: </p>\n<pre><code>- 论文学习\n</code></pre><hr>\n<p>Self-Attention谁先提出的，各文章里写的不一样，<a href=\"https://papers.nips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf\">Attention Is All You Need</a>中说是<a href=\"https://arxiv.org/pdf/1606.01933.pdf\">Jakob.2016</a>年提出的，<a href=\"https://arxiv.org/pdf/1904.02874.pdf\">An Attentive Survey of Attention Models</a>中说是<a href=\"https://www.aclweb.org/anthology/N16-1174.pdf\">Yang et al. 2016</a>，本篇介绍后者。</p>\n<!-- more -->\n<p>[TOC]</p>\n<h1 id=\"Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\"><a href=\"#Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\" class=\"headerlink\" title=\"Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\"></a>Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising</h1><p>阅读等级：精，粗，to粗</p>\n<h2 id=\"0-New-Papers\"><a href=\"#0-New-Papers\" class=\"headerlink\" title=\"0_New_Papers\"></a>0_New_Papers</h2><h2 id=\"1-Embedding\"><a href=\"#1-Embedding\" class=\"headerlink\" title=\"1_Embedding\"></a>1_Embedding</h2><h2 id=\"2-Maching\"><a href=\"#2-Maching\" class=\"headerlink\" title=\"2_Maching\"></a>2_Maching</h2><h2 id=\"3-Ranking\"><a href=\"#3-Ranking\" class=\"headerlink\" title=\"3_Ranking\"></a>3_Ranking</h2><h3 id=\"【页面维度信息-负反馈】2022-Alibaba-WSDM-ZhifangFan-RACP-Modeling-Users’-Contextualized-Page-wise-Feedback-for-Click-Through-Rate-Prediction-in-E-commerce-Search\"><a href=\"#【页面维度信息-负反馈】2022-Alibaba-WSDM-ZhifangFan-RACP-Modeling-Users’-Contextualized-Page-wise-Feedback-for-Click-Through-Rate-Prediction-in-E-commerce-Search\" class=\"headerlink\" title=\"【页面维度信息+负反馈】2022 (Alibaba) (WSDM)(ZhifangFan)[RACP]Modeling Users’ Contextualized Page-wise Feedback for Click-Through Rate Prediction in E-commerce Search\"></a>【页面维度信息+负反馈】2022 (Alibaba) (WSDM)(ZhifangFan)[RACP]Modeling Users’ Contextualized Page-wise Feedback for Click-Through Rate Prediction in E-commerce Search</h3><ul>\n<li>简介：建模用户的历史行为对个性化搜索和推荐都很重要，现有方法主要是对用户历史正反馈的建模（点击序列），忽略了产生反馈的上下文信息。本文通过加入历史<strong>页面维度的曝光和反馈</strong>做一位用户历史行为序列，提出了一种新的上下文感知的用户行为建模方式。通过捕捉页面内的信息和页面间的演化可以更详细的学习用户的偏好。 RACP(Recurrent Attention over Contextualized Page sequence)模型通过<strong>page-context aware attention</strong> 学习页面内的关系。<strong>recurrent attention</strong>学习页面间的关系</li>\n<li>模型结构：</li>\n</ul>\n<p><img src=\"file:///Users/hetianqi/Documents/0_charging/hexo_init/source/_posts/notes_of_the_world/2_%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228121702691.png?lastModify=1646028941\" alt=\"image-20220228121702691\"></p>\n<ul>\n<li>quote<ul>\n<li>“However, they treat users’ positive and negative feedback separately, and rep- resent users’ feedback as a clicked item sequence and a non-clicked item sequence, which cannot generate the mutual context between clicks and non-clicks and ignores other page context information in the page-sequence” 历史工作很少考虑负反馈，即便考虑也是和正反馈分开处理的，这忽略了<strong>正负反馈之间的相互作用</strong></li>\n<li>页面信息的增益：1）<strong>正反馈是有噪音的</strong>，避免过拟合。一个用户点了一个品牌不一定是他就偏好这个品牌，有可能是整个页面都是这个品牌 2) 用户对item的行为受曝光的其他item影响</li>\n<li>页面间的增益：搜索场景下用户的行为和意图是一个逐渐收敛的过程。例如：搜索—-曝光—-点击—-搜索—-曝光—-点击—-购买</li>\n<li>“Recently, some pioneering work (<strong>DFN</strong> [33], <strong>DSTN</strong> [25]) high- light the importance of modeling both users’ positive and negative feedback for CTR prediction.” 一些负反馈的工作</li>\n<li>item画像：item id,品类id,shop id,统计类（成单量等）</li>\n<li>query画像：query id,字符串，分词，类别</li>\n<li><strong>页内的attention聚合+页间兴趣回溯(GRU，由下一个page表征当前的query) + 页间兴趣融合(attention)</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"【长期行为-SimHash相似度】2021-Alibaba-ArXiv-ETA-End-to-End-User-Behavior-Retrieval-in-Click-Through-Rate-Prediction-Model\"><a href=\"#【长期行为-SimHash相似度】2021-Alibaba-ArXiv-ETA-End-to-End-User-Behavior-Retrieval-in-Click-Through-Rate-Prediction-Model\" class=\"headerlink\" title=\"【长期行为+SimHash相似度】2021(Alibaba)(ArXiv)[ETA]End-to-End User Behavior Retrieval in Click-Through Rate Prediction Model\"></a>【长期行为+SimHash相似度】2021(Alibaba)(ArXiv)[ETA]End-to-End User Behavior Retrieval in Click-Through Rate Prediction Model</h3><ul>\n<li><p>简介：用户的长期行为对CTR预估很重要，但由于性能的约束，超长期用户行为通常是通过两段式训练进行处理的。第一阶段通过长期行为召回topK,第二阶段结合短期行为进行排序。两阶段由于优化目标不一致降低了长期用户行为带来的CTR增益。本文通过<strong>locality- sensitive hashing (LSH)</strong>方法提出端到端的ETA模型，使得满足训练和推理性能要求的前提下端到端训练的长期用户行为ctr模型。主要是通过<strong>SimHash</strong>的方法计算相似度，使得相似度的计算复杂度由O(L<em> B </em> d)变为O(L*B)，其中L是序列长度，B是candidate梳理，d是embedding维度</p>\n</li>\n<li><p>模型结构：</p>\n<p><img src=\"pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228145221827.png\" alt=\"image-20220228145221827\" style=\"zoom:50%;\" /></p>\n</li>\n</ul>\n<h3 id=\"2021-Alibaba-CIKM-ZEUS-Self-Supervised-Learning-on-Users’-Spontaneous-Behaviors-for-Multi-Scenario-Ranking-in-E-commerce\"><a href=\"#2021-Alibaba-CIKM-ZEUS-Self-Supervised-Learning-on-Users’-Spontaneous-Behaviors-for-Multi-Scenario-Ranking-in-E-commerce\" class=\"headerlink\" title=\"2021 (Alibaba) (CIKM) [ZEUS] Self-Supervised Learning on Users’ Spontaneous Behaviors for Multi-Scenario Ranking in E-commerce\"></a>2021 (Alibaba) (CIKM) [ZEUS] Self-Supervised Learning on Users’ Spontaneous Behaviors for Multi-Scenario Ranking in E-commerce</h3><h3 id=\"2020-JD-WSDM-HUP-Hierarchical-User-Profiling-for-E-commerce-Recommender-Systems\"><a href=\"#2020-JD-WSDM-HUP-Hierarchical-User-Profiling-for-E-commerce-Recommender-Systems\" class=\"headerlink\" title=\"2020 (JD) (WSDM) [HUP] Hierarchical User Profiling for E-commerce Recommender Systems\"></a>2020 (JD) (WSDM) [HUP] Hierarchical User Profiling for E-commerce Recommender Systems</h3><h3 id=\"【加入负反馈-显反馈对隐反馈去噪】2021-Alibaba-ACM-DUMN-Denoising-User-aware-Memory-Network-for-Recommendation\"><a href=\"#【加入负反馈-显反馈对隐反馈去噪】2021-Alibaba-ACM-DUMN-Denoising-User-aware-Memory-Network-for-Recommendation\" class=\"headerlink\" title=\"【加入负反馈+显反馈对隐反馈去噪】2021(Alibaba)(ACM)[DUMN]Denoising User-aware Memory Network for Recommendation\"></a>【加入负反馈+显反馈对隐反馈去噪】2021(Alibaba)(ACM)[DUMN]Denoising User-aware Memory Network for Recommendation</h3><ul>\n<li>简介：最近推荐领域非常多的工作聚焦在用户行为建模。用户的反馈包含显式和隐式的，大部分工作忽略了<strong>隐式反馈的噪音</strong>（用显示反馈对隐式反馈进行去噪），这会导致对于用户兴趣的有偏理解，本文1）通过正交映射( orthogonal mapping)对隐反馈进行去噪  2)基于内存的用户长期行为建模  3)短期行为和长期行为的融合。输入包括4个部分，<strong>显示反馈：喜欢，不喜欢 ；隐式反馈：点击，未点击</strong></li>\n<li>外卖场景下的显示隐式反馈是什么？？？<img src=\"pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228150641871.png\" alt=\"image-20220228150641871\" style=\"zoom:50%;\" /></li>\n</ul>\n<h2 id=\"4-Post-Ranking\"><a href=\"#4-Post-Ranking\" class=\"headerlink\" title=\"4_Post_Ranking\"></a>4_Post_Ranking</h2><h2 id=\"5-Multi-task\"><a href=\"#5-Multi-task\" class=\"headerlink\" title=\"5_Multi-task\"></a>5_Multi-task</h2><h2 id=\"6-Graph-Neural-Network\"><a href=\"#6-Graph-Neural-Network\" class=\"headerlink\" title=\"6_Graph_Neural_Network\"></a>6_Graph_Neural_Network</h2><h2 id=\"7-Transfer-Learning\"><a href=\"#7-Transfer-Learning\" class=\"headerlink\" title=\"7_Transfer_Learning\"></a>7_Transfer_Learning</h2><h2 id=\"8-Reignforcement-Learning\"><a href=\"#8-Reignforcement-Learning\" class=\"headerlink\" title=\"8_Reignforcement_Learning\"></a>8_Reignforcement_Learning</h2><h2 id=\"9-Self-Supervised-Learning\"><a href=\"#9-Self-Supervised-Learning\" class=\"headerlink\" title=\"9_Self_Supervised_Learning\"></a>9_Self_Supervised_Learning</h2><h2 id=\"10-Corporation\"><a href=\"#10-Corporation\" class=\"headerlink\" title=\"10_Corporation\"></a>10_Corporation</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>参考github awosome paper repository: <a href=\"https://github.com/guyulongcs/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\">Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising</a></p>\n","site":{"data":{}},"excerpt":"<p>Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising</p>","more":"<hr>\n<p>title: Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising<br>date: 2021-06-21 09:26:17<br>tags:</p>\n<pre><code>- 深度学习\n- Attention\n- Transformer\n- 机器学习\n- 每日论文\n- 经典算法\n- NLP\n</code></pre><p>mathjax: true<br>categories: </p>\n<pre><code>- 论文学习\n</code></pre><hr>\n<p>Self-Attention谁先提出的，各文章里写的不一样，<a href=\"https://papers.nips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf\">Attention Is All You Need</a>中说是<a href=\"https://arxiv.org/pdf/1606.01933.pdf\">Jakob.2016</a>年提出的，<a href=\"https://arxiv.org/pdf/1904.02874.pdf\">An Attentive Survey of Attention Models</a>中说是<a href=\"https://www.aclweb.org/anthology/N16-1174.pdf\">Yang et al. 2016</a>，本篇介绍后者。</p>\n<!-- more -->\n<p>[TOC]</p>\n<h1 id=\"Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\"><a href=\"#Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\" class=\"headerlink\" title=\"Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\"></a>Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising</h1><p>阅读等级：精，粗，to粗</p>\n<h2 id=\"0-New-Papers\"><a href=\"#0-New-Papers\" class=\"headerlink\" title=\"0_New_Papers\"></a>0_New_Papers</h2><h2 id=\"1-Embedding\"><a href=\"#1-Embedding\" class=\"headerlink\" title=\"1_Embedding\"></a>1_Embedding</h2><h2 id=\"2-Maching\"><a href=\"#2-Maching\" class=\"headerlink\" title=\"2_Maching\"></a>2_Maching</h2><h2 id=\"3-Ranking\"><a href=\"#3-Ranking\" class=\"headerlink\" title=\"3_Ranking\"></a>3_Ranking</h2><h3 id=\"【页面维度信息-负反馈】2022-Alibaba-WSDM-ZhifangFan-RACP-Modeling-Users’-Contextualized-Page-wise-Feedback-for-Click-Through-Rate-Prediction-in-E-commerce-Search\"><a href=\"#【页面维度信息-负反馈】2022-Alibaba-WSDM-ZhifangFan-RACP-Modeling-Users’-Contextualized-Page-wise-Feedback-for-Click-Through-Rate-Prediction-in-E-commerce-Search\" class=\"headerlink\" title=\"【页面维度信息+负反馈】2022 (Alibaba) (WSDM)(ZhifangFan)[RACP]Modeling Users’ Contextualized Page-wise Feedback for Click-Through Rate Prediction in E-commerce Search\"></a>【页面维度信息+负反馈】2022 (Alibaba) (WSDM)(ZhifangFan)[RACP]Modeling Users’ Contextualized Page-wise Feedback for Click-Through Rate Prediction in E-commerce Search</h3><ul>\n<li>简介：建模用户的历史行为对个性化搜索和推荐都很重要，现有方法主要是对用户历史正反馈的建模（点击序列），忽略了产生反馈的上下文信息。本文通过加入历史<strong>页面维度的曝光和反馈</strong>做一位用户历史行为序列，提出了一种新的上下文感知的用户行为建模方式。通过捕捉页面内的信息和页面间的演化可以更详细的学习用户的偏好。 RACP(Recurrent Attention over Contextualized Page sequence)模型通过<strong>page-context aware attention</strong> 学习页面内的关系。<strong>recurrent attention</strong>学习页面间的关系</li>\n<li>模型结构：</li>\n</ul>\n<p><img src=\"file:///Users/hetianqi/Documents/0_charging/hexo_init/source/_posts/notes_of_the_world/2_%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228121702691.png?lastModify=1646028941\" alt=\"image-20220228121702691\"></p>\n<ul>\n<li>quote<ul>\n<li>“However, they treat users’ positive and negative feedback separately, and rep- resent users’ feedback as a clicked item sequence and a non-clicked item sequence, which cannot generate the mutual context between clicks and non-clicks and ignores other page context information in the page-sequence” 历史工作很少考虑负反馈，即便考虑也是和正反馈分开处理的，这忽略了<strong>正负反馈之间的相互作用</strong></li>\n<li>页面信息的增益：1）<strong>正反馈是有噪音的</strong>，避免过拟合。一个用户点了一个品牌不一定是他就偏好这个品牌，有可能是整个页面都是这个品牌 2) 用户对item的行为受曝光的其他item影响</li>\n<li>页面间的增益：搜索场景下用户的行为和意图是一个逐渐收敛的过程。例如：搜索—-曝光—-点击—-搜索—-曝光—-点击—-购买</li>\n<li>“Recently, some pioneering work (<strong>DFN</strong> [33], <strong>DSTN</strong> [25]) high- light the importance of modeling both users’ positive and negative feedback for CTR prediction.” 一些负反馈的工作</li>\n<li>item画像：item id,品类id,shop id,统计类（成单量等）</li>\n<li>query画像：query id,字符串，分词，类别</li>\n<li><strong>页内的attention聚合+页间兴趣回溯(GRU，由下一个page表征当前的query) + 页间兴趣融合(attention)</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"【长期行为-SimHash相似度】2021-Alibaba-ArXiv-ETA-End-to-End-User-Behavior-Retrieval-in-Click-Through-Rate-Prediction-Model\"><a href=\"#【长期行为-SimHash相似度】2021-Alibaba-ArXiv-ETA-End-to-End-User-Behavior-Retrieval-in-Click-Through-Rate-Prediction-Model\" class=\"headerlink\" title=\"【长期行为+SimHash相似度】2021(Alibaba)(ArXiv)[ETA]End-to-End User Behavior Retrieval in Click-Through Rate Prediction Model\"></a>【长期行为+SimHash相似度】2021(Alibaba)(ArXiv)[ETA]End-to-End User Behavior Retrieval in Click-Through Rate Prediction Model</h3><ul>\n<li><p>简介：用户的长期行为对CTR预估很重要，但由于性能的约束，超长期用户行为通常是通过两段式训练进行处理的。第一阶段通过长期行为召回topK,第二阶段结合短期行为进行排序。两阶段由于优化目标不一致降低了长期用户行为带来的CTR增益。本文通过<strong>locality- sensitive hashing (LSH)</strong>方法提出端到端的ETA模型，使得满足训练和推理性能要求的前提下端到端训练的长期用户行为ctr模型。主要是通过<strong>SimHash</strong>的方法计算相似度，使得相似度的计算复杂度由O(L<em> B </em> d)变为O(L*B)，其中L是序列长度，B是candidate梳理，d是embedding维度</p>\n</li>\n<li><p>模型结构：</p>\n<p><img src=\"pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228145221827.png\" alt=\"image-20220228145221827\" style=\"zoom:50%;\" /></p>\n</li>\n</ul>\n<h3 id=\"2021-Alibaba-CIKM-ZEUS-Self-Supervised-Learning-on-Users’-Spontaneous-Behaviors-for-Multi-Scenario-Ranking-in-E-commerce\"><a href=\"#2021-Alibaba-CIKM-ZEUS-Self-Supervised-Learning-on-Users’-Spontaneous-Behaviors-for-Multi-Scenario-Ranking-in-E-commerce\" class=\"headerlink\" title=\"2021 (Alibaba) (CIKM) [ZEUS] Self-Supervised Learning on Users’ Spontaneous Behaviors for Multi-Scenario Ranking in E-commerce\"></a>2021 (Alibaba) (CIKM) [ZEUS] Self-Supervised Learning on Users’ Spontaneous Behaviors for Multi-Scenario Ranking in E-commerce</h3><h3 id=\"2020-JD-WSDM-HUP-Hierarchical-User-Profiling-for-E-commerce-Recommender-Systems\"><a href=\"#2020-JD-WSDM-HUP-Hierarchical-User-Profiling-for-E-commerce-Recommender-Systems\" class=\"headerlink\" title=\"2020 (JD) (WSDM) [HUP] Hierarchical User Profiling for E-commerce Recommender Systems\"></a>2020 (JD) (WSDM) [HUP] Hierarchical User Profiling for E-commerce Recommender Systems</h3><h3 id=\"【加入负反馈-显反馈对隐反馈去噪】2021-Alibaba-ACM-DUMN-Denoising-User-aware-Memory-Network-for-Recommendation\"><a href=\"#【加入负反馈-显反馈对隐反馈去噪】2021-Alibaba-ACM-DUMN-Denoising-User-aware-Memory-Network-for-Recommendation\" class=\"headerlink\" title=\"【加入负反馈+显反馈对隐反馈去噪】2021(Alibaba)(ACM)[DUMN]Denoising User-aware Memory Network for Recommendation\"></a>【加入负反馈+显反馈对隐反馈去噪】2021(Alibaba)(ACM)[DUMN]Denoising User-aware Memory Network for Recommendation</h3><ul>\n<li>简介：最近推荐领域非常多的工作聚焦在用户行为建模。用户的反馈包含显式和隐式的，大部分工作忽略了<strong>隐式反馈的噪音</strong>（用显示反馈对隐式反馈进行去噪），这会导致对于用户兴趣的有偏理解，本文1）通过正交映射( orthogonal mapping)对隐反馈进行去噪  2)基于内存的用户长期行为建模  3)短期行为和长期行为的融合。输入包括4个部分，<strong>显示反馈：喜欢，不喜欢 ；隐式反馈：点击，未点击</strong></li>\n<li>外卖场景下的显示隐式反馈是什么？？？<img src=\"pics/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising/image-20220228150641871.png\" alt=\"image-20220228150641871\" style=\"zoom:50%;\" /></li>\n</ul>\n<h2 id=\"4-Post-Ranking\"><a href=\"#4-Post-Ranking\" class=\"headerlink\" title=\"4_Post_Ranking\"></a>4_Post_Ranking</h2><h2 id=\"5-Multi-task\"><a href=\"#5-Multi-task\" class=\"headerlink\" title=\"5_Multi-task\"></a>5_Multi-task</h2><h2 id=\"6-Graph-Neural-Network\"><a href=\"#6-Graph-Neural-Network\" class=\"headerlink\" title=\"6_Graph_Neural_Network\"></a>6_Graph_Neural_Network</h2><h2 id=\"7-Transfer-Learning\"><a href=\"#7-Transfer-Learning\" class=\"headerlink\" title=\"7_Transfer_Learning\"></a>7_Transfer_Learning</h2><h2 id=\"8-Reignforcement-Learning\"><a href=\"#8-Reignforcement-Learning\" class=\"headerlink\" title=\"8_Reignforcement_Learning\"></a>8_Reignforcement_Learning</h2><h2 id=\"9-Self-Supervised-Learning\"><a href=\"#9-Self-Supervised-Learning\" class=\"headerlink\" title=\"9_Self_Supervised_Learning\"></a>9_Self_Supervised_Learning</h2><h2 id=\"10-Corporation\"><a href=\"#10-Corporation\" class=\"headerlink\" title=\"10_Corporation\"></a>10_Corporation</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>参考github awosome paper repository: <a href=\"https://github.com/guyulongcs/Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising\">Awesome-Deep-Learning-Papers-for-Search-Recommendation-Advertising</a></p>"},{"title":"FM","date":"2022-03-01T03:32:38.000Z","_content":"\nFM\n\n<!-- more -->\n\n\n# 模型介绍\n\n![1571637924127](FM.assets/1571637924127.png)\n\n# 为什么时间复杂度是O(kn)\n\n我们考虑二次项\n\n\n\n![img](FM.assets/11944360-479d4c5f93627025.webp)\n\n\n\n哇塞，这么复杂的公式怎么看得懂，我们一步步来，其实很简单。\n\n第一步，拆解过程如图\n\n\n\n![img](FM.assets/11944360-adafd0f533517322.webp)\n\n 拆解\n\n第二步，向量点乘\n\n第三步，将k求和提出来\n\n第四步，左边i和j式子相同，可以认为两者相等，直接得出平方\n\n到此，很明显，它的计算复杂度为O(kn)，左边求和之后平方，右边平方后求和，没有出现\n\n\n\n![img](FM.assets/11944360-c69f278cdaf982b5.webp)\n\n\n\n接下来我们看看FM如何收敛，照常使用SGD，计算FM的梯度是：\n\n\n\n![img](FM.assets/11944360-019eef148af27cb3.webp)\n\n\n\n求Xi的梯度，令Xj固定，则第三项左边求和是一个定值，与Xi无关。时间复杂度为O(kn)\n\nFM也可以扩展到更高阶的形式\n\n\n\n![img](FM.assets/11944360-fe15425d75e7f0cc.webp)\n\n\n\n到这，我们可以推断，FM能够在O(kn)时间复杂度处理特征间关联问题。\n\n作者：邹金伟\n\n链接：\n\nhttps://www.jianshu.com/p/67b4f7ec919e\n\n来源：简书\n\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n# 为什么能处理稀疏矩阵\n\n\n\n> - 用$<v_i,v_j>$代替$W$,理论依据是任何一个正定阵$W$都可表视为  $W=V\\cdot V^T$, 其中$W \\in (n*n),V\\in (n*k)$, 只要k足够大。\n> - FM中通过选定一个较小的超参k可捕捉交叉特征稀疏空间的联\n\n​                        \n\n那么，这和SVM相比有什么优势呢，SVM通过相应的核函数也能做到。还记得我们开头说的吗，相比SVM，FM能够胜任稀疏矩阵。\n\n首先我们来看一下SVM如何处理特征间关联问题。SVM的公式是：\n\n\n\n![img](FM.assets/11944360-2f4397b3680dc239.webp)\n\n\n\n选用合适的核函数，这里我们设d=2， 例如\n\n\n\n![img](FM.assets/11944360-f0de213892c4d1c6.webp)\n\n\n\n展开后公式可得\n\n\n\n![img](FM.assets/11944360-a70478586c11ed6f.webp)\n\n\n\n通过大量的数据训练，我们也能够得出对应的Weight。但是，如果特征i，和特征j没有同时出现呢。例如，从来没有一个人既买过啤酒，又买过烧鸭，那么你能认为某个人买完啤酒后不会再买烧鸭吗？这就是数据稀疏时候出现的问题，这时候Wi,j没有对应的x值训练。FM通过Vi *  Vj来确定W，那么只要其他记录有Vi，和Vj，不用同时出现，就可以分别对其进行训练，最后通过点乘来确定值。这牺牲了Wi,j一点自由度，却能够很好的处理稀疏矩阵的问题。\n\n链接：\n\nhttps://www.jianshu.com/p/67b4f7ec919e\n\n来源：简书\n\n","source":"_posts/2_算法相关/FM.md","raw":"---\ntitle: FM\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nFM\n\n<!-- more -->\n\n\n# 模型介绍\n\n![1571637924127](FM.assets/1571637924127.png)\n\n# 为什么时间复杂度是O(kn)\n\n我们考虑二次项\n\n\n\n![img](FM.assets/11944360-479d4c5f93627025.webp)\n\n\n\n哇塞，这么复杂的公式怎么看得懂，我们一步步来，其实很简单。\n\n第一步，拆解过程如图\n\n\n\n![img](FM.assets/11944360-adafd0f533517322.webp)\n\n 拆解\n\n第二步，向量点乘\n\n第三步，将k求和提出来\n\n第四步，左边i和j式子相同，可以认为两者相等，直接得出平方\n\n到此，很明显，它的计算复杂度为O(kn)，左边求和之后平方，右边平方后求和，没有出现\n\n\n\n![img](FM.assets/11944360-c69f278cdaf982b5.webp)\n\n\n\n接下来我们看看FM如何收敛，照常使用SGD，计算FM的梯度是：\n\n\n\n![img](FM.assets/11944360-019eef148af27cb3.webp)\n\n\n\n求Xi的梯度，令Xj固定，则第三项左边求和是一个定值，与Xi无关。时间复杂度为O(kn)\n\nFM也可以扩展到更高阶的形式\n\n\n\n![img](FM.assets/11944360-fe15425d75e7f0cc.webp)\n\n\n\n到这，我们可以推断，FM能够在O(kn)时间复杂度处理特征间关联问题。\n\n作者：邹金伟\n\n链接：\n\nhttps://www.jianshu.com/p/67b4f7ec919e\n\n来源：简书\n\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n# 为什么能处理稀疏矩阵\n\n\n\n> - 用$<v_i,v_j>$代替$W$,理论依据是任何一个正定阵$W$都可表视为  $W=V\\cdot V^T$, 其中$W \\in (n*n),V\\in (n*k)$, 只要k足够大。\n> - FM中通过选定一个较小的超参k可捕捉交叉特征稀疏空间的联\n\n​                        \n\n那么，这和SVM相比有什么优势呢，SVM通过相应的核函数也能做到。还记得我们开头说的吗，相比SVM，FM能够胜任稀疏矩阵。\n\n首先我们来看一下SVM如何处理特征间关联问题。SVM的公式是：\n\n\n\n![img](FM.assets/11944360-2f4397b3680dc239.webp)\n\n\n\n选用合适的核函数，这里我们设d=2， 例如\n\n\n\n![img](FM.assets/11944360-f0de213892c4d1c6.webp)\n\n\n\n展开后公式可得\n\n\n\n![img](FM.assets/11944360-a70478586c11ed6f.webp)\n\n\n\n通过大量的数据训练，我们也能够得出对应的Weight。但是，如果特征i，和特征j没有同时出现呢。例如，从来没有一个人既买过啤酒，又买过烧鸭，那么你能认为某个人买完啤酒后不会再买烧鸭吗？这就是数据稀疏时候出现的问题，这时候Wi,j没有对应的x值训练。FM通过Vi *  Vj来确定W，那么只要其他记录有Vi，和Vj，不用同时出现，就可以分别对其进行训练，最后通过点乘来确定值。这牺牲了Wi,j一点自由度，却能够很好的处理稀疏矩阵的问题。\n\n链接：\n\nhttps://www.jianshu.com/p/67b4f7ec919e\n\n来源：简书\n\n","slug":"2_算法相关/FM","published":1,"updated":"2022-03-01T03:59:30.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly3z00038s32c7bz0c5n","content":"<p>FM</p>\n<span id=\"more\"></span>\n<h1 id=\"模型介绍\"><a href=\"#模型介绍\" class=\"headerlink\" title=\"模型介绍\"></a>模型介绍</h1>\n<h1 id=\"为什么时间复杂度是O-kn\"><a href=\"#为什么时间复杂度是O-kn\" class=\"headerlink\" title=\"为什么时间复杂度是O(kn)\"></a>为什么时间复杂度是O(kn)</h1><p>我们考虑二次项</p>\n\n<p>哇塞，这么复杂的公式怎么看得懂，我们一步步来，其实很简单。</p>\n<p>第一步，拆解过程如图</p>\n\n<p> 拆解</p>\n<p>第二步，向量点乘</p>\n<p>第三步，将k求和提出来</p>\n<p>第四步，左边i和j式子相同，可以认为两者相等，直接得出平方</p>\n<p>到此，很明显，它的计算复杂度为O(kn)，左边求和之后平方，右边平方后求和，没有出现</p>\n\n<p>接下来我们看看FM如何收敛，照常使用SGD，计算FM的梯度是：</p>\n\n<p>求Xi的梯度，令Xj固定，则第三项左边求和是一个定值，与Xi无关。时间复杂度为O(kn)</p>\n<p>FM也可以扩展到更高阶的形式</p>\n\n<p>到这，我们可以推断，FM能够在O(kn)时间复杂度处理特征间关联问题。</p>\n<p>作者：邹金伟</p>\n<p>链接：</p>\n<p><a href=\"https://www.jianshu.com/p/67b4f7ec919e\">https://www.jianshu.com/p/67b4f7ec919e</a></p>\n<p>来源：简书</p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h1 id=\"为什么能处理稀疏矩阵\"><a href=\"#为什么能处理稀疏矩阵\" class=\"headerlink\" title=\"为什么能处理稀疏矩阵\"></a>为什么能处理稀疏矩阵</h1><blockquote>\n<ul>\n<li>用$<v_i,v_j>$代替$W$,理论依据是任何一个正定阵$W$都可表视为  $W=V\\cdot V^T$, 其中$W \\in (n<em>n),V\\in (n</em>k)$, 只要k足够大。</li>\n<li>FM中通过选定一个较小的超参k可捕捉交叉特征稀疏空间的联</li>\n</ul>\n</blockquote>\n<p>​                        </p>\n<p>那么，这和SVM相比有什么优势呢，SVM通过相应的核函数也能做到。还记得我们开头说的吗，相比SVM，FM能够胜任稀疏矩阵。</p>\n<p>首先我们来看一下SVM如何处理特征间关联问题。SVM的公式是：</p>\n\n<p>选用合适的核函数，这里我们设d=2， 例如</p>\n\n<p>展开后公式可得</p>\n\n<p>通过大量的数据训练，我们也能够得出对应的Weight。但是，如果特征i，和特征j没有同时出现呢。例如，从来没有一个人既买过啤酒，又买过烧鸭，那么你能认为某个人买完啤酒后不会再买烧鸭吗？这就是数据稀疏时候出现的问题，这时候Wi,j没有对应的x值训练。FM通过Vi *  Vj来确定W，那么只要其他记录有Vi，和Vj，不用同时出现，就可以分别对其进行训练，最后通过点乘来确定值。这牺牲了Wi,j一点自由度，却能够很好的处理稀疏矩阵的问题。</p>\n<p>链接：</p>\n<p><a href=\"https://www.jianshu.com/p/67b4f7ec919e\">https://www.jianshu.com/p/67b4f7ec919e</a></p>\n<p>来源：简书</p>\n","site":{"data":{}},"excerpt":"<p>FM</p>","more":"<h1 id=\"模型介绍\"><a href=\"#模型介绍\" class=\"headerlink\" title=\"模型介绍\"></a>模型介绍</h1>\n<h1 id=\"为什么时间复杂度是O-kn\"><a href=\"#为什么时间复杂度是O-kn\" class=\"headerlink\" title=\"为什么时间复杂度是O(kn)\"></a>为什么时间复杂度是O(kn)</h1><p>我们考虑二次项</p>\n\n<p>哇塞，这么复杂的公式怎么看得懂，我们一步步来，其实很简单。</p>\n<p>第一步，拆解过程如图</p>\n\n<p> 拆解</p>\n<p>第二步，向量点乘</p>\n<p>第三步，将k求和提出来</p>\n<p>第四步，左边i和j式子相同，可以认为两者相等，直接得出平方</p>\n<p>到此，很明显，它的计算复杂度为O(kn)，左边求和之后平方，右边平方后求和，没有出现</p>\n\n<p>接下来我们看看FM如何收敛，照常使用SGD，计算FM的梯度是：</p>\n\n<p>求Xi的梯度，令Xj固定，则第三项左边求和是一个定值，与Xi无关。时间复杂度为O(kn)</p>\n<p>FM也可以扩展到更高阶的形式</p>\n\n<p>到这，我们可以推断，FM能够在O(kn)时间复杂度处理特征间关联问题。</p>\n<p>作者：邹金伟</p>\n<p>链接：</p>\n<p><a href=\"https://www.jianshu.com/p/67b4f7ec919e\">https://www.jianshu.com/p/67b4f7ec919e</a></p>\n<p>来源：简书</p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h1 id=\"为什么能处理稀疏矩阵\"><a href=\"#为什么能处理稀疏矩阵\" class=\"headerlink\" title=\"为什么能处理稀疏矩阵\"></a>为什么能处理稀疏矩阵</h1><blockquote>\n<ul>\n<li>用$<v_i,v_j>$代替$W$,理论依据是任何一个正定阵$W$都可表视为  $W=V\\cdot V^T$, 其中$W \\in (n<em>n),V\\in (n</em>k)$, 只要k足够大。</li>\n<li>FM中通过选定一个较小的超参k可捕捉交叉特征稀疏空间的联</li>\n</ul>\n</blockquote>\n<p>​                        </p>\n<p>那么，这和SVM相比有什么优势呢，SVM通过相应的核函数也能做到。还记得我们开头说的吗，相比SVM，FM能够胜任稀疏矩阵。</p>\n<p>首先我们来看一下SVM如何处理特征间关联问题。SVM的公式是：</p>\n\n<p>选用合适的核函数，这里我们设d=2， 例如</p>\n\n<p>展开后公式可得</p>\n\n<p>通过大量的数据训练，我们也能够得出对应的Weight。但是，如果特征i，和特征j没有同时出现呢。例如，从来没有一个人既买过啤酒，又买过烧鸭，那么你能认为某个人买完啤酒后不会再买烧鸭吗？这就是数据稀疏时候出现的问题，这时候Wi,j没有对应的x值训练。FM通过Vi *  Vj来确定W，那么只要其他记录有Vi，和Vj，不用同时出现，就可以分别对其进行训练，最后通过点乘来确定值。这牺牲了Wi,j一点自由度，却能够很好的处理稀疏矩阵的问题。</p>\n<p>链接：</p>\n<p><a href=\"https://www.jianshu.com/p/67b4f7ec919e\">https://www.jianshu.com/p/67b4f7ec919e</a></p>\n<p>来源：简书</p>"},{"title":"LDA算法","date":"2022-03-01T03:32:38.000Z","_content":"\nLDA算法\n\n<!-- more -->\n\n\n# 概要 \n\nPLSA \n\n每篇文章有个$$\\theta_i$$确定每篇文章到topic的概率分布\n\n每个topic_j有个$$\\phi_j$$确定每篇文章到词的概率分布\n\n求解theta_i，phi_j\n\nLDA\n\n每篇文i章有个alpha（对每篇文章都一样，是依靠先验人工设置的） 确定的地理克雷分布确定theta_i，由theta_i确定文章i到topic的概率分布\n\n每个topic_j有个beta（对每个词都一样，是依靠先验人工设置的） 确定的地理克雷分布确定 phi_j, 由phi_j 确定topic_j到词的概率分布\n\n求解theta_i，phi_j\n\n# 数学推导\n\nLDA\n\n1. 每篇文i章有个alpha（对每篇文章都一样，是依靠先验人工设置的） 确定的地理克雷分布确定theta_i，由theta_i确定文章i到topic的概率分布\n\n$$\n\\theta_i=P_d(\\alpha) \\\\\nP(j|i) = P_{mult}(\\theta_i) \\\\\n文章i到各个topic_j的分布由\\theta_i确定,其中P_d是狄利克雷分布，P_{mult}是多项式分布\n$$\n\n2. 每个topic_j有个beta（对每个词都一样，是依靠先验人工设置的） 确定的地理克雷分布确定 phi_j, 由phi_j 确定topic_j到词的概率分布\n\n$$\n\\phi_j=P_d(\\beta) \\\\\nP(k|j) = P_{mult}(\\phi_j) \\\\\ntopic_j到词k的分布由\\phi_j确定,其中P_d是狄利克雷分布，P_{mult}是多项式分布\n$$\n\n\n3. 求解theta_i，phi_j\n\n# 求解\n\n\n\n\n\n","source":"_posts/2_算法相关/LDA算法.md","raw":"---\ntitle: LDA算法\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nLDA算法\n\n<!-- more -->\n\n\n# 概要 \n\nPLSA \n\n每篇文章有个$$\\theta_i$$确定每篇文章到topic的概率分布\n\n每个topic_j有个$$\\phi_j$$确定每篇文章到词的概率分布\n\n求解theta_i，phi_j\n\nLDA\n\n每篇文i章有个alpha（对每篇文章都一样，是依靠先验人工设置的） 确定的地理克雷分布确定theta_i，由theta_i确定文章i到topic的概率分布\n\n每个topic_j有个beta（对每个词都一样，是依靠先验人工设置的） 确定的地理克雷分布确定 phi_j, 由phi_j 确定topic_j到词的概率分布\n\n求解theta_i，phi_j\n\n# 数学推导\n\nLDA\n\n1. 每篇文i章有个alpha（对每篇文章都一样，是依靠先验人工设置的） 确定的地理克雷分布确定theta_i，由theta_i确定文章i到topic的概率分布\n\n$$\n\\theta_i=P_d(\\alpha) \\\\\nP(j|i) = P_{mult}(\\theta_i) \\\\\n文章i到各个topic_j的分布由\\theta_i确定,其中P_d是狄利克雷分布，P_{mult}是多项式分布\n$$\n\n2. 每个topic_j有个beta（对每个词都一样，是依靠先验人工设置的） 确定的地理克雷分布确定 phi_j, 由phi_j 确定topic_j到词的概率分布\n\n$$\n\\phi_j=P_d(\\beta) \\\\\nP(k|j) = P_{mult}(\\phi_j) \\\\\ntopic_j到词k的分布由\\phi_j确定,其中P_d是狄利克雷分布，P_{mult}是多项式分布\n$$\n\n\n3. 求解theta_i，phi_j\n\n# 求解\n\n\n\n\n\n","slug":"2_算法相关/LDA算法","published":1,"updated":"2022-03-01T03:59:30.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4200078s32cbgq5djx","content":"<p>LDA算法</p>\n<span id=\"more\"></span>\n<h1 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h1><p>PLSA </p>\n<p>每篇文章有个<script type=\"math/tex\">\\theta_i</script>确定每篇文章到topic的概率分布</p>\n<p>每个topic_j有个<script type=\"math/tex\">\\phi_j</script>确定每篇文章到词的概率分布</p>\n<p>求解theta_i，phi_j</p>\n<p>LDA</p>\n<p>每篇文i章有个alpha（对每篇文章都一样，是依靠先验人工设置的） 确定的地理克雷分布确定theta_i，由theta_i确定文章i到topic的概率分布</p>\n<p>每个topic_j有个beta（对每个词都一样，是依靠先验人工设置的） 确定的地理克雷分布确定 phi_j, 由phi_j 确定topic_j到词的概率分布</p>\n<p>求解theta_i，phi_j</p>\n<h1 id=\"数学推导\"><a href=\"#数学推导\" class=\"headerlink\" title=\"数学推导\"></a>数学推导</h1><p>LDA</p>\n<ol>\n<li>每篇文i章有个alpha（对每篇文章都一样，是依靠先验人工设置的） 确定的地理克雷分布确定theta_i，由theta_i确定文章i到topic的概率分布</li>\n</ol>\n<script type=\"math/tex; mode=display\">\n\\theta_i=P_d(\\alpha) \\\\\nP(j|i) = P_{mult}(\\theta_i) \\\\\n文章i到各个topic_j的分布由\\theta_i确定,其中P_d是狄利克雷分布，P_{mult}是多项式分布</script><ol>\n<li>每个topic_j有个beta（对每个词都一样，是依靠先验人工设置的） 确定的地理克雷分布确定 phi_j, 由phi_j 确定topic_j到词的概率分布</li>\n</ol>\n<script type=\"math/tex; mode=display\">\n\\phi_j=P_d(\\beta) \\\\\nP(k|j) = P_{mult}(\\phi_j) \\\\\ntopic_j到词k的分布由\\phi_j确定,其中P_d是狄利克雷分布，P_{mult}是多项式分布</script><ol>\n<li>求解theta_i，phi_j</li>\n</ol>\n<h1 id=\"求解\"><a href=\"#求解\" class=\"headerlink\" title=\"求解\"></a>求解</h1>","site":{"data":{}},"excerpt":"<p>LDA算法</p>","more":"<h1 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h1><p>PLSA </p>\n<p>每篇文章有个<script type=\"math/tex\">\\theta_i</script>确定每篇文章到topic的概率分布</p>\n<p>每个topic_j有个<script type=\"math/tex\">\\phi_j</script>确定每篇文章到词的概率分布</p>\n<p>求解theta_i，phi_j</p>\n<p>LDA</p>\n<p>每篇文i章有个alpha（对每篇文章都一样，是依靠先验人工设置的） 确定的地理克雷分布确定theta_i，由theta_i确定文章i到topic的概率分布</p>\n<p>每个topic_j有个beta（对每个词都一样，是依靠先验人工设置的） 确定的地理克雷分布确定 phi_j, 由phi_j 确定topic_j到词的概率分布</p>\n<p>求解theta_i，phi_j</p>\n<h1 id=\"数学推导\"><a href=\"#数学推导\" class=\"headerlink\" title=\"数学推导\"></a>数学推导</h1><p>LDA</p>\n<ol>\n<li>每篇文i章有个alpha（对每篇文章都一样，是依靠先验人工设置的） 确定的地理克雷分布确定theta_i，由theta_i确定文章i到topic的概率分布</li>\n</ol>\n<script type=\"math/tex; mode=display\">\n\\theta_i=P_d(\\alpha) \\\\\nP(j|i) = P_{mult}(\\theta_i) \\\\\n文章i到各个topic_j的分布由\\theta_i确定,其中P_d是狄利克雷分布，P_{mult}是多项式分布</script><ol>\n<li>每个topic_j有个beta（对每个词都一样，是依靠先验人工设置的） 确定的地理克雷分布确定 phi_j, 由phi_j 确定topic_j到词的概率分布</li>\n</ol>\n<script type=\"math/tex; mode=display\">\n\\phi_j=P_d(\\beta) \\\\\nP(k|j) = P_{mult}(\\phi_j) \\\\\ntopic_j到词k的分布由\\phi_j确定,其中P_d是狄利克雷分布，P_{mult}是多项式分布</script><ol>\n<li>求解theta_i，phi_j</li>\n</ol>\n<h1 id=\"求解\"><a href=\"#求解\" class=\"headerlink\" title=\"求解\"></a>求解</h1>"},{"title":"Uplift Modeling","date":"2022-03-01T03:32:38.000Z","_content":"\nUplift Modeling\n\n<!-- more -->\n\n\nUplift Modeling\n\n# 问题描述\n\n增量模型，用于预估某种干预对结果的因果关系（ITE，Individual Treatment Effect），即预测：\n\n\n\n# 基本假设\n\n","source":"_posts/2_算法相关/Uplift Modeling.md","raw":"---\ntitle: Uplift Modeling\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nUplift Modeling\n\n<!-- more -->\n\n\nUplift Modeling\n\n# 问题描述\n\n增量模型，用于预估某种干预对结果的因果关系（ITE，Individual Treatment Effect），即预测：\n\n\n\n# 基本假设\n\n","slug":"2_算法相关/Uplift Modeling","published":1,"updated":"2022-03-01T03:59:30.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4300088s3239l6gki5","content":"<p>Uplift Modeling</p>\n<span id=\"more\"></span>\n<p>Uplift Modeling</p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>增量模型，用于预估某种干预对结果的因果关系（ITE，Individual Treatment Effect），即预测：</p>\n<h1 id=\"基本假设\"><a href=\"#基本假设\" class=\"headerlink\" title=\"基本假设\"></a>基本假设</h1>","site":{"data":{}},"excerpt":"<p>Uplift Modeling</p>","more":"<p>Uplift Modeling</p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>增量模型，用于预估某种干预对结果的因果关系（ITE，Individual Treatment Effect），即预测：</p>\n<h1 id=\"基本假设\"><a href=\"#基本假设\" class=\"headerlink\" title=\"基本假设\"></a>基本假设</h1>"},{"title":"Learning to Rank：Point-wise、Pair-wise 和 List-wise区别","date":"2022-03-01T03:32:38.000Z","_content":"\nLearning to Rank：Point-wise、Pair-wise 和 List-wise区别\n\n<!-- more -->\n\n\n# Learning to Rank：Point-wise、Pair-wise 和 List-wise区别\n\n![img](https://csdnimg.cn/release/phoenix/template/new_img/reprint.png)\n\n[weixin_34005042](https://me.csdn.net/weixin_34005042) 2018-09-29 15:19:00 ![img](https://csdnimg.cn/release/phoenix/template/new_img/articleRead.png) 4131 ![img](https://csdnimg.cn/release/phoenix/template/new_img/tobarCollectionActive.png) 已收藏 4\n\n 机器学习的 ranking 技术——learning2rank，包括 pointwise、pairwise、listwise 三大类型。\n\n ![img](https://img2018.cnblogs.com/blog/818082/201809/818082-20180929163323836-2075825354.png)\n\n \n\n[【Ref-1】](https://stackoverflow.com/questions/17411986/what-is-the-difference-between-point-wise-and-pair-wise-ranking-in-machine-learn)给出的：\n\n<Point wise ranking 类似于回归>\n\nPoint wise ranking is analogous to regression. Each point has an associated rank score, and you want to predict that rank score. So your labeled data set will have a feature vector and associated rank score given a query\n\nIE: {d1, r1} {d2, r2} {d3, r3} {d4, r4}\n\nwhere r1 > r2 > r3 >r4\n\n \n\n<Pairwise ranking 类似于分类>\n\nPairwise ranking is analogous to classification. Each data point is associated with another data point, and the goal is to learn a classifier which will predict which of the two is \"more\" relevant to a given query.\n\nIE: {d1 > d2} {d2 > d3} {d3 > d4}\n\n \n\n#  ***\\*1、Pointwise Approach\\****\n\n## 　　***\\**\\*1.1 特点\\*\\**\\***\n\n　　Pointwise 类方法，其 L2R 框架具有以下特征：\n\n- 输入空间中样本是单个 doc（和对应 query）构成的特征向量；\n- 输出空间中样本是单个 doc（和对应 query）的相关度；\n- 假设空间中样本是打分函数；\n- 损失函数评估单个 doc 的预测得分和真实得分之间差异。\n\n　　这里讨论下，关于人工标注标签怎么转换到 pointwise 类方法的输出空间：\n\n1. 如果标注直接是相关度 s_j，则 doc x_j 的真实标签定义为 y_j=s_j\n2. 如果标注是 pairwise preference s_{u,v}，则 doc x_j 的真实标签可以利用该 doc 击败了其他 docs 的频次\n3. 如果标注是整体排序 π，则 doc x_j 的真实标签可以利用映射函数，如将 doc 的排序位置序号当作真实标签\n\n## 　　1.2 根据使用的 ML 方法不同，pointwise 类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。\n\n　　（1）基于回归的算法\n\n　　　　此时，输出空间包含的是实值相关度得分。采用 ML 中传统的回归方法即可。\n\n　　（2）基于分类的算法\n\n　　　　此时，输出空间包含的是无序类别。对于二分类，SVM、LR 等均可；对于多分类，提升树等均可。\n\n　　（3）基于有序回归的算法\n\n　　　　此时，输出空间包含的是有序类别。通常是找到一个打分函数，然后用一系列阈值对得分进行分割，得到有序类别。采用 PRanking、基于 margin 的方法都可以。\n\n## 　　1.3 缺陷 \n\n　　　　回顾概述中提到的评估指标应该基于 query 和 position，\n\n- ranking 追求的是排序结果，并不要求精确打分，只要有相对打分即可。\n- pointwise 类方法并没有考虑同一个 query 对应的 docs 间的内部依赖性。一方面，导致输入空间内的样本不是 IID 的，违反了 ML 的基本假设，另一方面，没有充分利用这种样本间的结构性。其次，当不同 query 对应不同数量的 docs 时，整体 loss 将会被对应 docs 数量大的 query 组所支配，前面说过应该每组 query 都是等价的。\n- 损失函数也没有 model 到预测排序中的位置信息。因此，损失函数可能无意的过多强调那些不重要的 docs，即那些排序在后面对用户体验影响小的 doc。\n\n## 　　1.4 改进\n\n　　　　如在 loss 中引入基于 query 的正则化因子的 RankCosine 方法。\n\n \n\n#  2、Pairwise Approach\n\n## 　  2.1 特点\n\n　　Pairwise 类方法，其 L2R 框架具有以下特征：\n\n- 输入空间中样本是（同一 query 对应的）两个 doc（和对应 query）构成的两个特征向量；\n- 输出空间中样本是 pairwise preference；\n- 假设空间中样本是二变量函数；\n- 损失函数评估 doc pair 的预测 preference 和真实 preference 之间差异。\n\n　　这里讨论下，关于人工标注标签怎么转换到 pairwise 类方法的输出空间：\n\n1. 如果标注直接是相关度 s_j，则 doc pair (x_u,x_v) 的真实标签定义为 y_{u,v}=2*I_{s_u>s_v}-1\n2. 如果标注是 pairwise preference s_{u,v}，则 doc pair (x_u,x_v) 的真实标签定义为y_{u,v}=s_{u,v}\n3. 如果标注是整体排序 π，则 doc pair (x_u,x_v) 的真实标签定义为y_{u,v}=2*I_{π_u,π_v}-1\n\n## 　　2.2 基于二分类的算法　　\n\n　　Pairwise 类方法基本就是使用二分类算法即可。\n\n　　经典的算法有 基于 NN 的 SortNet，基于 NN 的 RankNet，基于 fidelity loss 的 FRank，基于 AdaBoost 的 RankBoost，基于 SVM 的 RankingSVM，基于提升树的 GBRank。\n\n## 　　2.3 缺陷 \n\n　　虽然 pairwise 类相较 pointwise 类 model 到一些 doc pair 间的相对顺序信息，但还是存在不少问题，回顾概述中提到的评估指标应该基于 query 和 position，\n\n- 如果人工标注给定的是第一种和第三种，即已包含多有序类别，那么转化成 pairwise preference 时必定会损失掉一些更细粒度的相关度标注信息。\n- doc pair 的数量将是 doc 数量的二次，从而 pointwise 类方法就存在的 query 间 doc 数量的不平衡性将在 pairwise 类方法中进一步放大。\n- pairwise 类方法相对 pointwise 类方法对噪声标注更敏感，即一个错误标注会引起多个 doc pair 标注错误。\n- pairwise 类方法仅考虑了 doc pair 的相对位置，损失函数还是没有 model 到预测排序中的位置信息。\n- pairwise 类方法也没有考虑同一个 query 对应的 doc pair 间的内部依赖性，即输入空间内的样本并不是 IID 的，违反了 ML 的基本假设，并且也没有充分利用这种样本间的结构性。\n\n## 　　2.4 改进\n\n　　　pairwise 类方法也有一些尝试，去一定程度解决上述缺陷，比如：\n\n- Multiple hyperplane ranker，主要针对前述第一个缺陷\n- magnitude-preserving ranking，主要针对前述第一个缺陷\n- IRSVM，主要针对前述第二个缺陷\n- 采用 Sigmoid 进行改进的 pairwise 方法，主要针对前述第三个缺陷\n- P-norm push，主要针对前述第四个缺陷\n- Ordered weighted average ranking，主要针对前述第四个缺陷\n- LambdaRank，主要针对前述第四个缺陷\n- Sparse ranker，主要针对前述第四个缺陷\n\n \n\n 　***\\*3、Listwise Approach\\****\n\n## 　　3.1 特点　　\n\n　　Listwise 类方法，其 L2R 框架具有以下特征：\n\n- 输入空间中样本是（同一 query 对应的）所有 doc（与对应的 query）构成的多个特征向量（列表）；\n- 输出空间中样本是这些 doc（和对应 query）的相关度排序列表或者排列；\n- 假设空间中样本是多变量函数，对于 docs 得到其排列，实践中，通常是一个打分函数，根据打分函数对所有 docs 的打分进行排序得到 docs 相关度的排列；\n- 损失函数分成两类，一类是直接和评价指标相关的，还有一类不是直接相关的。具体后面介绍。\n\n　　这里讨论下，关于人工标注标签怎么转换到 listwise 类方法的输出空间：\n\n1. 如果标注直接是相关度 s_j，则 doc set 的真实标签可以利用相关度 s_j 进行比较构造出排列\n2. 如果标注是 pairwise preference s_{u,v}，则 doc set 的真实标签也可以利用所有 s_{u,v} 进行比较构造出排列\n3. 如果标注是整体排序 π，则 doc set 则可以直接得到真实标签\n\n \n\n## 　　3.2 根据损失函数构造方式的不同，listwise 类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。\n\n　　　（1）直接基于评价指标的算法\n\n　　直接取优化 ranking 的评价指标，也算是 listwise 中最直观的方法。但这并不简单，因为前面说过评价指标都是离散不可微的，具体处理方式有这么几种：\n\n- 优化基于评价指标的 ranking error 的连续可微的近似，这种方法就可以直接应用已有的优化方法，如SoftRank，ApproximateRank，SmoothRank\n- 优化基于评价指标的 ranking error 的连续可微的上界，如 SVM-MAP，SVM-NDCG，PermuRank\n- 使用可以优化非平滑目标函数的优化技术，如 AdaRank，RankGP\n\n　　上述方法的优化目标都是直接和 ranking 的评价指标有关。现在来考虑一个概念，informativeness。通常认为一个更有信息量的指标，可以产生更有效的排序模型。而多层评价指标（NDCG）相较二元评价（AP）指标通常更富信息量。因此，有时虽然使用信息量更少的指标来评估模型，但仍然可以使用更富信息量的指标来作为 loss 进行模型训练。\n\n　　  （2）非直接基于评价指标的算法\n\n　　这里，不再使用和评价指标相关的 loss 来优化模型，而是设计能衡量模型输出与真实排列之间差异的 loss，如此获得的模型在评价指标上也能获得不错的性能。 \n　　经典的如 ，ListNet，ListMLE，StructRank，BoltzRank。\n\n \n\n## 　　3.3 缺陷 \n\nlistwise 类相较 pointwise、pairwise 对 ranking 的 model 更自然，解决了 ranking 应该基于 query 和 position 问题。\n\nlistwise 类存在的主要缺陷是：一些 ranking 算法需要基于排列来计算 loss，从而使得训练复杂度较高，如 ListNet和 BoltzRank。此外，位置信息并没有在 loss 中得到充分利用，可以考虑在 ListNet 和 ListMLE 的 loss 中引入位置折扣因子。\n\n## 　　3.4 改进\n\n　　　pairwise 类方法也有一些尝试，去一定程度解决上述缺陷，比如：\n\n- Multiple hyperplane ranker，主要针对前述第一个缺陷\n- magnitude-preserving ranking，主要针对前述第一个缺陷\n- IRSVM，主要针对前述第二个缺陷\n- 采用 Sigmoid 进行改进的 pairwise 方法，主要针对前述第三个缺陷\n- P-norm push，主要针对前述第四个缺陷\n- Ordered weighted average ranking，主要针对前述第四个缺陷\n- LambdaRank，主要针对前述第四个缺陷\n- Sparse ranker，主要针对前述第四个缺陷\n\n \n\n以上，**这三大类方法主要区别在于损失函数。不同的损失函数决定了不同的模型学习过程和输入输出空间。**\n\n \n\n \n\nrating数据集：\n\n：所以关于这个问题，是要使用topN=1的对吗？并把指标改为 AUC和 NDCG对吗？\n\n——是这样，这个是一个rating数据集。\n\n如果是按照pairwise ranking的正确率，应该是我们的oPR和oMRR，PR和MAP都是没有用的。\n\n如果不按照pairwise，（按照listwise），就是AUC和NDCG，所以我让你算那个。\n\n当然还有就是按照数值，（按照pointwise），RMSE，不过我们的没法计算RMSE。\n\n：啊这个“不按照pairwise”，没太明白，还是按照原来的思路，用的 winner 和 loser 比较对呀。尤其在这个rating数据集，是每个比较对当成一个session，这点还是不变的吧？？\n\n——这不就是pairwise吗？\n\nrating是可以按照每个用户得到一个排序的，这是listwise，也就是算出NDCG，AUC的指标。\n\n还可以按照pointwise，每个分数预测的怎么样，就是RMSE。\n\n \n\n \n\n \n\n \n\n【Reference】\n\n1、[What is the difference between point-wise and pair-wise ranking in machine learning](https://stackoverflow.com/questions/17411986/what-is-the-difference-between-point-wise-and-pair-wise-ranking-in-machine-learn)\n\n2、[学习排序 Learning to Rank：从 pointwise 和 pairwise 到 listwise，经典模型与优缺点](https://blog.csdn.net/lipengcn/article/details/80373744)\n\n3、[基于 Pairwise 和 Listwise 的排序学习](https://cloud.tencent.com/developer/news/135904)","source":"_posts/2_算法相关/Learning to Rank：Point-wise、Pair-wise 和 List-wise区别.md","raw":"---\ntitle: Learning to Rank：Point-wise、Pair-wise 和 List-wise区别\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nLearning to Rank：Point-wise、Pair-wise 和 List-wise区别\n\n<!-- more -->\n\n\n# Learning to Rank：Point-wise、Pair-wise 和 List-wise区别\n\n![img](https://csdnimg.cn/release/phoenix/template/new_img/reprint.png)\n\n[weixin_34005042](https://me.csdn.net/weixin_34005042) 2018-09-29 15:19:00 ![img](https://csdnimg.cn/release/phoenix/template/new_img/articleRead.png) 4131 ![img](https://csdnimg.cn/release/phoenix/template/new_img/tobarCollectionActive.png) 已收藏 4\n\n 机器学习的 ranking 技术——learning2rank，包括 pointwise、pairwise、listwise 三大类型。\n\n ![img](https://img2018.cnblogs.com/blog/818082/201809/818082-20180929163323836-2075825354.png)\n\n \n\n[【Ref-1】](https://stackoverflow.com/questions/17411986/what-is-the-difference-between-point-wise-and-pair-wise-ranking-in-machine-learn)给出的：\n\n<Point wise ranking 类似于回归>\n\nPoint wise ranking is analogous to regression. Each point has an associated rank score, and you want to predict that rank score. So your labeled data set will have a feature vector and associated rank score given a query\n\nIE: {d1, r1} {d2, r2} {d3, r3} {d4, r4}\n\nwhere r1 > r2 > r3 >r4\n\n \n\n<Pairwise ranking 类似于分类>\n\nPairwise ranking is analogous to classification. Each data point is associated with another data point, and the goal is to learn a classifier which will predict which of the two is \"more\" relevant to a given query.\n\nIE: {d1 > d2} {d2 > d3} {d3 > d4}\n\n \n\n#  ***\\*1、Pointwise Approach\\****\n\n## 　　***\\**\\*1.1 特点\\*\\**\\***\n\n　　Pointwise 类方法，其 L2R 框架具有以下特征：\n\n- 输入空间中样本是单个 doc（和对应 query）构成的特征向量；\n- 输出空间中样本是单个 doc（和对应 query）的相关度；\n- 假设空间中样本是打分函数；\n- 损失函数评估单个 doc 的预测得分和真实得分之间差异。\n\n　　这里讨论下，关于人工标注标签怎么转换到 pointwise 类方法的输出空间：\n\n1. 如果标注直接是相关度 s_j，则 doc x_j 的真实标签定义为 y_j=s_j\n2. 如果标注是 pairwise preference s_{u,v}，则 doc x_j 的真实标签可以利用该 doc 击败了其他 docs 的频次\n3. 如果标注是整体排序 π，则 doc x_j 的真实标签可以利用映射函数，如将 doc 的排序位置序号当作真实标签\n\n## 　　1.2 根据使用的 ML 方法不同，pointwise 类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。\n\n　　（1）基于回归的算法\n\n　　　　此时，输出空间包含的是实值相关度得分。采用 ML 中传统的回归方法即可。\n\n　　（2）基于分类的算法\n\n　　　　此时，输出空间包含的是无序类别。对于二分类，SVM、LR 等均可；对于多分类，提升树等均可。\n\n　　（3）基于有序回归的算法\n\n　　　　此时，输出空间包含的是有序类别。通常是找到一个打分函数，然后用一系列阈值对得分进行分割，得到有序类别。采用 PRanking、基于 margin 的方法都可以。\n\n## 　　1.3 缺陷 \n\n　　　　回顾概述中提到的评估指标应该基于 query 和 position，\n\n- ranking 追求的是排序结果，并不要求精确打分，只要有相对打分即可。\n- pointwise 类方法并没有考虑同一个 query 对应的 docs 间的内部依赖性。一方面，导致输入空间内的样本不是 IID 的，违反了 ML 的基本假设，另一方面，没有充分利用这种样本间的结构性。其次，当不同 query 对应不同数量的 docs 时，整体 loss 将会被对应 docs 数量大的 query 组所支配，前面说过应该每组 query 都是等价的。\n- 损失函数也没有 model 到预测排序中的位置信息。因此，损失函数可能无意的过多强调那些不重要的 docs，即那些排序在后面对用户体验影响小的 doc。\n\n## 　　1.4 改进\n\n　　　　如在 loss 中引入基于 query 的正则化因子的 RankCosine 方法。\n\n \n\n#  2、Pairwise Approach\n\n## 　  2.1 特点\n\n　　Pairwise 类方法，其 L2R 框架具有以下特征：\n\n- 输入空间中样本是（同一 query 对应的）两个 doc（和对应 query）构成的两个特征向量；\n- 输出空间中样本是 pairwise preference；\n- 假设空间中样本是二变量函数；\n- 损失函数评估 doc pair 的预测 preference 和真实 preference 之间差异。\n\n　　这里讨论下，关于人工标注标签怎么转换到 pairwise 类方法的输出空间：\n\n1. 如果标注直接是相关度 s_j，则 doc pair (x_u,x_v) 的真实标签定义为 y_{u,v}=2*I_{s_u>s_v}-1\n2. 如果标注是 pairwise preference s_{u,v}，则 doc pair (x_u,x_v) 的真实标签定义为y_{u,v}=s_{u,v}\n3. 如果标注是整体排序 π，则 doc pair (x_u,x_v) 的真实标签定义为y_{u,v}=2*I_{π_u,π_v}-1\n\n## 　　2.2 基于二分类的算法　　\n\n　　Pairwise 类方法基本就是使用二分类算法即可。\n\n　　经典的算法有 基于 NN 的 SortNet，基于 NN 的 RankNet，基于 fidelity loss 的 FRank，基于 AdaBoost 的 RankBoost，基于 SVM 的 RankingSVM，基于提升树的 GBRank。\n\n## 　　2.3 缺陷 \n\n　　虽然 pairwise 类相较 pointwise 类 model 到一些 doc pair 间的相对顺序信息，但还是存在不少问题，回顾概述中提到的评估指标应该基于 query 和 position，\n\n- 如果人工标注给定的是第一种和第三种，即已包含多有序类别，那么转化成 pairwise preference 时必定会损失掉一些更细粒度的相关度标注信息。\n- doc pair 的数量将是 doc 数量的二次，从而 pointwise 类方法就存在的 query 间 doc 数量的不平衡性将在 pairwise 类方法中进一步放大。\n- pairwise 类方法相对 pointwise 类方法对噪声标注更敏感，即一个错误标注会引起多个 doc pair 标注错误。\n- pairwise 类方法仅考虑了 doc pair 的相对位置，损失函数还是没有 model 到预测排序中的位置信息。\n- pairwise 类方法也没有考虑同一个 query 对应的 doc pair 间的内部依赖性，即输入空间内的样本并不是 IID 的，违反了 ML 的基本假设，并且也没有充分利用这种样本间的结构性。\n\n## 　　2.4 改进\n\n　　　pairwise 类方法也有一些尝试，去一定程度解决上述缺陷，比如：\n\n- Multiple hyperplane ranker，主要针对前述第一个缺陷\n- magnitude-preserving ranking，主要针对前述第一个缺陷\n- IRSVM，主要针对前述第二个缺陷\n- 采用 Sigmoid 进行改进的 pairwise 方法，主要针对前述第三个缺陷\n- P-norm push，主要针对前述第四个缺陷\n- Ordered weighted average ranking，主要针对前述第四个缺陷\n- LambdaRank，主要针对前述第四个缺陷\n- Sparse ranker，主要针对前述第四个缺陷\n\n \n\n 　***\\*3、Listwise Approach\\****\n\n## 　　3.1 特点　　\n\n　　Listwise 类方法，其 L2R 框架具有以下特征：\n\n- 输入空间中样本是（同一 query 对应的）所有 doc（与对应的 query）构成的多个特征向量（列表）；\n- 输出空间中样本是这些 doc（和对应 query）的相关度排序列表或者排列；\n- 假设空间中样本是多变量函数，对于 docs 得到其排列，实践中，通常是一个打分函数，根据打分函数对所有 docs 的打分进行排序得到 docs 相关度的排列；\n- 损失函数分成两类，一类是直接和评价指标相关的，还有一类不是直接相关的。具体后面介绍。\n\n　　这里讨论下，关于人工标注标签怎么转换到 listwise 类方法的输出空间：\n\n1. 如果标注直接是相关度 s_j，则 doc set 的真实标签可以利用相关度 s_j 进行比较构造出排列\n2. 如果标注是 pairwise preference s_{u,v}，则 doc set 的真实标签也可以利用所有 s_{u,v} 进行比较构造出排列\n3. 如果标注是整体排序 π，则 doc set 则可以直接得到真实标签\n\n \n\n## 　　3.2 根据损失函数构造方式的不同，listwise 类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。\n\n　　　（1）直接基于评价指标的算法\n\n　　直接取优化 ranking 的评价指标，也算是 listwise 中最直观的方法。但这并不简单，因为前面说过评价指标都是离散不可微的，具体处理方式有这么几种：\n\n- 优化基于评价指标的 ranking error 的连续可微的近似，这种方法就可以直接应用已有的优化方法，如SoftRank，ApproximateRank，SmoothRank\n- 优化基于评价指标的 ranking error 的连续可微的上界，如 SVM-MAP，SVM-NDCG，PermuRank\n- 使用可以优化非平滑目标函数的优化技术，如 AdaRank，RankGP\n\n　　上述方法的优化目标都是直接和 ranking 的评价指标有关。现在来考虑一个概念，informativeness。通常认为一个更有信息量的指标，可以产生更有效的排序模型。而多层评价指标（NDCG）相较二元评价（AP）指标通常更富信息量。因此，有时虽然使用信息量更少的指标来评估模型，但仍然可以使用更富信息量的指标来作为 loss 进行模型训练。\n\n　　  （2）非直接基于评价指标的算法\n\n　　这里，不再使用和评价指标相关的 loss 来优化模型，而是设计能衡量模型输出与真实排列之间差异的 loss，如此获得的模型在评价指标上也能获得不错的性能。 \n　　经典的如 ，ListNet，ListMLE，StructRank，BoltzRank。\n\n \n\n## 　　3.3 缺陷 \n\nlistwise 类相较 pointwise、pairwise 对 ranking 的 model 更自然，解决了 ranking 应该基于 query 和 position 问题。\n\nlistwise 类存在的主要缺陷是：一些 ranking 算法需要基于排列来计算 loss，从而使得训练复杂度较高，如 ListNet和 BoltzRank。此外，位置信息并没有在 loss 中得到充分利用，可以考虑在 ListNet 和 ListMLE 的 loss 中引入位置折扣因子。\n\n## 　　3.4 改进\n\n　　　pairwise 类方法也有一些尝试，去一定程度解决上述缺陷，比如：\n\n- Multiple hyperplane ranker，主要针对前述第一个缺陷\n- magnitude-preserving ranking，主要针对前述第一个缺陷\n- IRSVM，主要针对前述第二个缺陷\n- 采用 Sigmoid 进行改进的 pairwise 方法，主要针对前述第三个缺陷\n- P-norm push，主要针对前述第四个缺陷\n- Ordered weighted average ranking，主要针对前述第四个缺陷\n- LambdaRank，主要针对前述第四个缺陷\n- Sparse ranker，主要针对前述第四个缺陷\n\n \n\n以上，**这三大类方法主要区别在于损失函数。不同的损失函数决定了不同的模型学习过程和输入输出空间。**\n\n \n\n \n\nrating数据集：\n\n：所以关于这个问题，是要使用topN=1的对吗？并把指标改为 AUC和 NDCG对吗？\n\n——是这样，这个是一个rating数据集。\n\n如果是按照pairwise ranking的正确率，应该是我们的oPR和oMRR，PR和MAP都是没有用的。\n\n如果不按照pairwise，（按照listwise），就是AUC和NDCG，所以我让你算那个。\n\n当然还有就是按照数值，（按照pointwise），RMSE，不过我们的没法计算RMSE。\n\n：啊这个“不按照pairwise”，没太明白，还是按照原来的思路，用的 winner 和 loser 比较对呀。尤其在这个rating数据集，是每个比较对当成一个session，这点还是不变的吧？？\n\n——这不就是pairwise吗？\n\nrating是可以按照每个用户得到一个排序的，这是listwise，也就是算出NDCG，AUC的指标。\n\n还可以按照pointwise，每个分数预测的怎么样，就是RMSE。\n\n \n\n \n\n \n\n \n\n【Reference】\n\n1、[What is the difference between point-wise and pair-wise ranking in machine learning](https://stackoverflow.com/questions/17411986/what-is-the-difference-between-point-wise-and-pair-wise-ranking-in-machine-learn)\n\n2、[学习排序 Learning to Rank：从 pointwise 和 pairwise 到 listwise，经典模型与优缺点](https://blog.csdn.net/lipengcn/article/details/80373744)\n\n3、[基于 Pairwise 和 Listwise 的排序学习](https://cloud.tencent.com/developer/news/135904)","slug":"2_算法相关/Learning to Rank：Point-wise、Pair-wise 和 List-wise区别","published":1,"updated":"2022-03-01T03:59:30.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4400098s323ywe9x9j","content":"<p>Learning to Rank：Point-wise、Pair-wise 和 List-wise区别</p>\n<span id=\"more\"></span>\n<h1 id=\"Learning-to-Rank：Point-wise、Pair-wise-和-List-wise区别\"><a href=\"#Learning-to-Rank：Point-wise、Pair-wise-和-List-wise区别\" class=\"headerlink\" title=\"Learning to Rank：Point-wise、Pair-wise 和 List-wise区别\"></a>Learning to Rank：Point-wise、Pair-wise 和 List-wise区别</h1><p><img src=\"https://csdnimg.cn/release/phoenix/template/new_img/reprint.png\" alt=\"img\"></p>\n<p><a href=\"https://me.csdn.net/weixin_34005042\">weixin_34005042</a> 2018-09-29 15:19:00 <img src=\"https://csdnimg.cn/release/phoenix/template/new_img/articleRead.png\" alt=\"img\"> 4131 <img src=\"https://csdnimg.cn/release/phoenix/template/new_img/tobarCollectionActive.png\" alt=\"img\"> 已收藏 4</p>\n<p> 机器学习的 ranking 技术——learning2rank，包括 pointwise、pairwise、listwise 三大类型。</p>\n<p> <img src=\"https://img2018.cnblogs.com/blog/818082/201809/818082-20180929163323836-2075825354.png\" alt=\"img\"></p>\n<p><a href=\"https://stackoverflow.com/questions/17411986/what-is-the-difference-between-point-wise-and-pair-wise-ranking-in-machine-learn\">【Ref-1】</a>给出的：</p>\n<Point wise ranking 类似于回归>\n\n<p>Point wise ranking is analogous to regression. Each point has an associated rank score, and you want to predict that rank score. So your labeled data set will have a feature vector and associated rank score given a query</p>\n<p>IE: {d1, r1} {d2, r2} {d3, r3} {d4, r4}</p>\n<p>where r1 &gt; r2 &gt; r3 &gt;r4</p>\n<Pairwise ranking 类似于分类>\n\n<p>Pairwise ranking is analogous to classification. Each data point is associated with another data point, and the goal is to learn a classifier which will predict which of the two is “more” relevant to a given query.</p>\n<p>IE: {d1 &gt; d2} {d2 &gt; d3} {d3 &gt; d4}</p>\n<h1 id=\"1、Pointwise-Approach\"><a href=\"#1、Pointwise-Approach\" class=\"headerlink\" title=\"\\1、Pointwise Approach**\"></a><strong><em>\\</em>1、Pointwise Approach**</strong></h1><h2 id=\"1-1-特点\"><a href=\"#1-1-特点\" class=\"headerlink\" title=\"　　*\\*1.1 特点****\"></a>　　<strong>*\\</strong>*1.1 特点**<em>**</em></h2><p>　　Pointwise 类方法，其 L2R 框架具有以下特征：</p>\n<ul>\n<li>输入空间中样本是单个 doc（和对应 query）构成的特征向量；</li>\n<li>输出空间中样本是单个 doc（和对应 query）的相关度；</li>\n<li>假设空间中样本是打分函数；</li>\n<li>损失函数评估单个 doc 的预测得分和真实得分之间差异。</li>\n</ul>\n<p>　　这里讨论下，关于人工标注标签怎么转换到 pointwise 类方法的输出空间：</p>\n<ol>\n<li>如果标注直接是相关度 s_j，则 doc x_j 的真实标签定义为 y_j=s_j</li>\n<li>如果标注是 pairwise preference s_{u,v}，则 doc x_j 的真实标签可以利用该 doc 击败了其他 docs 的频次</li>\n<li>如果标注是整体排序 π，则 doc x_j 的真实标签可以利用映射函数，如将 doc 的排序位置序号当作真实标签</li>\n</ol>\n<h2 id=\"1-2-根据使用的-ML-方法不同，pointwise-类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。\"><a href=\"#1-2-根据使用的-ML-方法不同，pointwise-类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。\" class=\"headerlink\" title=\"　　1.2 根据使用的 ML 方法不同，pointwise 类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。\"></a>　　1.2 根据使用的 ML 方法不同，pointwise 类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。</h2><p>　　（1）基于回归的算法</p>\n<p>　　　　此时，输出空间包含的是实值相关度得分。采用 ML 中传统的回归方法即可。</p>\n<p>　　（2）基于分类的算法</p>\n<p>　　　　此时，输出空间包含的是无序类别。对于二分类，SVM、LR 等均可；对于多分类，提升树等均可。</p>\n<p>　　（3）基于有序回归的算法</p>\n<p>　　　　此时，输出空间包含的是有序类别。通常是找到一个打分函数，然后用一系列阈值对得分进行分割，得到有序类别。采用 PRanking、基于 margin 的方法都可以。</p>\n<h2 id=\"1-3-缺陷\"><a href=\"#1-3-缺陷\" class=\"headerlink\" title=\"　　1.3 缺陷\"></a>　　1.3 缺陷</h2><p>　　　　回顾概述中提到的评估指标应该基于 query 和 position，</p>\n<ul>\n<li>ranking 追求的是排序结果，并不要求精确打分，只要有相对打分即可。</li>\n<li>pointwise 类方法并没有考虑同一个 query 对应的 docs 间的内部依赖性。一方面，导致输入空间内的样本不是 IID 的，违反了 ML 的基本假设，另一方面，没有充分利用这种样本间的结构性。其次，当不同 query 对应不同数量的 docs 时，整体 loss 将会被对应 docs 数量大的 query 组所支配，前面说过应该每组 query 都是等价的。</li>\n<li>损失函数也没有 model 到预测排序中的位置信息。因此，损失函数可能无意的过多强调那些不重要的 docs，即那些排序在后面对用户体验影响小的 doc。</li>\n</ul>\n<h2 id=\"1-4-改进\"><a href=\"#1-4-改进\" class=\"headerlink\" title=\"　　1.4 改进\"></a>　　1.4 改进</h2><p>　　　　如在 loss 中引入基于 query 的正则化因子的 RankCosine 方法。</p>\n<h1 id=\"2、Pairwise-Approach\"><a href=\"#2、Pairwise-Approach\" class=\"headerlink\" title=\"2、Pairwise Approach\"></a>2、Pairwise Approach</h1><h2 id=\"2-1-特点\"><a href=\"#2-1-特点\" class=\"headerlink\" title=\"　  2.1 特点\"></a>　  2.1 特点</h2><p>　　Pairwise 类方法，其 L2R 框架具有以下特征：</p>\n<ul>\n<li>输入空间中样本是（同一 query 对应的）两个 doc（和对应 query）构成的两个特征向量；</li>\n<li>输出空间中样本是 pairwise preference；</li>\n<li>假设空间中样本是二变量函数；</li>\n<li>损失函数评估 doc pair 的预测 preference 和真实 preference 之间差异。</li>\n</ul>\n<p>　　这里讨论下，关于人工标注标签怎么转换到 pairwise 类方法的输出空间：</p>\n<ol>\n<li>如果标注直接是相关度 s_j，则 doc pair (x_u,x_v) 的真实标签定义为 y_{u,v}=2*I_{s_u&gt;s_v}-1</li>\n<li>如果标注是 pairwise preference s_{u,v}，则 doc pair (x_u,x_v) 的真实标签定义为y_{u,v}=s_{u,v}</li>\n<li>如果标注是整体排序 π，则 doc pair (x_u,x_v) 的真实标签定义为y_{u,v}=2*I_{π_u,π_v}-1</li>\n</ol>\n<h2 id=\"2-2-基于二分类的算法\"><a href=\"#2-2-基于二分类的算法\" class=\"headerlink\" title=\"　　2.2 基于二分类的算法　　\"></a>　　2.2 基于二分类的算法　　</h2><p>　　Pairwise 类方法基本就是使用二分类算法即可。</p>\n<p>　　经典的算法有 基于 NN 的 SortNet，基于 NN 的 RankNet，基于 fidelity loss 的 FRank，基于 AdaBoost 的 RankBoost，基于 SVM 的 RankingSVM，基于提升树的 GBRank。</p>\n<h2 id=\"2-3-缺陷\"><a href=\"#2-3-缺陷\" class=\"headerlink\" title=\"　　2.3 缺陷\"></a>　　2.3 缺陷</h2><p>　　虽然 pairwise 类相较 pointwise 类 model 到一些 doc pair 间的相对顺序信息，但还是存在不少问题，回顾概述中提到的评估指标应该基于 query 和 position，</p>\n<ul>\n<li>如果人工标注给定的是第一种和第三种，即已包含多有序类别，那么转化成 pairwise preference 时必定会损失掉一些更细粒度的相关度标注信息。</li>\n<li>doc pair 的数量将是 doc 数量的二次，从而 pointwise 类方法就存在的 query 间 doc 数量的不平衡性将在 pairwise 类方法中进一步放大。</li>\n<li>pairwise 类方法相对 pointwise 类方法对噪声标注更敏感，即一个错误标注会引起多个 doc pair 标注错误。</li>\n<li>pairwise 类方法仅考虑了 doc pair 的相对位置，损失函数还是没有 model 到预测排序中的位置信息。</li>\n<li>pairwise 类方法也没有考虑同一个 query 对应的 doc pair 间的内部依赖性，即输入空间内的样本并不是 IID 的，违反了 ML 的基本假设，并且也没有充分利用这种样本间的结构性。</li>\n</ul>\n<h2 id=\"2-4-改进\"><a href=\"#2-4-改进\" class=\"headerlink\" title=\"　　2.4 改进\"></a>　　2.4 改进</h2><p>　　　pairwise 类方法也有一些尝试，去一定程度解决上述缺陷，比如：</p>\n<ul>\n<li>Multiple hyperplane ranker，主要针对前述第一个缺陷</li>\n<li>magnitude-preserving ranking，主要针对前述第一个缺陷</li>\n<li>IRSVM，主要针对前述第二个缺陷</li>\n<li>采用 Sigmoid 进行改进的 pairwise 方法，主要针对前述第三个缺陷</li>\n<li>P-norm push，主要针对前述第四个缺陷</li>\n<li>Ordered weighted average ranking，主要针对前述第四个缺陷</li>\n<li>LambdaRank，主要针对前述第四个缺陷</li>\n<li>Sparse ranker，主要针对前述第四个缺陷</li>\n</ul>\n<p> 　<strong><em>\\</em>3、Listwise Approach**</strong></p>\n<h2 id=\"3-1-特点\"><a href=\"#3-1-特点\" class=\"headerlink\" title=\"　　3.1 特点　　\"></a>　　3.1 特点　　</h2><p>　　Listwise 类方法，其 L2R 框架具有以下特征：</p>\n<ul>\n<li>输入空间中样本是（同一 query 对应的）所有 doc（与对应的 query）构成的多个特征向量（列表）；</li>\n<li>输出空间中样本是这些 doc（和对应 query）的相关度排序列表或者排列；</li>\n<li>假设空间中样本是多变量函数，对于 docs 得到其排列，实践中，通常是一个打分函数，根据打分函数对所有 docs 的打分进行排序得到 docs 相关度的排列；</li>\n<li>损失函数分成两类，一类是直接和评价指标相关的，还有一类不是直接相关的。具体后面介绍。</li>\n</ul>\n<p>　　这里讨论下，关于人工标注标签怎么转换到 listwise 类方法的输出空间：</p>\n<ol>\n<li>如果标注直接是相关度 s_j，则 doc set 的真实标签可以利用相关度 s_j 进行比较构造出排列</li>\n<li>如果标注是 pairwise preference s_{u,v}，则 doc set 的真实标签也可以利用所有 s_{u,v} 进行比较构造出排列</li>\n<li>如果标注是整体排序 π，则 doc set 则可以直接得到真实标签</li>\n</ol>\n<h2 id=\"3-2-根据损失函数构造方式的不同，listwise-类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。\"><a href=\"#3-2-根据损失函数构造方式的不同，listwise-类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。\" class=\"headerlink\" title=\"　　3.2 根据损失函数构造方式的不同，listwise 类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。\"></a>　　3.2 根据损失函数构造方式的不同，listwise 类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。</h2><p>　　　（1）直接基于评价指标的算法</p>\n<p>　　直接取优化 ranking 的评价指标，也算是 listwise 中最直观的方法。但这并不简单，因为前面说过评价指标都是离散不可微的，具体处理方式有这么几种：</p>\n<ul>\n<li>优化基于评价指标的 ranking error 的连续可微的近似，这种方法就可以直接应用已有的优化方法，如SoftRank，ApproximateRank，SmoothRank</li>\n<li>优化基于评价指标的 ranking error 的连续可微的上界，如 SVM-MAP，SVM-NDCG，PermuRank</li>\n<li>使用可以优化非平滑目标函数的优化技术，如 AdaRank，RankGP</li>\n</ul>\n<p>　　上述方法的优化目标都是直接和 ranking 的评价指标有关。现在来考虑一个概念，informativeness。通常认为一个更有信息量的指标，可以产生更有效的排序模型。而多层评价指标（NDCG）相较二元评价（AP）指标通常更富信息量。因此，有时虽然使用信息量更少的指标来评估模型，但仍然可以使用更富信息量的指标来作为 loss 进行模型训练。</p>\n<p>　　  （2）非直接基于评价指标的算法</p>\n<p>　　这里，不再使用和评价指标相关的 loss 来优化模型，而是设计能衡量模型输出与真实排列之间差异的 loss，如此获得的模型在评价指标上也能获得不错的性能。<br>　　经典的如 ，ListNet，ListMLE，StructRank，BoltzRank。</p>\n<h2 id=\"3-3-缺陷\"><a href=\"#3-3-缺陷\" class=\"headerlink\" title=\"　　3.3 缺陷\"></a>　　3.3 缺陷</h2><p>listwise 类相较 pointwise、pairwise 对 ranking 的 model 更自然，解决了 ranking 应该基于 query 和 position 问题。</p>\n<p>listwise 类存在的主要缺陷是：一些 ranking 算法需要基于排列来计算 loss，从而使得训练复杂度较高，如 ListNet和 BoltzRank。此外，位置信息并没有在 loss 中得到充分利用，可以考虑在 ListNet 和 ListMLE 的 loss 中引入位置折扣因子。</p>\n<h2 id=\"3-4-改进\"><a href=\"#3-4-改进\" class=\"headerlink\" title=\"　　3.4 改进\"></a>　　3.4 改进</h2><p>　　　pairwise 类方法也有一些尝试，去一定程度解决上述缺陷，比如：</p>\n<ul>\n<li>Multiple hyperplane ranker，主要针对前述第一个缺陷</li>\n<li>magnitude-preserving ranking，主要针对前述第一个缺陷</li>\n<li>IRSVM，主要针对前述第二个缺陷</li>\n<li>采用 Sigmoid 进行改进的 pairwise 方法，主要针对前述第三个缺陷</li>\n<li>P-norm push，主要针对前述第四个缺陷</li>\n<li>Ordered weighted average ranking，主要针对前述第四个缺陷</li>\n<li>LambdaRank，主要针对前述第四个缺陷</li>\n<li>Sparse ranker，主要针对前述第四个缺陷</li>\n</ul>\n<p>以上，<strong>这三大类方法主要区别在于损失函数。不同的损失函数决定了不同的模型学习过程和输入输出空间。</strong></p>\n<p>rating数据集：</p>\n<p>：所以关于这个问题，是要使用topN=1的对吗？并把指标改为 AUC和 NDCG对吗？</p>\n<p>——是这样，这个是一个rating数据集。</p>\n<p>如果是按照pairwise ranking的正确率，应该是我们的oPR和oMRR，PR和MAP都是没有用的。</p>\n<p>如果不按照pairwise，（按照listwise），就是AUC和NDCG，所以我让你算那个。</p>\n<p>当然还有就是按照数值，（按照pointwise），RMSE，不过我们的没法计算RMSE。</p>\n<p>：啊这个“不按照pairwise”，没太明白，还是按照原来的思路，用的 winner 和 loser 比较对呀。尤其在这个rating数据集，是每个比较对当成一个session，这点还是不变的吧？？</p>\n<p>——这不就是pairwise吗？</p>\n<p>rating是可以按照每个用户得到一个排序的，这是listwise，也就是算出NDCG，AUC的指标。</p>\n<p>还可以按照pointwise，每个分数预测的怎么样，就是RMSE。</p>\n<p>【Reference】</p>\n<p>1、<a href=\"https://stackoverflow.com/questions/17411986/what-is-the-difference-between-point-wise-and-pair-wise-ranking-in-machine-learn\">What is the difference between point-wise and pair-wise ranking in machine learning</a></p>\n<p>2、<a href=\"https://blog.csdn.net/lipengcn/article/details/80373744\">学习排序 Learning to Rank：从 pointwise 和 pairwise 到 listwise，经典模型与优缺点</a></p>\n<p>3、<a href=\"https://cloud.tencent.com/developer/news/135904\">基于 Pairwise 和 Listwise 的排序学习</a></p>\n","site":{"data":{}},"excerpt":"<p>Learning to Rank：Point-wise、Pair-wise 和 List-wise区别</p>","more":"<h1 id=\"Learning-to-Rank：Point-wise、Pair-wise-和-List-wise区别\"><a href=\"#Learning-to-Rank：Point-wise、Pair-wise-和-List-wise区别\" class=\"headerlink\" title=\"Learning to Rank：Point-wise、Pair-wise 和 List-wise区别\"></a>Learning to Rank：Point-wise、Pair-wise 和 List-wise区别</h1><p><img src=\"https://csdnimg.cn/release/phoenix/template/new_img/reprint.png\" alt=\"img\"></p>\n<p><a href=\"https://me.csdn.net/weixin_34005042\">weixin_34005042</a> 2018-09-29 15:19:00 <img src=\"https://csdnimg.cn/release/phoenix/template/new_img/articleRead.png\" alt=\"img\"> 4131 <img src=\"https://csdnimg.cn/release/phoenix/template/new_img/tobarCollectionActive.png\" alt=\"img\"> 已收藏 4</p>\n<p> 机器学习的 ranking 技术——learning2rank，包括 pointwise、pairwise、listwise 三大类型。</p>\n<p> <img src=\"https://img2018.cnblogs.com/blog/818082/201809/818082-20180929163323836-2075825354.png\" alt=\"img\"></p>\n<p><a href=\"https://stackoverflow.com/questions/17411986/what-is-the-difference-between-point-wise-and-pair-wise-ranking-in-machine-learn\">【Ref-1】</a>给出的：</p>\n<Point wise ranking 类似于回归>\n\n<p>Point wise ranking is analogous to regression. Each point has an associated rank score, and you want to predict that rank score. So your labeled data set will have a feature vector and associated rank score given a query</p>\n<p>IE: {d1, r1} {d2, r2} {d3, r3} {d4, r4}</p>\n<p>where r1 &gt; r2 &gt; r3 &gt;r4</p>\n<Pairwise ranking 类似于分类>\n\n<p>Pairwise ranking is analogous to classification. Each data point is associated with another data point, and the goal is to learn a classifier which will predict which of the two is “more” relevant to a given query.</p>\n<p>IE: {d1 &gt; d2} {d2 &gt; d3} {d3 &gt; d4}</p>\n<h1 id=\"1、Pointwise-Approach\"><a href=\"#1、Pointwise-Approach\" class=\"headerlink\" title=\"\\1、Pointwise Approach**\"></a><strong><em>\\</em>1、Pointwise Approach**</strong></h1><h2 id=\"1-1-特点\"><a href=\"#1-1-特点\" class=\"headerlink\" title=\"　　*\\*1.1 特点****\"></a>　　<strong>*\\</strong>*1.1 特点**<em>**</em></h2><p>　　Pointwise 类方法，其 L2R 框架具有以下特征：</p>\n<ul>\n<li>输入空间中样本是单个 doc（和对应 query）构成的特征向量；</li>\n<li>输出空间中样本是单个 doc（和对应 query）的相关度；</li>\n<li>假设空间中样本是打分函数；</li>\n<li>损失函数评估单个 doc 的预测得分和真实得分之间差异。</li>\n</ul>\n<p>　　这里讨论下，关于人工标注标签怎么转换到 pointwise 类方法的输出空间：</p>\n<ol>\n<li>如果标注直接是相关度 s_j，则 doc x_j 的真实标签定义为 y_j=s_j</li>\n<li>如果标注是 pairwise preference s_{u,v}，则 doc x_j 的真实标签可以利用该 doc 击败了其他 docs 的频次</li>\n<li>如果标注是整体排序 π，则 doc x_j 的真实标签可以利用映射函数，如将 doc 的排序位置序号当作真实标签</li>\n</ol>\n<h2 id=\"1-2-根据使用的-ML-方法不同，pointwise-类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。\"><a href=\"#1-2-根据使用的-ML-方法不同，pointwise-类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。\" class=\"headerlink\" title=\"　　1.2 根据使用的 ML 方法不同，pointwise 类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。\"></a>　　1.2 根据使用的 ML 方法不同，pointwise 类可以进一步分成三类：基于回归的算法、基于分类的算法，基于有序回归的算法。</h2><p>　　（1）基于回归的算法</p>\n<p>　　　　此时，输出空间包含的是实值相关度得分。采用 ML 中传统的回归方法即可。</p>\n<p>　　（2）基于分类的算法</p>\n<p>　　　　此时，输出空间包含的是无序类别。对于二分类，SVM、LR 等均可；对于多分类，提升树等均可。</p>\n<p>　　（3）基于有序回归的算法</p>\n<p>　　　　此时，输出空间包含的是有序类别。通常是找到一个打分函数，然后用一系列阈值对得分进行分割，得到有序类别。采用 PRanking、基于 margin 的方法都可以。</p>\n<h2 id=\"1-3-缺陷\"><a href=\"#1-3-缺陷\" class=\"headerlink\" title=\"　　1.3 缺陷\"></a>　　1.3 缺陷</h2><p>　　　　回顾概述中提到的评估指标应该基于 query 和 position，</p>\n<ul>\n<li>ranking 追求的是排序结果，并不要求精确打分，只要有相对打分即可。</li>\n<li>pointwise 类方法并没有考虑同一个 query 对应的 docs 间的内部依赖性。一方面，导致输入空间内的样本不是 IID 的，违反了 ML 的基本假设，另一方面，没有充分利用这种样本间的结构性。其次，当不同 query 对应不同数量的 docs 时，整体 loss 将会被对应 docs 数量大的 query 组所支配，前面说过应该每组 query 都是等价的。</li>\n<li>损失函数也没有 model 到预测排序中的位置信息。因此，损失函数可能无意的过多强调那些不重要的 docs，即那些排序在后面对用户体验影响小的 doc。</li>\n</ul>\n<h2 id=\"1-4-改进\"><a href=\"#1-4-改进\" class=\"headerlink\" title=\"　　1.4 改进\"></a>　　1.4 改进</h2><p>　　　　如在 loss 中引入基于 query 的正则化因子的 RankCosine 方法。</p>\n<h1 id=\"2、Pairwise-Approach\"><a href=\"#2、Pairwise-Approach\" class=\"headerlink\" title=\"2、Pairwise Approach\"></a>2、Pairwise Approach</h1><h2 id=\"2-1-特点\"><a href=\"#2-1-特点\" class=\"headerlink\" title=\"　  2.1 特点\"></a>　  2.1 特点</h2><p>　　Pairwise 类方法，其 L2R 框架具有以下特征：</p>\n<ul>\n<li>输入空间中样本是（同一 query 对应的）两个 doc（和对应 query）构成的两个特征向量；</li>\n<li>输出空间中样本是 pairwise preference；</li>\n<li>假设空间中样本是二变量函数；</li>\n<li>损失函数评估 doc pair 的预测 preference 和真实 preference 之间差异。</li>\n</ul>\n<p>　　这里讨论下，关于人工标注标签怎么转换到 pairwise 类方法的输出空间：</p>\n<ol>\n<li>如果标注直接是相关度 s_j，则 doc pair (x_u,x_v) 的真实标签定义为 y_{u,v}=2*I_{s_u&gt;s_v}-1</li>\n<li>如果标注是 pairwise preference s_{u,v}，则 doc pair (x_u,x_v) 的真实标签定义为y_{u,v}=s_{u,v}</li>\n<li>如果标注是整体排序 π，则 doc pair (x_u,x_v) 的真实标签定义为y_{u,v}=2*I_{π_u,π_v}-1</li>\n</ol>\n<h2 id=\"2-2-基于二分类的算法\"><a href=\"#2-2-基于二分类的算法\" class=\"headerlink\" title=\"　　2.2 基于二分类的算法　　\"></a>　　2.2 基于二分类的算法　　</h2><p>　　Pairwise 类方法基本就是使用二分类算法即可。</p>\n<p>　　经典的算法有 基于 NN 的 SortNet，基于 NN 的 RankNet，基于 fidelity loss 的 FRank，基于 AdaBoost 的 RankBoost，基于 SVM 的 RankingSVM，基于提升树的 GBRank。</p>\n<h2 id=\"2-3-缺陷\"><a href=\"#2-3-缺陷\" class=\"headerlink\" title=\"　　2.3 缺陷\"></a>　　2.3 缺陷</h2><p>　　虽然 pairwise 类相较 pointwise 类 model 到一些 doc pair 间的相对顺序信息，但还是存在不少问题，回顾概述中提到的评估指标应该基于 query 和 position，</p>\n<ul>\n<li>如果人工标注给定的是第一种和第三种，即已包含多有序类别，那么转化成 pairwise preference 时必定会损失掉一些更细粒度的相关度标注信息。</li>\n<li>doc pair 的数量将是 doc 数量的二次，从而 pointwise 类方法就存在的 query 间 doc 数量的不平衡性将在 pairwise 类方法中进一步放大。</li>\n<li>pairwise 类方法相对 pointwise 类方法对噪声标注更敏感，即一个错误标注会引起多个 doc pair 标注错误。</li>\n<li>pairwise 类方法仅考虑了 doc pair 的相对位置，损失函数还是没有 model 到预测排序中的位置信息。</li>\n<li>pairwise 类方法也没有考虑同一个 query 对应的 doc pair 间的内部依赖性，即输入空间内的样本并不是 IID 的，违反了 ML 的基本假设，并且也没有充分利用这种样本间的结构性。</li>\n</ul>\n<h2 id=\"2-4-改进\"><a href=\"#2-4-改进\" class=\"headerlink\" title=\"　　2.4 改进\"></a>　　2.4 改进</h2><p>　　　pairwise 类方法也有一些尝试，去一定程度解决上述缺陷，比如：</p>\n<ul>\n<li>Multiple hyperplane ranker，主要针对前述第一个缺陷</li>\n<li>magnitude-preserving ranking，主要针对前述第一个缺陷</li>\n<li>IRSVM，主要针对前述第二个缺陷</li>\n<li>采用 Sigmoid 进行改进的 pairwise 方法，主要针对前述第三个缺陷</li>\n<li>P-norm push，主要针对前述第四个缺陷</li>\n<li>Ordered weighted average ranking，主要针对前述第四个缺陷</li>\n<li>LambdaRank，主要针对前述第四个缺陷</li>\n<li>Sparse ranker，主要针对前述第四个缺陷</li>\n</ul>\n<p> 　<strong><em>\\</em>3、Listwise Approach**</strong></p>\n<h2 id=\"3-1-特点\"><a href=\"#3-1-特点\" class=\"headerlink\" title=\"　　3.1 特点　　\"></a>　　3.1 特点　　</h2><p>　　Listwise 类方法，其 L2R 框架具有以下特征：</p>\n<ul>\n<li>输入空间中样本是（同一 query 对应的）所有 doc（与对应的 query）构成的多个特征向量（列表）；</li>\n<li>输出空间中样本是这些 doc（和对应 query）的相关度排序列表或者排列；</li>\n<li>假设空间中样本是多变量函数，对于 docs 得到其排列，实践中，通常是一个打分函数，根据打分函数对所有 docs 的打分进行排序得到 docs 相关度的排列；</li>\n<li>损失函数分成两类，一类是直接和评价指标相关的，还有一类不是直接相关的。具体后面介绍。</li>\n</ul>\n<p>　　这里讨论下，关于人工标注标签怎么转换到 listwise 类方法的输出空间：</p>\n<ol>\n<li>如果标注直接是相关度 s_j，则 doc set 的真实标签可以利用相关度 s_j 进行比较构造出排列</li>\n<li>如果标注是 pairwise preference s_{u,v}，则 doc set 的真实标签也可以利用所有 s_{u,v} 进行比较构造出排列</li>\n<li>如果标注是整体排序 π，则 doc set 则可以直接得到真实标签</li>\n</ol>\n<h2 id=\"3-2-根据损失函数构造方式的不同，listwise-类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。\"><a href=\"#3-2-根据损失函数构造方式的不同，listwise-类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。\" class=\"headerlink\" title=\"　　3.2 根据损失函数构造方式的不同，listwise 类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。\"></a>　　3.2 根据损失函数构造方式的不同，listwise 类可以分成两类直接基于评价指标的算法，间接基于评价指标的算法。</h2><p>　　　（1）直接基于评价指标的算法</p>\n<p>　　直接取优化 ranking 的评价指标，也算是 listwise 中最直观的方法。但这并不简单，因为前面说过评价指标都是离散不可微的，具体处理方式有这么几种：</p>\n<ul>\n<li>优化基于评价指标的 ranking error 的连续可微的近似，这种方法就可以直接应用已有的优化方法，如SoftRank，ApproximateRank，SmoothRank</li>\n<li>优化基于评价指标的 ranking error 的连续可微的上界，如 SVM-MAP，SVM-NDCG，PermuRank</li>\n<li>使用可以优化非平滑目标函数的优化技术，如 AdaRank，RankGP</li>\n</ul>\n<p>　　上述方法的优化目标都是直接和 ranking 的评价指标有关。现在来考虑一个概念，informativeness。通常认为一个更有信息量的指标，可以产生更有效的排序模型。而多层评价指标（NDCG）相较二元评价（AP）指标通常更富信息量。因此，有时虽然使用信息量更少的指标来评估模型，但仍然可以使用更富信息量的指标来作为 loss 进行模型训练。</p>\n<p>　　  （2）非直接基于评价指标的算法</p>\n<p>　　这里，不再使用和评价指标相关的 loss 来优化模型，而是设计能衡量模型输出与真实排列之间差异的 loss，如此获得的模型在评价指标上也能获得不错的性能。<br>　　经典的如 ，ListNet，ListMLE，StructRank，BoltzRank。</p>\n<h2 id=\"3-3-缺陷\"><a href=\"#3-3-缺陷\" class=\"headerlink\" title=\"　　3.3 缺陷\"></a>　　3.3 缺陷</h2><p>listwise 类相较 pointwise、pairwise 对 ranking 的 model 更自然，解决了 ranking 应该基于 query 和 position 问题。</p>\n<p>listwise 类存在的主要缺陷是：一些 ranking 算法需要基于排列来计算 loss，从而使得训练复杂度较高，如 ListNet和 BoltzRank。此外，位置信息并没有在 loss 中得到充分利用，可以考虑在 ListNet 和 ListMLE 的 loss 中引入位置折扣因子。</p>\n<h2 id=\"3-4-改进\"><a href=\"#3-4-改进\" class=\"headerlink\" title=\"　　3.4 改进\"></a>　　3.4 改进</h2><p>　　　pairwise 类方法也有一些尝试，去一定程度解决上述缺陷，比如：</p>\n<ul>\n<li>Multiple hyperplane ranker，主要针对前述第一个缺陷</li>\n<li>magnitude-preserving ranking，主要针对前述第一个缺陷</li>\n<li>IRSVM，主要针对前述第二个缺陷</li>\n<li>采用 Sigmoid 进行改进的 pairwise 方法，主要针对前述第三个缺陷</li>\n<li>P-norm push，主要针对前述第四个缺陷</li>\n<li>Ordered weighted average ranking，主要针对前述第四个缺陷</li>\n<li>LambdaRank，主要针对前述第四个缺陷</li>\n<li>Sparse ranker，主要针对前述第四个缺陷</li>\n</ul>\n<p>以上，<strong>这三大类方法主要区别在于损失函数。不同的损失函数决定了不同的模型学习过程和输入输出空间。</strong></p>\n<p>rating数据集：</p>\n<p>：所以关于这个问题，是要使用topN=1的对吗？并把指标改为 AUC和 NDCG对吗？</p>\n<p>——是这样，这个是一个rating数据集。</p>\n<p>如果是按照pairwise ranking的正确率，应该是我们的oPR和oMRR，PR和MAP都是没有用的。</p>\n<p>如果不按照pairwise，（按照listwise），就是AUC和NDCG，所以我让你算那个。</p>\n<p>当然还有就是按照数值，（按照pointwise），RMSE，不过我们的没法计算RMSE。</p>\n<p>：啊这个“不按照pairwise”，没太明白，还是按照原来的思路，用的 winner 和 loser 比较对呀。尤其在这个rating数据集，是每个比较对当成一个session，这点还是不变的吧？？</p>\n<p>——这不就是pairwise吗？</p>\n<p>rating是可以按照每个用户得到一个排序的，这是listwise，也就是算出NDCG，AUC的指标。</p>\n<p>还可以按照pointwise，每个分数预测的怎么样，就是RMSE。</p>\n<p>【Reference】</p>\n<p>1、<a href=\"https://stackoverflow.com/questions/17411986/what-is-the-difference-between-point-wise-and-pair-wise-ranking-in-machine-learn\">What is the difference between point-wise and pair-wise ranking in machine learning</a></p>\n<p>2、<a href=\"https://blog.csdn.net/lipengcn/article/details/80373744\">学习排序 Learning to Rank：从 pointwise 和 pairwise 到 listwise，经典模型与优缺点</a></p>\n<p>3、<a href=\"https://cloud.tencent.com/developer/news/135904\">基于 Pairwise 和 Listwise 的排序学习</a></p>"},{"title":"Deep Learning based Recommender System A Survey and New Perspectives","date":"2022-03-01T03:32:38.000Z","_content":"\nDeep Learning based Recommender System A Survey and New Perspectives\n\n<!-- more -->\n\n\n# 【PAPER COMMENT】Deep Learning based Recommender System: A Survey and New Perspectives\n\nhigh-profile conferences ： NIPS, ICML, ICLR,KDD,WWW, SIGIR, WSDM, RecSys,\n[TOC]\n## 2 OVERVIEW OF RECOMMENDER SYSTEMS AND DEEP LEARNING\n### 2.1 Rrecommendation System\n- recommendation system classification:\n  - CF(Interaction pnly): learning from user-item historical interactions, including explicit and implicit feedback\n  - Content based: learning from auxiliary information( feature engineering)\n  - Hybrid\n### 2.2 Deep Learning Techniques\ndeep learning: *deep representation*\n- `Multilayer Perceptiron(MLP)` :多层感知机 learning hierarchical feature representations\n- `Autoencoder(AE)`: bottleneck  layer (the middle-most layer) is used as a salient feature representation of the input\n  data.\n- `CNN`:It performs well in processing data with grid-like topology (网络拓扑结构的data)\n- `RNN,LSTM, GRU`\n-  *`Restricted Boltzman Machine(RBM)`*\n- `Adversarial Networks (AN)`\n- `Atentional Models`\n- `Deep Reinforcement Learning(DRL)`:consists of agents, environments, states, actions and rewards\n### 2.3 Why DNN for Recommendation\nthe sequential structure of session or click-logs are highly suitable for the inductive\nbiases provided by recurrent/convolutional models\n\n- Conten Bsed: When dealing with textual data (reviews, tweets ), image data (social posts, product images), CNNs/RNNs become indispensable neural building blocks.traditional alternative (designing modality-specific features etc.) becomes significantly less atractive and consequently \n- Interaction Only:  deep neural networks are justied when there is a huge amount of complexity or when there is\n*a large number of training instances* (用SGD的思想优化矩阵分解过程，可使用online数据，也可减少运算量，狭义的深度学习不适合）\n- ADVANTAGES：Nonlinear Transformation.（非线性拟合能力），Representation Learning（特征提取），Sequence Modelling(序列性特征)，Flexibility.(深度学习框架的模块化开发)\n## 3 DEEP LEARNING BASED RECOMMENDATION: STATE-OF-THE-ART\n### 3.1 Categories of deep learning based recommendation models\n- Recommendation with Neural Building Blocks：`MLP, AE, CNNs, RNNs, RBM, NADE,AM, AN and DRL based recommender system`。 *MLP* can easily model the non-linear interactions between users and items; *CNNs* are capable of extracting local and global representations from heterogeneous data(CNN 可用于异质的特征融合) sources such as textual and visual information; *RNNs*  enable the recommender system to model the temporal dynamics and sequential evolution of content information\n- Recommendation with Deep Hybrid Models:\n\n### 3.2 MLP\n- **Neural Extension of Traditional Recommendation Methods**：`Neural Network Matrix Factorization (NNMF)`  and `Neural Collaborative Filtering(NCF)`\n\n ![1557046025343](pics/1557046025343.png)\n\n- **Feature Representation Learning with MLP.** \n\n![1557046070689](pics/1557046070689.png)\n\n`wide & deep`wide 部分负责memorization，使用人工特征，deep部分负generalization（泛化），使用id特征（用户id，item id）。<https://blog.csdn.net/u010352603/article/details/80590129#22-wide-part>\n\n### 3.3 Auto encoder \n\n![1557048569001](pics/1557048569001.png)\n\n### 3.4 CNN\n\nTang et al. [143] presented sequential recommendation (with user identier) with CNNs, where two CNNs (hierarchical and vertical) are used to model the union-level sequential paerns and skip behaviors for sequence-aware recommendation\n\n### 3.5 RNN\n\n- Session-Based（基于会话的推荐）\n## 4 Future Rsearch Directions and Open Issues\n### 4.1 Joint Representation Learning from User and Item Content Information\n多种异质性信息的联合学习，如图片，text，side infomation \n### 4.2 Explainable Recommendation with Deep Leadrning\n1. to ussers: explainable prediction\n2. to practitioner(从业者)： explainable weight\n`attention model` ： action weights give insights about the inner work of the model. \nresearch dirextion:  `pre deep learning` \n### 4.3 Going Deeper for Recommendation\n### 4.4 Machine Reasoning for Recommendation\n`Machine Reasoning` 机理学习，通常用于文本和图像理解，很少用于推荐系统。担忧共通点，都是信息检索。interaction-only recommendation 跟`reasoning over meta-paths`很相似\n### 4.5 Cross Domain Recommendation with Deep Neural Networks\n融合多个场景特征，可解决冷启动\n`transfer learning`\n### 4.6 Deep Multi-Task Learning for Recommendation\n优点：\n(1) learning several tasks at a time can prevent overfing by generalizing the shared hidden representations;减少过拟合，增加泛化\n(2) auxiliary task provides interpretable output for explaining the recommendation;附加任务可增加可解释信\n(3) multi-task provides an implicit data augmentation for alleviating the sparsity problem.减轻稀疏问题\n### 4.7 Scalability of Deep Neural Networks for Recommendation\n改进方向：\n(1) incremental learning for non-stationary and streaming data such as large volume of incoming users\nand items; 使用流式数据增量训练\n(2) computation eficiency for high-dimensional tensors and multimedia data sources高维张量的计算效率\n(3) balancing of the model complexity and scalability with the exponential growth of parameters\n可能的解决方案：\n(1) the key idea is to train a `smaller student` model that absorbs knowledge from the large` teacher model`. \n(2) the high-dimensional input data can be compressed to compact embedding to reduce the space and computation time during model learning 压缩或者embedding稀疏编码\n\n### 4.8 The Field Needs Beer, More Unified and Harder Evaluation\n学术界没有统一的数据集，没有统一的评价标准，paper结果难以复现\n\n","source":"_posts/2_算法相关/[comment]Deep Learning based Recommender System A Survey and New Perspectives.md","raw":"---\ntitle: Deep Learning based Recommender System A Survey and New Perspectives\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nDeep Learning based Recommender System A Survey and New Perspectives\n\n<!-- more -->\n\n\n# 【PAPER COMMENT】Deep Learning based Recommender System: A Survey and New Perspectives\n\nhigh-profile conferences ： NIPS, ICML, ICLR,KDD,WWW, SIGIR, WSDM, RecSys,\n[TOC]\n## 2 OVERVIEW OF RECOMMENDER SYSTEMS AND DEEP LEARNING\n### 2.1 Rrecommendation System\n- recommendation system classification:\n  - CF(Interaction pnly): learning from user-item historical interactions, including explicit and implicit feedback\n  - Content based: learning from auxiliary information( feature engineering)\n  - Hybrid\n### 2.2 Deep Learning Techniques\ndeep learning: *deep representation*\n- `Multilayer Perceptiron(MLP)` :多层感知机 learning hierarchical feature representations\n- `Autoencoder(AE)`: bottleneck  layer (the middle-most layer) is used as a salient feature representation of the input\n  data.\n- `CNN`:It performs well in processing data with grid-like topology (网络拓扑结构的data)\n- `RNN,LSTM, GRU`\n-  *`Restricted Boltzman Machine(RBM)`*\n- `Adversarial Networks (AN)`\n- `Atentional Models`\n- `Deep Reinforcement Learning(DRL)`:consists of agents, environments, states, actions and rewards\n### 2.3 Why DNN for Recommendation\nthe sequential structure of session or click-logs are highly suitable for the inductive\nbiases provided by recurrent/convolutional models\n\n- Conten Bsed: When dealing with textual data (reviews, tweets ), image data (social posts, product images), CNNs/RNNs become indispensable neural building blocks.traditional alternative (designing modality-specific features etc.) becomes significantly less atractive and consequently \n- Interaction Only:  deep neural networks are justied when there is a huge amount of complexity or when there is\n*a large number of training instances* (用SGD的思想优化矩阵分解过程，可使用online数据，也可减少运算量，狭义的深度学习不适合）\n- ADVANTAGES：Nonlinear Transformation.（非线性拟合能力），Representation Learning（特征提取），Sequence Modelling(序列性特征)，Flexibility.(深度学习框架的模块化开发)\n## 3 DEEP LEARNING BASED RECOMMENDATION: STATE-OF-THE-ART\n### 3.1 Categories of deep learning based recommendation models\n- Recommendation with Neural Building Blocks：`MLP, AE, CNNs, RNNs, RBM, NADE,AM, AN and DRL based recommender system`。 *MLP* can easily model the non-linear interactions between users and items; *CNNs* are capable of extracting local and global representations from heterogeneous data(CNN 可用于异质的特征融合) sources such as textual and visual information; *RNNs*  enable the recommender system to model the temporal dynamics and sequential evolution of content information\n- Recommendation with Deep Hybrid Models:\n\n### 3.2 MLP\n- **Neural Extension of Traditional Recommendation Methods**：`Neural Network Matrix Factorization (NNMF)`  and `Neural Collaborative Filtering(NCF)`\n\n ![1557046025343](pics/1557046025343.png)\n\n- **Feature Representation Learning with MLP.** \n\n![1557046070689](pics/1557046070689.png)\n\n`wide & deep`wide 部分负责memorization，使用人工特征，deep部分负generalization（泛化），使用id特征（用户id，item id）。<https://blog.csdn.net/u010352603/article/details/80590129#22-wide-part>\n\n### 3.3 Auto encoder \n\n![1557048569001](pics/1557048569001.png)\n\n### 3.4 CNN\n\nTang et al. [143] presented sequential recommendation (with user identier) with CNNs, where two CNNs (hierarchical and vertical) are used to model the union-level sequential paerns and skip behaviors for sequence-aware recommendation\n\n### 3.5 RNN\n\n- Session-Based（基于会话的推荐）\n## 4 Future Rsearch Directions and Open Issues\n### 4.1 Joint Representation Learning from User and Item Content Information\n多种异质性信息的联合学习，如图片，text，side infomation \n### 4.2 Explainable Recommendation with Deep Leadrning\n1. to ussers: explainable prediction\n2. to practitioner(从业者)： explainable weight\n`attention model` ： action weights give insights about the inner work of the model. \nresearch dirextion:  `pre deep learning` \n### 4.3 Going Deeper for Recommendation\n### 4.4 Machine Reasoning for Recommendation\n`Machine Reasoning` 机理学习，通常用于文本和图像理解，很少用于推荐系统。担忧共通点，都是信息检索。interaction-only recommendation 跟`reasoning over meta-paths`很相似\n### 4.5 Cross Domain Recommendation with Deep Neural Networks\n融合多个场景特征，可解决冷启动\n`transfer learning`\n### 4.6 Deep Multi-Task Learning for Recommendation\n优点：\n(1) learning several tasks at a time can prevent overfing by generalizing the shared hidden representations;减少过拟合，增加泛化\n(2) auxiliary task provides interpretable output for explaining the recommendation;附加任务可增加可解释信\n(3) multi-task provides an implicit data augmentation for alleviating the sparsity problem.减轻稀疏问题\n### 4.7 Scalability of Deep Neural Networks for Recommendation\n改进方向：\n(1) incremental learning for non-stationary and streaming data such as large volume of incoming users\nand items; 使用流式数据增量训练\n(2) computation eficiency for high-dimensional tensors and multimedia data sources高维张量的计算效率\n(3) balancing of the model complexity and scalability with the exponential growth of parameters\n可能的解决方案：\n(1) the key idea is to train a `smaller student` model that absorbs knowledge from the large` teacher model`. \n(2) the high-dimensional input data can be compressed to compact embedding to reduce the space and computation time during model learning 压缩或者embedding稀疏编码\n\n### 4.8 The Field Needs Beer, More Unified and Harder Evaluation\n学术界没有统一的数据集，没有统一的评价标准，paper结果难以复现\n\n","slug":"2_算法相关/[comment]Deep Learning based Recommender System A Survey and New Perspectives","published":1,"updated":"2022-03-01T04:02:12.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly47000c8s3212ls4zsc","content":"<p>Deep Learning based Recommender System A Survey and New Perspectives</p>\n<span id=\"more\"></span>\n<h1 id=\"【PAPER-COMMENT】Deep-Learning-based-Recommender-System-A-Survey-and-New-Perspectives\"><a href=\"#【PAPER-COMMENT】Deep-Learning-based-Recommender-System-A-Survey-and-New-Perspectives\" class=\"headerlink\" title=\"【PAPER COMMENT】Deep Learning based Recommender System: A Survey and New Perspectives\"></a>【PAPER COMMENT】Deep Learning based Recommender System: A Survey and New Perspectives</h1><p>high-profile conferences ： NIPS, ICML, ICLR,KDD,WWW, SIGIR, WSDM, RecSys,<br>[TOC]</p>\n<h2 id=\"2-OVERVIEW-OF-RECOMMENDER-SYSTEMS-AND-DEEP-LEARNING\"><a href=\"#2-OVERVIEW-OF-RECOMMENDER-SYSTEMS-AND-DEEP-LEARNING\" class=\"headerlink\" title=\"2 OVERVIEW OF RECOMMENDER SYSTEMS AND DEEP LEARNING\"></a>2 OVERVIEW OF RECOMMENDER SYSTEMS AND DEEP LEARNING</h2><h3 id=\"2-1-Rrecommendation-System\"><a href=\"#2-1-Rrecommendation-System\" class=\"headerlink\" title=\"2.1 Rrecommendation System\"></a>2.1 Rrecommendation System</h3><ul>\n<li>recommendation system classification:<ul>\n<li>CF(Interaction pnly): learning from user-item historical interactions, including explicit and implicit feedback</li>\n<li>Content based: learning from auxiliary information( feature engineering)</li>\n<li>Hybrid<h3 id=\"2-2-Deep-Learning-Techniques\"><a href=\"#2-2-Deep-Learning-Techniques\" class=\"headerlink\" title=\"2.2 Deep Learning Techniques\"></a>2.2 Deep Learning Techniques</h3>deep learning: <em>deep representation</em></li>\n</ul>\n</li>\n<li><code>Multilayer Perceptiron(MLP)</code> :多层感知机 learning hierarchical feature representations</li>\n<li><code>Autoencoder(AE)</code>: bottleneck  layer (the middle-most layer) is used as a salient feature representation of the input<br>data.</li>\n<li><code>CNN</code>:It performs well in processing data with grid-like topology (网络拓扑结构的data)</li>\n<li><code>RNN,LSTM, GRU</code></li>\n<li><em><code>Restricted Boltzman Machine(RBM)</code></em></li>\n<li><code>Adversarial Networks (AN)</code></li>\n<li><code>Atentional Models</code></li>\n<li><p><code>Deep Reinforcement Learning(DRL)</code>:consists of agents, environments, states, actions and rewards</p>\n<h3 id=\"2-3-Why-DNN-for-Recommendation\"><a href=\"#2-3-Why-DNN-for-Recommendation\" class=\"headerlink\" title=\"2.3 Why DNN for Recommendation\"></a>2.3 Why DNN for Recommendation</h3><p>the sequential structure of session or click-logs are highly suitable for the inductive<br>biases provided by recurrent/convolutional models</p>\n</li>\n<li><p>Conten Bsed: When dealing with textual data (reviews, tweets ), image data (social posts, product images), CNNs/RNNs become indispensable neural building blocks.traditional alternative (designing modality-specific features etc.) becomes significantly less atractive and consequently </p>\n</li>\n<li>Interaction Only:  deep neural networks are justied when there is a huge amount of complexity or when there is<br><em>a large number of training instances</em> (用SGD的思想优化矩阵分解过程，可使用online数据，也可减少运算量，狭义的深度学习不适合）</li>\n<li>ADVANTAGES：Nonlinear Transformation.（非线性拟合能力），Representation Learning（特征提取），Sequence Modelling(序列性特征)，Flexibility.(深度学习框架的模块化开发)<h2 id=\"3-DEEP-LEARNING-BASED-RECOMMENDATION-STATE-OF-THE-ART\"><a href=\"#3-DEEP-LEARNING-BASED-RECOMMENDATION-STATE-OF-THE-ART\" class=\"headerlink\" title=\"3 DEEP LEARNING BASED RECOMMENDATION: STATE-OF-THE-ART\"></a>3 DEEP LEARNING BASED RECOMMENDATION: STATE-OF-THE-ART</h2><h3 id=\"3-1-Categories-of-deep-learning-based-recommendation-models\"><a href=\"#3-1-Categories-of-deep-learning-based-recommendation-models\" class=\"headerlink\" title=\"3.1 Categories of deep learning based recommendation models\"></a>3.1 Categories of deep learning based recommendation models</h3></li>\n<li>Recommendation with Neural Building Blocks：<code>MLP, AE, CNNs, RNNs, RBM, NADE,AM, AN and DRL based recommender system</code>。 <em>MLP</em> can easily model the non-linear interactions between users and items; <em>CNNs</em> are capable of extracting local and global representations from heterogeneous data(CNN 可用于异质的特征融合) sources such as textual and visual information; <em>RNNs</em>  enable the recommender system to model the temporal dynamics and sequential evolution of content information</li>\n<li>Recommendation with Deep Hybrid Models:</li>\n</ul>\n<h3 id=\"3-2-MLP\"><a href=\"#3-2-MLP\" class=\"headerlink\" title=\"3.2 MLP\"></a>3.2 MLP</h3><ul>\n<li><p><strong>Neural Extension of Traditional Recommendation Methods</strong>：<code>Neural Network Matrix Factorization (NNMF)</code>  and <code>Neural Collaborative Filtering(NCF)</code></p>\n\n</li>\n<li><p><strong>Feature Representation Learning with MLP.</strong> </p>\n</li>\n</ul>\n\n<p><code>wide &amp; deep</code>wide 部分负责memorization，使用人工特征，deep部分负generalization（泛化），使用id特征（用户id，item id）。<a href=\"https://blog.csdn.net/u010352603/article/details/80590129#22-wide-part\">https://blog.csdn.net/u010352603/article/details/80590129#22-wide-part</a></p>\n<h3 id=\"3-3-Auto-encoder\"><a href=\"#3-3-Auto-encoder\" class=\"headerlink\" title=\"3.3 Auto encoder\"></a>3.3 Auto encoder</h3>\n<h3 id=\"3-4-CNN\"><a href=\"#3-4-CNN\" class=\"headerlink\" title=\"3.4 CNN\"></a>3.4 CNN</h3><p>Tang et al. [143] presented sequential recommendation (with user identier) with CNNs, where two CNNs (hierarchical and vertical) are used to model the union-level sequential paerns and skip behaviors for sequence-aware recommendation</p>\n<h3 id=\"3-5-RNN\"><a href=\"#3-5-RNN\" class=\"headerlink\" title=\"3.5 RNN\"></a>3.5 RNN</h3><ul>\n<li>Session-Based（基于会话的推荐）<h2 id=\"4-Future-Rsearch-Directions-and-Open-Issues\"><a href=\"#4-Future-Rsearch-Directions-and-Open-Issues\" class=\"headerlink\" title=\"4 Future Rsearch Directions and Open Issues\"></a>4 Future Rsearch Directions and Open Issues</h2><h3 id=\"4-1-Joint-Representation-Learning-from-User-and-Item-Content-Information\"><a href=\"#4-1-Joint-Representation-Learning-from-User-and-Item-Content-Information\" class=\"headerlink\" title=\"4.1 Joint Representation Learning from User and Item Content Information\"></a>4.1 Joint Representation Learning from User and Item Content Information</h3>多种异质性信息的联合学习，如图片，text，side infomation <h3 id=\"4-2-Explainable-Recommendation-with-Deep-Leadrning\"><a href=\"#4-2-Explainable-Recommendation-with-Deep-Leadrning\" class=\"headerlink\" title=\"4.2 Explainable Recommendation with Deep Leadrning\"></a>4.2 Explainable Recommendation with Deep Leadrning</h3></li>\n</ul>\n<ol>\n<li>to ussers: explainable prediction</li>\n<li>to practitioner(从业者)： explainable weight<br><code>attention model</code> ： action weights give insights about the inner work of the model.<br>research dirextion:  <code>pre deep learning</code> <h3 id=\"4-3-Going-Deeper-for-Recommendation\"><a href=\"#4-3-Going-Deeper-for-Recommendation\" class=\"headerlink\" title=\"4.3 Going Deeper for Recommendation\"></a>4.3 Going Deeper for Recommendation</h3><h3 id=\"4-4-Machine-Reasoning-for-Recommendation\"><a href=\"#4-4-Machine-Reasoning-for-Recommendation\" class=\"headerlink\" title=\"4.4 Machine Reasoning for Recommendation\"></a>4.4 Machine Reasoning for Recommendation</h3><code>Machine Reasoning</code> 机理学习，通常用于文本和图像理解，很少用于推荐系统。担忧共通点，都是信息检索。interaction-only recommendation 跟<code>reasoning over meta-paths</code>很相似<h3 id=\"4-5-Cross-Domain-Recommendation-with-Deep-Neural-Networks\"><a href=\"#4-5-Cross-Domain-Recommendation-with-Deep-Neural-Networks\" class=\"headerlink\" title=\"4.5 Cross Domain Recommendation with Deep Neural Networks\"></a>4.5 Cross Domain Recommendation with Deep Neural Networks</h3>融合多个场景特征，可解决冷启动<br><code>transfer learning</code><h3 id=\"4-6-Deep-Multi-Task-Learning-for-Recommendation\"><a href=\"#4-6-Deep-Multi-Task-Learning-for-Recommendation\" class=\"headerlink\" title=\"4.6 Deep Multi-Task Learning for Recommendation\"></a>4.6 Deep Multi-Task Learning for Recommendation</h3>优点：<br>(1) learning several tasks at a time can prevent overfing by generalizing the shared hidden representations;减少过拟合，增加泛化<br>(2) auxiliary task provides interpretable output for explaining the recommendation;附加任务可增加可解释信<br>(3) multi-task provides an implicit data augmentation for alleviating the sparsity problem.减轻稀疏问题<h3 id=\"4-7-Scalability-of-Deep-Neural-Networks-for-Recommendation\"><a href=\"#4-7-Scalability-of-Deep-Neural-Networks-for-Recommendation\" class=\"headerlink\" title=\"4.7 Scalability of Deep Neural Networks for Recommendation\"></a>4.7 Scalability of Deep Neural Networks for Recommendation</h3>改进方向：<br>(1) incremental learning for non-stationary and streaming data such as large volume of incoming users<br>and items; 使用流式数据增量训练<br>(2) computation eficiency for high-dimensional tensors and multimedia data sources高维张量的计算效率<br>(3) balancing of the model complexity and scalability with the exponential growth of parameters<br>可能的解决方案：<br>(1) the key idea is to train a <code>smaller student</code> model that absorbs knowledge from the large<code>teacher model</code>.<br>(2) the high-dimensional input data can be compressed to compact embedding to reduce the space and computation time during model learning 压缩或者embedding稀疏编码</li>\n</ol>\n<h3 id=\"4-8-The-Field-Needs-Beer-More-Unified-and-Harder-Evaluation\"><a href=\"#4-8-The-Field-Needs-Beer-More-Unified-and-Harder-Evaluation\" class=\"headerlink\" title=\"4.8 The Field Needs Beer, More Unified and Harder Evaluation\"></a>4.8 The Field Needs Beer, More Unified and Harder Evaluation</h3><p>学术界没有统一的数据集，没有统一的评价标准，paper结果难以复现</p>\n","site":{"data":{}},"excerpt":"<p>Deep Learning based Recommender System A Survey and New Perspectives</p>","more":"<h1 id=\"【PAPER-COMMENT】Deep-Learning-based-Recommender-System-A-Survey-and-New-Perspectives\"><a href=\"#【PAPER-COMMENT】Deep-Learning-based-Recommender-System-A-Survey-and-New-Perspectives\" class=\"headerlink\" title=\"【PAPER COMMENT】Deep Learning based Recommender System: A Survey and New Perspectives\"></a>【PAPER COMMENT】Deep Learning based Recommender System: A Survey and New Perspectives</h1><p>high-profile conferences ： NIPS, ICML, ICLR,KDD,WWW, SIGIR, WSDM, RecSys,<br>[TOC]</p>\n<h2 id=\"2-OVERVIEW-OF-RECOMMENDER-SYSTEMS-AND-DEEP-LEARNING\"><a href=\"#2-OVERVIEW-OF-RECOMMENDER-SYSTEMS-AND-DEEP-LEARNING\" class=\"headerlink\" title=\"2 OVERVIEW OF RECOMMENDER SYSTEMS AND DEEP LEARNING\"></a>2 OVERVIEW OF RECOMMENDER SYSTEMS AND DEEP LEARNING</h2><h3 id=\"2-1-Rrecommendation-System\"><a href=\"#2-1-Rrecommendation-System\" class=\"headerlink\" title=\"2.1 Rrecommendation System\"></a>2.1 Rrecommendation System</h3><ul>\n<li>recommendation system classification:<ul>\n<li>CF(Interaction pnly): learning from user-item historical interactions, including explicit and implicit feedback</li>\n<li>Content based: learning from auxiliary information( feature engineering)</li>\n<li>Hybrid<h3 id=\"2-2-Deep-Learning-Techniques\"><a href=\"#2-2-Deep-Learning-Techniques\" class=\"headerlink\" title=\"2.2 Deep Learning Techniques\"></a>2.2 Deep Learning Techniques</h3>deep learning: <em>deep representation</em></li>\n</ul>\n</li>\n<li><code>Multilayer Perceptiron(MLP)</code> :多层感知机 learning hierarchical feature representations</li>\n<li><code>Autoencoder(AE)</code>: bottleneck  layer (the middle-most layer) is used as a salient feature representation of the input<br>data.</li>\n<li><code>CNN</code>:It performs well in processing data with grid-like topology (网络拓扑结构的data)</li>\n<li><code>RNN,LSTM, GRU</code></li>\n<li><em><code>Restricted Boltzman Machine(RBM)</code></em></li>\n<li><code>Adversarial Networks (AN)</code></li>\n<li><code>Atentional Models</code></li>\n<li><p><code>Deep Reinforcement Learning(DRL)</code>:consists of agents, environments, states, actions and rewards</p>\n<h3 id=\"2-3-Why-DNN-for-Recommendation\"><a href=\"#2-3-Why-DNN-for-Recommendation\" class=\"headerlink\" title=\"2.3 Why DNN for Recommendation\"></a>2.3 Why DNN for Recommendation</h3><p>the sequential structure of session or click-logs are highly suitable for the inductive<br>biases provided by recurrent/convolutional models</p>\n</li>\n<li><p>Conten Bsed: When dealing with textual data (reviews, tweets ), image data (social posts, product images), CNNs/RNNs become indispensable neural building blocks.traditional alternative (designing modality-specific features etc.) becomes significantly less atractive and consequently </p>\n</li>\n<li>Interaction Only:  deep neural networks are justied when there is a huge amount of complexity or when there is<br><em>a large number of training instances</em> (用SGD的思想优化矩阵分解过程，可使用online数据，也可减少运算量，狭义的深度学习不适合）</li>\n<li>ADVANTAGES：Nonlinear Transformation.（非线性拟合能力），Representation Learning（特征提取），Sequence Modelling(序列性特征)，Flexibility.(深度学习框架的模块化开发)<h2 id=\"3-DEEP-LEARNING-BASED-RECOMMENDATION-STATE-OF-THE-ART\"><a href=\"#3-DEEP-LEARNING-BASED-RECOMMENDATION-STATE-OF-THE-ART\" class=\"headerlink\" title=\"3 DEEP LEARNING BASED RECOMMENDATION: STATE-OF-THE-ART\"></a>3 DEEP LEARNING BASED RECOMMENDATION: STATE-OF-THE-ART</h2><h3 id=\"3-1-Categories-of-deep-learning-based-recommendation-models\"><a href=\"#3-1-Categories-of-deep-learning-based-recommendation-models\" class=\"headerlink\" title=\"3.1 Categories of deep learning based recommendation models\"></a>3.1 Categories of deep learning based recommendation models</h3></li>\n<li>Recommendation with Neural Building Blocks：<code>MLP, AE, CNNs, RNNs, RBM, NADE,AM, AN and DRL based recommender system</code>。 <em>MLP</em> can easily model the non-linear interactions between users and items; <em>CNNs</em> are capable of extracting local and global representations from heterogeneous data(CNN 可用于异质的特征融合) sources such as textual and visual information; <em>RNNs</em>  enable the recommender system to model the temporal dynamics and sequential evolution of content information</li>\n<li>Recommendation with Deep Hybrid Models:</li>\n</ul>\n<h3 id=\"3-2-MLP\"><a href=\"#3-2-MLP\" class=\"headerlink\" title=\"3.2 MLP\"></a>3.2 MLP</h3><ul>\n<li><p><strong>Neural Extension of Traditional Recommendation Methods</strong>：<code>Neural Network Matrix Factorization (NNMF)</code>  and <code>Neural Collaborative Filtering(NCF)</code></p>\n\n</li>\n<li><p><strong>Feature Representation Learning with MLP.</strong> </p>\n</li>\n</ul>\n\n<p><code>wide &amp; deep</code>wide 部分负责memorization，使用人工特征，deep部分负generalization（泛化），使用id特征（用户id，item id）。<a href=\"https://blog.csdn.net/u010352603/article/details/80590129#22-wide-part\">https://blog.csdn.net/u010352603/article/details/80590129#22-wide-part</a></p>\n<h3 id=\"3-3-Auto-encoder\"><a href=\"#3-3-Auto-encoder\" class=\"headerlink\" title=\"3.3 Auto encoder\"></a>3.3 Auto encoder</h3>\n<h3 id=\"3-4-CNN\"><a href=\"#3-4-CNN\" class=\"headerlink\" title=\"3.4 CNN\"></a>3.4 CNN</h3><p>Tang et al. [143] presented sequential recommendation (with user identier) with CNNs, where two CNNs (hierarchical and vertical) are used to model the union-level sequential paerns and skip behaviors for sequence-aware recommendation</p>\n<h3 id=\"3-5-RNN\"><a href=\"#3-5-RNN\" class=\"headerlink\" title=\"3.5 RNN\"></a>3.5 RNN</h3><ul>\n<li>Session-Based（基于会话的推荐）<h2 id=\"4-Future-Rsearch-Directions-and-Open-Issues\"><a href=\"#4-Future-Rsearch-Directions-and-Open-Issues\" class=\"headerlink\" title=\"4 Future Rsearch Directions and Open Issues\"></a>4 Future Rsearch Directions and Open Issues</h2><h3 id=\"4-1-Joint-Representation-Learning-from-User-and-Item-Content-Information\"><a href=\"#4-1-Joint-Representation-Learning-from-User-and-Item-Content-Information\" class=\"headerlink\" title=\"4.1 Joint Representation Learning from User and Item Content Information\"></a>4.1 Joint Representation Learning from User and Item Content Information</h3>多种异质性信息的联合学习，如图片，text，side infomation <h3 id=\"4-2-Explainable-Recommendation-with-Deep-Leadrning\"><a href=\"#4-2-Explainable-Recommendation-with-Deep-Leadrning\" class=\"headerlink\" title=\"4.2 Explainable Recommendation with Deep Leadrning\"></a>4.2 Explainable Recommendation with Deep Leadrning</h3></li>\n</ul>\n<ol>\n<li>to ussers: explainable prediction</li>\n<li>to practitioner(从业者)： explainable weight<br><code>attention model</code> ： action weights give insights about the inner work of the model.<br>research dirextion:  <code>pre deep learning</code> <h3 id=\"4-3-Going-Deeper-for-Recommendation\"><a href=\"#4-3-Going-Deeper-for-Recommendation\" class=\"headerlink\" title=\"4.3 Going Deeper for Recommendation\"></a>4.3 Going Deeper for Recommendation</h3><h3 id=\"4-4-Machine-Reasoning-for-Recommendation\"><a href=\"#4-4-Machine-Reasoning-for-Recommendation\" class=\"headerlink\" title=\"4.4 Machine Reasoning for Recommendation\"></a>4.4 Machine Reasoning for Recommendation</h3><code>Machine Reasoning</code> 机理学习，通常用于文本和图像理解，很少用于推荐系统。担忧共通点，都是信息检索。interaction-only recommendation 跟<code>reasoning over meta-paths</code>很相似<h3 id=\"4-5-Cross-Domain-Recommendation-with-Deep-Neural-Networks\"><a href=\"#4-5-Cross-Domain-Recommendation-with-Deep-Neural-Networks\" class=\"headerlink\" title=\"4.5 Cross Domain Recommendation with Deep Neural Networks\"></a>4.5 Cross Domain Recommendation with Deep Neural Networks</h3>融合多个场景特征，可解决冷启动<br><code>transfer learning</code><h3 id=\"4-6-Deep-Multi-Task-Learning-for-Recommendation\"><a href=\"#4-6-Deep-Multi-Task-Learning-for-Recommendation\" class=\"headerlink\" title=\"4.6 Deep Multi-Task Learning for Recommendation\"></a>4.6 Deep Multi-Task Learning for Recommendation</h3>优点：<br>(1) learning several tasks at a time can prevent overfing by generalizing the shared hidden representations;减少过拟合，增加泛化<br>(2) auxiliary task provides interpretable output for explaining the recommendation;附加任务可增加可解释信<br>(3) multi-task provides an implicit data augmentation for alleviating the sparsity problem.减轻稀疏问题<h3 id=\"4-7-Scalability-of-Deep-Neural-Networks-for-Recommendation\"><a href=\"#4-7-Scalability-of-Deep-Neural-Networks-for-Recommendation\" class=\"headerlink\" title=\"4.7 Scalability of Deep Neural Networks for Recommendation\"></a>4.7 Scalability of Deep Neural Networks for Recommendation</h3>改进方向：<br>(1) incremental learning for non-stationary and streaming data such as large volume of incoming users<br>and items; 使用流式数据增量训练<br>(2) computation eficiency for high-dimensional tensors and multimedia data sources高维张量的计算效率<br>(3) balancing of the model complexity and scalability with the exponential growth of parameters<br>可能的解决方案：<br>(1) the key idea is to train a <code>smaller student</code> model that absorbs knowledge from the large<code>teacher model</code>.<br>(2) the high-dimensional input data can be compressed to compact embedding to reduce the space and computation time during model learning 压缩或者embedding稀疏编码</li>\n</ol>\n<h3 id=\"4-8-The-Field-Needs-Beer-More-Unified-and-Harder-Evaluation\"><a href=\"#4-8-The-Field-Needs-Beer-More-Unified-and-Harder-Evaluation\" class=\"headerlink\" title=\"4.8 The Field Needs Beer, More Unified and Harder Evaluation\"></a>4.8 The Field Needs Beer, More Unified and Harder Evaluation</h3><p>学术界没有统一的数据集，没有统一的评价标准，paper结果难以复现</p>"},{"title":"Exact-K Recommendation","date":"2022-03-01T03:32:38.000Z","_content":"\nExact-K Recommendation\n\n<!-- more -->\n\n\nExact-K Recommendation via Maximal Clique Optimization\n\n# 问题描述\n\n> 1. 传统的top k推荐基于的假设是要把点击概率最高的商品排在前面\n> 2. exact-K目标是通过排序优化K个商品的联合概率\n\n","source":"_posts/2_算法相关/[comment]Exact-K Recommendation.md","raw":"---\ntitle: Exact-K Recommendation\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nExact-K Recommendation\n\n<!-- more -->\n\n\nExact-K Recommendation via Maximal Clique Optimization\n\n# 问题描述\n\n> 1. 传统的top k推荐基于的假设是要把点击概率最高的商品排在前面\n> 2. exact-K目标是通过排序优化K个商品的联合概率\n\n","slug":"2_算法相关/[comment]Exact-K Recommendation","published":1,"updated":"2022-03-01T04:02:16.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly47000d8s328ccy2p03","content":"<p>Exact-K Recommendation</p>\n<span id=\"more\"></span>\n<p>Exact-K Recommendation via Maximal Clique Optimization</p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><blockquote>\n<ol>\n<li>传统的top k推荐基于的假设是要把点击概率最高的商品排在前面</li>\n<li>exact-K目标是通过排序优化K个商品的联合概率</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Exact-K Recommendation</p>","more":"<p>Exact-K Recommendation via Maximal Clique Optimization</p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><blockquote>\n<ol>\n<li>传统的top k推荐基于的假设是要把点击概率最高的商品排在前面</li>\n<li>exact-K目标是通过排序优化K个商品的联合概率</li>\n</ol>\n</blockquote>"},{"title":"XGBOOST文献","date":"2022-03-01T03:32:38.000Z","_content":"\nXGBOOST文献\n\n<!-- more -->\n\n\n# XGBOOST文献笔记\n\nhttp://delivery.acm.org/10.1145/2940000/2939785/p785-chen.pdf?ip=111.200.23.13&id=2939785&acc=CHORUS&key=4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E6D218144511F3437&__acm__=1536805596_740dd7db7cc67a94ca9b28d83bd32678\n\n\n\n## 决策相关知识点\n\n- 输入特征是连续特征&离散特征\n\n  连续特征可直接输入，算法处理时暴力选择改特征划分点 或者按照该特征值的分布选择候选划分点\n\n  离散特征要进过one-hot后输入\n\n- 输出是连续值（回归）&离散值（分类）\n\n  回归：损失函数用均方误差\n\n  分类：损失函数用基尼值之类的\n\n- 如何数值计算导数\n\n  $\\frac{\\partial J}{\\partial \\theta} = \\lim_{\\varepsilon \\to 0} \\frac{J(\\theta + \\varepsilon) - J(\\theta - \\varepsilon)}{2 \\varepsilon} $\n\n# XGBoost: A Scalable Tree Boosting System \n\n- 字母解释\n\n$n:样本数 \\\\  m: 特征维度 \\\\  K:数的颗数 \\\\ D: 样本空间 \\\\ F:cart树空间 \\\\q:每棵树的结构\\\\ T：每棵树的叶子 \\\\ w:叶子权重 $\n\n## 与gradient boosting相比改进的地方\n\n> 1.  增加正则项，防止过拟合。类似的方法用在RGF上\n> 2.  算每一颗数的loss时用$L_{t}=L_{t-1}+\\Delta L\\\\  $，$\\Delta L用L对\\hat{y}_{t}$的二阶泰勒展开代替\n> 3. 优化时逐棵树优化，每棵树只在上一棵树的基础上分裂一次\n> 4.  叶子节点分裂时先对样本进行排序，分箱，再按分箱值进行分裂并筛选合适的分裂值。这样一方面能减少运算量，一方面可减轻过拟合, 为了保证每个分箱产生的loss均一，用残差的二阶导作为分箱依据（Weighted Quantile）\n\n##损失函数\n\n$\\hat{y_i}=\\sum_{i=1}^{K}w_i$\n\n![1565508976037]([comment]XGBOOST文献.assets/1565508976037.png)\n\n当正则项为0时，目标函数就跟传统的gradient tree boosting一样\n\n##优化\n\n低t轮迭代时（第t棵树），对于第i个样本，用一阶倒数近似就是$y_i^{t}=y_i^{t-1}+f_t(x_i)$，损失函数就是\n\n![1565509483053]([comment]XGBOOST文献.assets/1565509483053.png)\n\n第二棵树开始，每棵树预测残差\n\n![1565511169038]([comment]XGBOOST文献.assets/1565511169038.png)\n\n![1565511208880]([comment]XGBOOST文献.assets/1565511208880.png)\n\n\n\n![1565752607321]([comment]XGBOOST文献.assets/1565752607321.png)\n\n只要确定了树结构，二阶近似有以上的最优解。但实际上无法确定树结构，即无法全局优化，所以采用贪婪地逐个叶子优化：\n\n![1565515181975]([comment]XGBOOST文献.assets/1565515181975.png)\n\n其中$L_{split}$是一个节点分裂前的loss-分裂后的loss，$L_{split}$越大越好\n\n### 伪代码\n\n![1565591363136]([comment]XGBOOST文献.assets/1565591363136.png)\n\n![1565591743658]([comment]XGBOOST文献.assets/1565591743658.png)\n\n解读：\n\n首先对将全量样本分别按照各个特征排序，分箱（百分位数），箱值即为之后树分裂会用到的值；\n\n假设前一颗数有两个叶子节点，生成第三棵树时：\n\n1. 对第一个叶子节点上的sample\n   1. 计算各个分箱值时score，取使得score最大的分箱值\n   2.  同样的方法遍历所有特征，得到各个特征在第一个节点上的最佳分裂值及score\n   3.  选择score最大的特征及对应分分裂值\n2. 同样的方式得到第二个叶子节点上的sample最佳分裂特征和分裂值\n3. 比较score，选择score最大的节点及特征及分裂值\n\n>分箱方法有两个：global variant 和 local variant\n>\n>global variant是全局分箱，计算量少，但需要数据量大，分箱粒度大，不适合太深的树\n>\n>local variant是每个叶子节点上的数据进行分箱\n\n## weighted quantile\n\n![1565752490760]([comment]XGBOOST文献.assets/1565752490760.png)\n\n解读：\n\n不是按特征值大小排序，按百分位分箱，而是构造特征排序函数r，其中h是残差在特征x上的二阶导。\n\n推导：\n\n![1565752698105]([comment]XGBOOST文献.assets/1565752698105.png)\n\nloss函数$\\sum_{i=1}^n=\\sum_{k=1}^k\\sum_{i\\in z_j}\\frac{h_i}{2}（f_t-\\frac{g_i}{h_i}）+  ....$\n\nrankz函数$r_k$的构造可以保证每个分箱上的loss的高阶系数是均一的，这样能加速优化\n\n## Sparsity-aware Split Finding(空值)\n\n处理每一个分支时默认空值朝左或者朝右，找到最合适的方向\n\n![1565762051024]([comment]XGBOOST文献.assets/1565762051024.png)","source":"_posts/2_算法相关/[comment]XGBOOST文献.md","raw":"---\ntitle: XGBOOST文献\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nXGBOOST文献\n\n<!-- more -->\n\n\n# XGBOOST文献笔记\n\nhttp://delivery.acm.org/10.1145/2940000/2939785/p785-chen.pdf?ip=111.200.23.13&id=2939785&acc=CHORUS&key=4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E6D218144511F3437&__acm__=1536805596_740dd7db7cc67a94ca9b28d83bd32678\n\n\n\n## 决策相关知识点\n\n- 输入特征是连续特征&离散特征\n\n  连续特征可直接输入，算法处理时暴力选择改特征划分点 或者按照该特征值的分布选择候选划分点\n\n  离散特征要进过one-hot后输入\n\n- 输出是连续值（回归）&离散值（分类）\n\n  回归：损失函数用均方误差\n\n  分类：损失函数用基尼值之类的\n\n- 如何数值计算导数\n\n  $\\frac{\\partial J}{\\partial \\theta} = \\lim_{\\varepsilon \\to 0} \\frac{J(\\theta + \\varepsilon) - J(\\theta - \\varepsilon)}{2 \\varepsilon} $\n\n# XGBoost: A Scalable Tree Boosting System \n\n- 字母解释\n\n$n:样本数 \\\\  m: 特征维度 \\\\  K:数的颗数 \\\\ D: 样本空间 \\\\ F:cart树空间 \\\\q:每棵树的结构\\\\ T：每棵树的叶子 \\\\ w:叶子权重 $\n\n## 与gradient boosting相比改进的地方\n\n> 1.  增加正则项，防止过拟合。类似的方法用在RGF上\n> 2.  算每一颗数的loss时用$L_{t}=L_{t-1}+\\Delta L\\\\  $，$\\Delta L用L对\\hat{y}_{t}$的二阶泰勒展开代替\n> 3. 优化时逐棵树优化，每棵树只在上一棵树的基础上分裂一次\n> 4.  叶子节点分裂时先对样本进行排序，分箱，再按分箱值进行分裂并筛选合适的分裂值。这样一方面能减少运算量，一方面可减轻过拟合, 为了保证每个分箱产生的loss均一，用残差的二阶导作为分箱依据（Weighted Quantile）\n\n##损失函数\n\n$\\hat{y_i}=\\sum_{i=1}^{K}w_i$\n\n![1565508976037]([comment]XGBOOST文献.assets/1565508976037.png)\n\n当正则项为0时，目标函数就跟传统的gradient tree boosting一样\n\n##优化\n\n低t轮迭代时（第t棵树），对于第i个样本，用一阶倒数近似就是$y_i^{t}=y_i^{t-1}+f_t(x_i)$，损失函数就是\n\n![1565509483053]([comment]XGBOOST文献.assets/1565509483053.png)\n\n第二棵树开始，每棵树预测残差\n\n![1565511169038]([comment]XGBOOST文献.assets/1565511169038.png)\n\n![1565511208880]([comment]XGBOOST文献.assets/1565511208880.png)\n\n\n\n![1565752607321]([comment]XGBOOST文献.assets/1565752607321.png)\n\n只要确定了树结构，二阶近似有以上的最优解。但实际上无法确定树结构，即无法全局优化，所以采用贪婪地逐个叶子优化：\n\n![1565515181975]([comment]XGBOOST文献.assets/1565515181975.png)\n\n其中$L_{split}$是一个节点分裂前的loss-分裂后的loss，$L_{split}$越大越好\n\n### 伪代码\n\n![1565591363136]([comment]XGBOOST文献.assets/1565591363136.png)\n\n![1565591743658]([comment]XGBOOST文献.assets/1565591743658.png)\n\n解读：\n\n首先对将全量样本分别按照各个特征排序，分箱（百分位数），箱值即为之后树分裂会用到的值；\n\n假设前一颗数有两个叶子节点，生成第三棵树时：\n\n1. 对第一个叶子节点上的sample\n   1. 计算各个分箱值时score，取使得score最大的分箱值\n   2.  同样的方法遍历所有特征，得到各个特征在第一个节点上的最佳分裂值及score\n   3.  选择score最大的特征及对应分分裂值\n2. 同样的方式得到第二个叶子节点上的sample最佳分裂特征和分裂值\n3. 比较score，选择score最大的节点及特征及分裂值\n\n>分箱方法有两个：global variant 和 local variant\n>\n>global variant是全局分箱，计算量少，但需要数据量大，分箱粒度大，不适合太深的树\n>\n>local variant是每个叶子节点上的数据进行分箱\n\n## weighted quantile\n\n![1565752490760]([comment]XGBOOST文献.assets/1565752490760.png)\n\n解读：\n\n不是按特征值大小排序，按百分位分箱，而是构造特征排序函数r，其中h是残差在特征x上的二阶导。\n\n推导：\n\n![1565752698105]([comment]XGBOOST文献.assets/1565752698105.png)\n\nloss函数$\\sum_{i=1}^n=\\sum_{k=1}^k\\sum_{i\\in z_j}\\frac{h_i}{2}（f_t-\\frac{g_i}{h_i}）+  ....$\n\nrankz函数$r_k$的构造可以保证每个分箱上的loss的高阶系数是均一的，这样能加速优化\n\n## Sparsity-aware Split Finding(空值)\n\n处理每一个分支时默认空值朝左或者朝右，找到最合适的方向\n\n![1565762051024]([comment]XGBOOST文献.assets/1565762051024.png)","slug":"2_算法相关/[comment]XGBOOST文献","published":1,"updated":"2022-03-01T04:02:26.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly49000i8s3221xpb5aq","content":"<p>XGBOOST文献</p>\n<span id=\"more\"></span>\n<h1 id=\"XGBOOST文献笔记\"><a href=\"#XGBOOST文献笔记\" class=\"headerlink\" title=\"XGBOOST文献笔记\"></a>XGBOOST文献笔记</h1><p><a href=\"http://delivery.acm.org/10.1145/2940000/2939785/p785-chen.pdf?ip=111.200.23.13&amp;id=2939785&amp;acc=CHORUS&amp;key=4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E6D218144511F3437&amp;__acm__=1536805596_740dd7db7cc67a94ca9b28d83bd32678\">http://delivery.acm.org/10.1145/2940000/2939785/p785-chen.pdf?ip=111.200.23.13&amp;id=2939785&amp;acc=CHORUS&amp;key=4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E6D218144511F3437&amp;__acm__=1536805596_740dd7db7cc67a94ca9b28d83bd32678</a></p>\n<h2 id=\"决策相关知识点\"><a href=\"#决策相关知识点\" class=\"headerlink\" title=\"决策相关知识点\"></a>决策相关知识点</h2><ul>\n<li><p>输入特征是连续特征&amp;离散特征</p>\n<p>连续特征可直接输入，算法处理时暴力选择改特征划分点 或者按照该特征值的分布选择候选划分点</p>\n<p>离散特征要进过one-hot后输入</p>\n</li>\n<li><p>输出是连续值（回归）&amp;离散值（分类）</p>\n<p>回归：损失函数用均方误差</p>\n<p>分类：损失函数用基尼值之类的</p>\n</li>\n<li><p>如何数值计算导数</p>\n<p>$\\frac{\\partial J}{\\partial \\theta} = \\lim_{\\varepsilon \\to 0} \\frac{J(\\theta + \\varepsilon) - J(\\theta - \\varepsilon)}{2 \\varepsilon} $</p>\n</li>\n</ul>\n<h1 id=\"XGBoost-A-Scalable-Tree-Boosting-System\"><a href=\"#XGBoost-A-Scalable-Tree-Boosting-System\" class=\"headerlink\" title=\"XGBoost: A Scalable Tree Boosting System\"></a>XGBoost: A Scalable Tree Boosting System</h1><ul>\n<li>字母解释</li>\n</ul>\n<p>$n:样本数 \\\\  m: 特征维度 \\\\  K:数的颗数 \\\\ D: 样本空间 \\\\ F:cart树空间 \\\\q:每棵树的结构\\\\ T：每棵树的叶子 \\\\ w:叶子权重 $</p>\n<h2 id=\"与gradient-boosting相比改进的地方\"><a href=\"#与gradient-boosting相比改进的地方\" class=\"headerlink\" title=\"与gradient boosting相比改进的地方\"></a>与gradient boosting相比改进的地方</h2><blockquote>\n<ol>\n<li>增加正则项，防止过拟合。类似的方法用在RGF上</li>\n<li>算每一颗数的loss时用$L_{t}=L_{t-1}+\\Delta L\\\\  $，$\\Delta L用L对\\hat{y}_{t}$的二阶泰勒展开代替</li>\n<li>优化时逐棵树优化，每棵树只在上一棵树的基础上分裂一次</li>\n<li>叶子节点分裂时先对样本进行排序，分箱，再按分箱值进行分裂并筛选合适的分裂值。这样一方面能减少运算量，一方面可减轻过拟合, 为了保证每个分箱产生的loss均一，用残差的二阶导作为分箱依据（Weighted Quantile）</li>\n</ol>\n</blockquote>\n<h2 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h2><p>$\\hat{y_i}=\\sum_{i=1}^{K}w_i$</p>\n\n<p>当正则项为0时，目标函数就跟传统的gradient tree boosting一样</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>低t轮迭代时（第t棵树），对于第i个样本，用一阶倒数近似就是$y_i^{t}=y_i^{t-1}+f_t(x_i)$，损失函数就是</p>\n\n<p>第二棵树开始，每棵树预测残差</p>\n\n\n\n<p>只要确定了树结构，二阶近似有以上的最优解。但实际上无法确定树结构，即无法全局优化，所以采用贪婪地逐个叶子优化：</p>\n\n<p>其中$L_{split}$是一个节点分裂前的loss-分裂后的loss，$L_{split}$越大越好</p>\n<h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3>\n\n<p>解读：</p>\n<p>首先对将全量样本分别按照各个特征排序，分箱（百分位数），箱值即为之后树分裂会用到的值；</p>\n<p>假设前一颗数有两个叶子节点，生成第三棵树时：</p>\n<ol>\n<li>对第一个叶子节点上的sample<ol>\n<li>计算各个分箱值时score，取使得score最大的分箱值</li>\n<li>同样的方法遍历所有特征，得到各个特征在第一个节点上的最佳分裂值及score</li>\n<li>选择score最大的特征及对应分分裂值</li>\n</ol>\n</li>\n<li>同样的方式得到第二个叶子节点上的sample最佳分裂特征和分裂值</li>\n<li>比较score，选择score最大的节点及特征及分裂值</li>\n</ol>\n<blockquote>\n<p>分箱方法有两个：global variant 和 local variant</p>\n<p>global variant是全局分箱，计算量少，但需要数据量大，分箱粒度大，不适合太深的树</p>\n<p>local variant是每个叶子节点上的数据进行分箱</p>\n</blockquote>\n<h2 id=\"weighted-quantile\"><a href=\"#weighted-quantile\" class=\"headerlink\" title=\"weighted quantile\"></a>weighted quantile</h2>\n<p>解读：</p>\n<p>不是按特征值大小排序，按百分位分箱，而是构造特征排序函数r，其中h是残差在特征x上的二阶导。</p>\n<p>推导：</p>\n\n<p>loss函数$\\sum_{i=1}^n=\\sum_{k=1}^k\\sum_{i\\in z_j}\\frac{h_i}{2}（f_t-\\frac{g_i}{h_i}）+  ….$</p>\n<p>rankz函数$r_k$的构造可以保证每个分箱上的loss的高阶系数是均一的，这样能加速优化</p>\n<h2 id=\"Sparsity-aware-Split-Finding-空值\"><a href=\"#Sparsity-aware-Split-Finding-空值\" class=\"headerlink\" title=\"Sparsity-aware Split Finding(空值)\"></a>Sparsity-aware Split Finding(空值)</h2><p>处理每一个分支时默认空值朝左或者朝右，找到最合适的方向</p>\n","site":{"data":{}},"excerpt":"<p>XGBOOST文献</p>","more":"<h1 id=\"XGBOOST文献笔记\"><a href=\"#XGBOOST文献笔记\" class=\"headerlink\" title=\"XGBOOST文献笔记\"></a>XGBOOST文献笔记</h1><p><a href=\"http://delivery.acm.org/10.1145/2940000/2939785/p785-chen.pdf?ip=111.200.23.13&amp;id=2939785&amp;acc=CHORUS&amp;key=4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E6D218144511F3437&amp;__acm__=1536805596_740dd7db7cc67a94ca9b28d83bd32678\">http://delivery.acm.org/10.1145/2940000/2939785/p785-chen.pdf?ip=111.200.23.13&amp;id=2939785&amp;acc=CHORUS&amp;key=4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E6D218144511F3437&amp;__acm__=1536805596_740dd7db7cc67a94ca9b28d83bd32678</a></p>\n<h2 id=\"决策相关知识点\"><a href=\"#决策相关知识点\" class=\"headerlink\" title=\"决策相关知识点\"></a>决策相关知识点</h2><ul>\n<li><p>输入特征是连续特征&amp;离散特征</p>\n<p>连续特征可直接输入，算法处理时暴力选择改特征划分点 或者按照该特征值的分布选择候选划分点</p>\n<p>离散特征要进过one-hot后输入</p>\n</li>\n<li><p>输出是连续值（回归）&amp;离散值（分类）</p>\n<p>回归：损失函数用均方误差</p>\n<p>分类：损失函数用基尼值之类的</p>\n</li>\n<li><p>如何数值计算导数</p>\n<p>$\\frac{\\partial J}{\\partial \\theta} = \\lim_{\\varepsilon \\to 0} \\frac{J(\\theta + \\varepsilon) - J(\\theta - \\varepsilon)}{2 \\varepsilon} $</p>\n</li>\n</ul>\n<h1 id=\"XGBoost-A-Scalable-Tree-Boosting-System\"><a href=\"#XGBoost-A-Scalable-Tree-Boosting-System\" class=\"headerlink\" title=\"XGBoost: A Scalable Tree Boosting System\"></a>XGBoost: A Scalable Tree Boosting System</h1><ul>\n<li>字母解释</li>\n</ul>\n<p>$n:样本数 \\\\  m: 特征维度 \\\\  K:数的颗数 \\\\ D: 样本空间 \\\\ F:cart树空间 \\\\q:每棵树的结构\\\\ T：每棵树的叶子 \\\\ w:叶子权重 $</p>\n<h2 id=\"与gradient-boosting相比改进的地方\"><a href=\"#与gradient-boosting相比改进的地方\" class=\"headerlink\" title=\"与gradient boosting相比改进的地方\"></a>与gradient boosting相比改进的地方</h2><blockquote>\n<ol>\n<li>增加正则项，防止过拟合。类似的方法用在RGF上</li>\n<li>算每一颗数的loss时用$L_{t}=L_{t-1}+\\Delta L\\\\  $，$\\Delta L用L对\\hat{y}_{t}$的二阶泰勒展开代替</li>\n<li>优化时逐棵树优化，每棵树只在上一棵树的基础上分裂一次</li>\n<li>叶子节点分裂时先对样本进行排序，分箱，再按分箱值进行分裂并筛选合适的分裂值。这样一方面能减少运算量，一方面可减轻过拟合, 为了保证每个分箱产生的loss均一，用残差的二阶导作为分箱依据（Weighted Quantile）</li>\n</ol>\n</blockquote>\n<h2 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h2><p>$\\hat{y_i}=\\sum_{i=1}^{K}w_i$</p>\n\n<p>当正则项为0时，目标函数就跟传统的gradient tree boosting一样</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>低t轮迭代时（第t棵树），对于第i个样本，用一阶倒数近似就是$y_i^{t}=y_i^{t-1}+f_t(x_i)$，损失函数就是</p>\n\n<p>第二棵树开始，每棵树预测残差</p>\n\n\n\n<p>只要确定了树结构，二阶近似有以上的最优解。但实际上无法确定树结构，即无法全局优化，所以采用贪婪地逐个叶子优化：</p>\n\n<p>其中$L_{split}$是一个节点分裂前的loss-分裂后的loss，$L_{split}$越大越好</p>\n<h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3>\n\n<p>解读：</p>\n<p>首先对将全量样本分别按照各个特征排序，分箱（百分位数），箱值即为之后树分裂会用到的值；</p>\n<p>假设前一颗数有两个叶子节点，生成第三棵树时：</p>\n<ol>\n<li>对第一个叶子节点上的sample<ol>\n<li>计算各个分箱值时score，取使得score最大的分箱值</li>\n<li>同样的方法遍历所有特征，得到各个特征在第一个节点上的最佳分裂值及score</li>\n<li>选择score最大的特征及对应分分裂值</li>\n</ol>\n</li>\n<li>同样的方式得到第二个叶子节点上的sample最佳分裂特征和分裂值</li>\n<li>比较score，选择score最大的节点及特征及分裂值</li>\n</ol>\n<blockquote>\n<p>分箱方法有两个：global variant 和 local variant</p>\n<p>global variant是全局分箱，计算量少，但需要数据量大，分箱粒度大，不适合太深的树</p>\n<p>local variant是每个叶子节点上的数据进行分箱</p>\n</blockquote>\n<h2 id=\"weighted-quantile\"><a href=\"#weighted-quantile\" class=\"headerlink\" title=\"weighted quantile\"></a>weighted quantile</h2>\n<p>解读：</p>\n<p>不是按特征值大小排序，按百分位分箱，而是构造特征排序函数r，其中h是残差在特征x上的二阶导。</p>\n<p>推导：</p>\n\n<p>loss函数$\\sum_{i=1}^n=\\sum_{k=1}^k\\sum_{i\\in z_j}\\frac{h_i}{2}（f_t-\\frac{g_i}{h_i}）+  ….$</p>\n<p>rankz函数$r_k$的构造可以保证每个分箱上的loss的高阶系数是均一的，这样能加速优化</p>\n<h2 id=\"Sparsity-aware-Split-Finding-空值\"><a href=\"#Sparsity-aware-Split-Finding-空值\" class=\"headerlink\" title=\"Sparsity-aware Split Finding(空值)\"></a>Sparsity-aware Split Finding(空值)</h2><p>处理每一个分支时默认空值朝左或者朝右，找到最合适的方向</p>"},{"title":"airbnb embedding","date":"2022-03-01T03:32:38.000Z","_content":"\n[comment]\n\n<!-- more -->\n\n\nReal-time Personalization using Embeddings for Search\nRanking at Airbnb\n\n# Motivation\n\n- airbnb是租客与房东双向预测 -> 解决方法：用pair wise的loss（每一对样本有正反馈和负反馈）\n\n# Methodology\n\n## Listing Embedding\n\n \n\n","source":"_posts/2_算法相关/[comment]airbnb embedding.md","raw":"---\ntitle: airbnb embedding\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n[comment]\n\n<!-- more -->\n\n\nReal-time Personalization using Embeddings for Search\nRanking at Airbnb\n\n# Motivation\n\n- airbnb是租客与房东双向预测 -> 解决方法：用pair wise的loss（每一对样本有正反馈和负反馈）\n\n# Methodology\n\n## Listing Embedding\n\n \n\n","slug":"2_算法相关/[comment]airbnb embedding","published":1,"updated":"2022-03-01T04:02:09.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly49000l8s32fnsb5qh3","content":"<p>[comment]</p>\n<span id=\"more\"></span>\n<p>Real-time Personalization using Embeddings for Search<br>Ranking at Airbnb</p>\n<h1 id=\"Motivation\"><a href=\"#Motivation\" class=\"headerlink\" title=\"Motivation\"></a>Motivation</h1><ul>\n<li>airbnb是租客与房东双向预测 -&gt; 解决方法：用pair wise的loss（每一对样本有正反馈和负反馈）</li>\n</ul>\n<h1 id=\"Methodology\"><a href=\"#Methodology\" class=\"headerlink\" title=\"Methodology\"></a>Methodology</h1><h2 id=\"Listing-Embedding\"><a href=\"#Listing-Embedding\" class=\"headerlink\" title=\"Listing Embedding\"></a>Listing Embedding</h2>","site":{"data":{}},"excerpt":"<p>[comment]</p>","more":"<p>Real-time Personalization using Embeddings for Search<br>Ranking at Airbnb</p>\n<h1 id=\"Motivation\"><a href=\"#Motivation\" class=\"headerlink\" title=\"Motivation\"></a>Motivation</h1><ul>\n<li>airbnb是租客与房东双向预测 -&gt; 解决方法：用pair wise的loss（每一对样本有正反馈和负反馈）</li>\n</ul>\n<h1 id=\"Methodology\"><a href=\"#Methodology\" class=\"headerlink\" title=\"Methodology\"></a>Methodology</h1><h2 id=\"Listing-Embedding\"><a href=\"#Listing-Embedding\" class=\"headerlink\" title=\"Listing Embedding\"></a>Listing Embedding</h2>"},{"title":"silk_road","date":"2022-03-01T03:32:38.000Z","_content":"\nsilk_road\n\n<!-- more -->\n\n\n# Problem Formulation\n\n基于购买行为的information domain 和 基于社交关系的 social domain联合推荐，最终实现对social domain中的用户进行item预\n\n特点：\n\n1. info domain中用pooling的办法把交互特征和side information 融合在一起；\n\n \t2. bridge 用户很少；\n \t3. 两个网络时异质的\n\n##名词解释：\n\n![1564567058965]([comment]silk_road.assets/1564567058965.png)\n\n### info-domain\n\n包括有交互特征$Y$和side info $G$ 。用户的G指的是一些tag标签，如喜欢自然，喜欢欧洲，一共有$v_u$个tag。item的G指的是item的一些标签（与用户标签对应的），如自然，欧洲，一共有$v_i$ 个tag。\n$$\n\\begin{split}\nUser_1&:&U_1&={\\{u_t}\\}_{t=1}^{M_1}  \\\\\nItem_1&:&I_1&=\\{i_t\\}_{t=1}^{m}  \\\\\nInteraction&:&Y&=\\{y_{ij}\\} \\\\\nArttibute&:& \\\\\n&&G_u&=\\{g_1^u,g_2^u\\quad ...\\quad g_{v_u}^u\\} \\\\\n&&G_i&=\\{g_1^i,g_1^i \\quad ... \\quad g_{v_i}^i\\}\n\\end{split}\n$$\n\n### social-domain\n\n$$\nUser_2:U_2=\\{u_t^{'}\\}_{t=1}^{M_2} \\\\\nInteraction: S=\\{s_{u{'},u^{''}}\\}\n$$\n\n\n\n\n\n# Solution: NSCR\n\nNeural Social Collaborative Ranking (NSCR)\n\n## info-domain\n\n![1564567260591]([comment]silk_road.assets/1564567260591.png)\n\n### pairwise pooling\n\n![1564567470922]([comment]silk_road.assets/1564567470922.png)\n\n![1564567484011]([comment]silk_road.assets/1564567484011.png)\n\n### pairwise loss\n\n![1564568582595]([comment]silk_road.assets/1564568582595.png)\n\n其中$y_{u,i}=1,t_{u,j}=0$\n\n![1564568556532]([comment]silk_road.assets/1564568556532.png)\n\n### forward propagation\n\n![1564568639155]([comment]silk_road.assets/1564568639155.png)\n\nprediction:\n\n![1564568681554]([comment]silk_road.assets/1564568681554.png)\n\n## social-domain\n\n两个约束作为loss：\n\n### 平滑约束（smothness）\n\n![1564568769585]([comment]silk_road.assets/1564568769585.png)\n\n$s_{u^{''},u^{''}} 越大，p_{u^{'}},p_{u^{''}}就$","source":"_posts/2_算法相关/[comment]silk_road.md","raw":"---\ntitle: silk_road\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nsilk_road\n\n<!-- more -->\n\n\n# Problem Formulation\n\n基于购买行为的information domain 和 基于社交关系的 social domain联合推荐，最终实现对social domain中的用户进行item预\n\n特点：\n\n1. info domain中用pooling的办法把交互特征和side information 融合在一起；\n\n \t2. bridge 用户很少；\n \t3. 两个网络时异质的\n\n##名词解释：\n\n![1564567058965]([comment]silk_road.assets/1564567058965.png)\n\n### info-domain\n\n包括有交互特征$Y$和side info $G$ 。用户的G指的是一些tag标签，如喜欢自然，喜欢欧洲，一共有$v_u$个tag。item的G指的是item的一些标签（与用户标签对应的），如自然，欧洲，一共有$v_i$ 个tag。\n$$\n\\begin{split}\nUser_1&:&U_1&={\\{u_t}\\}_{t=1}^{M_1}  \\\\\nItem_1&:&I_1&=\\{i_t\\}_{t=1}^{m}  \\\\\nInteraction&:&Y&=\\{y_{ij}\\} \\\\\nArttibute&:& \\\\\n&&G_u&=\\{g_1^u,g_2^u\\quad ...\\quad g_{v_u}^u\\} \\\\\n&&G_i&=\\{g_1^i,g_1^i \\quad ... \\quad g_{v_i}^i\\}\n\\end{split}\n$$\n\n### social-domain\n\n$$\nUser_2:U_2=\\{u_t^{'}\\}_{t=1}^{M_2} \\\\\nInteraction: S=\\{s_{u{'},u^{''}}\\}\n$$\n\n\n\n\n\n# Solution: NSCR\n\nNeural Social Collaborative Ranking (NSCR)\n\n## info-domain\n\n![1564567260591]([comment]silk_road.assets/1564567260591.png)\n\n### pairwise pooling\n\n![1564567470922]([comment]silk_road.assets/1564567470922.png)\n\n![1564567484011]([comment]silk_road.assets/1564567484011.png)\n\n### pairwise loss\n\n![1564568582595]([comment]silk_road.assets/1564568582595.png)\n\n其中$y_{u,i}=1,t_{u,j}=0$\n\n![1564568556532]([comment]silk_road.assets/1564568556532.png)\n\n### forward propagation\n\n![1564568639155]([comment]silk_road.assets/1564568639155.png)\n\nprediction:\n\n![1564568681554]([comment]silk_road.assets/1564568681554.png)\n\n## social-domain\n\n两个约束作为loss：\n\n### 平滑约束（smothness）\n\n![1564568769585]([comment]silk_road.assets/1564568769585.png)\n\n$s_{u^{''},u^{''}} 越大，p_{u^{'}},p_{u^{''}}就$","slug":"2_算法相关/[comment]silk_road","published":1,"updated":"2022-03-01T04:02:21.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4b000p8s323do46gqq","content":"<p>silk_road</p>\n<span id=\"more\"></span>\n<h1 id=\"Problem-Formulation\"><a href=\"#Problem-Formulation\" class=\"headerlink\" title=\"Problem Formulation\"></a>Problem Formulation</h1><p>基于购买行为的information domain 和 基于社交关系的 social domain联合推荐，最终实现对social domain中的用户进行item预</p>\n<p>特点：</p>\n<ol>\n<li><p>info domain中用pooling的办法把交互特征和side information 融合在一起；</p>\n<ol>\n<li>bridge 用户很少；</li>\n<li>两个网络时异质的</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"名词解释：\"><a href=\"#名词解释：\" class=\"headerlink\" title=\"名词解释：\"></a>名词解释：</h2>\n<h3 id=\"info-domain\"><a href=\"#info-domain\" class=\"headerlink\" title=\"info-domain\"></a>info-domain</h3><p>包括有交互特征$Y$和side info $G$ 。用户的G指的是一些tag标签，如喜欢自然，喜欢欧洲，一共有$v_u$个tag。item的G指的是item的一些标签（与用户标签对应的），如自然，欧洲，一共有$v_i$ 个tag。</p>\n<script type=\"math/tex; mode=display\">\n\\begin{split}\nUser_1&:&U_1&={\\{u_t}\\}_{t=1}^{M_1}  \\\\\nItem_1&:&I_1&=\\{i_t\\}_{t=1}^{m}  \\\\\nInteraction&:&Y&=\\{y_{ij}\\} \\\\\nArttibute&:& \\\\\n&&G_u&=\\{g_1^u,g_2^u\\quad ...\\quad g_{v_u}^u\\} \\\\\n&&G_i&=\\{g_1^i,g_1^i \\quad ... \\quad g_{v_i}^i\\}\n\\end{split}</script><h3 id=\"social-domain\"><a href=\"#social-domain\" class=\"headerlink\" title=\"social-domain\"></a>social-domain</h3><script type=\"math/tex; mode=display\">\nUser_2:U_2=\\{u_t^{'}\\}_{t=1}^{M_2} \\\\\nInteraction: S=\\{s_{u{'},u^{''}}\\}</script><h1 id=\"Solution-NSCR\"><a href=\"#Solution-NSCR\" class=\"headerlink\" title=\"Solution: NSCR\"></a>Solution: NSCR</h1><p>Neural Social Collaborative Ranking (NSCR)</p>\n<h2 id=\"info-domain-1\"><a href=\"#info-domain-1\" class=\"headerlink\" title=\"info-domain\"></a>info-domain</h2>\n<h3 id=\"pairwise-pooling\"><a href=\"#pairwise-pooling\" class=\"headerlink\" title=\"pairwise pooling\"></a>pairwise pooling</h3>\n\n<h3 id=\"pairwise-loss\"><a href=\"#pairwise-loss\" class=\"headerlink\" title=\"pairwise loss\"></a>pairwise loss</h3>\n<p>其中$y_{u,i}=1,t_{u,j}=0$</p>\n\n<h3 id=\"forward-propagation\"><a href=\"#forward-propagation\" class=\"headerlink\" title=\"forward propagation\"></a>forward propagation</h3>\n<p>prediction:</p>\n\n<h2 id=\"social-domain-1\"><a href=\"#social-domain-1\" class=\"headerlink\" title=\"social-domain\"></a>social-domain</h2><p>两个约束作为loss：</p>\n<h3 id=\"平滑约束（smothness）\"><a href=\"#平滑约束（smothness）\" class=\"headerlink\" title=\"平滑约束（smothness）\"></a>平滑约束（smothness）</h3>\n<p>$s_{u^{‘’},u^{‘’}} 越大，p_{u^{‘}},p_{u^{‘’}}就$</p>\n","site":{"data":{}},"excerpt":"<p>silk_road</p>","more":"<h1 id=\"Problem-Formulation\"><a href=\"#Problem-Formulation\" class=\"headerlink\" title=\"Problem Formulation\"></a>Problem Formulation</h1><p>基于购买行为的information domain 和 基于社交关系的 social domain联合推荐，最终实现对social domain中的用户进行item预</p>\n<p>特点：</p>\n<ol>\n<li><p>info domain中用pooling的办法把交互特征和side information 融合在一起；</p>\n<ol>\n<li>bridge 用户很少；</li>\n<li>两个网络时异质的</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"名词解释：\"><a href=\"#名词解释：\" class=\"headerlink\" title=\"名词解释：\"></a>名词解释：</h2>\n<h3 id=\"info-domain\"><a href=\"#info-domain\" class=\"headerlink\" title=\"info-domain\"></a>info-domain</h3><p>包括有交互特征$Y$和side info $G$ 。用户的G指的是一些tag标签，如喜欢自然，喜欢欧洲，一共有$v_u$个tag。item的G指的是item的一些标签（与用户标签对应的），如自然，欧洲，一共有$v_i$ 个tag。</p>\n<script type=\"math/tex; mode=display\">\n\\begin{split}\nUser_1&:&U_1&={\\{u_t}\\}_{t=1}^{M_1}  \\\\\nItem_1&:&I_1&=\\{i_t\\}_{t=1}^{m}  \\\\\nInteraction&:&Y&=\\{y_{ij}\\} \\\\\nArttibute&:& \\\\\n&&G_u&=\\{g_1^u,g_2^u\\quad ...\\quad g_{v_u}^u\\} \\\\\n&&G_i&=\\{g_1^i,g_1^i \\quad ... \\quad g_{v_i}^i\\}\n\\end{split}</script><h3 id=\"social-domain\"><a href=\"#social-domain\" class=\"headerlink\" title=\"social-domain\"></a>social-domain</h3><script type=\"math/tex; mode=display\">\nUser_2:U_2=\\{u_t^{'}\\}_{t=1}^{M_2} \\\\\nInteraction: S=\\{s_{u{'},u^{''}}\\}</script><h1 id=\"Solution-NSCR\"><a href=\"#Solution-NSCR\" class=\"headerlink\" title=\"Solution: NSCR\"></a>Solution: NSCR</h1><p>Neural Social Collaborative Ranking (NSCR)</p>\n<h2 id=\"info-domain-1\"><a href=\"#info-domain-1\" class=\"headerlink\" title=\"info-domain\"></a>info-domain</h2>\n<h3 id=\"pairwise-pooling\"><a href=\"#pairwise-pooling\" class=\"headerlink\" title=\"pairwise pooling\"></a>pairwise pooling</h3>\n\n<h3 id=\"pairwise-loss\"><a href=\"#pairwise-loss\" class=\"headerlink\" title=\"pairwise loss\"></a>pairwise loss</h3>\n<p>其中$y_{u,i}=1,t_{u,j}=0$</p>\n\n<h3 id=\"forward-propagation\"><a href=\"#forward-propagation\" class=\"headerlink\" title=\"forward propagation\"></a>forward propagation</h3>\n<p>prediction:</p>\n\n<h2 id=\"social-domain-1\"><a href=\"#social-domain-1\" class=\"headerlink\" title=\"social-domain\"></a>social-domain</h2><p>两个约束作为loss：</p>\n<h3 id=\"平滑约束（smothness）\"><a href=\"#平滑约束（smothness）\" class=\"headerlink\" title=\"平滑约束（smothness）\"></a>平滑约束（smothness）</h3>\n<p>$s_{u^{‘’},u^{‘’}} 越大，p_{u^{‘}},p_{u^{‘’}}就$</p>"},{"title":"deep learning based推荐系统论文笔记","date":"2022-03-01T03:32:38.000Z","_content":"\ndeep learning based推荐系统论文笔记\n\n<!-- more -->\n\n\n[Deep Learning based Recommender System: A Survey and New Perspectives](''D:\\资源\\papers\\time aware recommender system\\综述好文_cite170-1707.07435.pdf')\n\n推荐体统的本质是用户与商品的匹配，涉及到两个问题：匹配策略及评判标准\n\n# 推荐系统中深度学习模型总结\n\n按照模型分：\n![1563938911677](pics/1563938911677.png)\n按照推荐领域：\n\n![1563939030784](pics/1563939030784.png)\n\n","source":"_posts/2_算法相关/deep learning based推荐系统论文笔记.md","raw":"---\ntitle: deep learning based推荐系统论文笔记\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\ndeep learning based推荐系统论文笔记\n\n<!-- more -->\n\n\n[Deep Learning based Recommender System: A Survey and New Perspectives](''D:\\资源\\papers\\time aware recommender system\\综述好文_cite170-1707.07435.pdf')\n\n推荐体统的本质是用户与商品的匹配，涉及到两个问题：匹配策略及评判标准\n\n# 推荐系统中深度学习模型总结\n\n按照模型分：\n![1563938911677](pics/1563938911677.png)\n按照推荐领域：\n\n![1563939030784](pics/1563939030784.png)\n\n","slug":"2_算法相关/deep learning based推荐系统论文笔记","published":1,"updated":"2022-03-01T03:59:30.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4c000s8s32e3861njh","content":"<p>deep learning based推荐系统论文笔记</p>\n<span id=\"more\"></span>\n<p><a href=\"&#39;&#39;D:\\资源\\papers\\time aware recommender system\\综述好文_cite170-1707.07435.pdf&#39;\">Deep Learning based Recommender System: A Survey and New Perspectives</a></p>\n<p>推荐体统的本质是用户与商品的匹配，涉及到两个问题：匹配策略及评判标准</p>\n<h1 id=\"推荐系统中深度学习模型总结\"><a href=\"#推荐系统中深度学习模型总结\" class=\"headerlink\" title=\"推荐系统中深度学习模型总结\"></a>推荐系统中深度学习模型总结</h1><p>按照模型分：<br><br>按照推荐领域：</p>\n\n","site":{"data":{}},"excerpt":"<p>deep learning based推荐系统论文笔记</p>","more":"<p><a href=\"&#39;&#39;D:\\资源\\papers\\time aware recommender system\\综述好文_cite170-1707.07435.pdf&#39;\">Deep Learning based Recommender System: A Survey and New Perspectives</a></p>\n<p>推荐体统的本质是用户与商品的匹配，涉及到两个问题：匹配策略及评判标准</p>\n<h1 id=\"推荐系统中深度学习模型总结\"><a href=\"#推荐系统中深度学习模型总结\" class=\"headerlink\" title=\"推荐系统中深度学习模型总结\"></a>推荐系统中深度学习模型总结</h1><p>按照模型分：<br><br>按照推荐领域：</p>"},{"title":"embedding相关笔记","date":"2022-03-01T03:32:38.000Z","_content":"\nembedding相关笔记\n\n<!-- more -->\n\n\n# 文献列表\n\n- graph embedding\n\n  Billion scale xommodity embedding for W-commerce recommedation in alibaba,KDD,2018\n\n  \n\n- NLP\n\nA Fast and Simple Algorithm for Training Neural Probabilistic Language Models，2012\nLearning word embeddings efficiently with noise-contrastive estimation,2013 NIPS\n  \n  [1] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. Efficient estimation of word representations in vector space. *ICLR Workshop*, 2013\n  [2] T. Mikolov, I. Sutskever, K. Chen, G. Corrado, and J. Dean. Distributed Representations of Words and Phrases and their Compositionality. NIPS 2013\n\n## Noise Contrastive Estimation (NCE)\n\n\n\n# 框架介绍\n\n## random walk\n\n1. 无放回等概率抽样n_start个起点\n2. 所有indexer的0都表示未覆盖的品类\n\n","source":"_posts/2_算法相关/embedding相关笔记.md","raw":"---\ntitle: embedding相关笔记\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\nembedding相关笔记\n\n<!-- more -->\n\n\n# 文献列表\n\n- graph embedding\n\n  Billion scale xommodity embedding for W-commerce recommedation in alibaba,KDD,2018\n\n  \n\n- NLP\n\nA Fast and Simple Algorithm for Training Neural Probabilistic Language Models，2012\nLearning word embeddings efficiently with noise-contrastive estimation,2013 NIPS\n  \n  [1] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. Efficient estimation of word representations in vector space. *ICLR Workshop*, 2013\n  [2] T. Mikolov, I. Sutskever, K. Chen, G. Corrado, and J. Dean. Distributed Representations of Words and Phrases and their Compositionality. NIPS 2013\n\n## Noise Contrastive Estimation (NCE)\n\n\n\n# 框架介绍\n\n## random walk\n\n1. 无放回等概率抽样n_start个起点\n2. 所有indexer的0都表示未覆盖的品类\n\n","slug":"2_算法相关/embedding相关笔记","published":1,"updated":"2022-03-01T03:59:30.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4d000w8s326kktbaod","content":"<p>embedding相关笔记</p>\n<span id=\"more\"></span>\n<h1 id=\"文献列表\"><a href=\"#文献列表\" class=\"headerlink\" title=\"文献列表\"></a>文献列表</h1><ul>\n<li><p>graph embedding</p>\n<p>Billion scale xommodity embedding for W-commerce recommedation in alibaba,KDD,2018</p>\n</li>\n</ul>\n<ul>\n<li>NLP</li>\n</ul>\n<p>A Fast and Simple Algorithm for Training Neural Probabilistic Language Models，2012<br>Learning word embeddings efficiently with noise-contrastive estimation,2013 NIPS</p>\n<p>  [1] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. Efficient estimation of word representations in vector space. <em>ICLR Workshop</em>, 2013<br>  [2] T. Mikolov, I. Sutskever, K. Chen, G. Corrado, and J. Dean. Distributed Representations of Words and Phrases and their Compositionality. NIPS 2013</p>\n<h2 id=\"Noise-Contrastive-Estimation-NCE\"><a href=\"#Noise-Contrastive-Estimation-NCE\" class=\"headerlink\" title=\"Noise Contrastive Estimation (NCE)\"></a>Noise Contrastive Estimation (NCE)</h2><h1 id=\"框架介绍\"><a href=\"#框架介绍\" class=\"headerlink\" title=\"框架介绍\"></a>框架介绍</h1><h2 id=\"random-walk\"><a href=\"#random-walk\" class=\"headerlink\" title=\"random walk\"></a>random walk</h2><ol>\n<li>无放回等概率抽样n_start个起点</li>\n<li>所有indexer的0都表示未覆盖的品类</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>embedding相关笔记</p>","more":"<h1 id=\"文献列表\"><a href=\"#文献列表\" class=\"headerlink\" title=\"文献列表\"></a>文献列表</h1><ul>\n<li><p>graph embedding</p>\n<p>Billion scale xommodity embedding for W-commerce recommedation in alibaba,KDD,2018</p>\n</li>\n</ul>\n<ul>\n<li>NLP</li>\n</ul>\n<p>A Fast and Simple Algorithm for Training Neural Probabilistic Language Models，2012<br>Learning word embeddings efficiently with noise-contrastive estimation,2013 NIPS</p>\n<p>  [1] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. Efficient estimation of word representations in vector space. <em>ICLR Workshop</em>, 2013<br>  [2] T. Mikolov, I. Sutskever, K. Chen, G. Corrado, and J. Dean. Distributed Representations of Words and Phrases and their Compositionality. NIPS 2013</p>\n<h2 id=\"Noise-Contrastive-Estimation-NCE\"><a href=\"#Noise-Contrastive-Estimation-NCE\" class=\"headerlink\" title=\"Noise Contrastive Estimation (NCE)\"></a>Noise Contrastive Estimation (NCE)</h2><h1 id=\"框架介绍\"><a href=\"#框架介绍\" class=\"headerlink\" title=\"框架介绍\"></a>框架介绍</h1><h2 id=\"random-walk\"><a href=\"#random-walk\" class=\"headerlink\" title=\"random walk\"></a>random walk</h2><ol>\n<li>无放回等概率抽样n_start个起点</li>\n<li>所有indexer的0都表示未覆盖的品类</li>\n</ol>"},{"title":"中文分词","date":"2022-03-01T03:32:38.000Z","_content":"\n中文分词\n\n<!-- more -->\n\n\n[TOC]\n\n# jieba分词\n\n```python\nimport jieba\nimport jieba.analyse\n\ndef get_corpus(f_corpus):\n    '''\n\n    :param f_corpus: txt\n    :return: list\n    '''\n    with open(f_corpus, encoding='utf-8') as f:\n        lines = f.readlines()\n    print('f_corpus lines: {}'.format(len(lines)))\n    print(lines[0])\n    return lines\n\ndef get_stopwords(f_stopwords):\n    '''\n\n    :param f_stopwords: txt\n    :return: list\n    '''\n    with open(f_stopwords, encoding='utf-8') as f:\n        stopwords = f.readlines()\n    print('stop words lines: {}'.format(len(stopwords)))\n    return stopwords\ndef get_keyword_dict(filename):\n    dict = {}\n    keys = []\n    num=0\n    with open(filename,'r',encoding='utf-8') as f:\n        line = f.readline()\n        while line :\n            num +=1\n            if num % 10000 ==0:\n                print('line {}'.format(num))\n            word = line.strip()\n            word = get_keyword(word).strip('【').strip('】')\n            if word not in keys:\n                keys.append(word)\n                dict[word] = 1\n            else:\n                dict[word] += 1\n            line = f.readline()\n    dict = sorted(dict.items(),key=lambda s:s[1],reverse=True)\n    return dict\ndef main_count():\n    '''\n    统计词频\n    '''\n    f_corpus = 'part1.txt'\n    f_stopwords = 'stopwords.txt'\n    f_count_words = 'wordsCount_part1.txt'\n    corpus=get_corpus(f_corpus) #list\n    stopwords=get_stopwords(f_stopwords) #list\n    word_dic=count_word(corpus,stopwords) #list\n    print (word_dic)\n    if not os.path.exists(f_count_words):\n        os.system(r\"touch {}\".format(f_count_words))\n    with open(f_count_words,'w') as f:\n        for i in word_dic:\n            res = i[0].strip()+'\\t'+str(i[1])\n            f.write(res+'\\n')\n    print(\"done!\")\n\n```\n\n","source":"_posts/2_算法相关/中文分词.md","raw":"---\ntitle: 中文分词\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n中文分词\n\n<!-- more -->\n\n\n[TOC]\n\n# jieba分词\n\n```python\nimport jieba\nimport jieba.analyse\n\ndef get_corpus(f_corpus):\n    '''\n\n    :param f_corpus: txt\n    :return: list\n    '''\n    with open(f_corpus, encoding='utf-8') as f:\n        lines = f.readlines()\n    print('f_corpus lines: {}'.format(len(lines)))\n    print(lines[0])\n    return lines\n\ndef get_stopwords(f_stopwords):\n    '''\n\n    :param f_stopwords: txt\n    :return: list\n    '''\n    with open(f_stopwords, encoding='utf-8') as f:\n        stopwords = f.readlines()\n    print('stop words lines: {}'.format(len(stopwords)))\n    return stopwords\ndef get_keyword_dict(filename):\n    dict = {}\n    keys = []\n    num=0\n    with open(filename,'r',encoding='utf-8') as f:\n        line = f.readline()\n        while line :\n            num +=1\n            if num % 10000 ==0:\n                print('line {}'.format(num))\n            word = line.strip()\n            word = get_keyword(word).strip('【').strip('】')\n            if word not in keys:\n                keys.append(word)\n                dict[word] = 1\n            else:\n                dict[word] += 1\n            line = f.readline()\n    dict = sorted(dict.items(),key=lambda s:s[1],reverse=True)\n    return dict\ndef main_count():\n    '''\n    统计词频\n    '''\n    f_corpus = 'part1.txt'\n    f_stopwords = 'stopwords.txt'\n    f_count_words = 'wordsCount_part1.txt'\n    corpus=get_corpus(f_corpus) #list\n    stopwords=get_stopwords(f_stopwords) #list\n    word_dic=count_word(corpus,stopwords) #list\n    print (word_dic)\n    if not os.path.exists(f_count_words):\n        os.system(r\"touch {}\".format(f_count_words))\n    with open(f_count_words,'w') as f:\n        for i in word_dic:\n            res = i[0].strip()+'\\t'+str(i[1])\n            f.write(res+'\\n')\n    print(\"done!\")\n\n```\n\n","slug":"2_算法相关/中文分词","published":1,"updated":"2022-03-01T03:59:30.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4d000z8s32dmij1ci8","content":"<p>中文分词</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"jieba分词\"><a href=\"#jieba分词\" class=\"headerlink\" title=\"jieba分词\"></a>jieba分词</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jieba</span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba.analyse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_corpus</span>(<span class=\"params\">f_corpus</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param f_corpus: txt</span></span><br><span class=\"line\"><span class=\"string\">    :return: list</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(f_corpus, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        lines = f.readlines()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;f_corpus lines: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(lines)))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(lines[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lines</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_stopwords</span>(<span class=\"params\">f_stopwords</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param f_stopwords: txt</span></span><br><span class=\"line\"><span class=\"string\">    :return: list</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(f_stopwords, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        stopwords = f.readlines()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;stop words lines: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(stopwords)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stopwords</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_keyword_dict</span>(<span class=\"params\">filename</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">dict</span> = &#123;&#125;</span><br><span class=\"line\">    keys = []</span><br><span class=\"line\">    num=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename,<span class=\"string\">&#x27;r&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        line = f.readline()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> line :</span><br><span class=\"line\">            num +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> num % <span class=\"number\">10000</span> ==<span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;line &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(num))</span><br><span class=\"line\">            word = line.strip()</span><br><span class=\"line\">            word = get_keyword(word).strip(<span class=\"string\">&#x27;【&#x27;</span>).strip(<span class=\"string\">&#x27;】&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> keys:</span><br><span class=\"line\">                keys.append(word)</span><br><span class=\"line\">                <span class=\"built_in\">dict</span>[word] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">dict</span>[word] += <span class=\"number\">1</span></span><br><span class=\"line\">            line = f.readline()</span><br><span class=\"line\">    <span class=\"built_in\">dict</span> = <span class=\"built_in\">sorted</span>(<span class=\"built_in\">dict</span>.items(),key=<span class=\"keyword\">lambda</span> s:s[<span class=\"number\">1</span>],reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dict</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main_count</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    统计词频</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    f_corpus = <span class=\"string\">&#x27;part1.txt&#x27;</span></span><br><span class=\"line\">    f_stopwords = <span class=\"string\">&#x27;stopwords.txt&#x27;</span></span><br><span class=\"line\">    f_count_words = <span class=\"string\">&#x27;wordsCount_part1.txt&#x27;</span></span><br><span class=\"line\">    corpus=get_corpus(f_corpus) <span class=\"comment\">#list</span></span><br><span class=\"line\">    stopwords=get_stopwords(f_stopwords) <span class=\"comment\">#list</span></span><br><span class=\"line\">    word_dic=count_word(corpus,stopwords) <span class=\"comment\">#list</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> (word_dic)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(f_count_words):</span><br><span class=\"line\">        os.system(<span class=\"string\">r&quot;touch &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(f_count_words))</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(f_count_words,<span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> word_dic:</span><br><span class=\"line\">            res = i[<span class=\"number\">0</span>].strip()+<span class=\"string\">&#x27;\\t&#x27;</span>+<span class=\"built_in\">str</span>(i[<span class=\"number\">1</span>])</span><br><span class=\"line\">            f.write(res+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;done!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>中文分词</p>","more":"<p>[TOC]</p>\n<h1 id=\"jieba分词\"><a href=\"#jieba分词\" class=\"headerlink\" title=\"jieba分词\"></a>jieba分词</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jieba</span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba.analyse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_corpus</span>(<span class=\"params\">f_corpus</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param f_corpus: txt</span></span><br><span class=\"line\"><span class=\"string\">    :return: list</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(f_corpus, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        lines = f.readlines()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;f_corpus lines: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(lines)))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(lines[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lines</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_stopwords</span>(<span class=\"params\">f_stopwords</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param f_stopwords: txt</span></span><br><span class=\"line\"><span class=\"string\">    :return: list</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(f_stopwords, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        stopwords = f.readlines()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;stop words lines: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(stopwords)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stopwords</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_keyword_dict</span>(<span class=\"params\">filename</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">dict</span> = &#123;&#125;</span><br><span class=\"line\">    keys = []</span><br><span class=\"line\">    num=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename,<span class=\"string\">&#x27;r&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        line = f.readline()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> line :</span><br><span class=\"line\">            num +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> num % <span class=\"number\">10000</span> ==<span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;line &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(num))</span><br><span class=\"line\">            word = line.strip()</span><br><span class=\"line\">            word = get_keyword(word).strip(<span class=\"string\">&#x27;【&#x27;</span>).strip(<span class=\"string\">&#x27;】&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> keys:</span><br><span class=\"line\">                keys.append(word)</span><br><span class=\"line\">                <span class=\"built_in\">dict</span>[word] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">dict</span>[word] += <span class=\"number\">1</span></span><br><span class=\"line\">            line = f.readline()</span><br><span class=\"line\">    <span class=\"built_in\">dict</span> = <span class=\"built_in\">sorted</span>(<span class=\"built_in\">dict</span>.items(),key=<span class=\"keyword\">lambda</span> s:s[<span class=\"number\">1</span>],reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dict</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main_count</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    统计词频</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    f_corpus = <span class=\"string\">&#x27;part1.txt&#x27;</span></span><br><span class=\"line\">    f_stopwords = <span class=\"string\">&#x27;stopwords.txt&#x27;</span></span><br><span class=\"line\">    f_count_words = <span class=\"string\">&#x27;wordsCount_part1.txt&#x27;</span></span><br><span class=\"line\">    corpus=get_corpus(f_corpus) <span class=\"comment\">#list</span></span><br><span class=\"line\">    stopwords=get_stopwords(f_stopwords) <span class=\"comment\">#list</span></span><br><span class=\"line\">    word_dic=count_word(corpus,stopwords) <span class=\"comment\">#list</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> (word_dic)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(f_count_words):</span><br><span class=\"line\">        os.system(<span class=\"string\">r&quot;touch &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(f_count_words))</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(f_count_words,<span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> word_dic:</span><br><span class=\"line\">            res = i[<span class=\"number\">0</span>].strip()+<span class=\"string\">&#x27;\\t&#x27;</span>+<span class=\"built_in\">str</span>(i[<span class=\"number\">1</span>])</span><br><span class=\"line\">            f.write(res+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;done!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"吴恩达卷积神经网络笔记","date":"2022-03-01T03:32:38.000Z","_content":"\n吴恩达卷积神经网络笔记\n\n<!-- more -->\n\n\n[TOC]\n\n# 第一周 卷积神经网络\n\n## 计算及视觉要解决的问题\n   - Image Classification\n   - Object detection\n## 难点\n   - 图像计算数据量非常大\n   - 所以需要通过卷积减少参数量\n\n## padding\n\n   - valid padding: 不填充\n   - same padding：输出和输入一样的size。步长为1时 p=(f-1)/2 ,f为卷积核的大小\n\n## stride（步长）\n   - 输出图像大小：floor[(n+2p-f)/s]+1\n## 多通道卷积\n   - 卷积核的通道数=输入的通道数\n   - 一个卷积核将输入映射为单通道图片\n   - 卷积核的数量=输出图片的通道数\n   - 每个卷积核的bias是一个数\n## pooling(池化)\n   - max pooling: 只要过滤器检测到了特征，就保留下来\n      - 输出的size和padding计算方法一致\n      - pooling前后通道数目不变（跟卷积核不一样的地方）\n      - 没有参数需要学习\n## 使用卷积的意义\n   - 参数共享(parameter sharing):\n      - 卷积核(过滤器)可通用语图片的各个位置\n   - 稀疏连接(sparsity of connections)\n      - 卷积后的图片每个像素点只与输入中卷集合大小的像素点有关，与其他像素点无关。这保证图片有平移不变性，即原始图片平移几个像素不太会导致结果的变化\n\n# 第二周 深度卷积网络：实例探究\n\n## 经典网络\n\n- LeNet-5 (1998)\n- AlexNet\n- VGG\n- ResNet\n- Inception\n\n## LeNet-5 （1998）\n\n![屏幕快照 2019-11-11 下午3.00.23](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午3.00.23.png)\n\n6w 参数\n\n## AlexNet（2012）\n\n![](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.11.06.png)\n\n6kw 参数\n\n## VGG(2015)\n\n用同样大小的卷积核（3*3 ， s=1, padding=same），同样的池化策略\n\n## ResNet(2015)\n\n![屏幕快照 2019-11-11 下午8.20.45](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.20.45.png)\n\n随着层数增加，理论上来说损失会减少，但是实际上随着层数增加，对优化算法的要求越高，导致损失上升。\n\nResNet: $a_{l+1}=g(z(l+1)+a_l)$\n\n##   1*1卷积核\n\n输入图片用1个1*1的卷积核座卷积意义是：输入图片各个通道加权成一个通道\n\n## Inception Network(2014)\n\n![屏幕快照 2019-11-11 下午8.40.29](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.40.29.png)\n\n## 迁移学习 transfer learning\n\n冻结前面几层，只训练最后一层全连接层。实现方案之一为：输入通过冻结的几层得到预计算输出，写入硬盘。之后每次从硬盘读入数据，训练最后几层网络，这样不需要每次迭代时都进行前面的计算。\n\n或者只把下载的权重作为初始化，训练整个网络。\n\n## 数据扩充 data augmentation\n\n当数据量不够时。\n\n- 镜像对称\n- 随机剪裁\n- 色彩转换 color shifting(PCA增强)\n\n## 计算机视觉现状\n\n![屏幕快照 2019-11-11 下午8.56.18](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.56.18.png)\n\n数据量越少，人工特征提取越重要。\n\n# 第三周 目标检测\n\n## 目标定位 localization and detection\n\n![屏幕快照 2019-11-12 下午6.32.06](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-12 下午6.32.06.png)\n\n- 目标定位：图片中只有一个目标，要定位目标并识别目标。\n\n   实现方法：输出除了类别向量外还有四个数：中心点x,y值，box长度，box高度\n\n- 定义Y\n\n   假设检测目标有三种，图片中最多只会有一个目标物体，则y为：\n\n   $$\\left[\\begin{matrix}p_c\\\\b_x\\\\b_y\\\\b_h\\\\b_w\\\\c_1\\\\c_2\\\\c_3\\end{matrix}\\right]$$\n\n   其中如果图片中有三种中的一种，则$p_c=1 $，$c_1,c_2,c_3$为对应的onehot向量。如果图片中没有目标种类的则$p_c=0$,其他数字为任意值\n\n- loss\n\n   $$loss=\\left\\{\\begin{matrix} \\sum_{i=1}^8(y_i-\\hat{y_i})^2,\\quad if  \\quad p_c=1\\\\ (y_i-\\hat{y_i})^2,\\quad else \\end{matrix}\\right.$$\n\n   即如果图片中有目标物体，则loss包含每个y的分量误差。如果没有，则loss只计算$p_c$和预测值的误差。实际上y不同的部分可采用不同的误差，如$p_c$用logistic误差，b用均方误差，c用softmax误差\n\n## 特征点检测\n\n在图片分类的基础上做改造：y第一个元素实$p_c$,其他元素实特征点的坐标值。\n\n体态检测也是一样，只不过特征点是关节点的坐标。要注意的实特征点的顺序需要是一致的。\n\n## 目标检测\n\n- 滑动窗口 sliding window detection\n\n   1. 针对被检测物体（如车）训练图片分类网络\n   2. 用不同大小的box扫过目标图片，并输出相应位置的概率\n\n   计算成本很大\n\n## 卷积的滑动窗口实现\n\n- FC层可用卷积实现，具体操作就是卷积核大小与输入相同，卷积核数量与FC的输出层相同。这种卷积表示与全连接的数学实现是一样的\n\n- 将滑动窗口并卷积得到不同box的预测值-->将整张图片进行卷积，最后输出的就是哥哥box对应的概率\n\n- 问题：该方法隐式的预测bounding box的位置，结果不是很准确\n\n   由于box的size是一定的（卷积网络的第一层卷积核大小），移动步长也是一定的(卷积网络的移动步长)\n\n## bounding box预测\n\n- YOLO (you only look once) 2015\n\n   将问题简化为子图上的目标定位问题\n\n   1. 将图片分割，假设分割成3*3的小图\n   2. 按照目标定位的方法对每个小图标定8维向量y，由于有9个小图，最终Y为3*3 * 8 的矢量\n   3. 按照一般的方法进行训练。\n   4. 预测时看每$\\hat{Y}$的第一个分量，为1的地方就表示对应的子图有目标物体，对应的$b_i$即为box位置, 对应的$c_i$就是目标物体的种类\n\n   注意：\n\n   1. 标定物体的时候如果物体横跨多个子图，物体只会被分配到一个图上。\n   2. 标定$b_i$的时候用的是子图的相对比例坐标。$b_x,b_y$一定小于等于1，$b_x,b_y$可以大于1\n\n- 好处：\n\n   1. bounding box大小和位置不受限制\n   2. 只进行单词卷积，而非滑动多次卷积。这是由于滑动卷积过程中有很多计算实可以共享的\n\n## 交并比 intersection over union\n\n用来评价目标检测模型好坏。","source":"_posts/2_算法相关/吴恩达卷积神经网络笔记.md","raw":"---\ntitle: 吴恩达卷积神经网络笔记\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n吴恩达卷积神经网络笔记\n\n<!-- more -->\n\n\n[TOC]\n\n# 第一周 卷积神经网络\n\n## 计算及视觉要解决的问题\n   - Image Classification\n   - Object detection\n## 难点\n   - 图像计算数据量非常大\n   - 所以需要通过卷积减少参数量\n\n## padding\n\n   - valid padding: 不填充\n   - same padding：输出和输入一样的size。步长为1时 p=(f-1)/2 ,f为卷积核的大小\n\n## stride（步长）\n   - 输出图像大小：floor[(n+2p-f)/s]+1\n## 多通道卷积\n   - 卷积核的通道数=输入的通道数\n   - 一个卷积核将输入映射为单通道图片\n   - 卷积核的数量=输出图片的通道数\n   - 每个卷积核的bias是一个数\n## pooling(池化)\n   - max pooling: 只要过滤器检测到了特征，就保留下来\n      - 输出的size和padding计算方法一致\n      - pooling前后通道数目不变（跟卷积核不一样的地方）\n      - 没有参数需要学习\n## 使用卷积的意义\n   - 参数共享(parameter sharing):\n      - 卷积核(过滤器)可通用语图片的各个位置\n   - 稀疏连接(sparsity of connections)\n      - 卷积后的图片每个像素点只与输入中卷集合大小的像素点有关，与其他像素点无关。这保证图片有平移不变性，即原始图片平移几个像素不太会导致结果的变化\n\n# 第二周 深度卷积网络：实例探究\n\n## 经典网络\n\n- LeNet-5 (1998)\n- AlexNet\n- VGG\n- ResNet\n- Inception\n\n## LeNet-5 （1998）\n\n![屏幕快照 2019-11-11 下午3.00.23](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午3.00.23.png)\n\n6w 参数\n\n## AlexNet（2012）\n\n![](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.11.06.png)\n\n6kw 参数\n\n## VGG(2015)\n\n用同样大小的卷积核（3*3 ， s=1, padding=same），同样的池化策略\n\n## ResNet(2015)\n\n![屏幕快照 2019-11-11 下午8.20.45](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.20.45.png)\n\n随着层数增加，理论上来说损失会减少，但是实际上随着层数增加，对优化算法的要求越高，导致损失上升。\n\nResNet: $a_{l+1}=g(z(l+1)+a_l)$\n\n##   1*1卷积核\n\n输入图片用1个1*1的卷积核座卷积意义是：输入图片各个通道加权成一个通道\n\n## Inception Network(2014)\n\n![屏幕快照 2019-11-11 下午8.40.29](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.40.29.png)\n\n## 迁移学习 transfer learning\n\n冻结前面几层，只训练最后一层全连接层。实现方案之一为：输入通过冻结的几层得到预计算输出，写入硬盘。之后每次从硬盘读入数据，训练最后几层网络，这样不需要每次迭代时都进行前面的计算。\n\n或者只把下载的权重作为初始化，训练整个网络。\n\n## 数据扩充 data augmentation\n\n当数据量不够时。\n\n- 镜像对称\n- 随机剪裁\n- 色彩转换 color shifting(PCA增强)\n\n## 计算机视觉现状\n\n![屏幕快照 2019-11-11 下午8.56.18](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.56.18.png)\n\n数据量越少，人工特征提取越重要。\n\n# 第三周 目标检测\n\n## 目标定位 localization and detection\n\n![屏幕快照 2019-11-12 下午6.32.06](吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-12 下午6.32.06.png)\n\n- 目标定位：图片中只有一个目标，要定位目标并识别目标。\n\n   实现方法：输出除了类别向量外还有四个数：中心点x,y值，box长度，box高度\n\n- 定义Y\n\n   假设检测目标有三种，图片中最多只会有一个目标物体，则y为：\n\n   $$\\left[\\begin{matrix}p_c\\\\b_x\\\\b_y\\\\b_h\\\\b_w\\\\c_1\\\\c_2\\\\c_3\\end{matrix}\\right]$$\n\n   其中如果图片中有三种中的一种，则$p_c=1 $，$c_1,c_2,c_3$为对应的onehot向量。如果图片中没有目标种类的则$p_c=0$,其他数字为任意值\n\n- loss\n\n   $$loss=\\left\\{\\begin{matrix} \\sum_{i=1}^8(y_i-\\hat{y_i})^2,\\quad if  \\quad p_c=1\\\\ (y_i-\\hat{y_i})^2,\\quad else \\end{matrix}\\right.$$\n\n   即如果图片中有目标物体，则loss包含每个y的分量误差。如果没有，则loss只计算$p_c$和预测值的误差。实际上y不同的部分可采用不同的误差，如$p_c$用logistic误差，b用均方误差，c用softmax误差\n\n## 特征点检测\n\n在图片分类的基础上做改造：y第一个元素实$p_c$,其他元素实特征点的坐标值。\n\n体态检测也是一样，只不过特征点是关节点的坐标。要注意的实特征点的顺序需要是一致的。\n\n## 目标检测\n\n- 滑动窗口 sliding window detection\n\n   1. 针对被检测物体（如车）训练图片分类网络\n   2. 用不同大小的box扫过目标图片，并输出相应位置的概率\n\n   计算成本很大\n\n## 卷积的滑动窗口实现\n\n- FC层可用卷积实现，具体操作就是卷积核大小与输入相同，卷积核数量与FC的输出层相同。这种卷积表示与全连接的数学实现是一样的\n\n- 将滑动窗口并卷积得到不同box的预测值-->将整张图片进行卷积，最后输出的就是哥哥box对应的概率\n\n- 问题：该方法隐式的预测bounding box的位置，结果不是很准确\n\n   由于box的size是一定的（卷积网络的第一层卷积核大小），移动步长也是一定的(卷积网络的移动步长)\n\n## bounding box预测\n\n- YOLO (you only look once) 2015\n\n   将问题简化为子图上的目标定位问题\n\n   1. 将图片分割，假设分割成3*3的小图\n   2. 按照目标定位的方法对每个小图标定8维向量y，由于有9个小图，最终Y为3*3 * 8 的矢量\n   3. 按照一般的方法进行训练。\n   4. 预测时看每$\\hat{Y}$的第一个分量，为1的地方就表示对应的子图有目标物体，对应的$b_i$即为box位置, 对应的$c_i$就是目标物体的种类\n\n   注意：\n\n   1. 标定物体的时候如果物体横跨多个子图，物体只会被分配到一个图上。\n   2. 标定$b_i$的时候用的是子图的相对比例坐标。$b_x,b_y$一定小于等于1，$b_x,b_y$可以大于1\n\n- 好处：\n\n   1. bounding box大小和位置不受限制\n   2. 只进行单词卷积，而非滑动多次卷积。这是由于滑动卷积过程中有很多计算实可以共享的\n\n## 交并比 intersection over union\n\n用来评价目标检测模型好坏。","slug":"2_算法相关/吴恩达卷积神经网络笔记","published":1,"updated":"2022-03-01T03:59:30.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4e00138s32cwvj2y9k","content":"<p>吴恩达卷积神经网络笔记</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"第一周-卷积神经网络\"><a href=\"#第一周-卷积神经网络\" class=\"headerlink\" title=\"第一周 卷积神经网络\"></a>第一周 卷积神经网络</h1><h2 id=\"计算及视觉要解决的问题\"><a href=\"#计算及视觉要解决的问题\" class=\"headerlink\" title=\"计算及视觉要解决的问题\"></a>计算及视觉要解决的问题</h2><ul>\n<li>Image Classification</li>\n<li>Object detection<h2 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h2></li>\n<li>图像计算数据量非常大</li>\n<li>所以需要通过卷积减少参数量</li>\n</ul>\n<h2 id=\"padding\"><a href=\"#padding\" class=\"headerlink\" title=\"padding\"></a>padding</h2><ul>\n<li>valid padding: 不填充</li>\n<li>same padding：输出和输入一样的size。步长为1时 p=(f-1)/2 ,f为卷积核的大小</li>\n</ul>\n<h2 id=\"stride（步长）\"><a href=\"#stride（步长）\" class=\"headerlink\" title=\"stride（步长）\"></a>stride（步长）</h2><ul>\n<li>输出图像大小：floor[(n+2p-f)/s]+1<h2 id=\"多通道卷积\"><a href=\"#多通道卷积\" class=\"headerlink\" title=\"多通道卷积\"></a>多通道卷积</h2></li>\n<li>卷积核的通道数=输入的通道数</li>\n<li>一个卷积核将输入映射为单通道图片</li>\n<li>卷积核的数量=输出图片的通道数</li>\n<li>每个卷积核的bias是一个数<h2 id=\"pooling-池化\"><a href=\"#pooling-池化\" class=\"headerlink\" title=\"pooling(池化)\"></a>pooling(池化)</h2></li>\n<li>max pooling: 只要过滤器检测到了特征，就保留下来<ul>\n<li>输出的size和padding计算方法一致</li>\n<li>pooling前后通道数目不变（跟卷积核不一样的地方）</li>\n<li>没有参数需要学习<h2 id=\"使用卷积的意义\"><a href=\"#使用卷积的意义\" class=\"headerlink\" title=\"使用卷积的意义\"></a>使用卷积的意义</h2></li>\n</ul>\n</li>\n<li>参数共享(parameter sharing):<ul>\n<li>卷积核(过滤器)可通用语图片的各个位置</li>\n</ul>\n</li>\n<li>稀疏连接(sparsity of connections)<ul>\n<li>卷积后的图片每个像素点只与输入中卷集合大小的像素点有关，与其他像素点无关。这保证图片有平移不变性，即原始图片平移几个像素不太会导致结果的变化</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"第二周-深度卷积网络：实例探究\"><a href=\"#第二周-深度卷积网络：实例探究\" class=\"headerlink\" title=\"第二周 深度卷积网络：实例探究\"></a>第二周 深度卷积网络：实例探究</h1><h2 id=\"经典网络\"><a href=\"#经典网络\" class=\"headerlink\" title=\"经典网络\"></a>经典网络</h2><ul>\n<li>LeNet-5 (1998)</li>\n<li>AlexNet</li>\n<li>VGG</li>\n<li>ResNet</li>\n<li>Inception</li>\n</ul>\n<h2 id=\"LeNet-5-（1998）\"><a href=\"#LeNet-5-（1998）\" class=\"headerlink\" title=\"LeNet-5 （1998）\"></a>LeNet-5 （1998）</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午3.00.23.png\" alt=\"屏幕快照 2019-11-11 下午3.00.23\"></p>\n<p>6w 参数</p>\n<h2 id=\"AlexNet（2012）\"><a href=\"#AlexNet（2012）\" class=\"headerlink\" title=\"AlexNet（2012）\"></a>AlexNet（2012）</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.11.06.png\" alt=\"\"></p>\n<p>6kw 参数</p>\n<h2 id=\"VGG-2015\"><a href=\"#VGG-2015\" class=\"headerlink\" title=\"VGG(2015)\"></a>VGG(2015)</h2><p>用同样大小的卷积核（3*3 ， s=1, padding=same），同样的池化策略</p>\n<h2 id=\"ResNet-2015\"><a href=\"#ResNet-2015\" class=\"headerlink\" title=\"ResNet(2015)\"></a>ResNet(2015)</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.20.45.png\" alt=\"屏幕快照 2019-11-11 下午8.20.45\"></p>\n<p>随着层数增加，理论上来说损失会减少，但是实际上随着层数增加，对优化算法的要求越高，导致损失上升。</p>\n<p>ResNet: $a_{l+1}=g(z(l+1)+a_l)$</p>\n<h2 id=\"1-1卷积核\"><a href=\"#1-1卷积核\" class=\"headerlink\" title=\"1*1卷积核\"></a>1*1卷积核</h2><p>输入图片用1个1*1的卷积核座卷积意义是：输入图片各个通道加权成一个通道</p>\n<h2 id=\"Inception-Network-2014\"><a href=\"#Inception-Network-2014\" class=\"headerlink\" title=\"Inception Network(2014)\"></a>Inception Network(2014)</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.40.29.png\" alt=\"屏幕快照 2019-11-11 下午8.40.29\"></p>\n<h2 id=\"迁移学习-transfer-learning\"><a href=\"#迁移学习-transfer-learning\" class=\"headerlink\" title=\"迁移学习 transfer learning\"></a>迁移学习 transfer learning</h2><p>冻结前面几层，只训练最后一层全连接层。实现方案之一为：输入通过冻结的几层得到预计算输出，写入硬盘。之后每次从硬盘读入数据，训练最后几层网络，这样不需要每次迭代时都进行前面的计算。</p>\n<p>或者只把下载的权重作为初始化，训练整个网络。</p>\n<h2 id=\"数据扩充-data-augmentation\"><a href=\"#数据扩充-data-augmentation\" class=\"headerlink\" title=\"数据扩充 data augmentation\"></a>数据扩充 data augmentation</h2><p>当数据量不够时。</p>\n<ul>\n<li>镜像对称</li>\n<li>随机剪裁</li>\n<li>色彩转换 color shifting(PCA增强)</li>\n</ul>\n<h2 id=\"计算机视觉现状\"><a href=\"#计算机视觉现状\" class=\"headerlink\" title=\"计算机视觉现状\"></a>计算机视觉现状</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.56.18.png\" alt=\"屏幕快照 2019-11-11 下午8.56.18\"></p>\n<p>数据量越少，人工特征提取越重要。</p>\n<h1 id=\"第三周-目标检测\"><a href=\"#第三周-目标检测\" class=\"headerlink\" title=\"第三周 目标检测\"></a>第三周 目标检测</h1><h2 id=\"目标定位-localization-and-detection\"><a href=\"#目标定位-localization-and-detection\" class=\"headerlink\" title=\"目标定位 localization and detection\"></a>目标定位 localization and detection</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-12 下午6.32.06.png\" alt=\"屏幕快照 2019-11-12 下午6.32.06\"></p>\n<ul>\n<li><p>目标定位：图片中只有一个目标，要定位目标并识别目标。</p>\n<p> 实现方法：输出除了类别向量外还有四个数：中心点x,y值，box长度，box高度</p>\n</li>\n<li><p>定义Y</p>\n<p> 假设检测目标有三种，图片中最多只会有一个目标物体，则y为：</p>\n<script type=\"math/tex; mode=display\">\\left[\\begin{matrix}p_c\\\\b_x\\\\b_y\\\\b_h\\\\b_w\\\\c_1\\\\c_2\\\\c_3\\end{matrix}\\right]</script><p> 其中如果图片中有三种中的一种，则$p_c=1 $，$c_1,c_2,c_3$为对应的onehot向量。如果图片中没有目标种类的则$p_c=0$,其他数字为任意值</p>\n</li>\n<li><p>loss</p>\n<script type=\"math/tex; mode=display\">loss=\\left\\{\\begin{matrix} \\sum_{i=1}^8(y_i-\\hat{y_i})^2,\\quad if  \\quad p_c=1\\\\ (y_i-\\hat{y_i})^2,\\quad else \\end{matrix}\\right.</script><p> 即如果图片中有目标物体，则loss包含每个y的分量误差。如果没有，则loss只计算$p_c$和预测值的误差。实际上y不同的部分可采用不同的误差，如$p_c$用logistic误差，b用均方误差，c用softmax误差</p>\n</li>\n</ul>\n<h2 id=\"特征点检测\"><a href=\"#特征点检测\" class=\"headerlink\" title=\"特征点检测\"></a>特征点检测</h2><p>在图片分类的基础上做改造：y第一个元素实$p_c$,其他元素实特征点的坐标值。</p>\n<p>体态检测也是一样，只不过特征点是关节点的坐标。要注意的实特征点的顺序需要是一致的。</p>\n<h2 id=\"目标检测\"><a href=\"#目标检测\" class=\"headerlink\" title=\"目标检测\"></a>目标检测</h2><ul>\n<li><p>滑动窗口 sliding window detection</p>\n<ol>\n<li>针对被检测物体（如车）训练图片分类网络</li>\n<li><p>用不同大小的box扫过目标图片，并输出相应位置的概率</p>\n<p>计算成本很大</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"卷积的滑动窗口实现\"><a href=\"#卷积的滑动窗口实现\" class=\"headerlink\" title=\"卷积的滑动窗口实现\"></a>卷积的滑动窗口实现</h2><ul>\n<li><p>FC层可用卷积实现，具体操作就是卷积核大小与输入相同，卷积核数量与FC的输出层相同。这种卷积表示与全连接的数学实现是一样的</p>\n</li>\n<li><p>将滑动窗口并卷积得到不同box的预测值—&gt;将整张图片进行卷积，最后输出的就是哥哥box对应的概率</p>\n</li>\n<li><p>问题：该方法隐式的预测bounding box的位置，结果不是很准确</p>\n<p> 由于box的size是一定的（卷积网络的第一层卷积核大小），移动步长也是一定的(卷积网络的移动步长)</p>\n</li>\n</ul>\n<h2 id=\"bounding-box预测\"><a href=\"#bounding-box预测\" class=\"headerlink\" title=\"bounding box预测\"></a>bounding box预测</h2><ul>\n<li><p>YOLO (you only look once) 2015</p>\n<p> 将问题简化为子图上的目标定位问题</p>\n<ol>\n<li>将图片分割，假设分割成3*3的小图</li>\n<li>按照目标定位的方法对每个小图标定8维向量y，由于有9个小图，最终Y为3<em>3 </em> 8 的矢量</li>\n<li>按照一般的方法进行训练。</li>\n<li><p>预测时看每$\\hat{Y}$的第一个分量，为1的地方就表示对应的子图有目标物体，对应的$b_i$即为box位置, 对应的$c_i$就是目标物体的种类</p>\n<p>注意：</p>\n</li>\n<li><p>标定物体的时候如果物体横跨多个子图，物体只会被分配到一个图上。</p>\n</li>\n<li>标定$b_i$的时候用的是子图的相对比例坐标。$b_x,b_y$一定小于等于1，$b_x,b_y$可以大于1</li>\n</ol>\n</li>\n<li><p>好处：</p>\n<ol>\n<li>bounding box大小和位置不受限制</li>\n<li>只进行单词卷积，而非滑动多次卷积。这是由于滑动卷积过程中有很多计算实可以共享的</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"交并比-intersection-over-union\"><a href=\"#交并比-intersection-over-union\" class=\"headerlink\" title=\"交并比 intersection over union\"></a>交并比 intersection over union</h2><p>用来评价目标检测模型好坏。</p>\n","site":{"data":{}},"excerpt":"<p>吴恩达卷积神经网络笔记</p>","more":"<p>[TOC]</p>\n<h1 id=\"第一周-卷积神经网络\"><a href=\"#第一周-卷积神经网络\" class=\"headerlink\" title=\"第一周 卷积神经网络\"></a>第一周 卷积神经网络</h1><h2 id=\"计算及视觉要解决的问题\"><a href=\"#计算及视觉要解决的问题\" class=\"headerlink\" title=\"计算及视觉要解决的问题\"></a>计算及视觉要解决的问题</h2><ul>\n<li>Image Classification</li>\n<li>Object detection<h2 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h2></li>\n<li>图像计算数据量非常大</li>\n<li>所以需要通过卷积减少参数量</li>\n</ul>\n<h2 id=\"padding\"><a href=\"#padding\" class=\"headerlink\" title=\"padding\"></a>padding</h2><ul>\n<li>valid padding: 不填充</li>\n<li>same padding：输出和输入一样的size。步长为1时 p=(f-1)/2 ,f为卷积核的大小</li>\n</ul>\n<h2 id=\"stride（步长）\"><a href=\"#stride（步长）\" class=\"headerlink\" title=\"stride（步长）\"></a>stride（步长）</h2><ul>\n<li>输出图像大小：floor[(n+2p-f)/s]+1<h2 id=\"多通道卷积\"><a href=\"#多通道卷积\" class=\"headerlink\" title=\"多通道卷积\"></a>多通道卷积</h2></li>\n<li>卷积核的通道数=输入的通道数</li>\n<li>一个卷积核将输入映射为单通道图片</li>\n<li>卷积核的数量=输出图片的通道数</li>\n<li>每个卷积核的bias是一个数<h2 id=\"pooling-池化\"><a href=\"#pooling-池化\" class=\"headerlink\" title=\"pooling(池化)\"></a>pooling(池化)</h2></li>\n<li>max pooling: 只要过滤器检测到了特征，就保留下来<ul>\n<li>输出的size和padding计算方法一致</li>\n<li>pooling前后通道数目不变（跟卷积核不一样的地方）</li>\n<li>没有参数需要学习<h2 id=\"使用卷积的意义\"><a href=\"#使用卷积的意义\" class=\"headerlink\" title=\"使用卷积的意义\"></a>使用卷积的意义</h2></li>\n</ul>\n</li>\n<li>参数共享(parameter sharing):<ul>\n<li>卷积核(过滤器)可通用语图片的各个位置</li>\n</ul>\n</li>\n<li>稀疏连接(sparsity of connections)<ul>\n<li>卷积后的图片每个像素点只与输入中卷集合大小的像素点有关，与其他像素点无关。这保证图片有平移不变性，即原始图片平移几个像素不太会导致结果的变化</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"第二周-深度卷积网络：实例探究\"><a href=\"#第二周-深度卷积网络：实例探究\" class=\"headerlink\" title=\"第二周 深度卷积网络：实例探究\"></a>第二周 深度卷积网络：实例探究</h1><h2 id=\"经典网络\"><a href=\"#经典网络\" class=\"headerlink\" title=\"经典网络\"></a>经典网络</h2><ul>\n<li>LeNet-5 (1998)</li>\n<li>AlexNet</li>\n<li>VGG</li>\n<li>ResNet</li>\n<li>Inception</li>\n</ul>\n<h2 id=\"LeNet-5-（1998）\"><a href=\"#LeNet-5-（1998）\" class=\"headerlink\" title=\"LeNet-5 （1998）\"></a>LeNet-5 （1998）</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午3.00.23.png\" alt=\"屏幕快照 2019-11-11 下午3.00.23\"></p>\n<p>6w 参数</p>\n<h2 id=\"AlexNet（2012）\"><a href=\"#AlexNet（2012）\" class=\"headerlink\" title=\"AlexNet（2012）\"></a>AlexNet（2012）</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.11.06.png\" alt=\"\"></p>\n<p>6kw 参数</p>\n<h2 id=\"VGG-2015\"><a href=\"#VGG-2015\" class=\"headerlink\" title=\"VGG(2015)\"></a>VGG(2015)</h2><p>用同样大小的卷积核（3*3 ， s=1, padding=same），同样的池化策略</p>\n<h2 id=\"ResNet-2015\"><a href=\"#ResNet-2015\" class=\"headerlink\" title=\"ResNet(2015)\"></a>ResNet(2015)</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.20.45.png\" alt=\"屏幕快照 2019-11-11 下午8.20.45\"></p>\n<p>随着层数增加，理论上来说损失会减少，但是实际上随着层数增加，对优化算法的要求越高，导致损失上升。</p>\n<p>ResNet: $a_{l+1}=g(z(l+1)+a_l)$</p>\n<h2 id=\"1-1卷积核\"><a href=\"#1-1卷积核\" class=\"headerlink\" title=\"1*1卷积核\"></a>1*1卷积核</h2><p>输入图片用1个1*1的卷积核座卷积意义是：输入图片各个通道加权成一个通道</p>\n<h2 id=\"Inception-Network-2014\"><a href=\"#Inception-Network-2014\" class=\"headerlink\" title=\"Inception Network(2014)\"></a>Inception Network(2014)</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.40.29.png\" alt=\"屏幕快照 2019-11-11 下午8.40.29\"></p>\n<h2 id=\"迁移学习-transfer-learning\"><a href=\"#迁移学习-transfer-learning\" class=\"headerlink\" title=\"迁移学习 transfer learning\"></a>迁移学习 transfer learning</h2><p>冻结前面几层，只训练最后一层全连接层。实现方案之一为：输入通过冻结的几层得到预计算输出，写入硬盘。之后每次从硬盘读入数据，训练最后几层网络，这样不需要每次迭代时都进行前面的计算。</p>\n<p>或者只把下载的权重作为初始化，训练整个网络。</p>\n<h2 id=\"数据扩充-data-augmentation\"><a href=\"#数据扩充-data-augmentation\" class=\"headerlink\" title=\"数据扩充 data augmentation\"></a>数据扩充 data augmentation</h2><p>当数据量不够时。</p>\n<ul>\n<li>镜像对称</li>\n<li>随机剪裁</li>\n<li>色彩转换 color shifting(PCA增强)</li>\n</ul>\n<h2 id=\"计算机视觉现状\"><a href=\"#计算机视觉现状\" class=\"headerlink\" title=\"计算机视觉现状\"></a>计算机视觉现状</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-11 下午8.56.18.png\" alt=\"屏幕快照 2019-11-11 下午8.56.18\"></p>\n<p>数据量越少，人工特征提取越重要。</p>\n<h1 id=\"第三周-目标检测\"><a href=\"#第三周-目标检测\" class=\"headerlink\" title=\"第三周 目标检测\"></a>第三周 目标检测</h1><h2 id=\"目标定位-localization-and-detection\"><a href=\"#目标定位-localization-and-detection\" class=\"headerlink\" title=\"目标定位 localization and detection\"></a>目标定位 localization and detection</h2><p><img src=\"吴恩达卷积神经网络笔记.assets/屏幕快照 2019-11-12 下午6.32.06.png\" alt=\"屏幕快照 2019-11-12 下午6.32.06\"></p>\n<ul>\n<li><p>目标定位：图片中只有一个目标，要定位目标并识别目标。</p>\n<p> 实现方法：输出除了类别向量外还有四个数：中心点x,y值，box长度，box高度</p>\n</li>\n<li><p>定义Y</p>\n<p> 假设检测目标有三种，图片中最多只会有一个目标物体，则y为：</p>\n<script type=\"math/tex; mode=display\">\\left[\\begin{matrix}p_c\\\\b_x\\\\b_y\\\\b_h\\\\b_w\\\\c_1\\\\c_2\\\\c_3\\end{matrix}\\right]</script><p> 其中如果图片中有三种中的一种，则$p_c=1 $，$c_1,c_2,c_3$为对应的onehot向量。如果图片中没有目标种类的则$p_c=0$,其他数字为任意值</p>\n</li>\n<li><p>loss</p>\n<script type=\"math/tex; mode=display\">loss=\\left\\{\\begin{matrix} \\sum_{i=1}^8(y_i-\\hat{y_i})^2,\\quad if  \\quad p_c=1\\\\ (y_i-\\hat{y_i})^2,\\quad else \\end{matrix}\\right.</script><p> 即如果图片中有目标物体，则loss包含每个y的分量误差。如果没有，则loss只计算$p_c$和预测值的误差。实际上y不同的部分可采用不同的误差，如$p_c$用logistic误差，b用均方误差，c用softmax误差</p>\n</li>\n</ul>\n<h2 id=\"特征点检测\"><a href=\"#特征点检测\" class=\"headerlink\" title=\"特征点检测\"></a>特征点检测</h2><p>在图片分类的基础上做改造：y第一个元素实$p_c$,其他元素实特征点的坐标值。</p>\n<p>体态检测也是一样，只不过特征点是关节点的坐标。要注意的实特征点的顺序需要是一致的。</p>\n<h2 id=\"目标检测\"><a href=\"#目标检测\" class=\"headerlink\" title=\"目标检测\"></a>目标检测</h2><ul>\n<li><p>滑动窗口 sliding window detection</p>\n<ol>\n<li>针对被检测物体（如车）训练图片分类网络</li>\n<li><p>用不同大小的box扫过目标图片，并输出相应位置的概率</p>\n<p>计算成本很大</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"卷积的滑动窗口实现\"><a href=\"#卷积的滑动窗口实现\" class=\"headerlink\" title=\"卷积的滑动窗口实现\"></a>卷积的滑动窗口实现</h2><ul>\n<li><p>FC层可用卷积实现，具体操作就是卷积核大小与输入相同，卷积核数量与FC的输出层相同。这种卷积表示与全连接的数学实现是一样的</p>\n</li>\n<li><p>将滑动窗口并卷积得到不同box的预测值—&gt;将整张图片进行卷积，最后输出的就是哥哥box对应的概率</p>\n</li>\n<li><p>问题：该方法隐式的预测bounding box的位置，结果不是很准确</p>\n<p> 由于box的size是一定的（卷积网络的第一层卷积核大小），移动步长也是一定的(卷积网络的移动步长)</p>\n</li>\n</ul>\n<h2 id=\"bounding-box预测\"><a href=\"#bounding-box预测\" class=\"headerlink\" title=\"bounding box预测\"></a>bounding box预测</h2><ul>\n<li><p>YOLO (you only look once) 2015</p>\n<p> 将问题简化为子图上的目标定位问题</p>\n<ol>\n<li>将图片分割，假设分割成3*3的小图</li>\n<li>按照目标定位的方法对每个小图标定8维向量y，由于有9个小图，最终Y为3<em>3 </em> 8 的矢量</li>\n<li>按照一般的方法进行训练。</li>\n<li><p>预测时看每$\\hat{Y}$的第一个分量，为1的地方就表示对应的子图有目标物体，对应的$b_i$即为box位置, 对应的$c_i$就是目标物体的种类</p>\n<p>注意：</p>\n</li>\n<li><p>标定物体的时候如果物体横跨多个子图，物体只会被分配到一个图上。</p>\n</li>\n<li>标定$b_i$的时候用的是子图的相对比例坐标。$b_x,b_y$一定小于等于1，$b_x,b_y$可以大于1</li>\n</ol>\n</li>\n<li><p>好处：</p>\n<ol>\n<li>bounding box大小和位置不受限制</li>\n<li>只进行单词卷积，而非滑动多次卷积。这是由于滑动卷积过程中有很多计算实可以共享的</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"交并比-intersection-over-union\"><a href=\"#交并比-intersection-over-union\" class=\"headerlink\" title=\"交并比 intersection over union\"></a>交并比 intersection over union</h2><p>用来评价目标检测模型好坏。</p>"},{"title":"时间序列模型","date":"2022-03-01T03:32:38.000Z","_content":"\n时间序列模型\n\n<!-- more -->\n\n\n---\ntypora-copy-images-to: ./image\n---\n\n# 时间序列模型\n\n## WEEK1\n\n- 符号解释\n\n  $x^{(i)<t>}$:  第i个样本的第t维分量\n\n  $T_x^{(i)}$ : 第i个样本x的维度\n\n- 主体抓取\n\n  1. 多对多模型\n\n  2. 不能用全连接，因为输入和输出的长度不定，而且输入矩阵太大\n\n     ![E36DF04F-C0BD-42D3-9A0D-CA2F2B1C7DE9](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/E36DF04F-C0BD-42D3-9A0D-CA2F2B1C7DE9.png)\n\n\n$a^{<0>} = \\vec{0}$\n\n$a^{<1>} = g(W_{aa}a^{<0>} +W_{ax}x^{<1>} +b_a)$\n\n$\\hat{y}^{<1>} = g(W_{ya}a^{<1>}+b_y)$\n\n-  Forward propagation\n\n$a^{<t>} = g(W_{aa}a^{<t-1>} +W_{ax}x^{<t-1>}+b_a)$\n\n$\\hat{y^{<t>}} = g(W_{ya}a^{<t>}+b_y)$\n\n为了简化模型，可把$W_{ax},W_{aa}$横向排列成为$W_a$，$a^{<t-1>},x^{t}$纵向排列\n\n![D71818E3-4031-4EF4-99F4-BD47FC6BD0C5](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/D71818E3-4031-4EF4-99F4-BD47FC6BD0C5.png)\n\n-  Back propagation\n\n   $L^{<t>} (\\hat{y}^{<t>},y^{t}) = -y^{<t>}log(\\hat{y})-(1-y^{<t>})log(1-\\hat{y}^{<t>})$\n\n   $L(\\hat{y},y) = \\sum_{t=1}^{T_x}L^{<t>}(\\hat{y}^{<t>},y^{<t>})$\n\n-  Different types of RNN\n\n   ![FF3C6BD2-518A-480C-ADE5-3B71224C7DDB](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/FF3C6BD2-518A-480C-ADE5-3B71224C7DDB.png)\n\n-  Language model\n\n   -  tokenize (one hot)\n\n   -  <UNK>来编码非常用单词\n\n   -  目标：判断一个句子的概率\n\n      -  训练：\n\n         ![ßFC45A4AF-B524-425F-8C28-14FF8C16B802](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/FC45A4AF-B524-425F-8C28-14FF8C16B802.png)\n\n-  Sample a sequence model from trained RNN\n\n   -  初始化输入（零向量）\n   -  按照预测softmax后的概率sample出一个词\n   -  以新词作为输入，softmax预测下一个词的概率，按照概率分布sample出第二个词\n\n-  RNN的梯度消失\n\n   梯度爆炸可使用gradient clipping\n\n-  GRU（Gradient Recurrent Unit）\n\n   -  c:memory cell\n\n      $c^{<t>} = a^{<t>}$\n\n      $\\hat{c}^{<t>}=tanh(W_c[c^{<t-1>},x^{<t>}]+b_c)$\n\n      $\\Gamma_u=\\sigma(W_u[c^{<t-1>},x^{<t>}]+b_u)$   (u: update,$\\Gamma$ 约为0或1)\n\n      $c^{<t>} = \\Gamma_u\\hat{c}^{<t>} +(1-\\Gamma_u)c^{<t-1>}$  （$\\Gamma$维度和c一样；elemet wise multiply）\n\n      ![05728660-E7EF-4289-9665-45E6653B03F5](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/05728660-E7EF-4289-9665-45E6653B03F5.png)\n\n   -  Full GRU\n\n      $\\hat{c}^{<t>} = tanh(Wc[\\Gamma_r*c^{<t-1>},x^{<t>}]+b_c)$\n\n      $\\Gamma_r=\\sigma(W_r[c^{<t-1>},x^{t}]+b_c)$\n\n      $\\Gamma _u=\\sigma(W_u[c^{<t-1>},x^{<t>}]+b_u)$\n\n      $c^{<t>} = \\Gamma_u*\\hat{c}^{<t>}+(1-\\Gamma_u)*c^{<t-1>}$\n\n      $a^{<t>} = c^{<t>}$\n\n      ​\n\n-  LSTM (Long Short Term Memory)\n\n   $\\hat{c}^{<t>} = tanh(W_c[a^{<t-1>},x^{<t>}]+b_c)$\n\n   $\\Gamma_u=\\sigma(W_u[a^{<t-1>},x^{<t>}]+b_u)$\n\n   $\\Gamma_f=\\sigma(W_f[a^{<t-1>},x^{<t>}]+b_f)$\n\n   $\\Gamma_o=\\sigma(W_o[a^{<t-1>},x^{<t>}]+b_o)$\n\n   $c^{<t>}=\\Gamma_u*\\hat{c}^{<t>}+\\Gamma_f*c^{<t-1>}$\n\n   $a^{<t>}=\\Gamma_o*c^{<t>}$\n\n   ![C9ED60FC-BEA6-49F4-A735-90C7B76F782D](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/C9ED60FC-BEA6-49F4-A735-90C7B76F782D.png)","source":"_posts/2_算法相关/时间序列模型.md","raw":"---\ntitle: 时间序列模型\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n时间序列模型\n\n<!-- more -->\n\n\n---\ntypora-copy-images-to: ./image\n---\n\n# 时间序列模型\n\n## WEEK1\n\n- 符号解释\n\n  $x^{(i)<t>}$:  第i个样本的第t维分量\n\n  $T_x^{(i)}$ : 第i个样本x的维度\n\n- 主体抓取\n\n  1. 多对多模型\n\n  2. 不能用全连接，因为输入和输出的长度不定，而且输入矩阵太大\n\n     ![E36DF04F-C0BD-42D3-9A0D-CA2F2B1C7DE9](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/E36DF04F-C0BD-42D3-9A0D-CA2F2B1C7DE9.png)\n\n\n$a^{<0>} = \\vec{0}$\n\n$a^{<1>} = g(W_{aa}a^{<0>} +W_{ax}x^{<1>} +b_a)$\n\n$\\hat{y}^{<1>} = g(W_{ya}a^{<1>}+b_y)$\n\n-  Forward propagation\n\n$a^{<t>} = g(W_{aa}a^{<t-1>} +W_{ax}x^{<t-1>}+b_a)$\n\n$\\hat{y^{<t>}} = g(W_{ya}a^{<t>}+b_y)$\n\n为了简化模型，可把$W_{ax},W_{aa}$横向排列成为$W_a$，$a^{<t-1>},x^{t}$纵向排列\n\n![D71818E3-4031-4EF4-99F4-BD47FC6BD0C5](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/D71818E3-4031-4EF4-99F4-BD47FC6BD0C5.png)\n\n-  Back propagation\n\n   $L^{<t>} (\\hat{y}^{<t>},y^{t}) = -y^{<t>}log(\\hat{y})-(1-y^{<t>})log(1-\\hat{y}^{<t>})$\n\n   $L(\\hat{y},y) = \\sum_{t=1}^{T_x}L^{<t>}(\\hat{y}^{<t>},y^{<t>})$\n\n-  Different types of RNN\n\n   ![FF3C6BD2-518A-480C-ADE5-3B71224C7DDB](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/FF3C6BD2-518A-480C-ADE5-3B71224C7DDB.png)\n\n-  Language model\n\n   -  tokenize (one hot)\n\n   -  <UNK>来编码非常用单词\n\n   -  目标：判断一个句子的概率\n\n      -  训练：\n\n         ![ßFC45A4AF-B524-425F-8C28-14FF8C16B802](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/FC45A4AF-B524-425F-8C28-14FF8C16B802.png)\n\n-  Sample a sequence model from trained RNN\n\n   -  初始化输入（零向量）\n   -  按照预测softmax后的概率sample出一个词\n   -  以新词作为输入，softmax预测下一个词的概率，按照概率分布sample出第二个词\n\n-  RNN的梯度消失\n\n   梯度爆炸可使用gradient clipping\n\n-  GRU（Gradient Recurrent Unit）\n\n   -  c:memory cell\n\n      $c^{<t>} = a^{<t>}$\n\n      $\\hat{c}^{<t>}=tanh(W_c[c^{<t-1>},x^{<t>}]+b_c)$\n\n      $\\Gamma_u=\\sigma(W_u[c^{<t-1>},x^{<t>}]+b_u)$   (u: update,$\\Gamma$ 约为0或1)\n\n      $c^{<t>} = \\Gamma_u\\hat{c}^{<t>} +(1-\\Gamma_u)c^{<t-1>}$  （$\\Gamma$维度和c一样；elemet wise multiply）\n\n      ![05728660-E7EF-4289-9665-45E6653B03F5](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/05728660-E7EF-4289-9665-45E6653B03F5.png)\n\n   -  Full GRU\n\n      $\\hat{c}^{<t>} = tanh(Wc[\\Gamma_r*c^{<t-1>},x^{<t>}]+b_c)$\n\n      $\\Gamma_r=\\sigma(W_r[c^{<t-1>},x^{t}]+b_c)$\n\n      $\\Gamma _u=\\sigma(W_u[c^{<t-1>},x^{<t>}]+b_u)$\n\n      $c^{<t>} = \\Gamma_u*\\hat{c}^{<t>}+(1-\\Gamma_u)*c^{<t-1>}$\n\n      $a^{<t>} = c^{<t>}$\n\n      ​\n\n-  LSTM (Long Short Term Memory)\n\n   $\\hat{c}^{<t>} = tanh(W_c[a^{<t-1>},x^{<t>}]+b_c)$\n\n   $\\Gamma_u=\\sigma(W_u[a^{<t-1>},x^{<t>}]+b_u)$\n\n   $\\Gamma_f=\\sigma(W_f[a^{<t-1>},x^{<t>}]+b_f)$\n\n   $\\Gamma_o=\\sigma(W_o[a^{<t-1>},x^{<t>}]+b_o)$\n\n   $c^{<t>}=\\Gamma_u*\\hat{c}^{<t>}+\\Gamma_f*c^{<t-1>}$\n\n   $a^{<t>}=\\Gamma_o*c^{<t>}$\n\n   ![C9ED60FC-BEA6-49F4-A735-90C7B76F782D](/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/C9ED60FC-BEA6-49F4-A735-90C7B76F782D.png)","slug":"2_算法相关/时间序列模型","published":1,"updated":"2022-03-01T03:59:30.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4f00168s32e15w1gyv","content":"<p>时间序列模型</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"typora-copy-images-to-image\"><a href=\"#typora-copy-images-to-image\" class=\"headerlink\" title=\"typora-copy-images-to: ./image\"></a>typora-copy-images-to: ./image</h2><h1 id=\"时间序列模型\"><a href=\"#时间序列模型\" class=\"headerlink\" title=\"时间序列模型\"></a>时间序列模型</h1><h2 id=\"WEEK1\"><a href=\"#WEEK1\" class=\"headerlink\" title=\"WEEK1\"></a>WEEK1</h2><ul>\n<li><p>符号解释</p>\n<p>$x^{(i)<t>}$:  第i个样本的第t维分量</p>\n<p>$T_x^{(i)}$ : 第i个样本x的维度</p>\n</li>\n<li><p>主体抓取</p>\n<ol>\n<li><p>多对多模型</p>\n</li>\n<li><p>不能用全连接，因为输入和输出的长度不定，而且输入矩阵太大</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/E36DF04F-C0BD-42D3-9A0D-CA2F2B1C7DE9.png\" alt=\"E36DF04F-C0BD-42D3-9A0D-CA2F2B1C7DE9\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<p>$a^{<0>} = \\vec{0}$</p>\n<p>$a^{<1>} = g(W_{aa}a^{<0>} +W_{ax}x^{<1>} +b_a)$</p>\n<p>$\\hat{y}^{<1>} = g(W_{ya}a^{<1>}+b_y)$</p>\n<ul>\n<li>Forward propagation</li>\n</ul>\n<p>$a^{<t>} = g(W_{aa}a^{<t-1>} +W_{ax}x^{<t-1>}+b_a)$</p>\n<p>$\\hat{y^{<t>}} = g(W_{ya}a^{<t>}+b_y)$</p>\n<p>为了简化模型，可把$W_{ax},W_{aa}$横向排列成为$W_a$，$a^{<t-1>},x^{t}$纵向排列</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/D71818E3-4031-4EF4-99F4-BD47FC6BD0C5.png\" alt=\"D71818E3-4031-4EF4-99F4-BD47FC6BD0C5\"></p>\n<ul>\n<li><p>Back propagation</p>\n<p>$L^{<t>} (\\hat{y}^{<t>},y^{t}) = -y^{<t>}log(\\hat{y})-(1-y^{<t>})log(1-\\hat{y}^{<t>})$</p>\n<p>$L(\\hat{y},y) = \\sum_{t=1}^{T_x}L^{<t>}(\\hat{y}^{<t>},y^{<t>})$</p>\n</li>\n<li><p>Different types of RNN</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/FF3C6BD2-518A-480C-ADE5-3B71224C7DDB.png\" alt=\"FF3C6BD2-518A-480C-ADE5-3B71224C7DDB\"></p>\n</li>\n<li><p>Language model</p>\n<ul>\n<li><p>tokenize (one hot)</p>\n</li>\n<li><p><UNK>来编码非常用单词</p>\n</li>\n<li><p>目标：判断一个句子的概率</p>\n<ul>\n<li><p>训练：</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/FC45A4AF-B524-425F-8C28-14FF8C16B802.png\" alt=\"ßFC45A4AF-B524-425F-8C28-14FF8C16B802\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Sample a sequence model from trained RNN</p>\n<ul>\n<li>初始化输入（零向量）</li>\n<li>按照预测softmax后的概率sample出一个词</li>\n<li>以新词作为输入，softmax预测下一个词的概率，按照概率分布sample出第二个词</li>\n</ul>\n</li>\n<li><p>RNN的梯度消失</p>\n<p>梯度爆炸可使用gradient clipping</p>\n</li>\n<li><p>GRU（Gradient Recurrent Unit）</p>\n<ul>\n<li><p>c:memory cell</p>\n<p>$c^{<t>} = a^{<t>}$</p>\n<p>$\\hat{c}^{<t>}=tanh(W_c[c^{<t-1>},x^{<t>}]+b_c)$</p>\n<p>$\\Gamma_u=\\sigma(W_u[c^{<t-1>},x^{<t>}]+b_u)$   (u: update,$\\Gamma$ 约为0或1)</p>\n<p>$c^{<t>} = \\Gamma_u\\hat{c}^{<t>} +(1-\\Gamma_u)c^{<t-1>}$  （$\\Gamma$维度和c一样；elemet wise multiply）</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/05728660-E7EF-4289-9665-45E6653B03F5.png\" alt=\"05728660-E7EF-4289-9665-45E6653B03F5\"></p>\n</li>\n<li><p>Full GRU</p>\n<p>$\\hat{c}^{<t>} = tanh(Wc[\\Gamma_r*c^{<t-1>},x^{<t>}]+b_c)$</p>\n<p>$\\Gamma_r=\\sigma(W_r[c^{<t-1>},x^{t}]+b_c)$</p>\n<p>$\\Gamma _u=\\sigma(W_u[c^{<t-1>},x^{<t>}]+b_u)$</p>\n<p>$c^{<t>} = \\Gamma_u<em>\\hat{c}^{<t>}+(1-\\Gamma_u)</em>c^{<t-1>}$</p>\n<p>$a^{<t>} = c^{<t>}$</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n<li><p>LSTM (Long Short Term Memory)</p>\n<p>$\\hat{c}^{<t>} = tanh(W_c[a^{<t-1>},x^{<t>}]+b_c)$</p>\n<p>$\\Gamma_u=\\sigma(W_u[a^{<t-1>},x^{<t>}]+b_u)$</p>\n<p>$\\Gamma_f=\\sigma(W_f[a^{<t-1>},x^{<t>}]+b_f)$</p>\n<p>$\\Gamma_o=\\sigma(W_o[a^{<t-1>},x^{<t>}]+b_o)$</p>\n<p>$c^{<t>}=\\Gamma_u<em>\\hat{c}^{<t>}+\\Gamma_f</em>c^{<t-1>}$</p>\n<p>$a^{<t>}=\\Gamma_o*c^{<t>}$</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/C9ED60FC-BEA6-49F4-A735-90C7B76F782D.png\" alt=\"C9ED60FC-BEA6-49F4-A735-90C7B76F782D\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>时间序列模型</p>","more":"<hr>\n<h2 id=\"typora-copy-images-to-image\"><a href=\"#typora-copy-images-to-image\" class=\"headerlink\" title=\"typora-copy-images-to: ./image\"></a>typora-copy-images-to: ./image</h2><h1 id=\"时间序列模型\"><a href=\"#时间序列模型\" class=\"headerlink\" title=\"时间序列模型\"></a>时间序列模型</h1><h2 id=\"WEEK1\"><a href=\"#WEEK1\" class=\"headerlink\" title=\"WEEK1\"></a>WEEK1</h2><ul>\n<li><p>符号解释</p>\n<p>$x^{(i)<t>}$:  第i个样本的第t维分量</p>\n<p>$T_x^{(i)}$ : 第i个样本x的维度</p>\n</li>\n<li><p>主体抓取</p>\n<ol>\n<li><p>多对多模型</p>\n</li>\n<li><p>不能用全连接，因为输入和输出的长度不定，而且输入矩阵太大</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/E36DF04F-C0BD-42D3-9A0D-CA2F2B1C7DE9.png\" alt=\"E36DF04F-C0BD-42D3-9A0D-CA2F2B1C7DE9\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<p>$a^{<0>} = \\vec{0}$</p>\n<p>$a^{<1>} = g(W_{aa}a^{<0>} +W_{ax}x^{<1>} +b_a)$</p>\n<p>$\\hat{y}^{<1>} = g(W_{ya}a^{<1>}+b_y)$</p>\n<ul>\n<li>Forward propagation</li>\n</ul>\n<p>$a^{<t>} = g(W_{aa}a^{<t-1>} +W_{ax}x^{<t-1>}+b_a)$</p>\n<p>$\\hat{y^{<t>}} = g(W_{ya}a^{<t>}+b_y)$</p>\n<p>为了简化模型，可把$W_{ax},W_{aa}$横向排列成为$W_a$，$a^{<t-1>},x^{t}$纵向排列</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/D71818E3-4031-4EF4-99F4-BD47FC6BD0C5.png\" alt=\"D71818E3-4031-4EF4-99F4-BD47FC6BD0C5\"></p>\n<ul>\n<li><p>Back propagation</p>\n<p>$L^{<t>} (\\hat{y}^{<t>},y^{t}) = -y^{<t>}log(\\hat{y})-(1-y^{<t>})log(1-\\hat{y}^{<t>})$</p>\n<p>$L(\\hat{y},y) = \\sum_{t=1}^{T_x}L^{<t>}(\\hat{y}^{<t>},y^{<t>})$</p>\n</li>\n<li><p>Different types of RNN</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/FF3C6BD2-518A-480C-ADE5-3B71224C7DDB.png\" alt=\"FF3C6BD2-518A-480C-ADE5-3B71224C7DDB\"></p>\n</li>\n<li><p>Language model</p>\n<ul>\n<li><p>tokenize (one hot)</p>\n</li>\n<li><p><UNK>来编码非常用单词</p>\n</li>\n<li><p>目标：判断一个句子的概率</p>\n<ul>\n<li><p>训练：</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/FC45A4AF-B524-425F-8C28-14FF8C16B802.png\" alt=\"ßFC45A4AF-B524-425F-8C28-14FF8C16B802\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Sample a sequence model from trained RNN</p>\n<ul>\n<li>初始化输入（零向量）</li>\n<li>按照预测softmax后的概率sample出一个词</li>\n<li>以新词作为输入，softmax预测下一个词的概率，按照概率分布sample出第二个词</li>\n</ul>\n</li>\n<li><p>RNN的梯度消失</p>\n<p>梯度爆炸可使用gradient clipping</p>\n</li>\n<li><p>GRU（Gradient Recurrent Unit）</p>\n<ul>\n<li><p>c:memory cell</p>\n<p>$c^{<t>} = a^{<t>}$</p>\n<p>$\\hat{c}^{<t>}=tanh(W_c[c^{<t-1>},x^{<t>}]+b_c)$</p>\n<p>$\\Gamma_u=\\sigma(W_u[c^{<t-1>},x^{<t>}]+b_u)$   (u: update,$\\Gamma$ 约为0或1)</p>\n<p>$c^{<t>} = \\Gamma_u\\hat{c}^{<t>} +(1-\\Gamma_u)c^{<t-1>}$  （$\\Gamma$维度和c一样；elemet wise multiply）</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/05728660-E7EF-4289-9665-45E6653B03F5.png\" alt=\"05728660-E7EF-4289-9665-45E6653B03F5\"></p>\n</li>\n<li><p>Full GRU</p>\n<p>$\\hat{c}^{<t>} = tanh(Wc[\\Gamma_r*c^{<t-1>},x^{<t>}]+b_c)$</p>\n<p>$\\Gamma_r=\\sigma(W_r[c^{<t-1>},x^{t}]+b_c)$</p>\n<p>$\\Gamma _u=\\sigma(W_u[c^{<t-1>},x^{<t>}]+b_u)$</p>\n<p>$c^{<t>} = \\Gamma_u<em>\\hat{c}^{<t>}+(1-\\Gamma_u)</em>c^{<t-1>}$</p>\n<p>$a^{<t>} = c^{<t>}$</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n<li><p>LSTM (Long Short Term Memory)</p>\n<p>$\\hat{c}^{<t>} = tanh(W_c[a^{<t-1>},x^{<t>}]+b_c)$</p>\n<p>$\\Gamma_u=\\sigma(W_u[a^{<t-1>},x^{<t>}]+b_u)$</p>\n<p>$\\Gamma_f=\\sigma(W_f[a^{<t-1>},x^{<t>}]+b_f)$</p>\n<p>$\\Gamma_o=\\sigma(W_o[a^{<t-1>},x^{<t>}]+b_o)$</p>\n<p>$c^{<t>}=\\Gamma_u<em>\\hat{c}^{<t>}+\\Gamma_f</em>c^{<t-1>}$</p>\n<p>$a^{<t>}=\\Gamma_o*c^{<t>}$</p>\n<p><img src=\"/Users/tessiehe/Documents/study_notes/吴恩达时间序列笔记/image/C9ED60FC-BEA6-49F4-A735-90C7B76F782D.png\" alt=\"C9ED60FC-BEA6-49F4-A735-90C7B76F782D\"></p>\n</li>\n</ul>"},{"title":"机器学习基础","date":"2022-03-01T03:32:38.000Z","_content":"\n机器学习基础\n\n<!-- more -->\n\n\n[TOC]\n\n# Woe\n\nWOE的全称是“weight of evidence”，即证据权重, WOE表示的含义即是\"**当前分组中响应客户占所有响应客户的比例\"和\"当前分组中没有响应的客户占所有没有响应客户的比例**\"的差异。先把分析变量进行分箱，每个分箱内的$w_{oe}$为\n$$\nwoe_i=\\frac{当前分组中响应客户占所有响应客户的比例}{当前分组中没有响应的客户占所有没有响应客户的比例}=ln\\frac{P_{y_i}}{P_{n_i}}=ln\\frac{y_1/y_2}{n_i/n_s}\n$$\n\n$$\nwoe_i=\\frac{sum(y_i)/sum(y_s)}{sum(1-y_i)/sum(1-y_s)}\n$$\n\n\n\n该值绝对值越大说明变量区分能力越强\n\n# IV\n\nIV衡量的是某一个变量的信息量，从公式来看的话，相当于是自变量WOE值的一个加权求和，其值的大小决定了自变量对于目标变量的影响程度\n$$\nIV_i=(P_{y_i}-P_{n_i})*woe_i\n$$\nWOE 和 IV 都能表达某个分组对目标变量的预测能力。但实际中，我们通常选择 IV 而不是 WOE 的和来衡量变量预测的能力，这是为什么呢？首先，因为我们在衡量一个变量的预测能力时，我们所使用的指标值不应该是负数。从这意义上来说，IV 比 WOE 多乘以前面那个因子，就保证了它不会是负数；然后，乘以(Pyi−Pni)这个因子，体现出了变量当前分组中个体的数量占整体的比例，从而很好考虑了这个分组中样本占整体的比例，比例越低，这个分组对变量整体预测能力的贡献越低。相反，如果直接用 WOE 的绝对值加和，会因为该分组出现次数偏少的影响而得到一个很高的指标。\n\n# AUC & KS\n\n# 信息熵（information entropy）\n\n衡量样本纯度，熵越小越纯,样本D有K类样本，其信息熵为\n$$\nEnt(D)=-\\sum_{k=1}^{K}p_klog_2p_k\n$$\n","source":"_posts/2_算法相关/机器学习基础.md","raw":"---\ntitle: 机器学习基础\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n机器学习基础\n\n<!-- more -->\n\n\n[TOC]\n\n# Woe\n\nWOE的全称是“weight of evidence”，即证据权重, WOE表示的含义即是\"**当前分组中响应客户占所有响应客户的比例\"和\"当前分组中没有响应的客户占所有没有响应客户的比例**\"的差异。先把分析变量进行分箱，每个分箱内的$w_{oe}$为\n$$\nwoe_i=\\frac{当前分组中响应客户占所有响应客户的比例}{当前分组中没有响应的客户占所有没有响应客户的比例}=ln\\frac{P_{y_i}}{P_{n_i}}=ln\\frac{y_1/y_2}{n_i/n_s}\n$$\n\n$$\nwoe_i=\\frac{sum(y_i)/sum(y_s)}{sum(1-y_i)/sum(1-y_s)}\n$$\n\n\n\n该值绝对值越大说明变量区分能力越强\n\n# IV\n\nIV衡量的是某一个变量的信息量，从公式来看的话，相当于是自变量WOE值的一个加权求和，其值的大小决定了自变量对于目标变量的影响程度\n$$\nIV_i=(P_{y_i}-P_{n_i})*woe_i\n$$\nWOE 和 IV 都能表达某个分组对目标变量的预测能力。但实际中，我们通常选择 IV 而不是 WOE 的和来衡量变量预测的能力，这是为什么呢？首先，因为我们在衡量一个变量的预测能力时，我们所使用的指标值不应该是负数。从这意义上来说，IV 比 WOE 多乘以前面那个因子，就保证了它不会是负数；然后，乘以(Pyi−Pni)这个因子，体现出了变量当前分组中个体的数量占整体的比例，从而很好考虑了这个分组中样本占整体的比例，比例越低，这个分组对变量整体预测能力的贡献越低。相反，如果直接用 WOE 的绝对值加和，会因为该分组出现次数偏少的影响而得到一个很高的指标。\n\n# AUC & KS\n\n# 信息熵（information entropy）\n\n衡量样本纯度，熵越小越纯,样本D有K类样本，其信息熵为\n$$\nEnt(D)=-\\sum_{k=1}^{K}p_klog_2p_k\n$$\n","slug":"2_算法相关/机器学习基础","published":1,"updated":"2022-03-01T03:59:30.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4f001a8s329odne3wl","content":"<p>机器学习基础</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"Woe\"><a href=\"#Woe\" class=\"headerlink\" title=\"Woe\"></a>Woe</h1><p>WOE的全称是“weight of evidence”，即证据权重, WOE表示的含义即是”<strong>当前分组中响应客户占所有响应客户的比例”和”当前分组中没有响应的客户占所有没有响应客户的比例</strong>“的差异。先把分析变量进行分箱，每个分箱内的$w_{oe}$为</p>\n<script type=\"math/tex; mode=display\">\nwoe_i=\\frac{当前分组中响应客户占所有响应客户的比例}{当前分组中没有响应的客户占所有没有响应客户的比例}=ln\\frac{P_{y_i}}{P_{n_i}}=ln\\frac{y_1/y_2}{n_i/n_s}</script><script type=\"math/tex; mode=display\">\nwoe_i=\\frac{sum(y_i)/sum(y_s)}{sum(1-y_i)/sum(1-y_s)}</script><p>该值绝对值越大说明变量区分能力越强</p>\n<h1 id=\"IV\"><a href=\"#IV\" class=\"headerlink\" title=\"IV\"></a>IV</h1><p>IV衡量的是某一个变量的信息量，从公式来看的话，相当于是自变量WOE值的一个加权求和，其值的大小决定了自变量对于目标变量的影响程度</p>\n<script type=\"math/tex; mode=display\">\nIV_i=(P_{y_i}-P_{n_i})*woe_i</script><p>WOE 和 IV 都能表达某个分组对目标变量的预测能力。但实际中，我们通常选择 IV 而不是 WOE 的和来衡量变量预测的能力，这是为什么呢？首先，因为我们在衡量一个变量的预测能力时，我们所使用的指标值不应该是负数。从这意义上来说，IV 比 WOE 多乘以前面那个因子，就保证了它不会是负数；然后，乘以(Pyi−Pni)这个因子，体现出了变量当前分组中个体的数量占整体的比例，从而很好考虑了这个分组中样本占整体的比例，比例越低，这个分组对变量整体预测能力的贡献越低。相反，如果直接用 WOE 的绝对值加和，会因为该分组出现次数偏少的影响而得到一个很高的指标。</p>\n<h1 id=\"AUC-amp-KS\"><a href=\"#AUC-amp-KS\" class=\"headerlink\" title=\"AUC &amp; KS\"></a>AUC &amp; KS</h1><h1 id=\"信息熵（information-entropy）\"><a href=\"#信息熵（information-entropy）\" class=\"headerlink\" title=\"信息熵（information entropy）\"></a>信息熵（information entropy）</h1><p>衡量样本纯度，熵越小越纯,样本D有K类样本，其信息熵为</p>\n<script type=\"math/tex; mode=display\">\nEnt(D)=-\\sum_{k=1}^{K}p_klog_2p_k</script>","site":{"data":{}},"excerpt":"<p>机器学习基础</p>","more":"<p>[TOC]</p>\n<h1 id=\"Woe\"><a href=\"#Woe\" class=\"headerlink\" title=\"Woe\"></a>Woe</h1><p>WOE的全称是“weight of evidence”，即证据权重, WOE表示的含义即是”<strong>当前分组中响应客户占所有响应客户的比例”和”当前分组中没有响应的客户占所有没有响应客户的比例</strong>“的差异。先把分析变量进行分箱，每个分箱内的$w_{oe}$为</p>\n<script type=\"math/tex; mode=display\">\nwoe_i=\\frac{当前分组中响应客户占所有响应客户的比例}{当前分组中没有响应的客户占所有没有响应客户的比例}=ln\\frac{P_{y_i}}{P_{n_i}}=ln\\frac{y_1/y_2}{n_i/n_s}</script><script type=\"math/tex; mode=display\">\nwoe_i=\\frac{sum(y_i)/sum(y_s)}{sum(1-y_i)/sum(1-y_s)}</script><p>该值绝对值越大说明变量区分能力越强</p>\n<h1 id=\"IV\"><a href=\"#IV\" class=\"headerlink\" title=\"IV\"></a>IV</h1><p>IV衡量的是某一个变量的信息量，从公式来看的话，相当于是自变量WOE值的一个加权求和，其值的大小决定了自变量对于目标变量的影响程度</p>\n<script type=\"math/tex; mode=display\">\nIV_i=(P_{y_i}-P_{n_i})*woe_i</script><p>WOE 和 IV 都能表达某个分组对目标变量的预测能力。但实际中，我们通常选择 IV 而不是 WOE 的和来衡量变量预测的能力，这是为什么呢？首先，因为我们在衡量一个变量的预测能力时，我们所使用的指标值不应该是负数。从这意义上来说，IV 比 WOE 多乘以前面那个因子，就保证了它不会是负数；然后，乘以(Pyi−Pni)这个因子，体现出了变量当前分组中个体的数量占整体的比例，从而很好考虑了这个分组中样本占整体的比例，比例越低，这个分组对变量整体预测能力的贡献越低。相反，如果直接用 WOE 的绝对值加和，会因为该分组出现次数偏少的影响而得到一个很高的指标。</p>\n<h1 id=\"AUC-amp-KS\"><a href=\"#AUC-amp-KS\" class=\"headerlink\" title=\"AUC &amp; KS\"></a>AUC &amp; KS</h1><h1 id=\"信息熵（information-entropy）\"><a href=\"#信息熵（information-entropy）\" class=\"headerlink\" title=\"信息熵（information entropy）\"></a>信息熵（information entropy）</h1><p>衡量样本纯度，熵越小越纯,样本D有K类样本，其信息熵为</p>\n<script type=\"math/tex; mode=display\">\nEnt(D)=-\\sum_{k=1}^{K}p_klog_2p_k</script>"},{"title":"李宏毅强化学习笔记","date":"2022-03-01T03:32:38.000Z","_content":"\n李宏毅强化学习笔记\n\n<!-- more -->\n\n\n[TOC]\n\n# PART1\n\n**什么是强化学习**\n\n强化学习决策过程包括4个环节：agent观察环境（observation）---agent做出动作（action）----动作会引起环境的变化 --- agent得到奖励（reward）---agent再次观察环境（observation）。强化学习就是通过学习实现agent的决策序列收益（reward）最大。\n\n**强化学习的分类**\n\npolicy based, grade based, model based。 这三种方式其实是不同的reward方式\n\n\n\n# PART 2\n\n# PART 3\n\n","source":"_posts/2_算法相关/李宏毅强化学习笔记.md","raw":"---\ntitle: 李宏毅强化学习笔记\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n李宏毅强化学习笔记\n\n<!-- more -->\n\n\n[TOC]\n\n# PART1\n\n**什么是强化学习**\n\n强化学习决策过程包括4个环节：agent观察环境（observation）---agent做出动作（action）----动作会引起环境的变化 --- agent得到奖励（reward）---agent再次观察环境（observation）。强化学习就是通过学习实现agent的决策序列收益（reward）最大。\n\n**强化学习的分类**\n\npolicy based, grade based, model based。 这三种方式其实是不同的reward方式\n\n\n\n# PART 2\n\n# PART 3\n\n","slug":"2_算法相关/李宏毅强化学习笔记","published":1,"updated":"2022-03-01T03:59:30.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4g001d8s32eu9d5r08","content":"<p>李宏毅强化学习笔记</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"PART1\"><a href=\"#PART1\" class=\"headerlink\" title=\"PART1\"></a>PART1</h1><p><strong>什么是强化学习</strong></p>\n<p>强化学习决策过程包括4个环节：agent观察环境（observation）—-agent做出动作（action）——动作会引起环境的变化 —- agent得到奖励（reward）—-agent再次观察环境（observation）。强化学习就是通过学习实现agent的决策序列收益（reward）最大。</p>\n<p><strong>强化学习的分类</strong></p>\n<p>policy based, grade based, model based。 这三种方式其实是不同的reward方式</p>\n<h1 id=\"PART-2\"><a href=\"#PART-2\" class=\"headerlink\" title=\"PART 2\"></a>PART 2</h1><h1 id=\"PART-3\"><a href=\"#PART-3\" class=\"headerlink\" title=\"PART 3\"></a>PART 3</h1>","site":{"data":{}},"excerpt":"<p>李宏毅强化学习笔记</p>","more":"<p>[TOC]</p>\n<h1 id=\"PART1\"><a href=\"#PART1\" class=\"headerlink\" title=\"PART1\"></a>PART1</h1><p><strong>什么是强化学习</strong></p>\n<p>强化学习决策过程包括4个环节：agent观察环境（observation）—-agent做出动作（action）——动作会引起环境的变化 —- agent得到奖励（reward）—-agent再次观察环境（observation）。强化学习就是通过学习实现agent的决策序列收益（reward）最大。</p>\n<p><strong>强化学习的分类</strong></p>\n<p>policy based, grade based, model based。 这三种方式其实是不同的reward方式</p>\n<h1 id=\"PART-2\"><a href=\"#PART-2\" class=\"headerlink\" title=\"PART 2\"></a>PART 2</h1><h1 id=\"PART-3\"><a href=\"#PART-3\" class=\"headerlink\" title=\"PART 3\"></a>PART 3</h1>"},{"title":"深度学习笔记","date":"2022-03-01T03:32:38.000Z","_content":"\n深度学习笔记\n\n<!-- more -->\n\n\n# 深度学习笔记\n\n## BatchNorm\n\n- 基本思想：\n\n  深度网络对输入的分布式敏感的，若采用mini-batch方法训练模型，则每次样本分布式不同的。不仅第一层如此，由于非线性的变换，后面每一层的输入（即前一层的输出）的分布都是不一样的，不符合IID独立同分布假设，模型训练也会越来越困难，也就是所谓的internal covariate shift问题。所以考虑在每一层的线下变换后，非线性变化之前，将输出强制变换为0-1分布。\n\n  这样做是受图像处理中的白化（whiten）操作的启发：就是对输入数据分布变换到0均值，单位方差的正态分布\n\n  所以本质就是：**对于每个隐层神经元，把逐渐向非线性函数映射后向取值区间极限饱和区靠拢的输入分布强制拉回到均值为0方差为1的比较标准的正态分布，使得非线性变换函数的输入值落入对输入比较敏感的区域，以此避免梯度消失问题。** \n\n  但是，都通过BN，那么不就跟把非线性函数替换成线性函数效果相同了？这意味着什么？我们知道，如果是多层的线性函数变换其实这个深层是没有意义的，因为多层线性网络跟一层线性网络是等价的。这意味着网络的**表达能力**下降了，这也意味着深度的意义就没有了。**所以BN为了保证非线性的获得，对变换后的满足均值为0方差为1的x又进行了scale加上shift操作(y=scale\\*x+shift)**，每个神经元增加了两个参数scale和shift参数，这两个参数是通过训练学习到的，意思是通过scale和shift把这个值从标准正态分布左移或者右移一点并长胖一点或者变瘦一点，每个实例挪动的程度不一样，这样等价于非线性函数的值从正中心周围的线性区往非线性区动了动。核心思想应该是想找到一个线性和非线性的较好平衡点，既能享受非线性的较强表达能力的好处，又避免太靠非线性区两头使得网络收敛速度太慢。 \n\n- 流程：\n\n  ![1541386887738](深度学习笔记.assets\\1541386887738.png)\n\n- inference过程：\n\n  由于inference过程只有一个实例，无法获得期望和方差，可用全局方差代替。具体来说就是记住每一个mini-batch的方差和期望，然后统计出全局统计量\n\n  ![1541387157791](深度学习笔记.assets/image%5C1541387157791.png)","source":"_posts/2_算法相关/深度学习笔记.md","raw":"---\ntitle: 深度学习笔记\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n深度学习笔记\n\n<!-- more -->\n\n\n# 深度学习笔记\n\n## BatchNorm\n\n- 基本思想：\n\n  深度网络对输入的分布式敏感的，若采用mini-batch方法训练模型，则每次样本分布式不同的。不仅第一层如此，由于非线性的变换，后面每一层的输入（即前一层的输出）的分布都是不一样的，不符合IID独立同分布假设，模型训练也会越来越困难，也就是所谓的internal covariate shift问题。所以考虑在每一层的线下变换后，非线性变化之前，将输出强制变换为0-1分布。\n\n  这样做是受图像处理中的白化（whiten）操作的启发：就是对输入数据分布变换到0均值，单位方差的正态分布\n\n  所以本质就是：**对于每个隐层神经元，把逐渐向非线性函数映射后向取值区间极限饱和区靠拢的输入分布强制拉回到均值为0方差为1的比较标准的正态分布，使得非线性变换函数的输入值落入对输入比较敏感的区域，以此避免梯度消失问题。** \n\n  但是，都通过BN，那么不就跟把非线性函数替换成线性函数效果相同了？这意味着什么？我们知道，如果是多层的线性函数变换其实这个深层是没有意义的，因为多层线性网络跟一层线性网络是等价的。这意味着网络的**表达能力**下降了，这也意味着深度的意义就没有了。**所以BN为了保证非线性的获得，对变换后的满足均值为0方差为1的x又进行了scale加上shift操作(y=scale\\*x+shift)**，每个神经元增加了两个参数scale和shift参数，这两个参数是通过训练学习到的，意思是通过scale和shift把这个值从标准正态分布左移或者右移一点并长胖一点或者变瘦一点，每个实例挪动的程度不一样，这样等价于非线性函数的值从正中心周围的线性区往非线性区动了动。核心思想应该是想找到一个线性和非线性的较好平衡点，既能享受非线性的较强表达能力的好处，又避免太靠非线性区两头使得网络收敛速度太慢。 \n\n- 流程：\n\n  ![1541386887738](深度学习笔记.assets\\1541386887738.png)\n\n- inference过程：\n\n  由于inference过程只有一个实例，无法获得期望和方差，可用全局方差代替。具体来说就是记住每一个mini-batch的方差和期望，然后统计出全局统计量\n\n  ![1541387157791](深度学习笔记.assets/image%5C1541387157791.png)","slug":"2_算法相关/深度学习笔记","published":1,"updated":"2022-03-01T03:59:30.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4h001h8s323whcc0dh","content":"<p>深度学习笔记</p>\n<span id=\"more\"></span>\n<h1 id=\"深度学习笔记\"><a href=\"#深度学习笔记\" class=\"headerlink\" title=\"深度学习笔记\"></a>深度学习笔记</h1><h2 id=\"BatchNorm\"><a href=\"#BatchNorm\" class=\"headerlink\" title=\"BatchNorm\"></a>BatchNorm</h2><ul>\n<li><p>基本思想：</p>\n<p>深度网络对输入的分布式敏感的，若采用mini-batch方法训练模型，则每次样本分布式不同的。不仅第一层如此，由于非线性的变换，后面每一层的输入（即前一层的输出）的分布都是不一样的，不符合IID独立同分布假设，模型训练也会越来越困难，也就是所谓的internal covariate shift问题。所以考虑在每一层的线下变换后，非线性变化之前，将输出强制变换为0-1分布。</p>\n<p>这样做是受图像处理中的白化（whiten）操作的启发：就是对输入数据分布变换到0均值，单位方差的正态分布</p>\n<p>所以本质就是：<strong>对于每个隐层神经元，把逐渐向非线性函数映射后向取值区间极限饱和区靠拢的输入分布强制拉回到均值为0方差为1的比较标准的正态分布，使得非线性变换函数的输入值落入对输入比较敏感的区域，以此避免梯度消失问题。</strong> </p>\n<p>但是，都通过BN，那么不就跟把非线性函数替换成线性函数效果相同了？这意味着什么？我们知道，如果是多层的线性函数变换其实这个深层是没有意义的，因为多层线性网络跟一层线性网络是等价的。这意味着网络的<strong>表达能力</strong>下降了，这也意味着深度的意义就没有了。<strong>所以BN为了保证非线性的获得，对变换后的满足均值为0方差为1的x又进行了scale加上shift操作(y=scale*x+shift)</strong>，每个神经元增加了两个参数scale和shift参数，这两个参数是通过训练学习到的，意思是通过scale和shift把这个值从标准正态分布左移或者右移一点并长胖一点或者变瘦一点，每个实例挪动的程度不一样，这样等价于非线性函数的值从正中心周围的线性区往非线性区动了动。核心思想应该是想找到一个线性和非线性的较好平衡点，既能享受非线性的较强表达能力的好处，又避免太靠非线性区两头使得网络收敛速度太慢。 </p>\n</li>\n<li><p>流程：</p>\n<p><img src=\"深度学习笔记.assets\\1541386887738.png\" alt=\"1541386887738\"></p>\n</li>\n<li><p>inference过程：</p>\n<p>由于inference过程只有一个实例，无法获得期望和方差，可用全局方差代替。具体来说就是记住每一个mini-batch的方差和期望，然后统计出全局统计量</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>深度学习笔记</p>","more":"<h1 id=\"深度学习笔记\"><a href=\"#深度学习笔记\" class=\"headerlink\" title=\"深度学习笔记\"></a>深度学习笔记</h1><h2 id=\"BatchNorm\"><a href=\"#BatchNorm\" class=\"headerlink\" title=\"BatchNorm\"></a>BatchNorm</h2><ul>\n<li><p>基本思想：</p>\n<p>深度网络对输入的分布式敏感的，若采用mini-batch方法训练模型，则每次样本分布式不同的。不仅第一层如此，由于非线性的变换，后面每一层的输入（即前一层的输出）的分布都是不一样的，不符合IID独立同分布假设，模型训练也会越来越困难，也就是所谓的internal covariate shift问题。所以考虑在每一层的线下变换后，非线性变化之前，将输出强制变换为0-1分布。</p>\n<p>这样做是受图像处理中的白化（whiten）操作的启发：就是对输入数据分布变换到0均值，单位方差的正态分布</p>\n<p>所以本质就是：<strong>对于每个隐层神经元，把逐渐向非线性函数映射后向取值区间极限饱和区靠拢的输入分布强制拉回到均值为0方差为1的比较标准的正态分布，使得非线性变换函数的输入值落入对输入比较敏感的区域，以此避免梯度消失问题。</strong> </p>\n<p>但是，都通过BN，那么不就跟把非线性函数替换成线性函数效果相同了？这意味着什么？我们知道，如果是多层的线性函数变换其实这个深层是没有意义的，因为多层线性网络跟一层线性网络是等价的。这意味着网络的<strong>表达能力</strong>下降了，这也意味着深度的意义就没有了。<strong>所以BN为了保证非线性的获得，对变换后的满足均值为0方差为1的x又进行了scale加上shift操作(y=scale*x+shift)</strong>，每个神经元增加了两个参数scale和shift参数，这两个参数是通过训练学习到的，意思是通过scale和shift把这个值从标准正态分布左移或者右移一点并长胖一点或者变瘦一点，每个实例挪动的程度不一样，这样等价于非线性函数的值从正中心周围的线性区往非线性区动了动。核心思想应该是想找到一个线性和非线性的较好平衡点，既能享受非线性的较强表达能力的好处，又避免太靠非线性区两头使得网络收敛速度太慢。 </p>\n</li>\n<li><p>流程：</p>\n<p><img src=\"深度学习笔记.assets\\1541386887738.png\" alt=\"1541386887738\"></p>\n</li>\n<li><p>inference过程：</p>\n<p>由于inference过程只有一个实例，无法获得期望和方差，可用全局方差代替。具体来说就是记住每一个mini-batch的方差和期望，然后统计出全局统计量</p>\n</li>\n</ul>"},{"title":"联邦树模型","date":"2022-03-01T03:32:38.000Z","_content":"\n联邦树模型\n\n<!-- more -->\n\n\n[TOC]\n\n# 普通XGB原理\n\n## 预测\n\n\n\n## 训练\n\n\n\n# 联邦GXB","source":"_posts/2_算法相关/联邦树模型.md","raw":"---\ntitle: 联邦树模型\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n联邦树模型\n\n<!-- more -->\n\n\n[TOC]\n\n# 普通XGB原理\n\n## 预测\n\n\n\n## 训练\n\n\n\n# 联邦GXB","slug":"2_算法相关/联邦树模型","published":1,"updated":"2022-03-01T03:59:30.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4h001k8s325kvm50pl","content":"<p>联邦树模型</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"普通XGB原理\"><a href=\"#普通XGB原理\" class=\"headerlink\" title=\"普通XGB原理\"></a>普通XGB原理</h1><h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><h2 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h2><h1 id=\"联邦GXB\"><a href=\"#联邦GXB\" class=\"headerlink\" title=\"联邦GXB\"></a>联邦GXB</h1>","site":{"data":{}},"excerpt":"<p>联邦树模型</p>","more":"<p>[TOC]</p>\n<h1 id=\"普通XGB原理\"><a href=\"#普通XGB原理\" class=\"headerlink\" title=\"普通XGB原理\"></a>普通XGB原理</h1><h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><h2 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h2><h1 id=\"联邦GXB\"><a href=\"#联邦GXB\" class=\"headerlink\" title=\"联邦GXB\"></a>联邦GXB</h1>"},{"title":"自然语言处理笔记","date":"2022-03-01T03:32:38.000Z","_content":"\n自然语言处理笔记\n\n<!-- more -->\n\n\n[TOC]\n\n# 文本特征提取\n\n## TF-IDF\n\n[链接](<https://blog.csdn.net/The_lastest/article/details/79093407>)\n\n> TF-IDF是传统的统计算法，用于评估一个词在一个文档集中对于某一个文档的重要程度。它与这个词在当前文档中的词频成正比，与文档集中的其他词频成反比\n\nx:多个文档，如多个电影评论\n\ny:针对每个文档可以提取关键词\n\n# gensim\n\n<https://blog.csdn.net/CoderPai/article/details/80250380>\n\n```python\n#train\nfrom gensim.test.utils import common_texts, get_tmpfile\nfrom gensim.models import Word2Vec\nmodel_name='test'\npath = get_tmpfile(model_name + '.model')\nif params is None:\n    params = {\n        'size': 100,\n        'window': 10,\n        'min_count': 1,\n        'workers': 4,\n        'compute_loss': True\n    }\nmodel = Word2Vec([['我','是','天才'],['你'，'是'，'呵呵']] **params)  # get_latest_training_loss().\nmodel.save(path)\n#pred\nmodel=Word2Vec.load(path)\n \n```\n\n- size: 词向量的维度。\n- alpha: 模型初始的学习率。\n- window: 表示在一个句子中，当前词于预测词在一个句子中的最大距离。\n- min_count: 用于过滤操作，词频少于 min_count 次数的单词会被丢弃掉，默认值为 5。\n- max_vocab_size: 设置词向量构建期间的 RAM 限制。如果所有的独立单词数超过这个限定词，那么就删除掉其中词频最低的那个。根据统计，每一千万个单词大概需要 1GB 的RAM。如果我们把该值设置为 None ，则没有限制。\n- sample: 高频词汇的随机降采样的配置阈值，默认为 1e-3，范围是 (0, 1e-5)。\n- seed: 用于随机数发生器。与词向量的初始化有关。\n- workers: 控制训练的并行数量。\n- min_alpha: 随着训练进行，alpha 线性下降到 min_alpha。\n- sg: 用于设置训练算法。当 sg=0，使用 CBOW 算法来进行训练；当 sg=1，使用 skip-gram 算法来进行训练。\n- hs: 如果设置为 1 ，那么系统会采用 hierarchica softmax 技巧。如果设置为 0（默认情况），则系统会采用 negative samping 技巧。\n- negative: 如果这个值大于 0，那么 negative samping 会被使用。该值表示 “noise words” 的数量，一般这个值是 5 - 20，默认是 5。如果这个值设置为 0，那么 negative samping 没有使用。\n- cbow_mean: 如果这个值设置为 0，那么就采用上下文词向量的总和。如果这个值设置为 1 （默认情况下），那么我们就采用均值。但这个值只有在使用 CBOW 的时候才起作用。\n- hashfxn: hash函数用来初始化权重，默认情况下使用 Python 自带的 hash 函数。\n- iter: 算法迭代次数，默认为 5。\n- trim_rule: 用于设置词汇表的整理规则，用来指定哪些词需要被剔除，哪些词需要保留。默认情况下，如果 word count < min_count，那么该词被剔除。这个参数也可以被设置为 None，这种情况下 min_count 会被使用。\n- sorted_vocab: 如果这个值设置为 1（默认情况下），则在分配 word index 的时候会先对单词基于频率降序排序。\n- batch_words: 每次批处理给线程传递的单词的数量，默认是 10000。","source":"_posts/2_算法相关/自然语言处理笔记.md","raw":"---\ntitle: 自然语言处理笔记\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n自然语言处理笔记\n\n<!-- more -->\n\n\n[TOC]\n\n# 文本特征提取\n\n## TF-IDF\n\n[链接](<https://blog.csdn.net/The_lastest/article/details/79093407>)\n\n> TF-IDF是传统的统计算法，用于评估一个词在一个文档集中对于某一个文档的重要程度。它与这个词在当前文档中的词频成正比，与文档集中的其他词频成反比\n\nx:多个文档，如多个电影评论\n\ny:针对每个文档可以提取关键词\n\n# gensim\n\n<https://blog.csdn.net/CoderPai/article/details/80250380>\n\n```python\n#train\nfrom gensim.test.utils import common_texts, get_tmpfile\nfrom gensim.models import Word2Vec\nmodel_name='test'\npath = get_tmpfile(model_name + '.model')\nif params is None:\n    params = {\n        'size': 100,\n        'window': 10,\n        'min_count': 1,\n        'workers': 4,\n        'compute_loss': True\n    }\nmodel = Word2Vec([['我','是','天才'],['你'，'是'，'呵呵']] **params)  # get_latest_training_loss().\nmodel.save(path)\n#pred\nmodel=Word2Vec.load(path)\n \n```\n\n- size: 词向量的维度。\n- alpha: 模型初始的学习率。\n- window: 表示在一个句子中，当前词于预测词在一个句子中的最大距离。\n- min_count: 用于过滤操作，词频少于 min_count 次数的单词会被丢弃掉，默认值为 5。\n- max_vocab_size: 设置词向量构建期间的 RAM 限制。如果所有的独立单词数超过这个限定词，那么就删除掉其中词频最低的那个。根据统计，每一千万个单词大概需要 1GB 的RAM。如果我们把该值设置为 None ，则没有限制。\n- sample: 高频词汇的随机降采样的配置阈值，默认为 1e-3，范围是 (0, 1e-5)。\n- seed: 用于随机数发生器。与词向量的初始化有关。\n- workers: 控制训练的并行数量。\n- min_alpha: 随着训练进行，alpha 线性下降到 min_alpha。\n- sg: 用于设置训练算法。当 sg=0，使用 CBOW 算法来进行训练；当 sg=1，使用 skip-gram 算法来进行训练。\n- hs: 如果设置为 1 ，那么系统会采用 hierarchica softmax 技巧。如果设置为 0（默认情况），则系统会采用 negative samping 技巧。\n- negative: 如果这个值大于 0，那么 negative samping 会被使用。该值表示 “noise words” 的数量，一般这个值是 5 - 20，默认是 5。如果这个值设置为 0，那么 negative samping 没有使用。\n- cbow_mean: 如果这个值设置为 0，那么就采用上下文词向量的总和。如果这个值设置为 1 （默认情况下），那么我们就采用均值。但这个值只有在使用 CBOW 的时候才起作用。\n- hashfxn: hash函数用来初始化权重，默认情况下使用 Python 自带的 hash 函数。\n- iter: 算法迭代次数，默认为 5。\n- trim_rule: 用于设置词汇表的整理规则，用来指定哪些词需要被剔除，哪些词需要保留。默认情况下，如果 word count < min_count，那么该词被剔除。这个参数也可以被设置为 None，这种情况下 min_count 会被使用。\n- sorted_vocab: 如果这个值设置为 1（默认情况下），则在分配 word index 的时候会先对单词基于频率降序排序。\n- batch_words: 每次批处理给线程传递的单词的数量，默认是 10000。","slug":"2_算法相关/自然语言处理笔记","published":1,"updated":"2022-03-01T03:59:30.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4i001n8s322jh56ybk","content":"<p>自然语言处理笔记</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"文本特征提取\"><a href=\"#文本特征提取\" class=\"headerlink\" title=\"文本特征提取\"></a>文本特征提取</h1><h2 id=\"TF-IDF\"><a href=\"#TF-IDF\" class=\"headerlink\" title=\"TF-IDF\"></a>TF-IDF</h2><p><a href=\"https://blog.csdn.net/The_lastest/article/details/79093407\">链接</a></p>\n<blockquote>\n<p>TF-IDF是传统的统计算法，用于评估一个词在一个文档集中对于某一个文档的重要程度。它与这个词在当前文档中的词频成正比，与文档集中的其他词频成反比</p>\n</blockquote>\n<p>x:多个文档，如多个电影评论</p>\n<p>y:针对每个文档可以提取关键词</p>\n<h1 id=\"gensim\"><a href=\"#gensim\" class=\"headerlink\" title=\"gensim\"></a>gensim</h1><p><a href=\"https://blog.csdn.net/CoderPai/article/details/80250380\">https://blog.csdn.net/CoderPai/article/details/80250380</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#train</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.test.utils <span class=\"keyword\">import</span> common_texts, get_tmpfile</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.models <span class=\"keyword\">import</span> Word2Vec</span><br><span class=\"line\">model_name=<span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">path = get_tmpfile(model_name + <span class=\"string\">&#x27;.model&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> params <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;window&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;min_count&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;workers&#x27;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;compute_loss&#x27;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">model = Word2Vec([[<span class=\"string\">&#x27;我&#x27;</span>,<span class=\"string\">&#x27;是&#x27;</span>,<span class=\"string\">&#x27;天才&#x27;</span>],[<span class=\"string\">&#x27;你&#x27;</span>，<span class=\"string\">&#x27;是&#x27;</span>，<span class=\"string\">&#x27;呵呵&#x27;</span>]] **params)  <span class=\"comment\"># get_latest_training_loss().</span></span><br><span class=\"line\">model.save(path)</span><br><span class=\"line\"><span class=\"comment\">#pred</span></span><br><span class=\"line\">model=Word2Vec.load(path)</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<ul>\n<li>size: 词向量的维度。</li>\n<li>alpha: 模型初始的学习率。</li>\n<li>window: 表示在一个句子中，当前词于预测词在一个句子中的最大距离。</li>\n<li>min_count: 用于过滤操作，词频少于 min_count 次数的单词会被丢弃掉，默认值为 5。</li>\n<li>max_vocab_size: 设置词向量构建期间的 RAM 限制。如果所有的独立单词数超过这个限定词，那么就删除掉其中词频最低的那个。根据统计，每一千万个单词大概需要 1GB 的RAM。如果我们把该值设置为 None ，则没有限制。</li>\n<li>sample: 高频词汇的随机降采样的配置阈值，默认为 1e-3，范围是 (0, 1e-5)。</li>\n<li>seed: 用于随机数发生器。与词向量的初始化有关。</li>\n<li>workers: 控制训练的并行数量。</li>\n<li>min_alpha: 随着训练进行，alpha 线性下降到 min_alpha。</li>\n<li>sg: 用于设置训练算法。当 sg=0，使用 CBOW 算法来进行训练；当 sg=1，使用 skip-gram 算法来进行训练。</li>\n<li>hs: 如果设置为 1 ，那么系统会采用 hierarchica softmax 技巧。如果设置为 0（默认情况），则系统会采用 negative samping 技巧。</li>\n<li>negative: 如果这个值大于 0，那么 negative samping 会被使用。该值表示 “noise words” 的数量，一般这个值是 5 - 20，默认是 5。如果这个值设置为 0，那么 negative samping 没有使用。</li>\n<li>cbow_mean: 如果这个值设置为 0，那么就采用上下文词向量的总和。如果这个值设置为 1 （默认情况下），那么我们就采用均值。但这个值只有在使用 CBOW 的时候才起作用。</li>\n<li>hashfxn: hash函数用来初始化权重，默认情况下使用 Python 自带的 hash 函数。</li>\n<li>iter: 算法迭代次数，默认为 5。</li>\n<li>trim_rule: 用于设置词汇表的整理规则，用来指定哪些词需要被剔除，哪些词需要保留。默认情况下，如果 word count &lt; min_count，那么该词被剔除。这个参数也可以被设置为 None，这种情况下 min_count 会被使用。</li>\n<li>sorted_vocab: 如果这个值设置为 1（默认情况下），则在分配 word index 的时候会先对单词基于频率降序排序。</li>\n<li>batch_words: 每次批处理给线程传递的单词的数量，默认是 10000。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>自然语言处理笔记</p>","more":"<p>[TOC]</p>\n<h1 id=\"文本特征提取\"><a href=\"#文本特征提取\" class=\"headerlink\" title=\"文本特征提取\"></a>文本特征提取</h1><h2 id=\"TF-IDF\"><a href=\"#TF-IDF\" class=\"headerlink\" title=\"TF-IDF\"></a>TF-IDF</h2><p><a href=\"https://blog.csdn.net/The_lastest/article/details/79093407\">链接</a></p>\n<blockquote>\n<p>TF-IDF是传统的统计算法，用于评估一个词在一个文档集中对于某一个文档的重要程度。它与这个词在当前文档中的词频成正比，与文档集中的其他词频成反比</p>\n</blockquote>\n<p>x:多个文档，如多个电影评论</p>\n<p>y:针对每个文档可以提取关键词</p>\n<h1 id=\"gensim\"><a href=\"#gensim\" class=\"headerlink\" title=\"gensim\"></a>gensim</h1><p><a href=\"https://blog.csdn.net/CoderPai/article/details/80250380\">https://blog.csdn.net/CoderPai/article/details/80250380</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#train</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.test.utils <span class=\"keyword\">import</span> common_texts, get_tmpfile</span><br><span class=\"line\"><span class=\"keyword\">from</span> gensim.models <span class=\"keyword\">import</span> Word2Vec</span><br><span class=\"line\">model_name=<span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">path = get_tmpfile(model_name + <span class=\"string\">&#x27;.model&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> params <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;window&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;min_count&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;workers&#x27;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;compute_loss&#x27;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">model = Word2Vec([[<span class=\"string\">&#x27;我&#x27;</span>,<span class=\"string\">&#x27;是&#x27;</span>,<span class=\"string\">&#x27;天才&#x27;</span>],[<span class=\"string\">&#x27;你&#x27;</span>，<span class=\"string\">&#x27;是&#x27;</span>，<span class=\"string\">&#x27;呵呵&#x27;</span>]] **params)  <span class=\"comment\"># get_latest_training_loss().</span></span><br><span class=\"line\">model.save(path)</span><br><span class=\"line\"><span class=\"comment\">#pred</span></span><br><span class=\"line\">model=Word2Vec.load(path)</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<ul>\n<li>size: 词向量的维度。</li>\n<li>alpha: 模型初始的学习率。</li>\n<li>window: 表示在一个句子中，当前词于预测词在一个句子中的最大距离。</li>\n<li>min_count: 用于过滤操作，词频少于 min_count 次数的单词会被丢弃掉，默认值为 5。</li>\n<li>max_vocab_size: 设置词向量构建期间的 RAM 限制。如果所有的独立单词数超过这个限定词，那么就删除掉其中词频最低的那个。根据统计，每一千万个单词大概需要 1GB 的RAM。如果我们把该值设置为 None ，则没有限制。</li>\n<li>sample: 高频词汇的随机降采样的配置阈值，默认为 1e-3，范围是 (0, 1e-5)。</li>\n<li>seed: 用于随机数发生器。与词向量的初始化有关。</li>\n<li>workers: 控制训练的并行数量。</li>\n<li>min_alpha: 随着训练进行，alpha 线性下降到 min_alpha。</li>\n<li>sg: 用于设置训练算法。当 sg=0，使用 CBOW 算法来进行训练；当 sg=1，使用 skip-gram 算法来进行训练。</li>\n<li>hs: 如果设置为 1 ，那么系统会采用 hierarchica softmax 技巧。如果设置为 0（默认情况），则系统会采用 negative samping 技巧。</li>\n<li>negative: 如果这个值大于 0，那么 negative samping 会被使用。该值表示 “noise words” 的数量，一般这个值是 5 - 20，默认是 5。如果这个值设置为 0，那么 negative samping 没有使用。</li>\n<li>cbow_mean: 如果这个值设置为 0，那么就采用上下文词向量的总和。如果这个值设置为 1 （默认情况下），那么我们就采用均值。但这个值只有在使用 CBOW 的时候才起作用。</li>\n<li>hashfxn: hash函数用来初始化权重，默认情况下使用 Python 自带的 hash 函数。</li>\n<li>iter: 算法迭代次数，默认为 5。</li>\n<li>trim_rule: 用于设置词汇表的整理规则，用来指定哪些词需要被剔除，哪些词需要保留。默认情况下，如果 word count &lt; min_count，那么该词被剔除。这个参数也可以被设置为 None，这种情况下 min_count 会被使用。</li>\n<li>sorted_vocab: 如果这个值设置为 1（默认情况下），则在分配 word index 的时候会先对单词基于频率降序排序。</li>\n<li>batch_words: 每次批处理给线程传递的单词的数量，默认是 10000。</li>\n</ul>"},{"title":"表示学习调研","date":"2022-03-01T03:32:38.000Z","_content":"\n表示学习调研\n\n<!-- more -->\n\n\n[TOC]\n\n# 关键词\n\nrepresentation learning；data representation; Deep learning, representation learning, feature learning, unsupervised learning, Boltzmann Machine, autoencoder, neural nets\n\n# 粗读文献笔记\n\n## Bengio，2014，Representation Learning: A Review and New Perspectives\n\n**Index Terms**:Deep learning, representation learning, feature learning, unsupervised learning, Boltzmann Machine, autoencoder, neural nets,underlying explanatory factors\n\n- 机器学习的成功依赖于数据的表征（data representation），我们假设这是因为数据的表征或多或少的揭示了数据的内在结构。当然可以采用专家经验设计表征方式，但AI的目的在于依照通用的先验（generic priors）设计表征，并通过数据实例化这个表征。\n- \" This paper reviews recent work in the area of unsupervised feature learning and deep learning, covering advances in **probabilistic models, auto-encoders, manifold learning, and deep networks.** \"\n  - 本文聚焦与**无监督学习**，实现的方式包括以上三种方式。auto-encoders是基于信息重建的算法， manifold learning是基于拓扑学的算法\n- 这个工作有助于理解一个长期没有确定答案的问题：什么样的数据表征是一个好的表征？数据表征的优化目标是什么？\n  - **好的特征能够解耦数据中的关键潜在影响变量，这些变量最好是通用的（例如通用的语言模型、图像模型）。特征提取的过程就是冗余信息删减聚合的过程**。如果不能通用，那退一步特征最好能提取针对下游任务有区分性的潜在因子，因子和任务目标之间最好有简单关系（如线性关系）\n- \"In order to expand the scope and ease of applicability of machine learning, it would be highly desirable to make learning algorithms **less dependent on feature engineering**, so that novel applications could be constructed faster, and more importantly, to **make progress towards Artificial Intelligence** (AI). An AI must fundamentally *understand the world around us*, and we argue that this can only be achieved if it can learn to identify and disentangle the underlying explanatory factors hidden in the observed milieu of **low-level sensory data**.\" P1\n  - 借助专家经验的特征工程能一定程度描述数据的内在结构，但真正的AI应该是解耦低等级的感官数据中的影响因子，从而了解这个世界的\n- \"In the case of probabilistic models, a good representation is often one that captures the posterior distribution of the **underlying explanatory factors** for the observed input.\" P1\n  - 对于概率模型，一个好的表征能够提取观察到的输入数据中的潜在影响因子。\n- AI中的表示学习中的先验：\n  - 平滑性（smoothness): x ≈ y generally implies f(x) ≈ f(y)\n  - 解耦（ Multiple explanatory factors）\n  - 层次化的组织方式（A hierarchical organization of explanatory factors）：越抽象的特征处于越高层\n  - 半监督（semi-supervised learning）:有一些解释X分布的因子也能解释Y的分布，基于这个假设，对于P(X)有用的表征对P(Y|X)也有用。所以note2vec的embeding才可以用于下游任务。但这个假设并不强，也就是用在下游任务不一定效果好\n  - 通用性（Shared factors across tasks）：能在不同的任务中共享一些因子\n  - 自然的聚集性（Natural clustering）\n\n## Chen,2018,A Tutorial on Network Embeddings\n\nChen, H.; Perozzi, B.; Al-Rfou, R.; Skiena, S. A Tutorial on Network Embeddings. *arXiv:1808.02590 [cs]* **2018**.\n\n- 模型分类：unsupervised NE(以deepwalk为代表的无监督方法);  attributed NE(网络结构信息+节点和边的属性学习节点表征); Heterogeneous NE(从有多类节点或边的网络中学习表征)\n\n- NE的应用\n\n  - 知识图谱（Knowledge Representation）：GenVector(2015), PDF2Vec(2016)\n\n  - 推荐（recommender system）\n\n    Chih-Ming Chen, Po-Chuan Chien, Yu-Ching Lin, Ming-Feng Tsai, and Yi-Hsuan Yang. Ex- ploiting latent social listening representations for music recommendations. In Proc Ninth ACM Int. Conf. Recommender Syst. Poster, 2015\n\n    Chih-Ming Chen, Ming-Feng Tsai, Yu-Ching Lin, and Yi-Hsuan Yang. Query-based music recommendations via preference embedding. In Proceedings of the 10th ACM Conference on Recommender Systems, pages 79–82. ACM, 2016.\n\n  - NLP: PLE(2016), CANE(2017),\n\n    Hanyin Fang, Fei Wu, Zhou Zhao, Xinyu Duan, Yueting Zhuang, and Martin Ester. Community-based question answering via heterogeneous social network learning. In Thirtieth AAAI Conference on Artificial Intelligence, 2016.\n\n    Zhou Zhao, Qifan Yang, Deng Cai, Xiaofei He, and Yueting Zhuang. Expert finding for community-based question answering via ranking metric network learning. In IJCAI, pages 3000–3006, 2016.\n\n  - 社会关系（social network analysis）\n\n    Bryan Perozzi and Steven Skiena. Exact age prediction in social networks. In Proceedings of the 24th International Conference on World Wide Web, pages 91–92. ACM, 2015.\n\n    Cheng Yang, Maosong Sun, Wayne Xin Zhao, Zhiyuan Liu, and Edward Y Chang. A neural network approach to joint modeling social networks and mobile trajectories. arXiv preprint arXiv:1606.08154, 2016.\n\n    \n\n    \n\n\n\n\n# 精读文献笔记\n\n\n\n# 杂七杂八的comment\n\n- 无监督学习侧重于学习数据的内在关系、结构，比如clustering、grouping、density estimation, or anomaly detection等等，而自监督是根据数据集本身生成标签\n- 表示学习领域的会议：ICML（ International Conference on Learning Representations）\n\n# 文献总结\n\n\n\n# 参考资料\n\n[1]Bengio, Y.; Courville, A.; Vincent, P. Representation Learning: A Review and New Perspectives. *arXiv:1206.5538 [cs]* **2014**.【done】\n\n[2] [图灵奖得主Bengio和LeCun称自监督学习可使AI达到人类智力水平](https://www.cxyzjd.com/article/weixin_42137700/106039656)  【done】\n\n[3] [图灵奖得主LeCun力推无监督学习：要重视基于能量的学习方法](https://cloud.tencent.com/developer/article/1523877) 【done】\n\n**[4] Weston, J.; Bengio, S.; Usunier, N. Large Scale Image Annotation: Learning to Rank with Joint Word-Image Embeddings. *Machine learning* 2010, *81* (1), 21–35.** \n\n**[5] Srivastava, N., & Salakhutdinov, R. R. (2012). Multimodal learning with deep boltzmann machines. *Advances in neural information processing systems*, *25*.**\n\n[6] Chen, H.; Perozzi, B.; Al-Rfou, R.; Skiena, S. A Tutorial on Network Embeddings. *arXiv:1808.02590 [cs]* **2018**. \n\n[7]   Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. Deepwalk: Online learning of social repre- sentations. In Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 701–710. ACM, 2014.\n\n[8] Sami Abu-El-Haija, Bryan Perozzi, Rami Al-Rfou, and Alex Alemi. Watch your step: Learning graph embeddings through attention. arXiv preprint arXiv:1710.09599, 2017.\n\n[9]  Xiaofei Sun, Jiang Guo, Xiao Ding, and Ting Liu. A general framework for content-enhanced network representation learning. arXiv preprint arXiv:1610.02906, 2016.【图的节点中有文本信息作为arttibute】\n\n[][12][10]  Jifan Chen, Qi Zhang, and Xuanjing Huang. Incorporate group information to enhance network embedding. In Proceedings of the 25th ACM International on Conference on Information and Knowledge Management, pages 1901–1904. ACM, 2016.  【图中的节点有标签信息】\n\n[11]  Chih-Ming Chen, Po-Chuan Chien, Yu-Ching Lin, Ming-Feng Tsai, and Yi-Hsuan Yang. Ex- ploiting latent social listening representations for music recommendations. In Proc Ninth ACM Int. Conf. Recommender Syst. Poster, 2015. 【NE在推荐中的应用】\n\n[12]  Chih-Ming Chen, Ming-Feng Tsai, Yu-Ching Lin, and Yi-Hsuan Yang. Query-based music recommendations via preference embedding. In Proceedings of the 10th ACM Conference on Recommender Systems, pages 79–82. ACM, 2016.【NE在推荐中的应用】","source":"_posts/2_算法相关/表示学习调研.md","raw":"---\ntitle: 表示学习调研\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n表示学习调研\n\n<!-- more -->\n\n\n[TOC]\n\n# 关键词\n\nrepresentation learning；data representation; Deep learning, representation learning, feature learning, unsupervised learning, Boltzmann Machine, autoencoder, neural nets\n\n# 粗读文献笔记\n\n## Bengio，2014，Representation Learning: A Review and New Perspectives\n\n**Index Terms**:Deep learning, representation learning, feature learning, unsupervised learning, Boltzmann Machine, autoencoder, neural nets,underlying explanatory factors\n\n- 机器学习的成功依赖于数据的表征（data representation），我们假设这是因为数据的表征或多或少的揭示了数据的内在结构。当然可以采用专家经验设计表征方式，但AI的目的在于依照通用的先验（generic priors）设计表征，并通过数据实例化这个表征。\n- \" This paper reviews recent work in the area of unsupervised feature learning and deep learning, covering advances in **probabilistic models, auto-encoders, manifold learning, and deep networks.** \"\n  - 本文聚焦与**无监督学习**，实现的方式包括以上三种方式。auto-encoders是基于信息重建的算法， manifold learning是基于拓扑学的算法\n- 这个工作有助于理解一个长期没有确定答案的问题：什么样的数据表征是一个好的表征？数据表征的优化目标是什么？\n  - **好的特征能够解耦数据中的关键潜在影响变量，这些变量最好是通用的（例如通用的语言模型、图像模型）。特征提取的过程就是冗余信息删减聚合的过程**。如果不能通用，那退一步特征最好能提取针对下游任务有区分性的潜在因子，因子和任务目标之间最好有简单关系（如线性关系）\n- \"In order to expand the scope and ease of applicability of machine learning, it would be highly desirable to make learning algorithms **less dependent on feature engineering**, so that novel applications could be constructed faster, and more importantly, to **make progress towards Artificial Intelligence** (AI). An AI must fundamentally *understand the world around us*, and we argue that this can only be achieved if it can learn to identify and disentangle the underlying explanatory factors hidden in the observed milieu of **low-level sensory data**.\" P1\n  - 借助专家经验的特征工程能一定程度描述数据的内在结构，但真正的AI应该是解耦低等级的感官数据中的影响因子，从而了解这个世界的\n- \"In the case of probabilistic models, a good representation is often one that captures the posterior distribution of the **underlying explanatory factors** for the observed input.\" P1\n  - 对于概率模型，一个好的表征能够提取观察到的输入数据中的潜在影响因子。\n- AI中的表示学习中的先验：\n  - 平滑性（smoothness): x ≈ y generally implies f(x) ≈ f(y)\n  - 解耦（ Multiple explanatory factors）\n  - 层次化的组织方式（A hierarchical organization of explanatory factors）：越抽象的特征处于越高层\n  - 半监督（semi-supervised learning）:有一些解释X分布的因子也能解释Y的分布，基于这个假设，对于P(X)有用的表征对P(Y|X)也有用。所以note2vec的embeding才可以用于下游任务。但这个假设并不强，也就是用在下游任务不一定效果好\n  - 通用性（Shared factors across tasks）：能在不同的任务中共享一些因子\n  - 自然的聚集性（Natural clustering）\n\n## Chen,2018,A Tutorial on Network Embeddings\n\nChen, H.; Perozzi, B.; Al-Rfou, R.; Skiena, S. A Tutorial on Network Embeddings. *arXiv:1808.02590 [cs]* **2018**.\n\n- 模型分类：unsupervised NE(以deepwalk为代表的无监督方法);  attributed NE(网络结构信息+节点和边的属性学习节点表征); Heterogeneous NE(从有多类节点或边的网络中学习表征)\n\n- NE的应用\n\n  - 知识图谱（Knowledge Representation）：GenVector(2015), PDF2Vec(2016)\n\n  - 推荐（recommender system）\n\n    Chih-Ming Chen, Po-Chuan Chien, Yu-Ching Lin, Ming-Feng Tsai, and Yi-Hsuan Yang. Ex- ploiting latent social listening representations for music recommendations. In Proc Ninth ACM Int. Conf. Recommender Syst. Poster, 2015\n\n    Chih-Ming Chen, Ming-Feng Tsai, Yu-Ching Lin, and Yi-Hsuan Yang. Query-based music recommendations via preference embedding. In Proceedings of the 10th ACM Conference on Recommender Systems, pages 79–82. ACM, 2016.\n\n  - NLP: PLE(2016), CANE(2017),\n\n    Hanyin Fang, Fei Wu, Zhou Zhao, Xinyu Duan, Yueting Zhuang, and Martin Ester. Community-based question answering via heterogeneous social network learning. In Thirtieth AAAI Conference on Artificial Intelligence, 2016.\n\n    Zhou Zhao, Qifan Yang, Deng Cai, Xiaofei He, and Yueting Zhuang. Expert finding for community-based question answering via ranking metric network learning. In IJCAI, pages 3000–3006, 2016.\n\n  - 社会关系（social network analysis）\n\n    Bryan Perozzi and Steven Skiena. Exact age prediction in social networks. In Proceedings of the 24th International Conference on World Wide Web, pages 91–92. ACM, 2015.\n\n    Cheng Yang, Maosong Sun, Wayne Xin Zhao, Zhiyuan Liu, and Edward Y Chang. A neural network approach to joint modeling social networks and mobile trajectories. arXiv preprint arXiv:1606.08154, 2016.\n\n    \n\n    \n\n\n\n\n# 精读文献笔记\n\n\n\n# 杂七杂八的comment\n\n- 无监督学习侧重于学习数据的内在关系、结构，比如clustering、grouping、density estimation, or anomaly detection等等，而自监督是根据数据集本身生成标签\n- 表示学习领域的会议：ICML（ International Conference on Learning Representations）\n\n# 文献总结\n\n\n\n# 参考资料\n\n[1]Bengio, Y.; Courville, A.; Vincent, P. Representation Learning: A Review and New Perspectives. *arXiv:1206.5538 [cs]* **2014**.【done】\n\n[2] [图灵奖得主Bengio和LeCun称自监督学习可使AI达到人类智力水平](https://www.cxyzjd.com/article/weixin_42137700/106039656)  【done】\n\n[3] [图灵奖得主LeCun力推无监督学习：要重视基于能量的学习方法](https://cloud.tencent.com/developer/article/1523877) 【done】\n\n**[4] Weston, J.; Bengio, S.; Usunier, N. Large Scale Image Annotation: Learning to Rank with Joint Word-Image Embeddings. *Machine learning* 2010, *81* (1), 21–35.** \n\n**[5] Srivastava, N., & Salakhutdinov, R. R. (2012). Multimodal learning with deep boltzmann machines. *Advances in neural information processing systems*, *25*.**\n\n[6] Chen, H.; Perozzi, B.; Al-Rfou, R.; Skiena, S. A Tutorial on Network Embeddings. *arXiv:1808.02590 [cs]* **2018**. \n\n[7]   Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. Deepwalk: Online learning of social repre- sentations. In Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 701–710. ACM, 2014.\n\n[8] Sami Abu-El-Haija, Bryan Perozzi, Rami Al-Rfou, and Alex Alemi. Watch your step: Learning graph embeddings through attention. arXiv preprint arXiv:1710.09599, 2017.\n\n[9]  Xiaofei Sun, Jiang Guo, Xiao Ding, and Ting Liu. A general framework for content-enhanced network representation learning. arXiv preprint arXiv:1610.02906, 2016.【图的节点中有文本信息作为arttibute】\n\n[][12][10]  Jifan Chen, Qi Zhang, and Xuanjing Huang. Incorporate group information to enhance network embedding. In Proceedings of the 25th ACM International on Conference on Information and Knowledge Management, pages 1901–1904. ACM, 2016.  【图中的节点有标签信息】\n\n[11]  Chih-Ming Chen, Po-Chuan Chien, Yu-Ching Lin, Ming-Feng Tsai, and Yi-Hsuan Yang. Ex- ploiting latent social listening representations for music recommendations. In Proc Ninth ACM Int. Conf. Recommender Syst. Poster, 2015. 【NE在推荐中的应用】\n\n[12]  Chih-Ming Chen, Ming-Feng Tsai, Yu-Ching Lin, and Yi-Hsuan Yang. Query-based music recommendations via preference embedding. In Proceedings of the 10th ACM Conference on Recommender Systems, pages 79–82. ACM, 2016.【NE在推荐中的应用】","slug":"2_算法相关/表示学习调研","published":1,"updated":"2022-03-01T03:59:30.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4i001q8s32d0hubev2","content":"<p>表示学习调研</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h1><p>representation learning；data representation; Deep learning, representation learning, feature learning, unsupervised learning, Boltzmann Machine, autoencoder, neural nets</p>\n<h1 id=\"粗读文献笔记\"><a href=\"#粗读文献笔记\" class=\"headerlink\" title=\"粗读文献笔记\"></a>粗读文献笔记</h1><h2 id=\"Bengio，2014，Representation-Learning-A-Review-and-New-Perspectives\"><a href=\"#Bengio，2014，Representation-Learning-A-Review-and-New-Perspectives\" class=\"headerlink\" title=\"Bengio，2014，Representation Learning: A Review and New Perspectives\"></a>Bengio，2014，Representation Learning: A Review and New Perspectives</h2><p><strong>Index Terms</strong>:Deep learning, representation learning, feature learning, unsupervised learning, Boltzmann Machine, autoencoder, neural nets,underlying explanatory factors</p>\n<ul>\n<li>机器学习的成功依赖于数据的表征（data representation），我们假设这是因为数据的表征或多或少的揭示了数据的内在结构。当然可以采用专家经验设计表征方式，但AI的目的在于依照通用的先验（generic priors）设计表征，并通过数据实例化这个表征。</li>\n<li>“ This paper reviews recent work in the area of unsupervised feature learning and deep learning, covering advances in <strong>probabilistic models, auto-encoders, manifold learning, and deep networks.</strong> “<ul>\n<li>本文聚焦与<strong>无监督学习</strong>，实现的方式包括以上三种方式。auto-encoders是基于信息重建的算法， manifold learning是基于拓扑学的算法</li>\n</ul>\n</li>\n<li>这个工作有助于理解一个长期没有确定答案的问题：什么样的数据表征是一个好的表征？数据表征的优化目标是什么？<ul>\n<li><strong>好的特征能够解耦数据中的关键潜在影响变量，这些变量最好是通用的（例如通用的语言模型、图像模型）。特征提取的过程就是冗余信息删减聚合的过程</strong>。如果不能通用，那退一步特征最好能提取针对下游任务有区分性的潜在因子，因子和任务目标之间最好有简单关系（如线性关系）</li>\n</ul>\n</li>\n<li>“In order to expand the scope and ease of applicability of machine learning, it would be highly desirable to make learning algorithms <strong>less dependent on feature engineering</strong>, so that novel applications could be constructed faster, and more importantly, to <strong>make progress towards Artificial Intelligence</strong> (AI). An AI must fundamentally <em>understand the world around us</em>, and we argue that this can only be achieved if it can learn to identify and disentangle the underlying explanatory factors hidden in the observed milieu of <strong>low-level sensory data</strong>.” P1<ul>\n<li>借助专家经验的特征工程能一定程度描述数据的内在结构，但真正的AI应该是解耦低等级的感官数据中的影响因子，从而了解这个世界的</li>\n</ul>\n</li>\n<li>“In the case of probabilistic models, a good representation is often one that captures the posterior distribution of the <strong>underlying explanatory factors</strong> for the observed input.” P1<ul>\n<li>对于概率模型，一个好的表征能够提取观察到的输入数据中的潜在影响因子。</li>\n</ul>\n</li>\n<li>AI中的表示学习中的先验：<ul>\n<li>平滑性（smoothness): x ≈ y generally implies f(x) ≈ f(y)</li>\n<li>解耦（ Multiple explanatory factors）</li>\n<li>层次化的组织方式（A hierarchical organization of explanatory factors）：越抽象的特征处于越高层</li>\n<li>半监督（semi-supervised learning）:有一些解释X分布的因子也能解释Y的分布，基于这个假设，对于P(X)有用的表征对P(Y|X)也有用。所以note2vec的embeding才可以用于下游任务。但这个假设并不强，也就是用在下游任务不一定效果好</li>\n<li>通用性（Shared factors across tasks）：能在不同的任务中共享一些因子</li>\n<li>自然的聚集性（Natural clustering）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Chen-2018-A-Tutorial-on-Network-Embeddings\"><a href=\"#Chen-2018-A-Tutorial-on-Network-Embeddings\" class=\"headerlink\" title=\"Chen,2018,A Tutorial on Network Embeddings\"></a>Chen,2018,A Tutorial on Network Embeddings</h2><p>Chen, H.; Perozzi, B.; Al-Rfou, R.; Skiena, S. A Tutorial on Network Embeddings. <em>arXiv:1808.02590 [cs]</em> <strong>2018</strong>.</p>\n<ul>\n<li><p>模型分类：unsupervised NE(以deepwalk为代表的无监督方法);  attributed NE(网络结构信息+节点和边的属性学习节点表征); Heterogeneous NE(从有多类节点或边的网络中学习表征)</p>\n</li>\n<li><p>NE的应用</p>\n<ul>\n<li><p>知识图谱（Knowledge Representation）：GenVector(2015), PDF2Vec(2016)</p>\n</li>\n<li><p>推荐（recommender system）</p>\n<p>Chih-Ming Chen, Po-Chuan Chien, Yu-Ching Lin, Ming-Feng Tsai, and Yi-Hsuan Yang. Ex- ploiting latent social listening representations for music recommendations. In Proc Ninth ACM Int. Conf. Recommender Syst. Poster, 2015</p>\n<p>Chih-Ming Chen, Ming-Feng Tsai, Yu-Ching Lin, and Yi-Hsuan Yang. Query-based music recommendations via preference embedding. In Proceedings of the 10th ACM Conference on Recommender Systems, pages 79–82. ACM, 2016.</p>\n</li>\n<li><p>NLP: PLE(2016), CANE(2017),</p>\n<p>Hanyin Fang, Fei Wu, Zhou Zhao, Xinyu Duan, Yueting Zhuang, and Martin Ester. Community-based question answering via heterogeneous social network learning. In Thirtieth AAAI Conference on Artificial Intelligence, 2016.</p>\n<p>Zhou Zhao, Qifan Yang, Deng Cai, Xiaofei He, and Yueting Zhuang. Expert finding for community-based question answering via ranking metric network learning. In IJCAI, pages 3000–3006, 2016.</p>\n</li>\n<li><p>社会关系（social network analysis）</p>\n<p>Bryan Perozzi and Steven Skiena. Exact age prediction in social networks. In Proceedings of the 24th International Conference on World Wide Web, pages 91–92. ACM, 2015.</p>\n<p>Cheng Yang, Maosong Sun, Wayne Xin Zhao, Zhiyuan Liu, and Edward Y Chang. A neural network approach to joint modeling social networks and mobile trajectories. arXiv preprint arXiv:1606.08154, 2016.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"精读文献笔记\"><a href=\"#精读文献笔记\" class=\"headerlink\" title=\"精读文献笔记\"></a>精读文献笔记</h1><h1 id=\"杂七杂八的comment\"><a href=\"#杂七杂八的comment\" class=\"headerlink\" title=\"杂七杂八的comment\"></a>杂七杂八的comment</h1><ul>\n<li>无监督学习侧重于学习数据的内在关系、结构，比如clustering、grouping、density estimation, or anomaly detection等等，而自监督是根据数据集本身生成标签</li>\n<li>表示学习领域的会议：ICML（ International Conference on Learning Representations）</li>\n</ul>\n<h1 id=\"文献总结\"><a href=\"#文献总结\" class=\"headerlink\" title=\"文献总结\"></a>文献总结</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1]Bengio, Y.; Courville, A.; Vincent, P. Representation Learning: A Review and New Perspectives. <em>arXiv:1206.5538 [cs]</em> <strong>2014</strong>.【done】</p>\n<p>[2] <a href=\"https://www.cxyzjd.com/article/weixin_42137700/106039656\">图灵奖得主Bengio和LeCun称自监督学习可使AI达到人类智力水平</a>  【done】</p>\n<p>[3] <a href=\"https://cloud.tencent.com/developer/article/1523877\">图灵奖得主LeCun力推无监督学习：要重视基于能量的学习方法</a> 【done】</p>\n<p><strong>[4] Weston, J.; Bengio, S.; Usunier, N. Large Scale Image Annotation: Learning to Rank with Joint Word-Image Embeddings. <em>Machine learning</em> 2010, <em>81</em> (1), 21–35.</strong> </p>\n<p><strong>[5] Srivastava, N., &amp; Salakhutdinov, R. R. (2012). Multimodal learning with deep boltzmann machines. <em>Advances in neural information processing systems</em>, <em>25</em>.</strong></p>\n<p>[6] Chen, H.; Perozzi, B.; Al-Rfou, R.; Skiena, S. A Tutorial on Network Embeddings. <em>arXiv:1808.02590 [cs]</em> <strong>2018</strong>. </p>\n<p>[7]   Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. Deepwalk: Online learning of social repre- sentations. In Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 701–710. ACM, 2014.</p>\n<p>[8] Sami Abu-El-Haija, Bryan Perozzi, Rami Al-Rfou, and Alex Alemi. Watch your step: Learning graph embeddings through attention. arXiv preprint arXiv:1710.09599, 2017.</p>\n<p>[9]  Xiaofei Sun, Jiang Guo, Xiao Ding, and Ting Liu. A general framework for content-enhanced network representation learning. arXiv preprint arXiv:1610.02906, 2016.【图的节点中有文本信息作为arttibute】</p>\n<p>[][12][10]  Jifan Chen, Qi Zhang, and Xuanjing Huang. Incorporate group information to enhance network embedding. In Proceedings of the 25th ACM International on Conference on Information and Knowledge Management, pages 1901–1904. ACM, 2016.  【图中的节点有标签信息】</p>\n<p>[11]  Chih-Ming Chen, Po-Chuan Chien, Yu-Ching Lin, Ming-Feng Tsai, and Yi-Hsuan Yang. Ex- ploiting latent social listening representations for music recommendations. In Proc Ninth ACM Int. Conf. Recommender Syst. Poster, 2015. 【NE在推荐中的应用】</p>\n<p>[12]  Chih-Ming Chen, Ming-Feng Tsai, Yu-Ching Lin, and Yi-Hsuan Yang. Query-based music recommendations via preference embedding. In Proceedings of the 10th ACM Conference on Recommender Systems, pages 79–82. ACM, 2016.【NE在推荐中的应用】</p>\n","site":{"data":{}},"excerpt":"<p>表示学习调研</p>","more":"<p>[TOC]</p>\n<h1 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h1><p>representation learning；data representation; Deep learning, representation learning, feature learning, unsupervised learning, Boltzmann Machine, autoencoder, neural nets</p>\n<h1 id=\"粗读文献笔记\"><a href=\"#粗读文献笔记\" class=\"headerlink\" title=\"粗读文献笔记\"></a>粗读文献笔记</h1><h2 id=\"Bengio，2014，Representation-Learning-A-Review-and-New-Perspectives\"><a href=\"#Bengio，2014，Representation-Learning-A-Review-and-New-Perspectives\" class=\"headerlink\" title=\"Bengio，2014，Representation Learning: A Review and New Perspectives\"></a>Bengio，2014，Representation Learning: A Review and New Perspectives</h2><p><strong>Index Terms</strong>:Deep learning, representation learning, feature learning, unsupervised learning, Boltzmann Machine, autoencoder, neural nets,underlying explanatory factors</p>\n<ul>\n<li>机器学习的成功依赖于数据的表征（data representation），我们假设这是因为数据的表征或多或少的揭示了数据的内在结构。当然可以采用专家经验设计表征方式，但AI的目的在于依照通用的先验（generic priors）设计表征，并通过数据实例化这个表征。</li>\n<li>“ This paper reviews recent work in the area of unsupervised feature learning and deep learning, covering advances in <strong>probabilistic models, auto-encoders, manifold learning, and deep networks.</strong> “<ul>\n<li>本文聚焦与<strong>无监督学习</strong>，实现的方式包括以上三种方式。auto-encoders是基于信息重建的算法， manifold learning是基于拓扑学的算法</li>\n</ul>\n</li>\n<li>这个工作有助于理解一个长期没有确定答案的问题：什么样的数据表征是一个好的表征？数据表征的优化目标是什么？<ul>\n<li><strong>好的特征能够解耦数据中的关键潜在影响变量，这些变量最好是通用的（例如通用的语言模型、图像模型）。特征提取的过程就是冗余信息删减聚合的过程</strong>。如果不能通用，那退一步特征最好能提取针对下游任务有区分性的潜在因子，因子和任务目标之间最好有简单关系（如线性关系）</li>\n</ul>\n</li>\n<li>“In order to expand the scope and ease of applicability of machine learning, it would be highly desirable to make learning algorithms <strong>less dependent on feature engineering</strong>, so that novel applications could be constructed faster, and more importantly, to <strong>make progress towards Artificial Intelligence</strong> (AI). An AI must fundamentally <em>understand the world around us</em>, and we argue that this can only be achieved if it can learn to identify and disentangle the underlying explanatory factors hidden in the observed milieu of <strong>low-level sensory data</strong>.” P1<ul>\n<li>借助专家经验的特征工程能一定程度描述数据的内在结构，但真正的AI应该是解耦低等级的感官数据中的影响因子，从而了解这个世界的</li>\n</ul>\n</li>\n<li>“In the case of probabilistic models, a good representation is often one that captures the posterior distribution of the <strong>underlying explanatory factors</strong> for the observed input.” P1<ul>\n<li>对于概率模型，一个好的表征能够提取观察到的输入数据中的潜在影响因子。</li>\n</ul>\n</li>\n<li>AI中的表示学习中的先验：<ul>\n<li>平滑性（smoothness): x ≈ y generally implies f(x) ≈ f(y)</li>\n<li>解耦（ Multiple explanatory factors）</li>\n<li>层次化的组织方式（A hierarchical organization of explanatory factors）：越抽象的特征处于越高层</li>\n<li>半监督（semi-supervised learning）:有一些解释X分布的因子也能解释Y的分布，基于这个假设，对于P(X)有用的表征对P(Y|X)也有用。所以note2vec的embeding才可以用于下游任务。但这个假设并不强，也就是用在下游任务不一定效果好</li>\n<li>通用性（Shared factors across tasks）：能在不同的任务中共享一些因子</li>\n<li>自然的聚集性（Natural clustering）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Chen-2018-A-Tutorial-on-Network-Embeddings\"><a href=\"#Chen-2018-A-Tutorial-on-Network-Embeddings\" class=\"headerlink\" title=\"Chen,2018,A Tutorial on Network Embeddings\"></a>Chen,2018,A Tutorial on Network Embeddings</h2><p>Chen, H.; Perozzi, B.; Al-Rfou, R.; Skiena, S. A Tutorial on Network Embeddings. <em>arXiv:1808.02590 [cs]</em> <strong>2018</strong>.</p>\n<ul>\n<li><p>模型分类：unsupervised NE(以deepwalk为代表的无监督方法);  attributed NE(网络结构信息+节点和边的属性学习节点表征); Heterogeneous NE(从有多类节点或边的网络中学习表征)</p>\n</li>\n<li><p>NE的应用</p>\n<ul>\n<li><p>知识图谱（Knowledge Representation）：GenVector(2015), PDF2Vec(2016)</p>\n</li>\n<li><p>推荐（recommender system）</p>\n<p>Chih-Ming Chen, Po-Chuan Chien, Yu-Ching Lin, Ming-Feng Tsai, and Yi-Hsuan Yang. Ex- ploiting latent social listening representations for music recommendations. In Proc Ninth ACM Int. Conf. Recommender Syst. Poster, 2015</p>\n<p>Chih-Ming Chen, Ming-Feng Tsai, Yu-Ching Lin, and Yi-Hsuan Yang. Query-based music recommendations via preference embedding. In Proceedings of the 10th ACM Conference on Recommender Systems, pages 79–82. ACM, 2016.</p>\n</li>\n<li><p>NLP: PLE(2016), CANE(2017),</p>\n<p>Hanyin Fang, Fei Wu, Zhou Zhao, Xinyu Duan, Yueting Zhuang, and Martin Ester. Community-based question answering via heterogeneous social network learning. In Thirtieth AAAI Conference on Artificial Intelligence, 2016.</p>\n<p>Zhou Zhao, Qifan Yang, Deng Cai, Xiaofei He, and Yueting Zhuang. Expert finding for community-based question answering via ranking metric network learning. In IJCAI, pages 3000–3006, 2016.</p>\n</li>\n<li><p>社会关系（social network analysis）</p>\n<p>Bryan Perozzi and Steven Skiena. Exact age prediction in social networks. In Proceedings of the 24th International Conference on World Wide Web, pages 91–92. ACM, 2015.</p>\n<p>Cheng Yang, Maosong Sun, Wayne Xin Zhao, Zhiyuan Liu, and Edward Y Chang. A neural network approach to joint modeling social networks and mobile trajectories. arXiv preprint arXiv:1606.08154, 2016.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"精读文献笔记\"><a href=\"#精读文献笔记\" class=\"headerlink\" title=\"精读文献笔记\"></a>精读文献笔记</h1><h1 id=\"杂七杂八的comment\"><a href=\"#杂七杂八的comment\" class=\"headerlink\" title=\"杂七杂八的comment\"></a>杂七杂八的comment</h1><ul>\n<li>无监督学习侧重于学习数据的内在关系、结构，比如clustering、grouping、density estimation, or anomaly detection等等，而自监督是根据数据集本身生成标签</li>\n<li>表示学习领域的会议：ICML（ International Conference on Learning Representations）</li>\n</ul>\n<h1 id=\"文献总结\"><a href=\"#文献总结\" class=\"headerlink\" title=\"文献总结\"></a>文献总结</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1]Bengio, Y.; Courville, A.; Vincent, P. Representation Learning: A Review and New Perspectives. <em>arXiv:1206.5538 [cs]</em> <strong>2014</strong>.【done】</p>\n<p>[2] <a href=\"https://www.cxyzjd.com/article/weixin_42137700/106039656\">图灵奖得主Bengio和LeCun称自监督学习可使AI达到人类智力水平</a>  【done】</p>\n<p>[3] <a href=\"https://cloud.tencent.com/developer/article/1523877\">图灵奖得主LeCun力推无监督学习：要重视基于能量的学习方法</a> 【done】</p>\n<p><strong>[4] Weston, J.; Bengio, S.; Usunier, N. Large Scale Image Annotation: Learning to Rank with Joint Word-Image Embeddings. <em>Machine learning</em> 2010, <em>81</em> (1), 21–35.</strong> </p>\n<p><strong>[5] Srivastava, N., &amp; Salakhutdinov, R. R. (2012). Multimodal learning with deep boltzmann machines. <em>Advances in neural information processing systems</em>, <em>25</em>.</strong></p>\n<p>[6] Chen, H.; Perozzi, B.; Al-Rfou, R.; Skiena, S. A Tutorial on Network Embeddings. <em>arXiv:1808.02590 [cs]</em> <strong>2018</strong>. </p>\n<p>[7]   Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. Deepwalk: Online learning of social repre- sentations. In Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 701–710. ACM, 2014.</p>\n<p>[8] Sami Abu-El-Haija, Bryan Perozzi, Rami Al-Rfou, and Alex Alemi. Watch your step: Learning graph embeddings through attention. arXiv preprint arXiv:1710.09599, 2017.</p>\n<p>[9]  Xiaofei Sun, Jiang Guo, Xiao Ding, and Ting Liu. A general framework for content-enhanced network representation learning. arXiv preprint arXiv:1610.02906, 2016.【图的节点中有文本信息作为arttibute】</p>\n<p>[][12][10]  Jifan Chen, Qi Zhang, and Xuanjing Huang. Incorporate group information to enhance network embedding. In Proceedings of the 25th ACM International on Conference on Information and Knowledge Management, pages 1901–1904. ACM, 2016.  【图中的节点有标签信息】</p>\n<p>[11]  Chih-Ming Chen, Po-Chuan Chien, Yu-Ching Lin, Ming-Feng Tsai, and Yi-Hsuan Yang. Ex- ploiting latent social listening representations for music recommendations. In Proc Ninth ACM Int. Conf. Recommender Syst. Poster, 2015. 【NE在推荐中的应用】</p>\n<p>[12]  Chih-Ming Chen, Ming-Feng Tsai, Yu-Ching Lin, and Yi-Hsuan Yang. Query-based music recommendations via preference embedding. In Proceedings of the 10th ACM Conference on Recommender Systems, pages 79–82. ACM, 2016.【NE在推荐中的应用】</p>"},{"title":"计算广告","date":"2022-03-01T03:32:38.000Z","_content":"\n计算广告\n\n<!-- more -->\n\n\n[TOC]\n\n# 1. 好文\n\nhttps://borgwang.github.io/adtech/2020/12/09/adtech-buying-type.html \n\n# 2. 出价模式\n\n转化链路：曝光 M -> 点击 C -> 转化 A -> 消费 P\n\n 考核出价 ： bidROI\n\n![image-20210805144947093](/Users/hetianqi/Library/Application Support/typora-user-images/image-20210805144947093.png)\n\n- 本质上 CPM 到 CPC 的变化是计费点和出价点从 M 移动到 C，这个点之前的部分（ CTR 预估）让渡给平台去完成了，广告主只负责这个点后面的预估\n- 因为 CPA 模式按照转化计费，只要广告主不回传或只回传部分转化数据，就可以进行作弊，薅媒体平台羊毛。因此实际中 CPA 模式应用的很少。\n- 从广告主的角度，从 CPM 到 CPC 到 CPA，出价点越来越靠近广告主考核点，平台需要预估的东西越来越多，承担的风险也越来越大。到了 CPA 这种模式，由于转化数据平台无法完全控制，**预估 CVR 带来的期望风险已经超过了期望收益了**，因此看上去很难再继续往链路后端发展。这时 Facebook 提出了 oCPX 模式，这种模式的创新点在于\u0010**分离了计费点和出价点**。我们仍希望利用媒体平台的能力对 CVR 进行预估，因此将出价点往后移到 A，因为这会带来平台收益；同时将计费点保留在 M 或者 C（对应 oCPM、oCPC），仍然按照曝光或点击计费，这会降低进行预估的期望风险（广告主没有动力作弊了）。\n\n# 3. oCPX的成本控制\n\n- oCPX 中的成本控制和预算控制\n  - oCPX 是一种保转化成本的模式，即媒体平台需要在一个广告投放周期内对广告转化成本进行控制，使其尽量等于广告主设定的目标成本。因此 oCPX 中通常会有智能调价的功能，即如果前期出价出高了，比如广告主设定 80 元一个转化，前期投放下来发现一个转化要 100 元，这时候智能调价需要将出价调低，拉低其平均转化成本。最朴素的是做法就是用 PID 反馈控制出价\n  - 除了成本控制之外也应该对预算进行控制，让预算在周期内以合理的节奏消耗，这个节奏通常与流量的分布差不多一致。\n\n# 4. 计算广告中的PID成本控制\n\n参考资料：\n\n [干货 | PID算法在广告成本控制领域的应用](https://cloud.tencent.com/developer/article/1745934 )\n\n背景：\n\n- 在实际的广告投放系统中，会包含诸如广告主端的点击率预估模型、用户价值预估模型、竞价算法，媒体端的OCPA、OCPC出价模型，以及多方竞价、二价成交等不可控机制，最终的投放系统十分复杂，影响投放成本的因素过多，造成**用户成交价与实际出价并不相等**，实际投放成本难以契合广告主在投放初期所制定的预算。\n- 以信息流广告投放为例，广告主通过采买媒体平台广告位进行广告投放。在广告投放前，综合考虑投放目标以及历史投放经验等，会对广告投放预算成本进行控制，希望能够以预先规划的价格拿到广告位资源（即控制广告成交价）。但由于如前所述的广告投放系统中的出价优化模型以及二价成交机制等，**广告主往往不能直接控制成交价**，而需通过调整出价等方式间接控制成交价。\n- 为了能够实现控制成交价的目的，我们实时监控成交价**（输出）**与预算成本**（目标）**间关系，并通过PID控制算法来动态调整出价**(输入)**\n\n<img src=\"pics/计算广告/image-20210805152419480.png\" alt=\"image-20210805152419480\" style=\"zoom:50%;\" />\n\n<img src=\"pics/计算广告/image-20210805152357961.png\" alt=\"image-20210805152357961\" style=\"zoom:50%;\" />\n\n<img src=\"pics/计算广告/image-20210805152447320.png\" alt=\"image-20210805152447320\" style=\"zoom:50%;\" />\n\n# 5. 其他\n\n## CPX与OCPX的区别\n\nCPX（如CPC,CPM等）是出价点与计费点一致，oCPX_a指的是计费点在X，出价点在a。相较与CPX，相当于媒体帮助广告主预估计费点到出价点的转化率，实现出价点成本控制下的动态竞价。\n\n## eCPM 流量对于媒体的变现能力评估\n\neCPM的竞价模式下竞价点都是在**展示**,任何出价计费模式下eCPM的万能公式：\n\n> eCPM =P(计费|展示) * bid_计费  * 1000   \n\n例子：\n\neCPM = CTR * CPC * 1000  #点击出价，点击计费，即CPC模式\n\neCPM = CPM  # 展示出价，展示计费，即CPM模式\n\neCPM = CTR * P(授信|点击) *  bid_授信 * 1000  #授信出价，点击计费，即oCPC_a \n\n","source":"_posts/2_算法相关/计算广告.md","raw":"---\ntitle: 计算广告\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n计算广告\n\n<!-- more -->\n\n\n[TOC]\n\n# 1. 好文\n\nhttps://borgwang.github.io/adtech/2020/12/09/adtech-buying-type.html \n\n# 2. 出价模式\n\n转化链路：曝光 M -> 点击 C -> 转化 A -> 消费 P\n\n 考核出价 ： bidROI\n\n![image-20210805144947093](/Users/hetianqi/Library/Application Support/typora-user-images/image-20210805144947093.png)\n\n- 本质上 CPM 到 CPC 的变化是计费点和出价点从 M 移动到 C，这个点之前的部分（ CTR 预估）让渡给平台去完成了，广告主只负责这个点后面的预估\n- 因为 CPA 模式按照转化计费，只要广告主不回传或只回传部分转化数据，就可以进行作弊，薅媒体平台羊毛。因此实际中 CPA 模式应用的很少。\n- 从广告主的角度，从 CPM 到 CPC 到 CPA，出价点越来越靠近广告主考核点，平台需要预估的东西越来越多，承担的风险也越来越大。到了 CPA 这种模式，由于转化数据平台无法完全控制，**预估 CVR 带来的期望风险已经超过了期望收益了**，因此看上去很难再继续往链路后端发展。这时 Facebook 提出了 oCPX 模式，这种模式的创新点在于\u0010**分离了计费点和出价点**。我们仍希望利用媒体平台的能力对 CVR 进行预估，因此将出价点往后移到 A，因为这会带来平台收益；同时将计费点保留在 M 或者 C（对应 oCPM、oCPC），仍然按照曝光或点击计费，这会降低进行预估的期望风险（广告主没有动力作弊了）。\n\n# 3. oCPX的成本控制\n\n- oCPX 中的成本控制和预算控制\n  - oCPX 是一种保转化成本的模式，即媒体平台需要在一个广告投放周期内对广告转化成本进行控制，使其尽量等于广告主设定的目标成本。因此 oCPX 中通常会有智能调价的功能，即如果前期出价出高了，比如广告主设定 80 元一个转化，前期投放下来发现一个转化要 100 元，这时候智能调价需要将出价调低，拉低其平均转化成本。最朴素的是做法就是用 PID 反馈控制出价\n  - 除了成本控制之外也应该对预算进行控制，让预算在周期内以合理的节奏消耗，这个节奏通常与流量的分布差不多一致。\n\n# 4. 计算广告中的PID成本控制\n\n参考资料：\n\n [干货 | PID算法在广告成本控制领域的应用](https://cloud.tencent.com/developer/article/1745934 )\n\n背景：\n\n- 在实际的广告投放系统中，会包含诸如广告主端的点击率预估模型、用户价值预估模型、竞价算法，媒体端的OCPA、OCPC出价模型，以及多方竞价、二价成交等不可控机制，最终的投放系统十分复杂，影响投放成本的因素过多，造成**用户成交价与实际出价并不相等**，实际投放成本难以契合广告主在投放初期所制定的预算。\n- 以信息流广告投放为例，广告主通过采买媒体平台广告位进行广告投放。在广告投放前，综合考虑投放目标以及历史投放经验等，会对广告投放预算成本进行控制，希望能够以预先规划的价格拿到广告位资源（即控制广告成交价）。但由于如前所述的广告投放系统中的出价优化模型以及二价成交机制等，**广告主往往不能直接控制成交价**，而需通过调整出价等方式间接控制成交价。\n- 为了能够实现控制成交价的目的，我们实时监控成交价**（输出）**与预算成本**（目标）**间关系，并通过PID控制算法来动态调整出价**(输入)**\n\n<img src=\"pics/计算广告/image-20210805152419480.png\" alt=\"image-20210805152419480\" style=\"zoom:50%;\" />\n\n<img src=\"pics/计算广告/image-20210805152357961.png\" alt=\"image-20210805152357961\" style=\"zoom:50%;\" />\n\n<img src=\"pics/计算广告/image-20210805152447320.png\" alt=\"image-20210805152447320\" style=\"zoom:50%;\" />\n\n# 5. 其他\n\n## CPX与OCPX的区别\n\nCPX（如CPC,CPM等）是出价点与计费点一致，oCPX_a指的是计费点在X，出价点在a。相较与CPX，相当于媒体帮助广告主预估计费点到出价点的转化率，实现出价点成本控制下的动态竞价。\n\n## eCPM 流量对于媒体的变现能力评估\n\neCPM的竞价模式下竞价点都是在**展示**,任何出价计费模式下eCPM的万能公式：\n\n> eCPM =P(计费|展示) * bid_计费  * 1000   \n\n例子：\n\neCPM = CTR * CPC * 1000  #点击出价，点击计费，即CPC模式\n\neCPM = CPM  # 展示出价，展示计费，即CPM模式\n\neCPM = CTR * P(授信|点击) *  bid_授信 * 1000  #授信出价，点击计费，即oCPC_a \n\n","slug":"2_算法相关/计算广告","published":1,"updated":"2022-03-01T03:59:30.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4j001t8s320vfaf9hv","content":"<p>计算广告</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"1-好文\"><a href=\"#1-好文\" class=\"headerlink\" title=\"1. 好文\"></a>1. 好文</h1><p><a href=\"https://borgwang.github.io/adtech/2020/12/09/adtech-buying-type.html\">https://borgwang.github.io/adtech/2020/12/09/adtech-buying-type.html</a> </p>\n<h1 id=\"2-出价模式\"><a href=\"#2-出价模式\" class=\"headerlink\" title=\"2. 出价模式\"></a>2. 出价模式</h1><p>转化链路：曝光 M -&gt; 点击 C -&gt; 转化 A -&gt; 消费 P</p>\n<p> 考核出价 ： bidROI</p>\n<p><img src=\"/Users/hetianqi/Library/Application Support/typora-user-images/image-20210805144947093.png\" alt=\"image-20210805144947093\"></p>\n<ul>\n<li>本质上 CPM 到 CPC 的变化是计费点和出价点从 M 移动到 C，这个点之前的部分（ CTR 预估）让渡给平台去完成了，广告主只负责这个点后面的预估</li>\n<li>因为 CPA 模式按照转化计费，只要广告主不回传或只回传部分转化数据，就可以进行作弊，薅媒体平台羊毛。因此实际中 CPA 模式应用的很少。</li>\n<li>从广告主的角度，从 CPM 到 CPC 到 CPA，出价点越来越靠近广告主考核点，平台需要预估的东西越来越多，承担的风险也越来越大。到了 CPA 这种模式，由于转化数据平台无法完全控制，<strong>预估 CVR 带来的期望风险已经超过了期望收益了</strong>，因此看上去很难再继续往链路后端发展。这时 Facebook 提出了 oCPX 模式，这种模式的创新点在于\u0010<strong>分离了计费点和出价点</strong>。我们仍希望利用媒体平台的能力对 CVR 进行预估，因此将出价点往后移到 A，因为这会带来平台收益；同时将计费点保留在 M 或者 C（对应 oCPM、oCPC），仍然按照曝光或点击计费，这会降低进行预估的期望风险（广告主没有动力作弊了）。</li>\n</ul>\n<h1 id=\"3-oCPX的成本控制\"><a href=\"#3-oCPX的成本控制\" class=\"headerlink\" title=\"3. oCPX的成本控制\"></a>3. oCPX的成本控制</h1><ul>\n<li>oCPX 中的成本控制和预算控制<ul>\n<li>oCPX 是一种保转化成本的模式，即媒体平台需要在一个广告投放周期内对广告转化成本进行控制，使其尽量等于广告主设定的目标成本。因此 oCPX 中通常会有智能调价的功能，即如果前期出价出高了，比如广告主设定 80 元一个转化，前期投放下来发现一个转化要 100 元，这时候智能调价需要将出价调低，拉低其平均转化成本。最朴素的是做法就是用 PID 反馈控制出价</li>\n<li>除了成本控制之外也应该对预算进行控制，让预算在周期内以合理的节奏消耗，这个节奏通常与流量的分布差不多一致。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-计算广告中的PID成本控制\"><a href=\"#4-计算广告中的PID成本控制\" class=\"headerlink\" title=\"4. 计算广告中的PID成本控制\"></a>4. 计算广告中的PID成本控制</h1><p>参考资料：</p>\n<p> <a href=\"https://cloud.tencent.com/developer/article/1745934\">干货 | PID算法在广告成本控制领域的应用</a></p>\n<p>背景：</p>\n<ul>\n<li>在实际的广告投放系统中，会包含诸如广告主端的点击率预估模型、用户价值预估模型、竞价算法，媒体端的OCPA、OCPC出价模型，以及多方竞价、二价成交等不可控机制，最终的投放系统十分复杂，影响投放成本的因素过多，造成<strong>用户成交价与实际出价并不相等</strong>，实际投放成本难以契合广告主在投放初期所制定的预算。</li>\n<li>以信息流广告投放为例，广告主通过采买媒体平台广告位进行广告投放。在广告投放前，综合考虑投放目标以及历史投放经验等，会对广告投放预算成本进行控制，希望能够以预先规划的价格拿到广告位资源（即控制广告成交价）。但由于如前所述的广告投放系统中的出价优化模型以及二价成交机制等，<strong>广告主往往不能直接控制成交价</strong>，而需通过调整出价等方式间接控制成交价。</li>\n<li>为了能够实现控制成交价的目的，我们实时监控成交价<strong>（输出）</strong>与预算成本<strong>（目标）</strong>间关系，并通过PID控制算法来动态调整出价<strong>(输入)</strong></li>\n</ul>\n<p><img src=\"pics/计算广告/image-20210805152419480.png\" alt=\"image-20210805152419480\" style=\"zoom:50%;\" /></p>\n<p><img src=\"pics/计算广告/image-20210805152357961.png\" alt=\"image-20210805152357961\" style=\"zoom:50%;\" /></p>\n<p><img src=\"pics/计算广告/image-20210805152447320.png\" alt=\"image-20210805152447320\" style=\"zoom:50%;\" /></p>\n<h1 id=\"5-其他\"><a href=\"#5-其他\" class=\"headerlink\" title=\"5. 其他\"></a>5. 其他</h1><h2 id=\"CPX与OCPX的区别\"><a href=\"#CPX与OCPX的区别\" class=\"headerlink\" title=\"CPX与OCPX的区别\"></a>CPX与OCPX的区别</h2><p>CPX（如CPC,CPM等）是出价点与计费点一致，oCPX_a指的是计费点在X，出价点在a。相较与CPX，相当于媒体帮助广告主预估计费点到出价点的转化率，实现出价点成本控制下的动态竞价。</p>\n<h2 id=\"eCPM-流量对于媒体的变现能力评估\"><a href=\"#eCPM-流量对于媒体的变现能力评估\" class=\"headerlink\" title=\"eCPM 流量对于媒体的变现能力评估\"></a>eCPM 流量对于媒体的变现能力评估</h2><p>eCPM的竞价模式下竞价点都是在<strong>展示</strong>,任何出价计费模式下eCPM的万能公式：</p>\n<blockquote>\n<p>eCPM =P(计费|展示) <em> bid_计费  </em> 1000   </p>\n</blockquote>\n<p>例子：</p>\n<p>eCPM = CTR <em> CPC </em> 1000  #点击出价，点击计费，即CPC模式</p>\n<p>eCPM = CPM  # 展示出价，展示计费，即CPM模式</p>\n<p>eCPM = CTR <em> P(授信|点击) </em>  bid_授信 * 1000  #授信出价，点击计费，即oCPC_a </p>\n","site":{"data":{}},"excerpt":"<p>计算广告</p>","more":"<p>[TOC]</p>\n<h1 id=\"1-好文\"><a href=\"#1-好文\" class=\"headerlink\" title=\"1. 好文\"></a>1. 好文</h1><p><a href=\"https://borgwang.github.io/adtech/2020/12/09/adtech-buying-type.html\">https://borgwang.github.io/adtech/2020/12/09/adtech-buying-type.html</a> </p>\n<h1 id=\"2-出价模式\"><a href=\"#2-出价模式\" class=\"headerlink\" title=\"2. 出价模式\"></a>2. 出价模式</h1><p>转化链路：曝光 M -&gt; 点击 C -&gt; 转化 A -&gt; 消费 P</p>\n<p> 考核出价 ： bidROI</p>\n<p><img src=\"/Users/hetianqi/Library/Application Support/typora-user-images/image-20210805144947093.png\" alt=\"image-20210805144947093\"></p>\n<ul>\n<li>本质上 CPM 到 CPC 的变化是计费点和出价点从 M 移动到 C，这个点之前的部分（ CTR 预估）让渡给平台去完成了，广告主只负责这个点后面的预估</li>\n<li>因为 CPA 模式按照转化计费，只要广告主不回传或只回传部分转化数据，就可以进行作弊，薅媒体平台羊毛。因此实际中 CPA 模式应用的很少。</li>\n<li>从广告主的角度，从 CPM 到 CPC 到 CPA，出价点越来越靠近广告主考核点，平台需要预估的东西越来越多，承担的风险也越来越大。到了 CPA 这种模式，由于转化数据平台无法完全控制，<strong>预估 CVR 带来的期望风险已经超过了期望收益了</strong>，因此看上去很难再继续往链路后端发展。这时 Facebook 提出了 oCPX 模式，这种模式的创新点在于\u0010<strong>分离了计费点和出价点</strong>。我们仍希望利用媒体平台的能力对 CVR 进行预估，因此将出价点往后移到 A，因为这会带来平台收益；同时将计费点保留在 M 或者 C（对应 oCPM、oCPC），仍然按照曝光或点击计费，这会降低进行预估的期望风险（广告主没有动力作弊了）。</li>\n</ul>\n<h1 id=\"3-oCPX的成本控制\"><a href=\"#3-oCPX的成本控制\" class=\"headerlink\" title=\"3. oCPX的成本控制\"></a>3. oCPX的成本控制</h1><ul>\n<li>oCPX 中的成本控制和预算控制<ul>\n<li>oCPX 是一种保转化成本的模式，即媒体平台需要在一个广告投放周期内对广告转化成本进行控制，使其尽量等于广告主设定的目标成本。因此 oCPX 中通常会有智能调价的功能，即如果前期出价出高了，比如广告主设定 80 元一个转化，前期投放下来发现一个转化要 100 元，这时候智能调价需要将出价调低，拉低其平均转化成本。最朴素的是做法就是用 PID 反馈控制出价</li>\n<li>除了成本控制之外也应该对预算进行控制，让预算在周期内以合理的节奏消耗，这个节奏通常与流量的分布差不多一致。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-计算广告中的PID成本控制\"><a href=\"#4-计算广告中的PID成本控制\" class=\"headerlink\" title=\"4. 计算广告中的PID成本控制\"></a>4. 计算广告中的PID成本控制</h1><p>参考资料：</p>\n<p> <a href=\"https://cloud.tencent.com/developer/article/1745934\">干货 | PID算法在广告成本控制领域的应用</a></p>\n<p>背景：</p>\n<ul>\n<li>在实际的广告投放系统中，会包含诸如广告主端的点击率预估模型、用户价值预估模型、竞价算法，媒体端的OCPA、OCPC出价模型，以及多方竞价、二价成交等不可控机制，最终的投放系统十分复杂，影响投放成本的因素过多，造成<strong>用户成交价与实际出价并不相等</strong>，实际投放成本难以契合广告主在投放初期所制定的预算。</li>\n<li>以信息流广告投放为例，广告主通过采买媒体平台广告位进行广告投放。在广告投放前，综合考虑投放目标以及历史投放经验等，会对广告投放预算成本进行控制，希望能够以预先规划的价格拿到广告位资源（即控制广告成交价）。但由于如前所述的广告投放系统中的出价优化模型以及二价成交机制等，<strong>广告主往往不能直接控制成交价</strong>，而需通过调整出价等方式间接控制成交价。</li>\n<li>为了能够实现控制成交价的目的，我们实时监控成交价<strong>（输出）</strong>与预算成本<strong>（目标）</strong>间关系，并通过PID控制算法来动态调整出价<strong>(输入)</strong></li>\n</ul>\n<p><img src=\"pics/计算广告/image-20210805152419480.png\" alt=\"image-20210805152419480\" style=\"zoom:50%;\" /></p>\n<p><img src=\"pics/计算广告/image-20210805152357961.png\" alt=\"image-20210805152357961\" style=\"zoom:50%;\" /></p>\n<p><img src=\"pics/计算广告/image-20210805152447320.png\" alt=\"image-20210805152447320\" style=\"zoom:50%;\" /></p>\n<h1 id=\"5-其他\"><a href=\"#5-其他\" class=\"headerlink\" title=\"5. 其他\"></a>5. 其他</h1><h2 id=\"CPX与OCPX的区别\"><a href=\"#CPX与OCPX的区别\" class=\"headerlink\" title=\"CPX与OCPX的区别\"></a>CPX与OCPX的区别</h2><p>CPX（如CPC,CPM等）是出价点与计费点一致，oCPX_a指的是计费点在X，出价点在a。相较与CPX，相当于媒体帮助广告主预估计费点到出价点的转化率，实现出价点成本控制下的动态竞价。</p>\n<h2 id=\"eCPM-流量对于媒体的变现能力评估\"><a href=\"#eCPM-流量对于媒体的变现能力评估\" class=\"headerlink\" title=\"eCPM 流量对于媒体的变现能力评估\"></a>eCPM 流量对于媒体的变现能力评估</h2><p>eCPM的竞价模式下竞价点都是在<strong>展示</strong>,任何出价计费模式下eCPM的万能公式：</p>\n<blockquote>\n<p>eCPM =P(计费|展示) <em> bid_计费  </em> 1000   </p>\n</blockquote>\n<p>例子：</p>\n<p>eCPM = CTR <em> CPC </em> 1000  #点击出价，点击计费，即CPC模式</p>\n<p>eCPM = CPM  # 展示出价，展示计费，即CPM模式</p>\n<p>eCPM = CTR <em> P(授信|点击) </em>  bid_授信 * 1000  #授信出价，点击计费，即oCPC_a </p>"},{"title":"计算广告学笔记","date":"2022-03-01T03:32:38.000Z","_content":"\n计算广告学笔记\n\n<!-- more -->\n\n\n[TOC]\n\n# 业务知识\n\n## 广告分类\n\n广告的根本目的，是广告主通过媒体达到低成本的用户接触。\n\n也就是说，按某种市场意图接触相应的人群，进而影响其中的潜在用户，使他们选择广告主产品的机率增加，或者对产品性价比的苛求程度降低，才是广告的根本目的。至于短期内的转化效果，由于市场意图或媒体性质的不同，并不是直接可比。因此ROI中的产出是很难计算的\n\n## 广告发展史\n\n- 售卖模式1：合约式广告(Agreement-based Advertising)\n\n- 广告投放方式：定向广告（Target Ad），是为了`拆分流量以获得更高的营收`，具体来说：媒体向广告主保证某个投放量，并在此基础上确定合同的总金额以及量未完成情况下的赔偿方案；**`只卖好苹果`**\n> `博弈`：定向太准了可能导致尾部流量卖不出去，对媒体不利，但广告主效果好的话整个广告市场规模就会变大，对媒体有利。\n\n- 交易方式：`担保式投送(Guaranteed Delivery)`：媒体向广告主保证某个投放量，并在此基础上确定合同的总金额以及量未完成情况下的赔偿方案**`保证交易苹果的量`**\n\n- 计费方式：按千次展示付费(Cost Per Mille, CPM)的计费方式\n\n> 难点：一是如何有效地将流量分配到各个合约互相交叉的人群覆盖上；二是要在在线的环境下实时且经济地完成每一次展示决策。\n\n- 在线分配(Online Allocation):将各`合约的量`看做约束条件，将某种意义下的质看做目标函数，我们可以利用带约束优化(Constrained Optimization)的数学框架来探索这一问题；搜索排序以优化相关性为目的，在线分配  是以`优化投入产出比`为目标。\n- 售卖模式2：`竞价广告(Auction-based Advertising)`，抛弃量的保证，而采用最唯利是图的策略来进行广告决策，具体来说就是：供给方只向广告主保证质即单位流量的成本，但不再以合约的方式给出量的保证，换言之，对每一次展示，都基本按照收益最高的原则来决策。**`线下对每批苹果进行出价`** \n\n> 由于只能在广告网络定义好的定向标签组合上预先指定出价，而不能控制每一次展示的出价，因此，市场看起来象一个黑盒子，需求方只能靠选择合适的标签组合，以及阶段性调整出价来间接控制效果。\n\n> 随着人群定向越来越精准，广告主数量越来越多，一方面担保是投送难以对流量做精确的分配来保证各广告主的投放量，另一方面当同一流量满足多个合约要求时，仅仅考虑量的约束会导致本来可以卖得更高的流量的浪费。\n\n- 售卖模式3：实时竞价（real time bidding）。竞价广告是在媒体平台上用媒体已有的标签进行人群定向，并对定向人群进行出价。实时竞价是实时判断单个流量是不是自己的定向人群，并进行出价，可以实现更精准的人群定向\n\n> 所谓实时竞价，就是把拍卖的过程由广告主预先出价，变成每次展示时实时出价。只要把广告展示的上下文页面url，以及访客的cookie等信息传给需求方，它就有充分的信息来完成定制化的人群选择和出价。\n\n- 需求方平台(Demand Side Platform, DSP) ：通过实时竞价的方式，按照定制化的人群标签购买广告，这样与广告交易平台接口的产品叫做DSP。DSP可以方便的设置对于每个流量的定向于出价，并把结果返回媒体的平台，`DSP需要尽可能准确地估计每一次展示带来的期望价值。`\n\n## 小结\n\n首先是`合约阶段`，广告主通过代理公司(Agency)从媒体方采买广告，而媒体方的Ad Server则负责完成和优化各个广告主的合约；\n\n然后，市场进化出了`竞价售卖方式`，从而在靠近供给方产生了广告网络(Ad Network)这样的产品形态，而需求方的代理公司为了适应这一市场变化，孵化除了对应的广告采买平台(Media Buying Platform)；\n\n最后，当市场产生了`实时竞价方式交易`时，供给方进化出了广告交易平台(Ad Exchange)，而需求方则需要用需求方平台(DSP)与其对接来出价和投送广告。\n\n# 计算广告基础\n\n广告平台优化目标： $ 对1...T次广告选择a_{i...T} \\quad s.t. \\quad max \\sum_i^T r(a_i,u_i,c_i)/\\sum_i^Tp_i $\n\n表达式中的a,u,c三个变量，分别代表广告、用户与上下文，即广告活动的三个参与主体。*i*代表从第1次到第*T*次之间的某一次广告展示。我们优化的目标，就是在这*T*次展示上的总产出(*r*)与总投入(*p*)的比，即ROI。\n\n$eCPM(a,u,c)=r(a,u,c) =点击率*点击价值= ctr(a,u,c)*v(a,u)$\n\n## 广告系统构架图\n\n1. 广告投放机（Ad Server）：调用哥哥模块返回前端结果\n2. 广告检索：实时接受投放信息，搜索广告备选集\n3. 广告排序，包括Click modeling和Ad ranking。关键技术是1.离线分布式计算平台上的海量数据支持的点击率预测模型的训练；2.线上高效查询用户特征并进行实时计算。在ctr的基础上简历点击价值估计模型，通常是简单的规则\n4. 数据高速公路（Data highway）：将在线数据准实时的传输到离线分部式平台和流计算平台，供后续数据处理和建模\n5. 用户日志生成：收集各渠道日志，整理成kv形式进行存储\n6. 商业智能（Business Inteligence）：看板等对外交流平台\n7. 行为定向：产生结构化标签库\n8. 上下文定向：页面抓取给上下文打标签，与行为定向一起产生定向效果\n9. 定制化用户：接收广告主定向需求（比如推包）\n10. 在线行为反馈：利用日志或买点进行准实时任务，如实时反馈点击，用户行为标签等。在利用日志完成这些逻辑之前，必须要进行的步骤是反作弊(Anti-spam)与计价(Billing)。`在很多情形下，把系统信息反馈调整做得更快，比把模型预测做得更准确效果更加显著`\n11. 广告管理系统：只有这部分是面向用户的。通过广告管理系统定制和调整广告投放，并且与数据仓库交互\n12. 实时竞价接口：对接DSP（竞价平台）的接口。对于媒体即平台的case，不需要\n\n![image-20200414143343558](/Users/hetianqi/Documents/charging/notes_of_the_world/计算广告学笔记.assets/image-20200414143343558.png)\n\n# 准备知识\n\n## 带约束优化方法和拉格朗日乘子法\n\n","source":"_posts/2_算法相关/计算广告学笔记.md","raw":"---\ntitle: 计算广告学笔记\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n计算广告学笔记\n\n<!-- more -->\n\n\n[TOC]\n\n# 业务知识\n\n## 广告分类\n\n广告的根本目的，是广告主通过媒体达到低成本的用户接触。\n\n也就是说，按某种市场意图接触相应的人群，进而影响其中的潜在用户，使他们选择广告主产品的机率增加，或者对产品性价比的苛求程度降低，才是广告的根本目的。至于短期内的转化效果，由于市场意图或媒体性质的不同，并不是直接可比。因此ROI中的产出是很难计算的\n\n## 广告发展史\n\n- 售卖模式1：合约式广告(Agreement-based Advertising)\n\n- 广告投放方式：定向广告（Target Ad），是为了`拆分流量以获得更高的营收`，具体来说：媒体向广告主保证某个投放量，并在此基础上确定合同的总金额以及量未完成情况下的赔偿方案；**`只卖好苹果`**\n> `博弈`：定向太准了可能导致尾部流量卖不出去，对媒体不利，但广告主效果好的话整个广告市场规模就会变大，对媒体有利。\n\n- 交易方式：`担保式投送(Guaranteed Delivery)`：媒体向广告主保证某个投放量，并在此基础上确定合同的总金额以及量未完成情况下的赔偿方案**`保证交易苹果的量`**\n\n- 计费方式：按千次展示付费(Cost Per Mille, CPM)的计费方式\n\n> 难点：一是如何有效地将流量分配到各个合约互相交叉的人群覆盖上；二是要在在线的环境下实时且经济地完成每一次展示决策。\n\n- 在线分配(Online Allocation):将各`合约的量`看做约束条件，将某种意义下的质看做目标函数，我们可以利用带约束优化(Constrained Optimization)的数学框架来探索这一问题；搜索排序以优化相关性为目的，在线分配  是以`优化投入产出比`为目标。\n- 售卖模式2：`竞价广告(Auction-based Advertising)`，抛弃量的保证，而采用最唯利是图的策略来进行广告决策，具体来说就是：供给方只向广告主保证质即单位流量的成本，但不再以合约的方式给出量的保证，换言之，对每一次展示，都基本按照收益最高的原则来决策。**`线下对每批苹果进行出价`** \n\n> 由于只能在广告网络定义好的定向标签组合上预先指定出价，而不能控制每一次展示的出价，因此，市场看起来象一个黑盒子，需求方只能靠选择合适的标签组合，以及阶段性调整出价来间接控制效果。\n\n> 随着人群定向越来越精准，广告主数量越来越多，一方面担保是投送难以对流量做精确的分配来保证各广告主的投放量，另一方面当同一流量满足多个合约要求时，仅仅考虑量的约束会导致本来可以卖得更高的流量的浪费。\n\n- 售卖模式3：实时竞价（real time bidding）。竞价广告是在媒体平台上用媒体已有的标签进行人群定向，并对定向人群进行出价。实时竞价是实时判断单个流量是不是自己的定向人群，并进行出价，可以实现更精准的人群定向\n\n> 所谓实时竞价，就是把拍卖的过程由广告主预先出价，变成每次展示时实时出价。只要把广告展示的上下文页面url，以及访客的cookie等信息传给需求方，它就有充分的信息来完成定制化的人群选择和出价。\n\n- 需求方平台(Demand Side Platform, DSP) ：通过实时竞价的方式，按照定制化的人群标签购买广告，这样与广告交易平台接口的产品叫做DSP。DSP可以方便的设置对于每个流量的定向于出价，并把结果返回媒体的平台，`DSP需要尽可能准确地估计每一次展示带来的期望价值。`\n\n## 小结\n\n首先是`合约阶段`，广告主通过代理公司(Agency)从媒体方采买广告，而媒体方的Ad Server则负责完成和优化各个广告主的合约；\n\n然后，市场进化出了`竞价售卖方式`，从而在靠近供给方产生了广告网络(Ad Network)这样的产品形态，而需求方的代理公司为了适应这一市场变化，孵化除了对应的广告采买平台(Media Buying Platform)；\n\n最后，当市场产生了`实时竞价方式交易`时，供给方进化出了广告交易平台(Ad Exchange)，而需求方则需要用需求方平台(DSP)与其对接来出价和投送广告。\n\n# 计算广告基础\n\n广告平台优化目标： $ 对1...T次广告选择a_{i...T} \\quad s.t. \\quad max \\sum_i^T r(a_i,u_i,c_i)/\\sum_i^Tp_i $\n\n表达式中的a,u,c三个变量，分别代表广告、用户与上下文，即广告活动的三个参与主体。*i*代表从第1次到第*T*次之间的某一次广告展示。我们优化的目标，就是在这*T*次展示上的总产出(*r*)与总投入(*p*)的比，即ROI。\n\n$eCPM(a,u,c)=r(a,u,c) =点击率*点击价值= ctr(a,u,c)*v(a,u)$\n\n## 广告系统构架图\n\n1. 广告投放机（Ad Server）：调用哥哥模块返回前端结果\n2. 广告检索：实时接受投放信息，搜索广告备选集\n3. 广告排序，包括Click modeling和Ad ranking。关键技术是1.离线分布式计算平台上的海量数据支持的点击率预测模型的训练；2.线上高效查询用户特征并进行实时计算。在ctr的基础上简历点击价值估计模型，通常是简单的规则\n4. 数据高速公路（Data highway）：将在线数据准实时的传输到离线分部式平台和流计算平台，供后续数据处理和建模\n5. 用户日志生成：收集各渠道日志，整理成kv形式进行存储\n6. 商业智能（Business Inteligence）：看板等对外交流平台\n7. 行为定向：产生结构化标签库\n8. 上下文定向：页面抓取给上下文打标签，与行为定向一起产生定向效果\n9. 定制化用户：接收广告主定向需求（比如推包）\n10. 在线行为反馈：利用日志或买点进行准实时任务，如实时反馈点击，用户行为标签等。在利用日志完成这些逻辑之前，必须要进行的步骤是反作弊(Anti-spam)与计价(Billing)。`在很多情形下，把系统信息反馈调整做得更快，比把模型预测做得更准确效果更加显著`\n11. 广告管理系统：只有这部分是面向用户的。通过广告管理系统定制和调整广告投放，并且与数据仓库交互\n12. 实时竞价接口：对接DSP（竞价平台）的接口。对于媒体即平台的case，不需要\n\n![image-20200414143343558](/Users/hetianqi/Documents/charging/notes_of_the_world/计算广告学笔记.assets/image-20200414143343558.png)\n\n# 准备知识\n\n## 带约束优化方法和拉格朗日乘子法\n\n","slug":"2_算法相关/计算广告学笔记","published":1,"updated":"2022-03-01T03:59:30.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4k001w8s32ai0qfep5","content":"<p>计算广告学笔记</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"业务知识\"><a href=\"#业务知识\" class=\"headerlink\" title=\"业务知识\"></a>业务知识</h1><h2 id=\"广告分类\"><a href=\"#广告分类\" class=\"headerlink\" title=\"广告分类\"></a>广告分类</h2><p>广告的根本目的，是广告主通过媒体达到低成本的用户接触。</p>\n<p>也就是说，按某种市场意图接触相应的人群，进而影响其中的潜在用户，使他们选择广告主产品的机率增加，或者对产品性价比的苛求程度降低，才是广告的根本目的。至于短期内的转化效果，由于市场意图或媒体性质的不同，并不是直接可比。因此ROI中的产出是很难计算的</p>\n<h2 id=\"广告发展史\"><a href=\"#广告发展史\" class=\"headerlink\" title=\"广告发展史\"></a>广告发展史</h2><ul>\n<li><p>售卖模式1：合约式广告(Agreement-based Advertising)</p>\n</li>\n<li><p>广告投放方式：定向广告（Target Ad），是为了<code>拆分流量以获得更高的营收</code>，具体来说：媒体向广告主保证某个投放量，并在此基础上确定合同的总金额以及量未完成情况下的赔偿方案；<strong><code>只卖好苹果</code></strong></p>\n<blockquote>\n<p><code>博弈</code>：定向太准了可能导致尾部流量卖不出去，对媒体不利，但广告主效果好的话整个广告市场规模就会变大，对媒体有利。</p>\n</blockquote>\n</li>\n<li><p>交易方式：<code>担保式投送(Guaranteed Delivery)</code>：媒体向广告主保证某个投放量，并在此基础上确定合同的总金额以及量未完成情况下的赔偿方案<strong><code>保证交易苹果的量</code></strong></p>\n</li>\n<li><p>计费方式：按千次展示付费(Cost Per Mille, CPM)的计费方式</p>\n</li>\n</ul>\n<blockquote>\n<p>难点：一是如何有效地将流量分配到各个合约互相交叉的人群覆盖上；二是要在在线的环境下实时且经济地完成每一次展示决策。</p>\n</blockquote>\n<ul>\n<li>在线分配(Online Allocation):将各<code>合约的量</code>看做约束条件，将某种意义下的质看做目标函数，我们可以利用带约束优化(Constrained Optimization)的数学框架来探索这一问题；搜索排序以优化相关性为目的，在线分配  是以<code>优化投入产出比</code>为目标。</li>\n<li>售卖模式2：<code>竞价广告(Auction-based Advertising)</code>，抛弃量的保证，而采用最唯利是图的策略来进行广告决策，具体来说就是：供给方只向广告主保证质即单位流量的成本，但不再以合约的方式给出量的保证，换言之，对每一次展示，都基本按照收益最高的原则来决策。<strong><code>线下对每批苹果进行出价</code></strong> </li>\n</ul>\n<blockquote>\n<p>由于只能在广告网络定义好的定向标签组合上预先指定出价，而不能控制每一次展示的出价，因此，市场看起来象一个黑盒子，需求方只能靠选择合适的标签组合，以及阶段性调整出价来间接控制效果。</p>\n<p>随着人群定向越来越精准，广告主数量越来越多，一方面担保是投送难以对流量做精确的分配来保证各广告主的投放量，另一方面当同一流量满足多个合约要求时，仅仅考虑量的约束会导致本来可以卖得更高的流量的浪费。</p>\n</blockquote>\n<ul>\n<li>售卖模式3：实时竞价（real time bidding）。竞价广告是在媒体平台上用媒体已有的标签进行人群定向，并对定向人群进行出价。实时竞价是实时判断单个流量是不是自己的定向人群，并进行出价，可以实现更精准的人群定向</li>\n</ul>\n<blockquote>\n<p>所谓实时竞价，就是把拍卖的过程由广告主预先出价，变成每次展示时实时出价。只要把广告展示的上下文页面url，以及访客的cookie等信息传给需求方，它就有充分的信息来完成定制化的人群选择和出价。</p>\n</blockquote>\n<ul>\n<li>需求方平台(Demand Side Platform, DSP) ：通过实时竞价的方式，按照定制化的人群标签购买广告，这样与广告交易平台接口的产品叫做DSP。DSP可以方便的设置对于每个流量的定向于出价，并把结果返回媒体的平台，<code>DSP需要尽可能准确地估计每一次展示带来的期望价值。</code></li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>首先是<code>合约阶段</code>，广告主通过代理公司(Agency)从媒体方采买广告，而媒体方的Ad Server则负责完成和优化各个广告主的合约；</p>\n<p>然后，市场进化出了<code>竞价售卖方式</code>，从而在靠近供给方产生了广告网络(Ad Network)这样的产品形态，而需求方的代理公司为了适应这一市场变化，孵化除了对应的广告采买平台(Media Buying Platform)；</p>\n<p>最后，当市场产生了<code>实时竞价方式交易</code>时，供给方进化出了广告交易平台(Ad Exchange)，而需求方则需要用需求方平台(DSP)与其对接来出价和投送广告。</p>\n<h1 id=\"计算广告基础\"><a href=\"#计算广告基础\" class=\"headerlink\" title=\"计算广告基础\"></a>计算广告基础</h1><p>广告平台优化目标： $ 对1…T次广告选择a_{i…T} \\quad s.t. \\quad max \\sum_i^T r(a_i,u_i,c_i)/\\sum_i^Tp_i $</p>\n<p>表达式中的a,u,c三个变量，分别代表广告、用户与上下文，即广告活动的三个参与主体。<em>i</em>代表从第1次到第<em>T</em>次之间的某一次广告展示。我们优化的目标，就是在这<em>T</em>次展示上的总产出(<em>r</em>)与总投入(<em>p</em>)的比，即ROI。</p>\n<p>$eCPM(a,u,c)=r(a,u,c) =点击率<em>点击价值= ctr(a,u,c)</em>v(a,u)$</p>\n<h2 id=\"广告系统构架图\"><a href=\"#广告系统构架图\" class=\"headerlink\" title=\"广告系统构架图\"></a>广告系统构架图</h2><ol>\n<li>广告投放机（Ad Server）：调用哥哥模块返回前端结果</li>\n<li>广告检索：实时接受投放信息，搜索广告备选集</li>\n<li>广告排序，包括Click modeling和Ad ranking。关键技术是1.离线分布式计算平台上的海量数据支持的点击率预测模型的训练；2.线上高效查询用户特征并进行实时计算。在ctr的基础上简历点击价值估计模型，通常是简单的规则</li>\n<li>数据高速公路（Data highway）：将在线数据准实时的传输到离线分部式平台和流计算平台，供后续数据处理和建模</li>\n<li>用户日志生成：收集各渠道日志，整理成kv形式进行存储</li>\n<li>商业智能（Business Inteligence）：看板等对外交流平台</li>\n<li>行为定向：产生结构化标签库</li>\n<li>上下文定向：页面抓取给上下文打标签，与行为定向一起产生定向效果</li>\n<li>定制化用户：接收广告主定向需求（比如推包）</li>\n<li>在线行为反馈：利用日志或买点进行准实时任务，如实时反馈点击，用户行为标签等。在利用日志完成这些逻辑之前，必须要进行的步骤是反作弊(Anti-spam)与计价(Billing)。<code>在很多情形下，把系统信息反馈调整做得更快，比把模型预测做得更准确效果更加显著</code></li>\n<li>广告管理系统：只有这部分是面向用户的。通过广告管理系统定制和调整广告投放，并且与数据仓库交互</li>\n<li>实时竞价接口：对接DSP（竞价平台）的接口。对于媒体即平台的case，不需要</li>\n</ol>\n<p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/计算广告学笔记.assets/image-20200414143343558.png\" alt=\"image-20200414143343558\"></p>\n<h1 id=\"准备知识\"><a href=\"#准备知识\" class=\"headerlink\" title=\"准备知识\"></a>准备知识</h1><h2 id=\"带约束优化方法和拉格朗日乘子法\"><a href=\"#带约束优化方法和拉格朗日乘子法\" class=\"headerlink\" title=\"带约束优化方法和拉格朗日乘子法\"></a>带约束优化方法和拉格朗日乘子法</h2>","site":{"data":{}},"excerpt":"<p>计算广告学笔记</p>","more":"<p>[TOC]</p>\n<h1 id=\"业务知识\"><a href=\"#业务知识\" class=\"headerlink\" title=\"业务知识\"></a>业务知识</h1><h2 id=\"广告分类\"><a href=\"#广告分类\" class=\"headerlink\" title=\"广告分类\"></a>广告分类</h2><p>广告的根本目的，是广告主通过媒体达到低成本的用户接触。</p>\n<p>也就是说，按某种市场意图接触相应的人群，进而影响其中的潜在用户，使他们选择广告主产品的机率增加，或者对产品性价比的苛求程度降低，才是广告的根本目的。至于短期内的转化效果，由于市场意图或媒体性质的不同，并不是直接可比。因此ROI中的产出是很难计算的</p>\n<h2 id=\"广告发展史\"><a href=\"#广告发展史\" class=\"headerlink\" title=\"广告发展史\"></a>广告发展史</h2><ul>\n<li><p>售卖模式1：合约式广告(Agreement-based Advertising)</p>\n</li>\n<li><p>广告投放方式：定向广告（Target Ad），是为了<code>拆分流量以获得更高的营收</code>，具体来说：媒体向广告主保证某个投放量，并在此基础上确定合同的总金额以及量未完成情况下的赔偿方案；<strong><code>只卖好苹果</code></strong></p>\n<blockquote>\n<p><code>博弈</code>：定向太准了可能导致尾部流量卖不出去，对媒体不利，但广告主效果好的话整个广告市场规模就会变大，对媒体有利。</p>\n</blockquote>\n</li>\n<li><p>交易方式：<code>担保式投送(Guaranteed Delivery)</code>：媒体向广告主保证某个投放量，并在此基础上确定合同的总金额以及量未完成情况下的赔偿方案<strong><code>保证交易苹果的量</code></strong></p>\n</li>\n<li><p>计费方式：按千次展示付费(Cost Per Mille, CPM)的计费方式</p>\n</li>\n</ul>\n<blockquote>\n<p>难点：一是如何有效地将流量分配到各个合约互相交叉的人群覆盖上；二是要在在线的环境下实时且经济地完成每一次展示决策。</p>\n</blockquote>\n<ul>\n<li>在线分配(Online Allocation):将各<code>合约的量</code>看做约束条件，将某种意义下的质看做目标函数，我们可以利用带约束优化(Constrained Optimization)的数学框架来探索这一问题；搜索排序以优化相关性为目的，在线分配  是以<code>优化投入产出比</code>为目标。</li>\n<li>售卖模式2：<code>竞价广告(Auction-based Advertising)</code>，抛弃量的保证，而采用最唯利是图的策略来进行广告决策，具体来说就是：供给方只向广告主保证质即单位流量的成本，但不再以合约的方式给出量的保证，换言之，对每一次展示，都基本按照收益最高的原则来决策。<strong><code>线下对每批苹果进行出价</code></strong> </li>\n</ul>\n<blockquote>\n<p>由于只能在广告网络定义好的定向标签组合上预先指定出价，而不能控制每一次展示的出价，因此，市场看起来象一个黑盒子，需求方只能靠选择合适的标签组合，以及阶段性调整出价来间接控制效果。</p>\n<p>随着人群定向越来越精准，广告主数量越来越多，一方面担保是投送难以对流量做精确的分配来保证各广告主的投放量，另一方面当同一流量满足多个合约要求时，仅仅考虑量的约束会导致本来可以卖得更高的流量的浪费。</p>\n</blockquote>\n<ul>\n<li>售卖模式3：实时竞价（real time bidding）。竞价广告是在媒体平台上用媒体已有的标签进行人群定向，并对定向人群进行出价。实时竞价是实时判断单个流量是不是自己的定向人群，并进行出价，可以实现更精准的人群定向</li>\n</ul>\n<blockquote>\n<p>所谓实时竞价，就是把拍卖的过程由广告主预先出价，变成每次展示时实时出价。只要把广告展示的上下文页面url，以及访客的cookie等信息传给需求方，它就有充分的信息来完成定制化的人群选择和出价。</p>\n</blockquote>\n<ul>\n<li>需求方平台(Demand Side Platform, DSP) ：通过实时竞价的方式，按照定制化的人群标签购买广告，这样与广告交易平台接口的产品叫做DSP。DSP可以方便的设置对于每个流量的定向于出价，并把结果返回媒体的平台，<code>DSP需要尽可能准确地估计每一次展示带来的期望价值。</code></li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>首先是<code>合约阶段</code>，广告主通过代理公司(Agency)从媒体方采买广告，而媒体方的Ad Server则负责完成和优化各个广告主的合约；</p>\n<p>然后，市场进化出了<code>竞价售卖方式</code>，从而在靠近供给方产生了广告网络(Ad Network)这样的产品形态，而需求方的代理公司为了适应这一市场变化，孵化除了对应的广告采买平台(Media Buying Platform)；</p>\n<p>最后，当市场产生了<code>实时竞价方式交易</code>时，供给方进化出了广告交易平台(Ad Exchange)，而需求方则需要用需求方平台(DSP)与其对接来出价和投送广告。</p>\n<h1 id=\"计算广告基础\"><a href=\"#计算广告基础\" class=\"headerlink\" title=\"计算广告基础\"></a>计算广告基础</h1><p>广告平台优化目标： $ 对1…T次广告选择a_{i…T} \\quad s.t. \\quad max \\sum_i^T r(a_i,u_i,c_i)/\\sum_i^Tp_i $</p>\n<p>表达式中的a,u,c三个变量，分别代表广告、用户与上下文，即广告活动的三个参与主体。<em>i</em>代表从第1次到第<em>T</em>次之间的某一次广告展示。我们优化的目标，就是在这<em>T</em>次展示上的总产出(<em>r</em>)与总投入(<em>p</em>)的比，即ROI。</p>\n<p>$eCPM(a,u,c)=r(a,u,c) =点击率<em>点击价值= ctr(a,u,c)</em>v(a,u)$</p>\n<h2 id=\"广告系统构架图\"><a href=\"#广告系统构架图\" class=\"headerlink\" title=\"广告系统构架图\"></a>广告系统构架图</h2><ol>\n<li>广告投放机（Ad Server）：调用哥哥模块返回前端结果</li>\n<li>广告检索：实时接受投放信息，搜索广告备选集</li>\n<li>广告排序，包括Click modeling和Ad ranking。关键技术是1.离线分布式计算平台上的海量数据支持的点击率预测模型的训练；2.线上高效查询用户特征并进行实时计算。在ctr的基础上简历点击价值估计模型，通常是简单的规则</li>\n<li>数据高速公路（Data highway）：将在线数据准实时的传输到离线分部式平台和流计算平台，供后续数据处理和建模</li>\n<li>用户日志生成：收集各渠道日志，整理成kv形式进行存储</li>\n<li>商业智能（Business Inteligence）：看板等对外交流平台</li>\n<li>行为定向：产生结构化标签库</li>\n<li>上下文定向：页面抓取给上下文打标签，与行为定向一起产生定向效果</li>\n<li>定制化用户：接收广告主定向需求（比如推包）</li>\n<li>在线行为反馈：利用日志或买点进行准实时任务，如实时反馈点击，用户行为标签等。在利用日志完成这些逻辑之前，必须要进行的步骤是反作弊(Anti-spam)与计价(Billing)。<code>在很多情形下，把系统信息反馈调整做得更快，比把模型预测做得更准确效果更加显著</code></li>\n<li>广告管理系统：只有这部分是面向用户的。通过广告管理系统定制和调整广告投放，并且与数据仓库交互</li>\n<li>实时竞价接口：对接DSP（竞价平台）的接口。对于媒体即平台的case，不需要</li>\n</ol>\n<p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/计算广告学笔记.assets/image-20200414143343558.png\" alt=\"image-20200414143343558\"></p>\n<h1 id=\"准备知识\"><a href=\"#准备知识\" class=\"headerlink\" title=\"准备知识\"></a>准备知识</h1><h2 id=\"带约束优化方法和拉格朗日乘子法\"><a href=\"#带约束优化方法和拉格朗日乘子法\" class=\"headerlink\" title=\"带约束优化方法和拉格朗日乘子法\"></a>带约束优化方法和拉格朗日乘子法</h2>"},{"title":"评估指标","date":"2022-03-01T03:32:38.000Z","_content":"\n评估指标\n\n<!-- more -->\n\n\n[TOC]\n\n## \n\n## 1. ROC, KS, AUC\n\n### 1. TP, FP, FN, TN\n\n\n\n|       | 预测1                       | 预测0                       | 合计                     |\n| ----- | --------------------------- | --------------------------- | ------------------------ |\n| 真实1 | True Positive (TP)          | False Negative (FN)         | Actual   Positive(TP+FN) |\n| 真实0 | False Positive (FP)         | True Negative(TN)           | Actual   Negative(FP+TN) |\n| 合计  | Predicted   Positive(TP+FP) | Predicted   Negative(FN+TN) | TP+FP+FN+TN              |\n\n- True Positive Rate（TPR），计算公式为TPR=TP/(TP+FN)；所有真实的“1”中，有多少被模型成功选出\n- False Positive Rate（FPR），计算公式为FPR=FP/(FP+TN)；所有真实的“0”中，有多少被模型误判为1了；\n- Precision=TP/(TP+FP)，或2TP/((TP+FN)+(TP+FP))。所有判为1的用户，判对的比例\n- 好的模型：TPR尽量高而FPR尽量低\n\n\n\n### 2. ROC\n\n- ROC(Receiver Operating Characteristic Curve):接受者操作特征曲线。\n\n- ROC曲线：设定不同的阀值，计算不同的点(FPR,TPR)，连成曲线\n\n- ROC曲线确定阈值的方法：\n\n- - 给出ROC曲线的拟合函数表达式，然后计算出最优的阀值，这个目前通过软件实现难度不大：如何给出最优拟合函数，计算数学上有很多方法；\n  - 计算出ΔTPR≈ΔFPR的点即为最优的阀值；\n  - 从业务上给出最优的阀值。\n\n![1560344119508](D:\\dev\\Blog\\machine-learning-note\\基础算法\\.images\\1560344119508.png)\n\n### 3. AUC\n\n- AUC：ROC曲线下方的面积Area Under the ROC      Curve，简称为AUC。这是评价模型的另一个方法，AUC值越大，说明模型的分辨效果越好\n- gini系数：在SAS的评分模型输出中，常用来判断收入分配公平程度，此时gini=2*AUC-1\n\n\n\nXGB中\n\n```c++\ndouble sum_pospair = 0.0;\ndouble sum_npos = 0.0, sum_nneg = 0.0, buf_pos = 0.0, buf_neg = 0.0;\nfor (size_t j = 0; j < rec.size(); ++j) {\n  const float wt = info.GetWeight(rec[j].second);\n  const float ctr = info.labels[rec[j].second];\n  // keep bucketing predictions in same bucket\n  if (j != 0 && rec[j].first != rec[j - 1].first) { // 遍历所有的预测值\n    sum_pospair += buf_neg * (sum_npos + buf_pos *0.5); // 逐个梯形计算\n    sum_npos += buf_pos;\n    sum_nneg += buf_neg;\n    buf_neg = buf_pos = 0.0f;\n  }\n  buf_pos += ctr * wt; // 累计加权TP\n  buf_neg += (1.0f - ctr) * wt; // 累计加权FP\n}\nsum_pospair += buf_neg * (sum_npos + buf_pos *0.5);\nsum_npos += buf_pos;\nsum_nneg += buf_neg;\n// check weird conditions\nutils::Check(sum_npos > 0.0 && sum_nneg > 0.0,\n             \"AUC: the dataset only contains pos or neg samples\");\n// this is the AUC\nsum_auc += sum_pospair / (sum_npos*sum_nneg);// 计算AUC\n```\n\n\n\nR语言中的计算方法\n\n```R\nfunction (y_pred, y_true) \n{\nrank <- rank(y_pred) # rank[i] 为 y_pred[i]从小到大的排序号，最小为1,两个数并列第5，则都为5.5\nn_pos <- sum(y_true == 1)\nn_neg <- sum(y_true == 0)\nAUC <- (sum(rank[y_true == 1]) - n_pos * (n_pos + 1)/2)/(n_pos * \nn_neg)\nreturn(AUC)\n}\n```\n\n\n\n![img](.images\\auc计算)\n\n原因：\n\n![AUC](.images/AUC公式推导.jpg)\n\n\n\n### 4. KS\n\n- K-S曲线：它和ROC曲线的画法异曲同工。以Logistic模型为例，首先把Logistic模型输出的概率从大到小排序，然后取10%的值（也就是概率值）作为阀值，同理把10%\\*k（k=1,2,3,…,9）处的值作为阀值，计算出不同的FPR和TPR值，以10%\\*k（k=1,2,3,…,9）为横坐标，分别以TPR和FPR的值为纵坐标，就可以画出两个曲线，这就是K-S曲线。\n- KS值：KS=max(TPR-FPR)，即是两条曲线之间的最大间隔距离。当(TPR-FPR)最大时，也就是ΔTPR-ΔFPR=0，这和ROC曲线上找最优阀值的条件ΔTPR=ΔFPR是一样的。从这点也可以看出，ROC曲线、K-S曲线、KS值的本质是相同的。\n\n![1560344142780](.images\\1560344142780.png)\n\n- K-S曲线能直观地找出模型中差异最大的一个分段，比如评分模型就比较适合用KS值进行评估；\n\n- KS值只能反映出哪个分段是区分度最大的，不能反映出所有分段的效果。\n\n  \n\n  \n\n因此，在实际应用中，模型评价一般需要将ROC曲线、K-S曲线、KS值、AUC指标结合起来使用。\n\n\n\n\n\n## 2. PSI\n\n### 1. 含义\n\nPopulationStability Index(PSI)群体稳定性指标\n\n### 2. 公式\n\n psi = sum(（实际占比-预期占比）*ln(实际占比/预期占比))\n\n数学**原理**：\n\n- 平衡符号\n\n- 占比小的区间权重小\n\n  ![1560344829786](.images\\1560344829786.png)\n\n### 3. 计算\n\n形式上比较像WoE和IV，下面是**计算**举例：\n\n![1560344565889](.images\\1560344565889.png)\n\n计算表：\n\n| Score bands | **Actual %** | Expected % | **Ac-Ex** | **ln(Ac/Ex)** | **Index**  |\n| ----------- | ------------ | ---------- | --------- | ------------- | ---------- |\n| < 251       | 5%           | 8%         | -3%       | -0.47         | **0.014**  |\n| 251–290     | 6%           | 9%         | -3%       | -0.41         | **0.012**  |\n| 291–320     | 6%           | 10%        | -4%       | -0.51         | **0.020**  |\n| 321–350     | 8%           | 13%        | -5%       | -0.49         | **0.024**  |\n| 351–380     | 10%          | 12%        | -2%       | -0.18         | **0.004**  |\n| 381–410     | 12%          | 11%        | 1%        | 0.09          | **0.001**  |\n| 411–440     | 14%          | 10%        | 4%        | 0.34          | **0.013**  |\n| 441–470     | 14%          | 9%         | 5%        | 0.44          | **0.022**  |\n| 471–520     | 13%          | 9%         | 4%        | 0.37          | **0.015**  |\n| 520 <       | 9%           | 8%         | 1%        | 0.12          | **0.001**  |\n| **(PSI)= ** |              |            |           |               | **0.1269** |\n\n指标取值解释说明：\n\n| **PSI Value**     | **Inference**  | **Action**       |\n| ----------------- | -------------- | ---------------- |\n| Less than 0.1     | 无关紧要的差距 | 不需要进一步操作 |\n| 0.1 – 0.25        | 有一点差距     | 检查一下其他度量 |\n| Greater than 0.25 | 差距较大       | 需要进一步研究   |\n\n\n\n### 4. 使用\n\n\n\n\n\n\n\n## 3. VIF\n\n### 1. 含义\n\n方差膨胀因子（Variance Inflation Factor，VIF）\n\n- 容忍度的倒数，VIF越大，显示共线性越严重。经验判断方法表明：当0<VIF<10，不存在[多重共线性](https://baike.baidu.com/item/多重共线性/10201978)；当10≤VIF<100，存在较强的多重共线性；当VIF≥100，存在严重多重共线性。\n\n\n\n\n\n## 4. LIFT\n\n### 1. 什么是LIFT\n\nLift是评估一个预测模型是否有效的一个度量；它衡量的是一个模型（或规则）对目标中“响应”的预测能力优于随机选择的倍数，以1为界线，大于1的Lift表示该模型或规则比随机选择捕捉了更多的“响应”，等于1的Lift表示该模型的表现独立于随机选择，小于1则表示该模型或规则比随机选择捕捉了更少的“响应”。维基百科中提升度被解释为“Target response divided by average response”。\n\n\n\n### 2. 计算方法\n\n在模型评估中，我们常用到增益/提升（Gain/Lift）图来评估模型效果，其中的**Lift是“运用该模型”和“未运用该模型”所得结果的比值。**以信用评分卡模型的评分结果为例，我们通常会将打分后的样本按分数从低到高排序，取10或20等分（有同分数对应多条观测的情况，所以各组观测数未必完全相等），并对组内观测数与坏样本数进行统计。用评分卡模型捕捉到的坏客户的占比，可由该组坏样本数除以总的坏样本数计算得出；而不使用此评分卡，以随机选择的方法覆盖到的坏客户占比，等价于该组观测数占总观测数的比例（分子分母同时乘以样本整体的坏账率）。对两者取累计值，取其比值，则得到提升度Lift，即该评分卡抓取坏客户的能力是随机选择的多少倍。\n\n\n\n### 3. 示例\n\n 下表是一个提升表（Lift Table）的示例：\n\n![1560345165281](.images\\1560345165281.png)\n\n以分数段为横轴，以捕捉到的“坏”占比为纵轴，可绘制出提升图，示例如下：\n\n![1560345217251](.images\\1560345217251.png)\n\n 以分数段为横轴，以提升度为纵轴，可绘制出累计提升图，示例如下：\n\n![1560345243738](.images\\1560345243738.png)\n\n有了累计提升图，我们就能直观地去比较不同模型或策略给我们带来的区分能力增益程度。\n\n\n\n## 5. RMSE, R^2^\n\n### 1. RMSE\n\n![](.images/clip_image001.png)\n\n### 2. R^2^\n\n![img](.images\\clip_image002.png)\n\n\n\n## 6. 变异系数\n\n### 1. 概念\n\n变异系数（Coefficient of Variation）：当需要比较两组数据[离散程度](https://baike.baidu.com/item/离散程度/6775049)大小的时候，如果两组数据的测量尺度相差太大，或者数据[量纲](https://baike.baidu.com/item/量纲/100412)的不同，直接使用[标准差](https://baike.baidu.com/item/标准差/1415772)来进行比较不合适，此时就应当消除测量尺度和量纲的影响，而变异系数可以做到这一点，它是原始数据标准差与原始数据[平均数](https://baike.baidu.com/item/平均数/11031224)的比。CV没有量纲，这样就可以进行客观比较了。事实上，可以认为变异系数和极差、标准差和[方差](https://baike.baidu.com/item/方差/3108412)一样，都是反映数据离散程度的绝对值。其数据大小不仅受变量值离散程度的影响，而且还受变量值平均水平大小的影响。\n\n### 2. 计算公式\n\n标准差与平均值之比：\n$$\nC_v=\\frac{\\sigma}{\\mu}\n$$\n\n\n## 7. WOE\n\n### 1. 什么是WOE\n\n### 2. 计算公式\n\nWOE（Weight of Evidence）\n\n某个变量第i个属性对应的WOE值计算公式如下：\n$$\n\\begin{eqnarray*}\nWOE_i &=& ln(\\frac{好用户占比}{坏用户占比})\n\\\\\n\\\\\n&=&  ln(\\frac {\\frac{g_i}{g_T}} {\\frac{b_i}{b_T}})\n\\\\\n\\\\\n&=&  ln(\\frac{g_i}{b_i}）- ln(\\frac{g_T}{b_T})\n\n\\end{eqnarray*}\n$$\n\n其中：g~i~为第i个属性上好用户数，g~T~表示总好人数，b~i~为第i个属性上坏用户数，b~T~表示总坏人数\n\n**WOE**的值**越高**，代表着该分组中客户是坏客户的**风险越低**\n\n\n\n## 8. IV\n\n### 1. IV是什么\n\n**IV**值是用来衡量某个变量对好坏客户区分能力的一个指标\n\n### 2. 计算公式\n\nIV值公式如下：\n$$\n\\begin{eqnarray*}\nIV &=& \\sum_i (\\frac{g_i}{g_T}- \\frac{b_i}{b_T})WOE_i\n\\\\\n\\\\\n&=& \\sum_i (\\frac{g_i}{g_T}- \\frac{b_i}{b_T})ln(\\frac {\\frac{g_i}{g_T}} {\\frac{b_i}{b_T}})\n\\\\\n\\\\\n&=& \\sum_i (P_g-P_b) ln(\\frac{P_g}{P_b})\n\n\\end{eqnarray*}\n$$\n\nP~g~表示如果我是个好用户，我属于第i个属性的概率\n$$\nP_g=P(x\\epsilon i|x\\epsilon g)=\\frac{g_i}{g_T}\n$$\n\n### 3. 取值经验\n\n\n\n\n\nKL散度与IV见 九-4\n\n\n\n## 9. KL散度\n\n### 1. 什么是KL散度\n\n在概率论或信息论中，KL散度(Kullback–Leibler divergence)，又称相对熵（relative entropy)，是**描述两个概率分布P和Q差异**的一种方法。它是**非对称**的，这意味着$D(P||Q) ≠ D(Q||P)$。特别的，在信息论中，$D(P||Q)$表示当用**概率分布Q来拟合真实分布P时，产生的信息损耗**，其中P表示真实分布，Q表示P的拟合分布。有人将KL散度称为KL距离，但事实上，KL散度并不满足距离的概念，应为:1）KL散度不是对称的；2）KL散度不满足三角不等式。\n\n### 2. 计算公式\n\n![img](.images/20180609142804845)\n\n### 3. 信息论含义\n\nKL散度在信息论中有自己明确的物理意义，它是用来度量使用基于Q分布的编码来编码来自P分布的样本平均所需的额外的Bit个数。而其在机器学习领域的物理意义则是用来度量两个函数的相似程度或者相近程度，在泛函分析中也被频繁地用到[2]。在香农信息论中，用基于P的编码去编码来自P的样本，其最优编码平均所需要的比特个数（即这个字符集的熵）为:\n\n![img](.images/20180609142359389)\n\n### 4. KL散度与IV\n\n$$\n\\begin{eqnarray*}\nIV &=& \\sum_i (P_g-P_b) ln(\\frac{P_g}{P_b})\n\\\\\n\\\\\n&=& \\sum_i P_gln(\\frac{P_g}{P_b}) + \\sum_i P_bln(\\frac{P_b}{P_g})\n\\\\\n\\\\\n&=& KL(P_g||P_b) +KL(P_b||P_g)\n\n\\end{eqnarray*}\n$$\n\n即：好用户落在一个特征某个段上概率和坏用户落在这个段上的概率差别越大，IV值越大\n\n即：好坏用户落在同一个属性上的概率越小（指P~g~和P~b~的分布差异越大）则IV值越大\n\n\n\n## 10. F1-score\n\n### 1. 混淆矩阵\n\n\n\n### 2. 二级指标\n\n\n\n## 11. AMS\n\n[](https://higgsml.lal.in2p3.fr/files/2014/04/documentation_v1.8.pdf)\n\nhttps://www.kaggle.com/c/higgs-boson/overview/evaluation-score\n\n### 1. 混淆矩阵\n\n\n\n### 2. 二级指标\n\n\n\n## 11. AMS\n\n[](https://higgsml.lal.in2p3.fr/files/2014/04/documentation_v1.8.pdf)\n\nhttps://www.kaggle.com/c/higgs-boson/overview/evaluation","source":"_posts/2_算法相关/评估指标.md","raw":"---\ntitle: 评估指标\ndate: 2022-03-01 11:32:38\ntags:\n    - 算法相关\n    - default\ncategories: \n    - 算法相关\n---\n\n评估指标\n\n<!-- more -->\n\n\n[TOC]\n\n## \n\n## 1. ROC, KS, AUC\n\n### 1. TP, FP, FN, TN\n\n\n\n|       | 预测1                       | 预测0                       | 合计                     |\n| ----- | --------------------------- | --------------------------- | ------------------------ |\n| 真实1 | True Positive (TP)          | False Negative (FN)         | Actual   Positive(TP+FN) |\n| 真实0 | False Positive (FP)         | True Negative(TN)           | Actual   Negative(FP+TN) |\n| 合计  | Predicted   Positive(TP+FP) | Predicted   Negative(FN+TN) | TP+FP+FN+TN              |\n\n- True Positive Rate（TPR），计算公式为TPR=TP/(TP+FN)；所有真实的“1”中，有多少被模型成功选出\n- False Positive Rate（FPR），计算公式为FPR=FP/(FP+TN)；所有真实的“0”中，有多少被模型误判为1了；\n- Precision=TP/(TP+FP)，或2TP/((TP+FN)+(TP+FP))。所有判为1的用户，判对的比例\n- 好的模型：TPR尽量高而FPR尽量低\n\n\n\n### 2. ROC\n\n- ROC(Receiver Operating Characteristic Curve):接受者操作特征曲线。\n\n- ROC曲线：设定不同的阀值，计算不同的点(FPR,TPR)，连成曲线\n\n- ROC曲线确定阈值的方法：\n\n- - 给出ROC曲线的拟合函数表达式，然后计算出最优的阀值，这个目前通过软件实现难度不大：如何给出最优拟合函数，计算数学上有很多方法；\n  - 计算出ΔTPR≈ΔFPR的点即为最优的阀值；\n  - 从业务上给出最优的阀值。\n\n![1560344119508](D:\\dev\\Blog\\machine-learning-note\\基础算法\\.images\\1560344119508.png)\n\n### 3. AUC\n\n- AUC：ROC曲线下方的面积Area Under the ROC      Curve，简称为AUC。这是评价模型的另一个方法，AUC值越大，说明模型的分辨效果越好\n- gini系数：在SAS的评分模型输出中，常用来判断收入分配公平程度，此时gini=2*AUC-1\n\n\n\nXGB中\n\n```c++\ndouble sum_pospair = 0.0;\ndouble sum_npos = 0.0, sum_nneg = 0.0, buf_pos = 0.0, buf_neg = 0.0;\nfor (size_t j = 0; j < rec.size(); ++j) {\n  const float wt = info.GetWeight(rec[j].second);\n  const float ctr = info.labels[rec[j].second];\n  // keep bucketing predictions in same bucket\n  if (j != 0 && rec[j].first != rec[j - 1].first) { // 遍历所有的预测值\n    sum_pospair += buf_neg * (sum_npos + buf_pos *0.5); // 逐个梯形计算\n    sum_npos += buf_pos;\n    sum_nneg += buf_neg;\n    buf_neg = buf_pos = 0.0f;\n  }\n  buf_pos += ctr * wt; // 累计加权TP\n  buf_neg += (1.0f - ctr) * wt; // 累计加权FP\n}\nsum_pospair += buf_neg * (sum_npos + buf_pos *0.5);\nsum_npos += buf_pos;\nsum_nneg += buf_neg;\n// check weird conditions\nutils::Check(sum_npos > 0.0 && sum_nneg > 0.0,\n             \"AUC: the dataset only contains pos or neg samples\");\n// this is the AUC\nsum_auc += sum_pospair / (sum_npos*sum_nneg);// 计算AUC\n```\n\n\n\nR语言中的计算方法\n\n```R\nfunction (y_pred, y_true) \n{\nrank <- rank(y_pred) # rank[i] 为 y_pred[i]从小到大的排序号，最小为1,两个数并列第5，则都为5.5\nn_pos <- sum(y_true == 1)\nn_neg <- sum(y_true == 0)\nAUC <- (sum(rank[y_true == 1]) - n_pos * (n_pos + 1)/2)/(n_pos * \nn_neg)\nreturn(AUC)\n}\n```\n\n\n\n![img](.images\\auc计算)\n\n原因：\n\n![AUC](.images/AUC公式推导.jpg)\n\n\n\n### 4. KS\n\n- K-S曲线：它和ROC曲线的画法异曲同工。以Logistic模型为例，首先把Logistic模型输出的概率从大到小排序，然后取10%的值（也就是概率值）作为阀值，同理把10%\\*k（k=1,2,3,…,9）处的值作为阀值，计算出不同的FPR和TPR值，以10%\\*k（k=1,2,3,…,9）为横坐标，分别以TPR和FPR的值为纵坐标，就可以画出两个曲线，这就是K-S曲线。\n- KS值：KS=max(TPR-FPR)，即是两条曲线之间的最大间隔距离。当(TPR-FPR)最大时，也就是ΔTPR-ΔFPR=0，这和ROC曲线上找最优阀值的条件ΔTPR=ΔFPR是一样的。从这点也可以看出，ROC曲线、K-S曲线、KS值的本质是相同的。\n\n![1560344142780](.images\\1560344142780.png)\n\n- K-S曲线能直观地找出模型中差异最大的一个分段，比如评分模型就比较适合用KS值进行评估；\n\n- KS值只能反映出哪个分段是区分度最大的，不能反映出所有分段的效果。\n\n  \n\n  \n\n因此，在实际应用中，模型评价一般需要将ROC曲线、K-S曲线、KS值、AUC指标结合起来使用。\n\n\n\n\n\n## 2. PSI\n\n### 1. 含义\n\nPopulationStability Index(PSI)群体稳定性指标\n\n### 2. 公式\n\n psi = sum(（实际占比-预期占比）*ln(实际占比/预期占比))\n\n数学**原理**：\n\n- 平衡符号\n\n- 占比小的区间权重小\n\n  ![1560344829786](.images\\1560344829786.png)\n\n### 3. 计算\n\n形式上比较像WoE和IV，下面是**计算**举例：\n\n![1560344565889](.images\\1560344565889.png)\n\n计算表：\n\n| Score bands | **Actual %** | Expected % | **Ac-Ex** | **ln(Ac/Ex)** | **Index**  |\n| ----------- | ------------ | ---------- | --------- | ------------- | ---------- |\n| < 251       | 5%           | 8%         | -3%       | -0.47         | **0.014**  |\n| 251–290     | 6%           | 9%         | -3%       | -0.41         | **0.012**  |\n| 291–320     | 6%           | 10%        | -4%       | -0.51         | **0.020**  |\n| 321–350     | 8%           | 13%        | -5%       | -0.49         | **0.024**  |\n| 351–380     | 10%          | 12%        | -2%       | -0.18         | **0.004**  |\n| 381–410     | 12%          | 11%        | 1%        | 0.09          | **0.001**  |\n| 411–440     | 14%          | 10%        | 4%        | 0.34          | **0.013**  |\n| 441–470     | 14%          | 9%         | 5%        | 0.44          | **0.022**  |\n| 471–520     | 13%          | 9%         | 4%        | 0.37          | **0.015**  |\n| 520 <       | 9%           | 8%         | 1%        | 0.12          | **0.001**  |\n| **(PSI)= ** |              |            |           |               | **0.1269** |\n\n指标取值解释说明：\n\n| **PSI Value**     | **Inference**  | **Action**       |\n| ----------------- | -------------- | ---------------- |\n| Less than 0.1     | 无关紧要的差距 | 不需要进一步操作 |\n| 0.1 – 0.25        | 有一点差距     | 检查一下其他度量 |\n| Greater than 0.25 | 差距较大       | 需要进一步研究   |\n\n\n\n### 4. 使用\n\n\n\n\n\n\n\n## 3. VIF\n\n### 1. 含义\n\n方差膨胀因子（Variance Inflation Factor，VIF）\n\n- 容忍度的倒数，VIF越大，显示共线性越严重。经验判断方法表明：当0<VIF<10，不存在[多重共线性](https://baike.baidu.com/item/多重共线性/10201978)；当10≤VIF<100，存在较强的多重共线性；当VIF≥100，存在严重多重共线性。\n\n\n\n\n\n## 4. LIFT\n\n### 1. 什么是LIFT\n\nLift是评估一个预测模型是否有效的一个度量；它衡量的是一个模型（或规则）对目标中“响应”的预测能力优于随机选择的倍数，以1为界线，大于1的Lift表示该模型或规则比随机选择捕捉了更多的“响应”，等于1的Lift表示该模型的表现独立于随机选择，小于1则表示该模型或规则比随机选择捕捉了更少的“响应”。维基百科中提升度被解释为“Target response divided by average response”。\n\n\n\n### 2. 计算方法\n\n在模型评估中，我们常用到增益/提升（Gain/Lift）图来评估模型效果，其中的**Lift是“运用该模型”和“未运用该模型”所得结果的比值。**以信用评分卡模型的评分结果为例，我们通常会将打分后的样本按分数从低到高排序，取10或20等分（有同分数对应多条观测的情况，所以各组观测数未必完全相等），并对组内观测数与坏样本数进行统计。用评分卡模型捕捉到的坏客户的占比，可由该组坏样本数除以总的坏样本数计算得出；而不使用此评分卡，以随机选择的方法覆盖到的坏客户占比，等价于该组观测数占总观测数的比例（分子分母同时乘以样本整体的坏账率）。对两者取累计值，取其比值，则得到提升度Lift，即该评分卡抓取坏客户的能力是随机选择的多少倍。\n\n\n\n### 3. 示例\n\n 下表是一个提升表（Lift Table）的示例：\n\n![1560345165281](.images\\1560345165281.png)\n\n以分数段为横轴，以捕捉到的“坏”占比为纵轴，可绘制出提升图，示例如下：\n\n![1560345217251](.images\\1560345217251.png)\n\n 以分数段为横轴，以提升度为纵轴，可绘制出累计提升图，示例如下：\n\n![1560345243738](.images\\1560345243738.png)\n\n有了累计提升图，我们就能直观地去比较不同模型或策略给我们带来的区分能力增益程度。\n\n\n\n## 5. RMSE, R^2^\n\n### 1. RMSE\n\n![](.images/clip_image001.png)\n\n### 2. R^2^\n\n![img](.images\\clip_image002.png)\n\n\n\n## 6. 变异系数\n\n### 1. 概念\n\n变异系数（Coefficient of Variation）：当需要比较两组数据[离散程度](https://baike.baidu.com/item/离散程度/6775049)大小的时候，如果两组数据的测量尺度相差太大，或者数据[量纲](https://baike.baidu.com/item/量纲/100412)的不同，直接使用[标准差](https://baike.baidu.com/item/标准差/1415772)来进行比较不合适，此时就应当消除测量尺度和量纲的影响，而变异系数可以做到这一点，它是原始数据标准差与原始数据[平均数](https://baike.baidu.com/item/平均数/11031224)的比。CV没有量纲，这样就可以进行客观比较了。事实上，可以认为变异系数和极差、标准差和[方差](https://baike.baidu.com/item/方差/3108412)一样，都是反映数据离散程度的绝对值。其数据大小不仅受变量值离散程度的影响，而且还受变量值平均水平大小的影响。\n\n### 2. 计算公式\n\n标准差与平均值之比：\n$$\nC_v=\\frac{\\sigma}{\\mu}\n$$\n\n\n## 7. WOE\n\n### 1. 什么是WOE\n\n### 2. 计算公式\n\nWOE（Weight of Evidence）\n\n某个变量第i个属性对应的WOE值计算公式如下：\n$$\n\\begin{eqnarray*}\nWOE_i &=& ln(\\frac{好用户占比}{坏用户占比})\n\\\\\n\\\\\n&=&  ln(\\frac {\\frac{g_i}{g_T}} {\\frac{b_i}{b_T}})\n\\\\\n\\\\\n&=&  ln(\\frac{g_i}{b_i}）- ln(\\frac{g_T}{b_T})\n\n\\end{eqnarray*}\n$$\n\n其中：g~i~为第i个属性上好用户数，g~T~表示总好人数，b~i~为第i个属性上坏用户数，b~T~表示总坏人数\n\n**WOE**的值**越高**，代表着该分组中客户是坏客户的**风险越低**\n\n\n\n## 8. IV\n\n### 1. IV是什么\n\n**IV**值是用来衡量某个变量对好坏客户区分能力的一个指标\n\n### 2. 计算公式\n\nIV值公式如下：\n$$\n\\begin{eqnarray*}\nIV &=& \\sum_i (\\frac{g_i}{g_T}- \\frac{b_i}{b_T})WOE_i\n\\\\\n\\\\\n&=& \\sum_i (\\frac{g_i}{g_T}- \\frac{b_i}{b_T})ln(\\frac {\\frac{g_i}{g_T}} {\\frac{b_i}{b_T}})\n\\\\\n\\\\\n&=& \\sum_i (P_g-P_b) ln(\\frac{P_g}{P_b})\n\n\\end{eqnarray*}\n$$\n\nP~g~表示如果我是个好用户，我属于第i个属性的概率\n$$\nP_g=P(x\\epsilon i|x\\epsilon g)=\\frac{g_i}{g_T}\n$$\n\n### 3. 取值经验\n\n\n\n\n\nKL散度与IV见 九-4\n\n\n\n## 9. KL散度\n\n### 1. 什么是KL散度\n\n在概率论或信息论中，KL散度(Kullback–Leibler divergence)，又称相对熵（relative entropy)，是**描述两个概率分布P和Q差异**的一种方法。它是**非对称**的，这意味着$D(P||Q) ≠ D(Q||P)$。特别的，在信息论中，$D(P||Q)$表示当用**概率分布Q来拟合真实分布P时，产生的信息损耗**，其中P表示真实分布，Q表示P的拟合分布。有人将KL散度称为KL距离，但事实上，KL散度并不满足距离的概念，应为:1）KL散度不是对称的；2）KL散度不满足三角不等式。\n\n### 2. 计算公式\n\n![img](.images/20180609142804845)\n\n### 3. 信息论含义\n\nKL散度在信息论中有自己明确的物理意义，它是用来度量使用基于Q分布的编码来编码来自P分布的样本平均所需的额外的Bit个数。而其在机器学习领域的物理意义则是用来度量两个函数的相似程度或者相近程度，在泛函分析中也被频繁地用到[2]。在香农信息论中，用基于P的编码去编码来自P的样本，其最优编码平均所需要的比特个数（即这个字符集的熵）为:\n\n![img](.images/20180609142359389)\n\n### 4. KL散度与IV\n\n$$\n\\begin{eqnarray*}\nIV &=& \\sum_i (P_g-P_b) ln(\\frac{P_g}{P_b})\n\\\\\n\\\\\n&=& \\sum_i P_gln(\\frac{P_g}{P_b}) + \\sum_i P_bln(\\frac{P_b}{P_g})\n\\\\\n\\\\\n&=& KL(P_g||P_b) +KL(P_b||P_g)\n\n\\end{eqnarray*}\n$$\n\n即：好用户落在一个特征某个段上概率和坏用户落在这个段上的概率差别越大，IV值越大\n\n即：好坏用户落在同一个属性上的概率越小（指P~g~和P~b~的分布差异越大）则IV值越大\n\n\n\n## 10. F1-score\n\n### 1. 混淆矩阵\n\n\n\n### 2. 二级指标\n\n\n\n## 11. AMS\n\n[](https://higgsml.lal.in2p3.fr/files/2014/04/documentation_v1.8.pdf)\n\nhttps://www.kaggle.com/c/higgs-boson/overview/evaluation-score\n\n### 1. 混淆矩阵\n\n\n\n### 2. 二级指标\n\n\n\n## 11. AMS\n\n[](https://higgsml.lal.in2p3.fr/files/2014/04/documentation_v1.8.pdf)\n\nhttps://www.kaggle.com/c/higgs-boson/overview/evaluation","slug":"2_算法相关/评估指标","published":1,"updated":"2022-03-01T03:59:30.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4k001z8s32c4vw3zu1","content":"<p>评估指标</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><h2 id=\"1-ROC-KS-AUC\"><a href=\"#1-ROC-KS-AUC\" class=\"headerlink\" title=\"1. ROC, KS, AUC\"></a>1. ROC, KS, AUC</h2><h3 id=\"1-TP-FP-FN-TN\"><a href=\"#1-TP-FP-FN-TN\" class=\"headerlink\" title=\"1. TP, FP, FN, TN\"></a>1. TP, FP, FN, TN</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>预测1</th>\n<th>预测0</th>\n<th>合计</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>真实1</td>\n<td>True Positive (TP)</td>\n<td>False Negative (FN)</td>\n<td>Actual   Positive(TP+FN)</td>\n</tr>\n<tr>\n<td>真实0</td>\n<td>False Positive (FP)</td>\n<td>True Negative(TN)</td>\n<td>Actual   Negative(FP+TN)</td>\n</tr>\n<tr>\n<td>合计</td>\n<td>Predicted   Positive(TP+FP)</td>\n<td>Predicted   Negative(FN+TN)</td>\n<td>TP+FP+FN+TN</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>True Positive Rate（TPR），计算公式为TPR=TP/(TP+FN)；所有真实的“1”中，有多少被模型成功选出</li>\n<li>False Positive Rate（FPR），计算公式为FPR=FP/(FP+TN)；所有真实的“0”中，有多少被模型误判为1了；</li>\n<li>Precision=TP/(TP+FP)，或2TP/((TP+FN)+(TP+FP))。所有判为1的用户，判对的比例</li>\n<li>好的模型：TPR尽量高而FPR尽量低</li>\n</ul>\n<h3 id=\"2-ROC\"><a href=\"#2-ROC\" class=\"headerlink\" title=\"2. ROC\"></a>2. ROC</h3><ul>\n<li><p>ROC(Receiver Operating Characteristic Curve):接受者操作特征曲线。</p>\n</li>\n<li><p>ROC曲线：设定不同的阀值，计算不同的点(FPR,TPR)，连成曲线</p>\n</li>\n<li><p>ROC曲线确定阈值的方法：</p>\n</li>\n<li><ul>\n<li>给出ROC曲线的拟合函数表达式，然后计算出最优的阀值，这个目前通过软件实现难度不大：如何给出最优拟合函数，计算数学上有很多方法；</li>\n<li>计算出ΔTPR≈ΔFPR的点即为最优的阀值；</li>\n<li>从业务上给出最优的阀值。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"D:\\dev\\Blog\\machine-learning-note\\基础算法\\.images\\1560344119508.png\" alt=\"1560344119508\"></p>\n<h3 id=\"3-AUC\"><a href=\"#3-AUC\" class=\"headerlink\" title=\"3. AUC\"></a>3. AUC</h3><ul>\n<li>AUC：ROC曲线下方的面积Area Under the ROC      Curve，简称为AUC。这是评价模型的另一个方法，AUC值越大，说明模型的分辨效果越好</li>\n<li>gini系数：在SAS的评分模型输出中，常用来判断收入分配公平程度，此时gini=2*AUC-1</li>\n</ul>\n<p>XGB中</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> sum_pospair = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> sum_npos = <span class=\"number\">0.0</span>, sum_nneg = <span class=\"number\">0.0</span>, buf_pos = <span class=\"number\">0.0</span>, buf_neg = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; rec.<span class=\"built_in\">size</span>(); ++j) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wt = info.<span class=\"built_in\">GetWeight</span>(rec[j].second);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> ctr = info.labels[rec[j].second];</span><br><span class=\"line\">  <span class=\"comment\">// keep bucketing predictions in same bucket</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (j != <span class=\"number\">0</span> &amp;&amp; rec[j].first != rec[j - <span class=\"number\">1</span>].first) &#123; <span class=\"comment\">// 遍历所有的预测值</span></span><br><span class=\"line\">    sum_pospair += buf_neg * (sum_npos + buf_pos *<span class=\"number\">0.5</span>); <span class=\"comment\">// 逐个梯形计算</span></span><br><span class=\"line\">    sum_npos += buf_pos;</span><br><span class=\"line\">    sum_nneg += buf_neg;</span><br><span class=\"line\">    buf_neg = buf_pos = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  buf_pos += ctr * wt; <span class=\"comment\">// 累计加权TP</span></span><br><span class=\"line\">  buf_neg += (<span class=\"number\">1.0f</span> - ctr) * wt; <span class=\"comment\">// 累计加权FP</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum_pospair += buf_neg * (sum_npos + buf_pos *<span class=\"number\">0.5</span>);</span><br><span class=\"line\">sum_npos += buf_pos;</span><br><span class=\"line\">sum_nneg += buf_neg;</span><br><span class=\"line\"><span class=\"comment\">// check weird conditions</span></span><br><span class=\"line\">utils::<span class=\"built_in\">Check</span>(sum_npos &gt; <span class=\"number\">0.0</span> &amp;&amp; sum_nneg &gt; <span class=\"number\">0.0</span>,</span><br><span class=\"line\">             <span class=\"string\">&quot;AUC: the dataset only contains pos or neg samples&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// this is the AUC</span></span><br><span class=\"line\">sum_auc += sum_pospair / (sum_npos*sum_nneg);<span class=\"comment\">// 计算AUC</span></span><br></pre></td></tr></table></figure>\n<p>R语言中的计算方法</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> (y_pred, y_true) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">rank &lt;- rank(y_pred) <span class=\"comment\"># rank[i] 为 y_pred[i]从小到大的排序号，最小为1,两个数并列第5，则都为5.5</span></span><br><span class=\"line\">n_pos &lt;- <span class=\"built_in\">sum</span>(y_true == <span class=\"number\">1</span>)</span><br><span class=\"line\">n_neg &lt;- <span class=\"built_in\">sum</span>(y_true == <span class=\"number\">0</span>)</span><br><span class=\"line\">AUC &lt;- (<span class=\"built_in\">sum</span>(rank[y_true == <span class=\"number\">1</span>]) - n_pos * (n_pos + <span class=\"number\">1</span>)/<span class=\"number\">2</span>)/(n_pos * </span><br><span class=\"line\">n_neg)</span><br><span class=\"line\"><span class=\"built_in\">return</span>(AUC)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\".images\\auc计算\" alt=\"img\"></p>\n<p>原因：</p>\n\n<h3 id=\"4-KS\"><a href=\"#4-KS\" class=\"headerlink\" title=\"4. KS\"></a>4. KS</h3><ul>\n<li>K-S曲线：它和ROC曲线的画法异曲同工。以Logistic模型为例，首先把Logistic模型输出的概率从大到小排序，然后取10%的值（也就是概率值）作为阀值，同理把10%*k（k=1,2,3,…,9）处的值作为阀值，计算出不同的FPR和TPR值，以10%*k（k=1,2,3,…,9）为横坐标，分别以TPR和FPR的值为纵坐标，就可以画出两个曲线，这就是K-S曲线。</li>\n<li>KS值：KS=max(TPR-FPR)，即是两条曲线之间的最大间隔距离。当(TPR-FPR)最大时，也就是ΔTPR-ΔFPR=0，这和ROC曲线上找最优阀值的条件ΔTPR=ΔFPR是一样的。从这点也可以看出，ROC曲线、K-S曲线、KS值的本质是相同的。</li>\n</ul>\n<p><img src=\".images\\1560344142780.png\" alt=\"1560344142780\"></p>\n<ul>\n<li><p>K-S曲线能直观地找出模型中差异最大的一个分段，比如评分模型就比较适合用KS值进行评估；</p>\n</li>\n<li><p>KS值只能反映出哪个分段是区分度最大的，不能反映出所有分段的效果。</p>\n</li>\n</ul>\n<p>因此，在实际应用中，模型评价一般需要将ROC曲线、K-S曲线、KS值、AUC指标结合起来使用。</p>\n<h2 id=\"2-PSI\"><a href=\"#2-PSI\" class=\"headerlink\" title=\"2. PSI\"></a>2. PSI</h2><h3 id=\"1-含义\"><a href=\"#1-含义\" class=\"headerlink\" title=\"1. 含义\"></a>1. 含义</h3><p>PopulationStability Index(PSI)群体稳定性指标</p>\n<h3 id=\"2-公式\"><a href=\"#2-公式\" class=\"headerlink\" title=\"2. 公式\"></a>2. 公式</h3><p> psi = sum(（实际占比-预期占比）*ln(实际占比/预期占比))</p>\n<p>数学<strong>原理</strong>：</p>\n<ul>\n<li><p>平衡符号</p>\n</li>\n<li><p>占比小的区间权重小</p>\n<p><img src=\".images\\1560344829786.png\" alt=\"1560344829786\"></p>\n</li>\n</ul>\n<h3 id=\"3-计算\"><a href=\"#3-计算\" class=\"headerlink\" title=\"3. 计算\"></a>3. 计算</h3><p>形式上比较像WoE和IV，下面是<strong>计算</strong>举例：</p>\n<p><img src=\".images\\1560344565889.png\" alt=\"1560344565889\"></p>\n<p>计算表：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Score bands</th>\n<th><strong>Actual %</strong></th>\n<th>Expected %</th>\n<th><strong>Ac-Ex</strong></th>\n<th><strong>ln(Ac/Ex)</strong></th>\n<th><strong>Index</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt; 251</td>\n<td>5%</td>\n<td>8%</td>\n<td>-3%</td>\n<td>-0.47</td>\n<td><strong>0.014</strong></td>\n</tr>\n<tr>\n<td>251–290</td>\n<td>6%</td>\n<td>9%</td>\n<td>-3%</td>\n<td>-0.41</td>\n<td><strong>0.012</strong></td>\n</tr>\n<tr>\n<td>291–320</td>\n<td>6%</td>\n<td>10%</td>\n<td>-4%</td>\n<td>-0.51</td>\n<td><strong>0.020</strong></td>\n</tr>\n<tr>\n<td>321–350</td>\n<td>8%</td>\n<td>13%</td>\n<td>-5%</td>\n<td>-0.49</td>\n<td><strong>0.024</strong></td>\n</tr>\n<tr>\n<td>351–380</td>\n<td>10%</td>\n<td>12%</td>\n<td>-2%</td>\n<td>-0.18</td>\n<td><strong>0.004</strong></td>\n</tr>\n<tr>\n<td>381–410</td>\n<td>12%</td>\n<td>11%</td>\n<td>1%</td>\n<td>0.09</td>\n<td><strong>0.001</strong></td>\n</tr>\n<tr>\n<td>411–440</td>\n<td>14%</td>\n<td>10%</td>\n<td>4%</td>\n<td>0.34</td>\n<td><strong>0.013</strong></td>\n</tr>\n<tr>\n<td>441–470</td>\n<td>14%</td>\n<td>9%</td>\n<td>5%</td>\n<td>0.44</td>\n<td><strong>0.022</strong></td>\n</tr>\n<tr>\n<td>471–520</td>\n<td>13%</td>\n<td>9%</td>\n<td>4%</td>\n<td>0.37</td>\n<td><strong>0.015</strong></td>\n</tr>\n<tr>\n<td>520 &lt;</td>\n<td>9%</td>\n<td>8%</td>\n<td>1%</td>\n<td>0.12</td>\n<td><strong>0.001</strong></td>\n</tr>\n<tr>\n<td><strong>(PSI)= </strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><strong>0.1269</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>指标取值解释说明：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>PSI Value</strong></th>\n<th><strong>Inference</strong></th>\n<th><strong>Action</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Less than 0.1</td>\n<td>无关紧要的差距</td>\n<td>不需要进一步操作</td>\n</tr>\n<tr>\n<td>0.1 – 0.25</td>\n<td>有一点差距</td>\n<td>检查一下其他度量</td>\n</tr>\n<tr>\n<td>Greater than 0.25</td>\n<td>差距较大</td>\n<td>需要进一步研究</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-使用\"><a href=\"#4-使用\" class=\"headerlink\" title=\"4. 使用\"></a>4. 使用</h3><h2 id=\"3-VIF\"><a href=\"#3-VIF\" class=\"headerlink\" title=\"3. VIF\"></a>3. VIF</h2><h3 id=\"1-含义-1\"><a href=\"#1-含义-1\" class=\"headerlink\" title=\"1. 含义\"></a>1. 含义</h3><p>方差膨胀因子（Variance Inflation Factor，VIF）</p>\n<ul>\n<li>容忍度的倒数，VIF越大，显示共线性越严重。经验判断方法表明：当0&lt;VIF&lt;10，不存在<a href=\"https://baike.baidu.com/item/多重共线性/10201978\">多重共线性</a>；当10≤VIF&lt;100，存在较强的多重共线性；当VIF≥100，存在严重多重共线性。</li>\n</ul>\n<h2 id=\"4-LIFT\"><a href=\"#4-LIFT\" class=\"headerlink\" title=\"4. LIFT\"></a>4. LIFT</h2><h3 id=\"1-什么是LIFT\"><a href=\"#1-什么是LIFT\" class=\"headerlink\" title=\"1. 什么是LIFT\"></a>1. 什么是LIFT</h3><p>Lift是评估一个预测模型是否有效的一个度量；它衡量的是一个模型（或规则）对目标中“响应”的预测能力优于随机选择的倍数，以1为界线，大于1的Lift表示该模型或规则比随机选择捕捉了更多的“响应”，等于1的Lift表示该模型的表现独立于随机选择，小于1则表示该模型或规则比随机选择捕捉了更少的“响应”。维基百科中提升度被解释为“Target response divided by average response”。</p>\n<h3 id=\"2-计算方法\"><a href=\"#2-计算方法\" class=\"headerlink\" title=\"2. 计算方法\"></a>2. 计算方法</h3><p>在模型评估中，我们常用到增益/提升（Gain/Lift）图来评估模型效果，其中的<strong>Lift是“运用该模型”和“未运用该模型”所得结果的比值。</strong>以信用评分卡模型的评分结果为例，我们通常会将打分后的样本按分数从低到高排序，取10或20等分（有同分数对应多条观测的情况，所以各组观测数未必完全相等），并对组内观测数与坏样本数进行统计。用评分卡模型捕捉到的坏客户的占比，可由该组坏样本数除以总的坏样本数计算得出；而不使用此评分卡，以随机选择的方法覆盖到的坏客户占比，等价于该组观测数占总观测数的比例（分子分母同时乘以样本整体的坏账率）。对两者取累计值，取其比值，则得到提升度Lift，即该评分卡抓取坏客户的能力是随机选择的多少倍。</p>\n<h3 id=\"3-示例\"><a href=\"#3-示例\" class=\"headerlink\" title=\"3. 示例\"></a>3. 示例</h3><p> 下表是一个提升表（Lift Table）的示例：</p>\n<p><img src=\".images\\1560345165281.png\" alt=\"1560345165281\"></p>\n<p>以分数段为横轴，以捕捉到的“坏”占比为纵轴，可绘制出提升图，示例如下：</p>\n<p><img src=\".images\\1560345217251.png\" alt=\"1560345217251\"></p>\n<p> 以分数段为横轴，以提升度为纵轴，可绘制出累计提升图，示例如下：</p>\n<p><img src=\".images\\1560345243738.png\" alt=\"1560345243738\"></p>\n<p>有了累计提升图，我们就能直观地去比较不同模型或策略给我们带来的区分能力增益程度。</p>\n<h2 id=\"5-RMSE-R-2\"><a href=\"#5-RMSE-R-2\" class=\"headerlink\" title=\"5. RMSE, R^2^\"></a>5. RMSE, R^2^</h2><h3 id=\"1-RMSE\"><a href=\"#1-RMSE\" class=\"headerlink\" title=\"1. RMSE\"></a>1. RMSE</h3>\n<h3 id=\"2-R-2\"><a href=\"#2-R-2\" class=\"headerlink\" title=\"2. R^2^\"></a>2. R^2^</h3><p><img src=\".images\\clip_image002.png\" alt=\"img\"></p>\n<h2 id=\"6-变异系数\"><a href=\"#6-变异系数\" class=\"headerlink\" title=\"6. 变异系数\"></a>6. 变异系数</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h3><p>变异系数（Coefficient of Variation）：当需要比较两组数据<a href=\"https://baike.baidu.com/item/离散程度/6775049\">离散程度</a>大小的时候，如果两组数据的测量尺度相差太大，或者数据<a href=\"https://baike.baidu.com/item/量纲/100412\">量纲</a>的不同，直接使用<a href=\"https://baike.baidu.com/item/标准差/1415772\">标准差</a>来进行比较不合适，此时就应当消除测量尺度和量纲的影响，而变异系数可以做到这一点，它是原始数据标准差与原始数据<a href=\"https://baike.baidu.com/item/平均数/11031224\">平均数</a>的比。CV没有量纲，这样就可以进行客观比较了。事实上，可以认为变异系数和极差、标准差和<a href=\"https://baike.baidu.com/item/方差/3108412\">方差</a>一样，都是反映数据离散程度的绝对值。其数据大小不仅受变量值离散程度的影响，而且还受变量值平均水平大小的影响。</p>\n<h3 id=\"2-计算公式\"><a href=\"#2-计算公式\" class=\"headerlink\" title=\"2. 计算公式\"></a>2. 计算公式</h3><p>标准差与平均值之比：</p>\n<script type=\"math/tex; mode=display\">\nC_v=\\frac{\\sigma}{\\mu}</script><h2 id=\"7-WOE\"><a href=\"#7-WOE\" class=\"headerlink\" title=\"7. WOE\"></a>7. WOE</h2><h3 id=\"1-什么是WOE\"><a href=\"#1-什么是WOE\" class=\"headerlink\" title=\"1. 什么是WOE\"></a>1. 什么是WOE</h3><h3 id=\"2-计算公式-1\"><a href=\"#2-计算公式-1\" class=\"headerlink\" title=\"2. 计算公式\"></a>2. 计算公式</h3><p>WOE（Weight of Evidence）</p>\n<p>某个变量第i个属性对应的WOE值计算公式如下：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{eqnarray*}\nWOE_i &=& ln(\\frac{好用户占比}{坏用户占比})\n\\\\\n\\\\\n&=&  ln(\\frac {\\frac{g_i}{g_T}} {\\frac{b_i}{b_T}})\n\\\\\n\\\\\n&=&  ln(\\frac{g_i}{b_i}）- ln(\\frac{g_T}{b_T})\n\n\\end{eqnarray*}</script><p>其中：g~i~为第i个属性上好用户数，g~T~表示总好人数，b~i~为第i个属性上坏用户数，b~T~表示总坏人数</p>\n<p><strong>WOE</strong>的值<strong>越高</strong>，代表着该分组中客户是坏客户的<strong>风险越低</strong></p>\n<h2 id=\"8-IV\"><a href=\"#8-IV\" class=\"headerlink\" title=\"8. IV\"></a>8. IV</h2><h3 id=\"1-IV是什么\"><a href=\"#1-IV是什么\" class=\"headerlink\" title=\"1. IV是什么\"></a>1. IV是什么</h3><p><strong>IV</strong>值是用来衡量某个变量对好坏客户区分能力的一个指标</p>\n<h3 id=\"2-计算公式-2\"><a href=\"#2-计算公式-2\" class=\"headerlink\" title=\"2. 计算公式\"></a>2. 计算公式</h3><p>IV值公式如下：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{eqnarray*}\nIV &=& \\sum_i (\\frac{g_i}{g_T}- \\frac{b_i}{b_T})WOE_i\n\\\\\n\\\\\n&=& \\sum_i (\\frac{g_i}{g_T}- \\frac{b_i}{b_T})ln(\\frac {\\frac{g_i}{g_T}} {\\frac{b_i}{b_T}})\n\\\\\n\\\\\n&=& \\sum_i (P_g-P_b) ln(\\frac{P_g}{P_b})\n\n\\end{eqnarray*}</script><p>P~g~表示如果我是个好用户，我属于第i个属性的概率</p>\n<script type=\"math/tex; mode=display\">\nP_g=P(x\\epsilon i|x\\epsilon g)=\\frac{g_i}{g_T}</script><h3 id=\"3-取值经验\"><a href=\"#3-取值经验\" class=\"headerlink\" title=\"3. 取值经验\"></a>3. 取值经验</h3><p>KL散度与IV见 九-4</p>\n<h2 id=\"9-KL散度\"><a href=\"#9-KL散度\" class=\"headerlink\" title=\"9. KL散度\"></a>9. KL散度</h2><h3 id=\"1-什么是KL散度\"><a href=\"#1-什么是KL散度\" class=\"headerlink\" title=\"1. 什么是KL散度\"></a>1. 什么是KL散度</h3><p>在概率论或信息论中，KL散度(Kullback–Leibler divergence)，又称相对熵（relative entropy)，是<strong>描述两个概率分布P和Q差异</strong>的一种方法。它是<strong>非对称</strong>的，这意味着$D(P||Q) ≠ D(Q||P)$。特别的，在信息论中，$D(P||Q)$表示当用<strong>概率分布Q来拟合真实分布P时，产生的信息损耗</strong>，其中P表示真实分布，Q表示P的拟合分布。有人将KL散度称为KL距离，但事实上，KL散度并不满足距离的概念，应为:1）KL散度不是对称的；2）KL散度不满足三角不等式。</p>\n<h3 id=\"2-计算公式-3\"><a href=\"#2-计算公式-3\" class=\"headerlink\" title=\"2. 计算公式\"></a>2. 计算公式</h3>\n<h3 id=\"3-信息论含义\"><a href=\"#3-信息论含义\" class=\"headerlink\" title=\"3. 信息论含义\"></a>3. 信息论含义</h3><p>KL散度在信息论中有自己明确的物理意义，它是用来度量使用基于Q分布的编码来编码来自P分布的样本平均所需的额外的Bit个数。而其在机器学习领域的物理意义则是用来度量两个函数的相似程度或者相近程度，在泛函分析中也被频繁地用到[2]。在香农信息论中，用基于P的编码去编码来自P的样本，其最优编码平均所需要的比特个数（即这个字符集的熵）为:</p>\n\n<h3 id=\"4-KL散度与IV\"><a href=\"#4-KL散度与IV\" class=\"headerlink\" title=\"4. KL散度与IV\"></a>4. KL散度与IV</h3><script type=\"math/tex; mode=display\">\n\\begin{eqnarray*}\nIV &=& \\sum_i (P_g-P_b) ln(\\frac{P_g}{P_b})\n\\\\\n\\\\\n&=& \\sum_i P_gln(\\frac{P_g}{P_b}) + \\sum_i P_bln(\\frac{P_b}{P_g})\n\\\\\n\\\\\n&=& KL(P_g||P_b) +KL(P_b||P_g)\n\n\\end{eqnarray*}</script><p>即：好用户落在一个特征某个段上概率和坏用户落在这个段上的概率差别越大，IV值越大</p>\n<p>即：好坏用户落在同一个属性上的概率越小（指P~g~和P~b~的分布差异越大）则IV值越大</p>\n<h2 id=\"10-F1-score\"><a href=\"#10-F1-score\" class=\"headerlink\" title=\"10. F1-score\"></a>10. F1-score</h2><h3 id=\"1-混淆矩阵\"><a href=\"#1-混淆矩阵\" class=\"headerlink\" title=\"1. 混淆矩阵\"></a>1. 混淆矩阵</h3><h3 id=\"2-二级指标\"><a href=\"#2-二级指标\" class=\"headerlink\" title=\"2. 二级指标\"></a>2. 二级指标</h3><h2 id=\"11-AMS\"><a href=\"#11-AMS\" class=\"headerlink\" title=\"11. AMS\"></a>11. AMS</h2><p><a href=\"https://higgsml.lal.in2p3.fr/files/2014/04/documentation_v1.8.pdf\"></a></p>\n<p><a href=\"https://www.kaggle.com/c/higgs-boson/overview/evaluation-score\">https://www.kaggle.com/c/higgs-boson/overview/evaluation-score</a></p>\n<h3 id=\"1-混淆矩阵-1\"><a href=\"#1-混淆矩阵-1\" class=\"headerlink\" title=\"1. 混淆矩阵\"></a>1. 混淆矩阵</h3><h3 id=\"2-二级指标-1\"><a href=\"#2-二级指标-1\" class=\"headerlink\" title=\"2. 二级指标\"></a>2. 二级指标</h3><h2 id=\"11-AMS-1\"><a href=\"#11-AMS-1\" class=\"headerlink\" title=\"11. AMS\"></a>11. AMS</h2><p><a href=\"https://higgsml.lal.in2p3.fr/files/2014/04/documentation_v1.8.pdf\"></a></p>\n<p><a href=\"https://www.kaggle.com/c/higgs-boson/overview/evaluation\">https://www.kaggle.com/c/higgs-boson/overview/evaluation</a></p>\n","site":{"data":{}},"excerpt":"<p>评估指标</p>","more":"<p>[TOC]</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><h2 id=\"1-ROC-KS-AUC\"><a href=\"#1-ROC-KS-AUC\" class=\"headerlink\" title=\"1. ROC, KS, AUC\"></a>1. ROC, KS, AUC</h2><h3 id=\"1-TP-FP-FN-TN\"><a href=\"#1-TP-FP-FN-TN\" class=\"headerlink\" title=\"1. TP, FP, FN, TN\"></a>1. TP, FP, FN, TN</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>预测1</th>\n<th>预测0</th>\n<th>合计</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>真实1</td>\n<td>True Positive (TP)</td>\n<td>False Negative (FN)</td>\n<td>Actual   Positive(TP+FN)</td>\n</tr>\n<tr>\n<td>真实0</td>\n<td>False Positive (FP)</td>\n<td>True Negative(TN)</td>\n<td>Actual   Negative(FP+TN)</td>\n</tr>\n<tr>\n<td>合计</td>\n<td>Predicted   Positive(TP+FP)</td>\n<td>Predicted   Negative(FN+TN)</td>\n<td>TP+FP+FN+TN</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>True Positive Rate（TPR），计算公式为TPR=TP/(TP+FN)；所有真实的“1”中，有多少被模型成功选出</li>\n<li>False Positive Rate（FPR），计算公式为FPR=FP/(FP+TN)；所有真实的“0”中，有多少被模型误判为1了；</li>\n<li>Precision=TP/(TP+FP)，或2TP/((TP+FN)+(TP+FP))。所有判为1的用户，判对的比例</li>\n<li>好的模型：TPR尽量高而FPR尽量低</li>\n</ul>\n<h3 id=\"2-ROC\"><a href=\"#2-ROC\" class=\"headerlink\" title=\"2. ROC\"></a>2. ROC</h3><ul>\n<li><p>ROC(Receiver Operating Characteristic Curve):接受者操作特征曲线。</p>\n</li>\n<li><p>ROC曲线：设定不同的阀值，计算不同的点(FPR,TPR)，连成曲线</p>\n</li>\n<li><p>ROC曲线确定阈值的方法：</p>\n</li>\n<li><ul>\n<li>给出ROC曲线的拟合函数表达式，然后计算出最优的阀值，这个目前通过软件实现难度不大：如何给出最优拟合函数，计算数学上有很多方法；</li>\n<li>计算出ΔTPR≈ΔFPR的点即为最优的阀值；</li>\n<li>从业务上给出最优的阀值。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"D:\\dev\\Blog\\machine-learning-note\\基础算法\\.images\\1560344119508.png\" alt=\"1560344119508\"></p>\n<h3 id=\"3-AUC\"><a href=\"#3-AUC\" class=\"headerlink\" title=\"3. AUC\"></a>3. AUC</h3><ul>\n<li>AUC：ROC曲线下方的面积Area Under the ROC      Curve，简称为AUC。这是评价模型的另一个方法，AUC值越大，说明模型的分辨效果越好</li>\n<li>gini系数：在SAS的评分模型输出中，常用来判断收入分配公平程度，此时gini=2*AUC-1</li>\n</ul>\n<p>XGB中</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> sum_pospair = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> sum_npos = <span class=\"number\">0.0</span>, sum_nneg = <span class=\"number\">0.0</span>, buf_pos = <span class=\"number\">0.0</span>, buf_neg = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; rec.<span class=\"built_in\">size</span>(); ++j) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wt = info.<span class=\"built_in\">GetWeight</span>(rec[j].second);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> ctr = info.labels[rec[j].second];</span><br><span class=\"line\">  <span class=\"comment\">// keep bucketing predictions in same bucket</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (j != <span class=\"number\">0</span> &amp;&amp; rec[j].first != rec[j - <span class=\"number\">1</span>].first) &#123; <span class=\"comment\">// 遍历所有的预测值</span></span><br><span class=\"line\">    sum_pospair += buf_neg * (sum_npos + buf_pos *<span class=\"number\">0.5</span>); <span class=\"comment\">// 逐个梯形计算</span></span><br><span class=\"line\">    sum_npos += buf_pos;</span><br><span class=\"line\">    sum_nneg += buf_neg;</span><br><span class=\"line\">    buf_neg = buf_pos = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  buf_pos += ctr * wt; <span class=\"comment\">// 累计加权TP</span></span><br><span class=\"line\">  buf_neg += (<span class=\"number\">1.0f</span> - ctr) * wt; <span class=\"comment\">// 累计加权FP</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum_pospair += buf_neg * (sum_npos + buf_pos *<span class=\"number\">0.5</span>);</span><br><span class=\"line\">sum_npos += buf_pos;</span><br><span class=\"line\">sum_nneg += buf_neg;</span><br><span class=\"line\"><span class=\"comment\">// check weird conditions</span></span><br><span class=\"line\">utils::<span class=\"built_in\">Check</span>(sum_npos &gt; <span class=\"number\">0.0</span> &amp;&amp; sum_nneg &gt; <span class=\"number\">0.0</span>,</span><br><span class=\"line\">             <span class=\"string\">&quot;AUC: the dataset only contains pos or neg samples&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// this is the AUC</span></span><br><span class=\"line\">sum_auc += sum_pospair / (sum_npos*sum_nneg);<span class=\"comment\">// 计算AUC</span></span><br></pre></td></tr></table></figure>\n<p>R语言中的计算方法</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> (y_pred, y_true) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">rank &lt;- rank(y_pred) <span class=\"comment\"># rank[i] 为 y_pred[i]从小到大的排序号，最小为1,两个数并列第5，则都为5.5</span></span><br><span class=\"line\">n_pos &lt;- <span class=\"built_in\">sum</span>(y_true == <span class=\"number\">1</span>)</span><br><span class=\"line\">n_neg &lt;- <span class=\"built_in\">sum</span>(y_true == <span class=\"number\">0</span>)</span><br><span class=\"line\">AUC &lt;- (<span class=\"built_in\">sum</span>(rank[y_true == <span class=\"number\">1</span>]) - n_pos * (n_pos + <span class=\"number\">1</span>)/<span class=\"number\">2</span>)/(n_pos * </span><br><span class=\"line\">n_neg)</span><br><span class=\"line\"><span class=\"built_in\">return</span>(AUC)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\".images\\auc计算\" alt=\"img\"></p>\n<p>原因：</p>\n\n<h3 id=\"4-KS\"><a href=\"#4-KS\" class=\"headerlink\" title=\"4. KS\"></a>4. KS</h3><ul>\n<li>K-S曲线：它和ROC曲线的画法异曲同工。以Logistic模型为例，首先把Logistic模型输出的概率从大到小排序，然后取10%的值（也就是概率值）作为阀值，同理把10%*k（k=1,2,3,…,9）处的值作为阀值，计算出不同的FPR和TPR值，以10%*k（k=1,2,3,…,9）为横坐标，分别以TPR和FPR的值为纵坐标，就可以画出两个曲线，这就是K-S曲线。</li>\n<li>KS值：KS=max(TPR-FPR)，即是两条曲线之间的最大间隔距离。当(TPR-FPR)最大时，也就是ΔTPR-ΔFPR=0，这和ROC曲线上找最优阀值的条件ΔTPR=ΔFPR是一样的。从这点也可以看出，ROC曲线、K-S曲线、KS值的本质是相同的。</li>\n</ul>\n<p><img src=\".images\\1560344142780.png\" alt=\"1560344142780\"></p>\n<ul>\n<li><p>K-S曲线能直观地找出模型中差异最大的一个分段，比如评分模型就比较适合用KS值进行评估；</p>\n</li>\n<li><p>KS值只能反映出哪个分段是区分度最大的，不能反映出所有分段的效果。</p>\n</li>\n</ul>\n<p>因此，在实际应用中，模型评价一般需要将ROC曲线、K-S曲线、KS值、AUC指标结合起来使用。</p>\n<h2 id=\"2-PSI\"><a href=\"#2-PSI\" class=\"headerlink\" title=\"2. PSI\"></a>2. PSI</h2><h3 id=\"1-含义\"><a href=\"#1-含义\" class=\"headerlink\" title=\"1. 含义\"></a>1. 含义</h3><p>PopulationStability Index(PSI)群体稳定性指标</p>\n<h3 id=\"2-公式\"><a href=\"#2-公式\" class=\"headerlink\" title=\"2. 公式\"></a>2. 公式</h3><p> psi = sum(（实际占比-预期占比）*ln(实际占比/预期占比))</p>\n<p>数学<strong>原理</strong>：</p>\n<ul>\n<li><p>平衡符号</p>\n</li>\n<li><p>占比小的区间权重小</p>\n<p><img src=\".images\\1560344829786.png\" alt=\"1560344829786\"></p>\n</li>\n</ul>\n<h3 id=\"3-计算\"><a href=\"#3-计算\" class=\"headerlink\" title=\"3. 计算\"></a>3. 计算</h3><p>形式上比较像WoE和IV，下面是<strong>计算</strong>举例：</p>\n<p><img src=\".images\\1560344565889.png\" alt=\"1560344565889\"></p>\n<p>计算表：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Score bands</th>\n<th><strong>Actual %</strong></th>\n<th>Expected %</th>\n<th><strong>Ac-Ex</strong></th>\n<th><strong>ln(Ac/Ex)</strong></th>\n<th><strong>Index</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt; 251</td>\n<td>5%</td>\n<td>8%</td>\n<td>-3%</td>\n<td>-0.47</td>\n<td><strong>0.014</strong></td>\n</tr>\n<tr>\n<td>251–290</td>\n<td>6%</td>\n<td>9%</td>\n<td>-3%</td>\n<td>-0.41</td>\n<td><strong>0.012</strong></td>\n</tr>\n<tr>\n<td>291–320</td>\n<td>6%</td>\n<td>10%</td>\n<td>-4%</td>\n<td>-0.51</td>\n<td><strong>0.020</strong></td>\n</tr>\n<tr>\n<td>321–350</td>\n<td>8%</td>\n<td>13%</td>\n<td>-5%</td>\n<td>-0.49</td>\n<td><strong>0.024</strong></td>\n</tr>\n<tr>\n<td>351–380</td>\n<td>10%</td>\n<td>12%</td>\n<td>-2%</td>\n<td>-0.18</td>\n<td><strong>0.004</strong></td>\n</tr>\n<tr>\n<td>381–410</td>\n<td>12%</td>\n<td>11%</td>\n<td>1%</td>\n<td>0.09</td>\n<td><strong>0.001</strong></td>\n</tr>\n<tr>\n<td>411–440</td>\n<td>14%</td>\n<td>10%</td>\n<td>4%</td>\n<td>0.34</td>\n<td><strong>0.013</strong></td>\n</tr>\n<tr>\n<td>441–470</td>\n<td>14%</td>\n<td>9%</td>\n<td>5%</td>\n<td>0.44</td>\n<td><strong>0.022</strong></td>\n</tr>\n<tr>\n<td>471–520</td>\n<td>13%</td>\n<td>9%</td>\n<td>4%</td>\n<td>0.37</td>\n<td><strong>0.015</strong></td>\n</tr>\n<tr>\n<td>520 &lt;</td>\n<td>9%</td>\n<td>8%</td>\n<td>1%</td>\n<td>0.12</td>\n<td><strong>0.001</strong></td>\n</tr>\n<tr>\n<td><strong>(PSI)= </strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><strong>0.1269</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>指标取值解释说明：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>PSI Value</strong></th>\n<th><strong>Inference</strong></th>\n<th><strong>Action</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Less than 0.1</td>\n<td>无关紧要的差距</td>\n<td>不需要进一步操作</td>\n</tr>\n<tr>\n<td>0.1 – 0.25</td>\n<td>有一点差距</td>\n<td>检查一下其他度量</td>\n</tr>\n<tr>\n<td>Greater than 0.25</td>\n<td>差距较大</td>\n<td>需要进一步研究</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-使用\"><a href=\"#4-使用\" class=\"headerlink\" title=\"4. 使用\"></a>4. 使用</h3><h2 id=\"3-VIF\"><a href=\"#3-VIF\" class=\"headerlink\" title=\"3. VIF\"></a>3. VIF</h2><h3 id=\"1-含义-1\"><a href=\"#1-含义-1\" class=\"headerlink\" title=\"1. 含义\"></a>1. 含义</h3><p>方差膨胀因子（Variance Inflation Factor，VIF）</p>\n<ul>\n<li>容忍度的倒数，VIF越大，显示共线性越严重。经验判断方法表明：当0&lt;VIF&lt;10，不存在<a href=\"https://baike.baidu.com/item/多重共线性/10201978\">多重共线性</a>；当10≤VIF&lt;100，存在较强的多重共线性；当VIF≥100，存在严重多重共线性。</li>\n</ul>\n<h2 id=\"4-LIFT\"><a href=\"#4-LIFT\" class=\"headerlink\" title=\"4. LIFT\"></a>4. LIFT</h2><h3 id=\"1-什么是LIFT\"><a href=\"#1-什么是LIFT\" class=\"headerlink\" title=\"1. 什么是LIFT\"></a>1. 什么是LIFT</h3><p>Lift是评估一个预测模型是否有效的一个度量；它衡量的是一个模型（或规则）对目标中“响应”的预测能力优于随机选择的倍数，以1为界线，大于1的Lift表示该模型或规则比随机选择捕捉了更多的“响应”，等于1的Lift表示该模型的表现独立于随机选择，小于1则表示该模型或规则比随机选择捕捉了更少的“响应”。维基百科中提升度被解释为“Target response divided by average response”。</p>\n<h3 id=\"2-计算方法\"><a href=\"#2-计算方法\" class=\"headerlink\" title=\"2. 计算方法\"></a>2. 计算方法</h3><p>在模型评估中，我们常用到增益/提升（Gain/Lift）图来评估模型效果，其中的<strong>Lift是“运用该模型”和“未运用该模型”所得结果的比值。</strong>以信用评分卡模型的评分结果为例，我们通常会将打分后的样本按分数从低到高排序，取10或20等分（有同分数对应多条观测的情况，所以各组观测数未必完全相等），并对组内观测数与坏样本数进行统计。用评分卡模型捕捉到的坏客户的占比，可由该组坏样本数除以总的坏样本数计算得出；而不使用此评分卡，以随机选择的方法覆盖到的坏客户占比，等价于该组观测数占总观测数的比例（分子分母同时乘以样本整体的坏账率）。对两者取累计值，取其比值，则得到提升度Lift，即该评分卡抓取坏客户的能力是随机选择的多少倍。</p>\n<h3 id=\"3-示例\"><a href=\"#3-示例\" class=\"headerlink\" title=\"3. 示例\"></a>3. 示例</h3><p> 下表是一个提升表（Lift Table）的示例：</p>\n<p><img src=\".images\\1560345165281.png\" alt=\"1560345165281\"></p>\n<p>以分数段为横轴，以捕捉到的“坏”占比为纵轴，可绘制出提升图，示例如下：</p>\n<p><img src=\".images\\1560345217251.png\" alt=\"1560345217251\"></p>\n<p> 以分数段为横轴，以提升度为纵轴，可绘制出累计提升图，示例如下：</p>\n<p><img src=\".images\\1560345243738.png\" alt=\"1560345243738\"></p>\n<p>有了累计提升图，我们就能直观地去比较不同模型或策略给我们带来的区分能力增益程度。</p>\n<h2 id=\"5-RMSE-R-2\"><a href=\"#5-RMSE-R-2\" class=\"headerlink\" title=\"5. RMSE, R^2^\"></a>5. RMSE, R^2^</h2><h3 id=\"1-RMSE\"><a href=\"#1-RMSE\" class=\"headerlink\" title=\"1. RMSE\"></a>1. RMSE</h3>\n<h3 id=\"2-R-2\"><a href=\"#2-R-2\" class=\"headerlink\" title=\"2. R^2^\"></a>2. R^2^</h3><p><img src=\".images\\clip_image002.png\" alt=\"img\"></p>\n<h2 id=\"6-变异系数\"><a href=\"#6-变异系数\" class=\"headerlink\" title=\"6. 变异系数\"></a>6. 变异系数</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h3><p>变异系数（Coefficient of Variation）：当需要比较两组数据<a href=\"https://baike.baidu.com/item/离散程度/6775049\">离散程度</a>大小的时候，如果两组数据的测量尺度相差太大，或者数据<a href=\"https://baike.baidu.com/item/量纲/100412\">量纲</a>的不同，直接使用<a href=\"https://baike.baidu.com/item/标准差/1415772\">标准差</a>来进行比较不合适，此时就应当消除测量尺度和量纲的影响，而变异系数可以做到这一点，它是原始数据标准差与原始数据<a href=\"https://baike.baidu.com/item/平均数/11031224\">平均数</a>的比。CV没有量纲，这样就可以进行客观比较了。事实上，可以认为变异系数和极差、标准差和<a href=\"https://baike.baidu.com/item/方差/3108412\">方差</a>一样，都是反映数据离散程度的绝对值。其数据大小不仅受变量值离散程度的影响，而且还受变量值平均水平大小的影响。</p>\n<h3 id=\"2-计算公式\"><a href=\"#2-计算公式\" class=\"headerlink\" title=\"2. 计算公式\"></a>2. 计算公式</h3><p>标准差与平均值之比：</p>\n<script type=\"math/tex; mode=display\">\nC_v=\\frac{\\sigma}{\\mu}</script><h2 id=\"7-WOE\"><a href=\"#7-WOE\" class=\"headerlink\" title=\"7. WOE\"></a>7. WOE</h2><h3 id=\"1-什么是WOE\"><a href=\"#1-什么是WOE\" class=\"headerlink\" title=\"1. 什么是WOE\"></a>1. 什么是WOE</h3><h3 id=\"2-计算公式-1\"><a href=\"#2-计算公式-1\" class=\"headerlink\" title=\"2. 计算公式\"></a>2. 计算公式</h3><p>WOE（Weight of Evidence）</p>\n<p>某个变量第i个属性对应的WOE值计算公式如下：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{eqnarray*}\nWOE_i &=& ln(\\frac{好用户占比}{坏用户占比})\n\\\\\n\\\\\n&=&  ln(\\frac {\\frac{g_i}{g_T}} {\\frac{b_i}{b_T}})\n\\\\\n\\\\\n&=&  ln(\\frac{g_i}{b_i}）- ln(\\frac{g_T}{b_T})\n\n\\end{eqnarray*}</script><p>其中：g~i~为第i个属性上好用户数，g~T~表示总好人数，b~i~为第i个属性上坏用户数，b~T~表示总坏人数</p>\n<p><strong>WOE</strong>的值<strong>越高</strong>，代表着该分组中客户是坏客户的<strong>风险越低</strong></p>\n<h2 id=\"8-IV\"><a href=\"#8-IV\" class=\"headerlink\" title=\"8. IV\"></a>8. IV</h2><h3 id=\"1-IV是什么\"><a href=\"#1-IV是什么\" class=\"headerlink\" title=\"1. IV是什么\"></a>1. IV是什么</h3><p><strong>IV</strong>值是用来衡量某个变量对好坏客户区分能力的一个指标</p>\n<h3 id=\"2-计算公式-2\"><a href=\"#2-计算公式-2\" class=\"headerlink\" title=\"2. 计算公式\"></a>2. 计算公式</h3><p>IV值公式如下：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{eqnarray*}\nIV &=& \\sum_i (\\frac{g_i}{g_T}- \\frac{b_i}{b_T})WOE_i\n\\\\\n\\\\\n&=& \\sum_i (\\frac{g_i}{g_T}- \\frac{b_i}{b_T})ln(\\frac {\\frac{g_i}{g_T}} {\\frac{b_i}{b_T}})\n\\\\\n\\\\\n&=& \\sum_i (P_g-P_b) ln(\\frac{P_g}{P_b})\n\n\\end{eqnarray*}</script><p>P~g~表示如果我是个好用户，我属于第i个属性的概率</p>\n<script type=\"math/tex; mode=display\">\nP_g=P(x\\epsilon i|x\\epsilon g)=\\frac{g_i}{g_T}</script><h3 id=\"3-取值经验\"><a href=\"#3-取值经验\" class=\"headerlink\" title=\"3. 取值经验\"></a>3. 取值经验</h3><p>KL散度与IV见 九-4</p>\n<h2 id=\"9-KL散度\"><a href=\"#9-KL散度\" class=\"headerlink\" title=\"9. KL散度\"></a>9. KL散度</h2><h3 id=\"1-什么是KL散度\"><a href=\"#1-什么是KL散度\" class=\"headerlink\" title=\"1. 什么是KL散度\"></a>1. 什么是KL散度</h3><p>在概率论或信息论中，KL散度(Kullback–Leibler divergence)，又称相对熵（relative entropy)，是<strong>描述两个概率分布P和Q差异</strong>的一种方法。它是<strong>非对称</strong>的，这意味着$D(P||Q) ≠ D(Q||P)$。特别的，在信息论中，$D(P||Q)$表示当用<strong>概率分布Q来拟合真实分布P时，产生的信息损耗</strong>，其中P表示真实分布，Q表示P的拟合分布。有人将KL散度称为KL距离，但事实上，KL散度并不满足距离的概念，应为:1）KL散度不是对称的；2）KL散度不满足三角不等式。</p>\n<h3 id=\"2-计算公式-3\"><a href=\"#2-计算公式-3\" class=\"headerlink\" title=\"2. 计算公式\"></a>2. 计算公式</h3>\n<h3 id=\"3-信息论含义\"><a href=\"#3-信息论含义\" class=\"headerlink\" title=\"3. 信息论含义\"></a>3. 信息论含义</h3><p>KL散度在信息论中有自己明确的物理意义，它是用来度量使用基于Q分布的编码来编码来自P分布的样本平均所需的额外的Bit个数。而其在机器学习领域的物理意义则是用来度量两个函数的相似程度或者相近程度，在泛函分析中也被频繁地用到[2]。在香农信息论中，用基于P的编码去编码来自P的样本，其最优编码平均所需要的比特个数（即这个字符集的熵）为:</p>\n\n<h3 id=\"4-KL散度与IV\"><a href=\"#4-KL散度与IV\" class=\"headerlink\" title=\"4. KL散度与IV\"></a>4. KL散度与IV</h3><script type=\"math/tex; mode=display\">\n\\begin{eqnarray*}\nIV &=& \\sum_i (P_g-P_b) ln(\\frac{P_g}{P_b})\n\\\\\n\\\\\n&=& \\sum_i P_gln(\\frac{P_g}{P_b}) + \\sum_i P_bln(\\frac{P_b}{P_g})\n\\\\\n\\\\\n&=& KL(P_g||P_b) +KL(P_b||P_g)\n\n\\end{eqnarray*}</script><p>即：好用户落在一个特征某个段上概率和坏用户落在这个段上的概率差别越大，IV值越大</p>\n<p>即：好坏用户落在同一个属性上的概率越小（指P~g~和P~b~的分布差异越大）则IV值越大</p>\n<h2 id=\"10-F1-score\"><a href=\"#10-F1-score\" class=\"headerlink\" title=\"10. F1-score\"></a>10. F1-score</h2><h3 id=\"1-混淆矩阵\"><a href=\"#1-混淆矩阵\" class=\"headerlink\" title=\"1. 混淆矩阵\"></a>1. 混淆矩阵</h3><h3 id=\"2-二级指标\"><a href=\"#2-二级指标\" class=\"headerlink\" title=\"2. 二级指标\"></a>2. 二级指标</h3><h2 id=\"11-AMS\"><a href=\"#11-AMS\" class=\"headerlink\" title=\"11. AMS\"></a>11. AMS</h2><p><a href=\"https://higgsml.lal.in2p3.fr/files/2014/04/documentation_v1.8.pdf\"></a></p>\n<p><a href=\"https://www.kaggle.com/c/higgs-boson/overview/evaluation-score\">https://www.kaggle.com/c/higgs-boson/overview/evaluation-score</a></p>\n<h3 id=\"1-混淆矩阵-1\"><a href=\"#1-混淆矩阵-1\" class=\"headerlink\" title=\"1. 混淆矩阵\"></a>1. 混淆矩阵</h3><h3 id=\"2-二级指标-1\"><a href=\"#2-二级指标-1\" class=\"headerlink\" title=\"2. 二级指标\"></a>2. 二级指标</h3><h2 id=\"11-AMS-1\"><a href=\"#11-AMS-1\" class=\"headerlink\" title=\"11. AMS\"></a>11. AMS</h2><p><a href=\"https://higgsml.lal.in2p3.fr/files/2014/04/documentation_v1.8.pdf\"></a></p>\n<p><a href=\"https://www.kaggle.com/c/higgs-boson/overview/evaluation\">https://www.kaggle.com/c/higgs-boson/overview/evaluation</a></p>"},{"title":"01_日期操作","date":"2022-03-01T03:32:38.000Z","_content":"\n\n\nsql相关的日期操作\n\n<!-- more -->\n\n\n\n\n## 一、日期运算\n\n\n\n### 1. date_add\n\n```sql\nselect date_add('2017-09-15',1) ;\n```\n\n### 2. date_sub\n\n```sql\nselect date_sub('2017-09-15',1);\n```\n\n### 3. datediff\n\n```sql\nselect datediff('2017-09-15','2017-09-01');\n```\n\n### 4. add_months\n\n```sql\nselect add_months('2017-02-27',-1);\n-- 2017-01-27\nselect add_months('2017-02-01',-1);\n-- 2017-01-01\nselect add_months('2017-02-28',-1);\n-- 2017-01-31\n```\n\n\n\n### 5. last_day\n\n```\nselect last_day('2018-09-22');\n```\n\n\n\n### 6. months_between\n\n```sql\nselect months_between('2018-09-22','2018-08-02');\n```\n\n\n\n## 二、日期转换\n\n### 1. to_date\n\n```sql\nselect to_date('2017-09-15 11:12:00');\n```\n\n\n\n### 2. from_unixtime\n\n时间戳转日期\n\n```sql\n--时间戳转日期\nselect from_unixtime(1505456567); \nselect from_unixtime(1505456567,'yyyyMMdd'); \nselect from_unixtime(1505456567,'yyyy-MM-dd HH:mm:ss'); \nselect from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss'); --获取系统当前时间\n```\n\n方法1: from_unixtime+ unix_timestamp\n--20171205转成2017-12-05 \nselect from_unixtime(unix_timestamp('20171205','yyyymmdd'),'yyyy-mm-dd') from dual;\n\n--2017-12-05转成20171205\nselect from_unixtime(unix_timestamp('2017-12-05','yyyy-mm-dd'),'yyyymmdd') from dual;\n\n方法2: substr + concat\n--20171205转成2017-12-05 \nselect concat(substr('20171205',1,4),'-',substr('20171205',5,2),'-',substr('20171205',7,2)) from dual;\n\n--2017-12-05转成20171205\nselect concat(substr('2017-12-05',1,4),substr('2017-12-05',6,2),substr('2017-12-05',9,2)) from dual;\n\n————————————————\n版权声明：本文为CSDN博主「开心果汁」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/u013421629/article/details/80068090\n\n## 三、自动获取日期\n\n### 1. current_date\n\n```sql\n--其他日期函数\n--查询当前系统时间(包括毫秒数): \nselect current_timestamp;  \n-- 查询当月第几天: \nselect dayofmonth(current_date);\n-- 月末\nselect last_day(current_date);\n-- 当月第1天\nselect date_sub(current_date,dayofmonth(current_date)-1);\n-- 下个月第1天\nselect add_months(date_sub(current_date,dayofmonth(current_date)-1),1);\n```\n\n\n\n### 2. sysdate\n\n```sql\nselect sysdate(-2) ;\n```\n\n\n\n### 3. unix_timestamp\n\n时间戳函数\n\n```sql\n--日期转时间戳：从1970-01-01 00:00:00 UTC到指定时间的秒数\nselect unix_timestamp(); --获得当前时区的UNIX时间戳\nselect unix_timestamp('2017-09-15 14:23:00'); \nselect unix_timestamp('2017-09-15 14:23:00','yyyy-MM-dd HH:mm:ss');\nselect unix_timestamp('20170915 14:23:00','yyyyMMdd HH:mm:ss'); \n```\n\n### 4. 年月日\n\n```\nselect year(dt),month(dt),day(dt),hour(dt),minute(dt),second(dt),weekofyear(dt);\n```\n\n### 5. trunc\n\n获取月初、年初\n\n>\n> trunc(date,format)  format:MONTH/MON/MM, YEAR/YYYY/YY\n>\n\n\n```sql\nselect trunc('2018-09-27','YY') as date_time,trunc('2018-09-27 21:16:13','MM') as date_time1;\n\n--date_time       date_time1\n--2018-01-01      2018-09-01\n```\n\n### 6. next_day\n\n当前日期下个星期X的日期\n\n>\n> next_day(date,formate) format:英文星期几的缩写或者全拼\n>\n\n```sql\nselect next_day('2018-09-27','TH') as date_time,next_day('2018-09-27 21:16:13','TU') as date_time1;\n-- date_time       date_time1\n-- 2018-10-04      2018-10-02\n```\n\n     2018-10-02\n```\n\n","source":"_posts/0_代码相关/01_日期操作.md","raw":"---\ntitle: 01_日期操作\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n\n\nsql相关的日期操作\n\n<!-- more -->\n\n\n\n\n## 一、日期运算\n\n\n\n### 1. date_add\n\n```sql\nselect date_add('2017-09-15',1) ;\n```\n\n### 2. date_sub\n\n```sql\nselect date_sub('2017-09-15',1);\n```\n\n### 3. datediff\n\n```sql\nselect datediff('2017-09-15','2017-09-01');\n```\n\n### 4. add_months\n\n```sql\nselect add_months('2017-02-27',-1);\n-- 2017-01-27\nselect add_months('2017-02-01',-1);\n-- 2017-01-01\nselect add_months('2017-02-28',-1);\n-- 2017-01-31\n```\n\n\n\n### 5. last_day\n\n```\nselect last_day('2018-09-22');\n```\n\n\n\n### 6. months_between\n\n```sql\nselect months_between('2018-09-22','2018-08-02');\n```\n\n\n\n## 二、日期转换\n\n### 1. to_date\n\n```sql\nselect to_date('2017-09-15 11:12:00');\n```\n\n\n\n### 2. from_unixtime\n\n时间戳转日期\n\n```sql\n--时间戳转日期\nselect from_unixtime(1505456567); \nselect from_unixtime(1505456567,'yyyyMMdd'); \nselect from_unixtime(1505456567,'yyyy-MM-dd HH:mm:ss'); \nselect from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss'); --获取系统当前时间\n```\n\n方法1: from_unixtime+ unix_timestamp\n--20171205转成2017-12-05 \nselect from_unixtime(unix_timestamp('20171205','yyyymmdd'),'yyyy-mm-dd') from dual;\n\n--2017-12-05转成20171205\nselect from_unixtime(unix_timestamp('2017-12-05','yyyy-mm-dd'),'yyyymmdd') from dual;\n\n方法2: substr + concat\n--20171205转成2017-12-05 \nselect concat(substr('20171205',1,4),'-',substr('20171205',5,2),'-',substr('20171205',7,2)) from dual;\n\n--2017-12-05转成20171205\nselect concat(substr('2017-12-05',1,4),substr('2017-12-05',6,2),substr('2017-12-05',9,2)) from dual;\n\n————————————————\n版权声明：本文为CSDN博主「开心果汁」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/u013421629/article/details/80068090\n\n## 三、自动获取日期\n\n### 1. current_date\n\n```sql\n--其他日期函数\n--查询当前系统时间(包括毫秒数): \nselect current_timestamp;  \n-- 查询当月第几天: \nselect dayofmonth(current_date);\n-- 月末\nselect last_day(current_date);\n-- 当月第1天\nselect date_sub(current_date,dayofmonth(current_date)-1);\n-- 下个月第1天\nselect add_months(date_sub(current_date,dayofmonth(current_date)-1),1);\n```\n\n\n\n### 2. sysdate\n\n```sql\nselect sysdate(-2) ;\n```\n\n\n\n### 3. unix_timestamp\n\n时间戳函数\n\n```sql\n--日期转时间戳：从1970-01-01 00:00:00 UTC到指定时间的秒数\nselect unix_timestamp(); --获得当前时区的UNIX时间戳\nselect unix_timestamp('2017-09-15 14:23:00'); \nselect unix_timestamp('2017-09-15 14:23:00','yyyy-MM-dd HH:mm:ss');\nselect unix_timestamp('20170915 14:23:00','yyyyMMdd HH:mm:ss'); \n```\n\n### 4. 年月日\n\n```\nselect year(dt),month(dt),day(dt),hour(dt),minute(dt),second(dt),weekofyear(dt);\n```\n\n### 5. trunc\n\n获取月初、年初\n\n>\n> trunc(date,format)  format:MONTH/MON/MM, YEAR/YYYY/YY\n>\n\n\n```sql\nselect trunc('2018-09-27','YY') as date_time,trunc('2018-09-27 21:16:13','MM') as date_time1;\n\n--date_time       date_time1\n--2018-01-01      2018-09-01\n```\n\n### 6. next_day\n\n当前日期下个星期X的日期\n\n>\n> next_day(date,formate) format:英文星期几的缩写或者全拼\n>\n\n```sql\nselect next_day('2018-09-27','TH') as date_time,next_day('2018-09-27 21:16:13','TU') as date_time1;\n-- date_time       date_time1\n-- 2018-10-04      2018-10-02\n```\n\n     2018-10-02\n```\n\n","slug":"0_代码相关/01_日期操作","published":1,"updated":"2022-03-01T03:47:49.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4n00228s327j3u6f68","content":"<p>sql相关的日期操作</p>\n<span id=\"more\"></span>\n<h2 id=\"一、日期运算\"><a href=\"#一、日期运算\" class=\"headerlink\" title=\"一、日期运算\"></a>一、日期运算</h2><h3 id=\"1-date-add\"><a href=\"#1-date-add\" class=\"headerlink\" title=\"1. date_add\"></a>1. date_add</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> date_add(<span class=\"string\">&#x27;2017-09-15&#x27;</span>,<span class=\"number\">1</span>) ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-date-sub\"><a href=\"#2-date-sub\" class=\"headerlink\" title=\"2. date_sub\"></a>2. date_sub</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> date_sub(<span class=\"string\">&#x27;2017-09-15&#x27;</span>,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-datediff\"><a href=\"#3-datediff\" class=\"headerlink\" title=\"3. datediff\"></a>3. datediff</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> datediff(<span class=\"string\">&#x27;2017-09-15&#x27;</span>,<span class=\"string\">&#x27;2017-09-01&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-add-months\"><a href=\"#4-add-months\" class=\"headerlink\" title=\"4. add_months\"></a>4. add_months</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> add_months(<span class=\"string\">&#x27;2017-02-27&#x27;</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 2017-01-27</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> add_months(<span class=\"string\">&#x27;2017-02-01&#x27;</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 2017-01-01</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> add_months(<span class=\"string\">&#x27;2017-02-28&#x27;</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 2017-01-31</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-last-day\"><a href=\"#5-last-day\" class=\"headerlink\" title=\"5. last_day\"></a>5. last_day</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_day(&#x27;2018-09-22&#x27;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-months-between\"><a href=\"#6-months-between\" class=\"headerlink\" title=\"6. months_between\"></a>6. months_between</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> months_between(<span class=\"string\">&#x27;2018-09-22&#x27;</span>,<span class=\"string\">&#x27;2018-08-02&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、日期转换\"><a href=\"#二、日期转换\" class=\"headerlink\" title=\"二、日期转换\"></a>二、日期转换</h2><h3 id=\"1-to-date\"><a href=\"#1-to-date\" class=\"headerlink\" title=\"1. to_date\"></a>1. to_date</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> to_date(<span class=\"string\">&#x27;2017-09-15 11:12:00&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-from-unixtime\"><a href=\"#2-from-unixtime\" class=\"headerlink\" title=\"2. from_unixtime\"></a>2. from_unixtime</h3><p>时间戳转日期</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--时间戳转日期</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(<span class=\"number\">1505456567</span>); </span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(<span class=\"number\">1505456567</span>,<span class=\"string\">&#x27;yyyyMMdd&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(<span class=\"number\">1505456567</span>,<span class=\"string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(unix_timestamp(),<span class=\"string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>); <span class=\"comment\">--获取系统当前时间</span></span><br></pre></td></tr></table></figure>\n<p>方法1: from_unixtime+ unix_timestamp<br>—20171205转成2017-12-05<br>select from_unixtime(unix_timestamp(‘20171205’,’yyyymmdd’),’yyyy-mm-dd’) from dual;</p>\n<p>—2017-12-05转成20171205<br>select from_unixtime(unix_timestamp(‘2017-12-05’,’yyyy-mm-dd’),’yyyymmdd’) from dual;</p>\n<p>方法2: substr + concat<br>—20171205转成2017-12-05<br>select concat(substr(‘20171205’,1,4),’-‘,substr(‘20171205’,5,2),’-‘,substr(‘20171205’,7,2)) from dual;</p>\n<p>—2017-12-05转成20171205<br>select concat(substr(‘2017-12-05’,1,4),substr(‘2017-12-05’,6,2),substr(‘2017-12-05’,9,2)) from dual;</p>\n<p>————————————————<br>版权声明：本文为CSDN博主「开心果汁」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/u013421629/article/details/80068090\">https://blog.csdn.net/u013421629/article/details/80068090</a></p>\n<h2 id=\"三、自动获取日期\"><a href=\"#三、自动获取日期\" class=\"headerlink\" title=\"三、自动获取日期\"></a>三、自动获取日期</h2><h3 id=\"1-current-date\"><a href=\"#1-current-date\" class=\"headerlink\" title=\"1. current_date\"></a>1. current_date</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--其他日期函数</span></span><br><span class=\"line\"><span class=\"comment\">--查询当前系统时间(包括毫秒数): </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">current_timestamp</span>;  </span><br><span class=\"line\"><span class=\"comment\">-- 查询当月第几天: </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> dayofmonth(<span class=\"built_in\">current_date</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 月末</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> last_day(<span class=\"built_in\">current_date</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 当月第1天</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> date_sub(<span class=\"built_in\">current_date</span>,dayofmonth(<span class=\"built_in\">current_date</span>)<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 下个月第1天</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> add_months(date_sub(<span class=\"built_in\">current_date</span>,dayofmonth(<span class=\"built_in\">current_date</span>)<span class=\"number\">-1</span>),<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-sysdate\"><a href=\"#2-sysdate\" class=\"headerlink\" title=\"2. sysdate\"></a>2. sysdate</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sysdate(<span class=\"number\">-2</span>) ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-unix-timestamp\"><a href=\"#3-unix-timestamp\" class=\"headerlink\" title=\"3. unix_timestamp\"></a>3. unix_timestamp</h3><p>时间戳函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--日期转时间戳：从1970-01-01 00:00:00 UTC到指定时间的秒数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> unix_timestamp(); <span class=\"comment\">--获得当前时区的UNIX时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> unix_timestamp(<span class=\"string\">&#x27;2017-09-15 14:23:00&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">select</span> unix_timestamp(<span class=\"string\">&#x27;2017-09-15 14:23:00&#x27;</span>,<span class=\"string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> unix_timestamp(<span class=\"string\">&#x27;20170915 14:23:00&#x27;</span>,<span class=\"string\">&#x27;yyyyMMdd HH:mm:ss&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-年月日\"><a href=\"#4-年月日\" class=\"headerlink\" title=\"4. 年月日\"></a>4. 年月日</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select year(dt),month(dt),day(dt),hour(dt),minute(dt),second(dt),weekofyear(dt);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-trunc\"><a href=\"#5-trunc\" class=\"headerlink\" title=\"5. trunc\"></a>5. trunc</h3><p>获取月初、年初</p>\n<p>&gt;</p>\n<blockquote>\n<p>trunc(date,format)  format:MONTH/MON/MM, YEAR/YYYY/YY</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> trunc(<span class=\"string\">&#x27;2018-09-27&#x27;</span>,<span class=\"string\">&#x27;YY&#x27;</span>) <span class=\"keyword\">as</span> date_time,trunc(<span class=\"string\">&#x27;2018-09-27 21:16:13&#x27;</span>,<span class=\"string\">&#x27;MM&#x27;</span>) <span class=\"keyword\">as</span> date_time1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--date_time       date_time1</span></span><br><span class=\"line\"><span class=\"comment\">--2018-01-01      2018-09-01</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-next-day\"><a href=\"#6-next-day\" class=\"headerlink\" title=\"6. next_day\"></a>6. next_day</h3><p>当前日期下个星期X的日期</p>\n<p>&gt;</p>\n<blockquote>\n<p>next_day(date,formate) format:英文星期几的缩写或者全拼</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> next_day(<span class=\"string\">&#x27;2018-09-27&#x27;</span>,<span class=\"string\">&#x27;TH&#x27;</span>) <span class=\"keyword\">as</span> date_time,next_day(<span class=\"string\">&#x27;2018-09-27 21:16:13&#x27;</span>,<span class=\"string\">&#x27;TU&#x27;</span>) <span class=\"keyword\">as</span> date_time1;</span><br><span class=\"line\"><span class=\"comment\">-- date_time       date_time1</span></span><br><span class=\"line\"><span class=\"comment\">-- 2018-10-04      2018-10-02</span></span><br></pre></td></tr></table></figure>\n<pre><code> 2018-10-02\n</code></pre><p>```</p>\n","site":{"data":{}},"excerpt":"<p>sql相关的日期操作</p>","more":"<h2 id=\"一、日期运算\"><a href=\"#一、日期运算\" class=\"headerlink\" title=\"一、日期运算\"></a>一、日期运算</h2><h3 id=\"1-date-add\"><a href=\"#1-date-add\" class=\"headerlink\" title=\"1. date_add\"></a>1. date_add</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> date_add(<span class=\"string\">&#x27;2017-09-15&#x27;</span>,<span class=\"number\">1</span>) ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-date-sub\"><a href=\"#2-date-sub\" class=\"headerlink\" title=\"2. date_sub\"></a>2. date_sub</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> date_sub(<span class=\"string\">&#x27;2017-09-15&#x27;</span>,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-datediff\"><a href=\"#3-datediff\" class=\"headerlink\" title=\"3. datediff\"></a>3. datediff</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> datediff(<span class=\"string\">&#x27;2017-09-15&#x27;</span>,<span class=\"string\">&#x27;2017-09-01&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-add-months\"><a href=\"#4-add-months\" class=\"headerlink\" title=\"4. add_months\"></a>4. add_months</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> add_months(<span class=\"string\">&#x27;2017-02-27&#x27;</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 2017-01-27</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> add_months(<span class=\"string\">&#x27;2017-02-01&#x27;</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 2017-01-01</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> add_months(<span class=\"string\">&#x27;2017-02-28&#x27;</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 2017-01-31</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-last-day\"><a href=\"#5-last-day\" class=\"headerlink\" title=\"5. last_day\"></a>5. last_day</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_day(&#x27;2018-09-22&#x27;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-months-between\"><a href=\"#6-months-between\" class=\"headerlink\" title=\"6. months_between\"></a>6. months_between</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> months_between(<span class=\"string\">&#x27;2018-09-22&#x27;</span>,<span class=\"string\">&#x27;2018-08-02&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、日期转换\"><a href=\"#二、日期转换\" class=\"headerlink\" title=\"二、日期转换\"></a>二、日期转换</h2><h3 id=\"1-to-date\"><a href=\"#1-to-date\" class=\"headerlink\" title=\"1. to_date\"></a>1. to_date</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> to_date(<span class=\"string\">&#x27;2017-09-15 11:12:00&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-from-unixtime\"><a href=\"#2-from-unixtime\" class=\"headerlink\" title=\"2. from_unixtime\"></a>2. from_unixtime</h3><p>时间戳转日期</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--时间戳转日期</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(<span class=\"number\">1505456567</span>); </span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(<span class=\"number\">1505456567</span>,<span class=\"string\">&#x27;yyyyMMdd&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(<span class=\"number\">1505456567</span>,<span class=\"string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(unix_timestamp(),<span class=\"string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>); <span class=\"comment\">--获取系统当前时间</span></span><br></pre></td></tr></table></figure>\n<p>方法1: from_unixtime+ unix_timestamp<br>—20171205转成2017-12-05<br>select from_unixtime(unix_timestamp(‘20171205’,’yyyymmdd’),’yyyy-mm-dd’) from dual;</p>\n<p>—2017-12-05转成20171205<br>select from_unixtime(unix_timestamp(‘2017-12-05’,’yyyy-mm-dd’),’yyyymmdd’) from dual;</p>\n<p>方法2: substr + concat<br>—20171205转成2017-12-05<br>select concat(substr(‘20171205’,1,4),’-‘,substr(‘20171205’,5,2),’-‘,substr(‘20171205’,7,2)) from dual;</p>\n<p>—2017-12-05转成20171205<br>select concat(substr(‘2017-12-05’,1,4),substr(‘2017-12-05’,6,2),substr(‘2017-12-05’,9,2)) from dual;</p>\n<p>————————————————<br>版权声明：本文为CSDN博主「开心果汁」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/u013421629/article/details/80068090\">https://blog.csdn.net/u013421629/article/details/80068090</a></p>\n<h2 id=\"三、自动获取日期\"><a href=\"#三、自动获取日期\" class=\"headerlink\" title=\"三、自动获取日期\"></a>三、自动获取日期</h2><h3 id=\"1-current-date\"><a href=\"#1-current-date\" class=\"headerlink\" title=\"1. current_date\"></a>1. current_date</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--其他日期函数</span></span><br><span class=\"line\"><span class=\"comment\">--查询当前系统时间(包括毫秒数): </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">current_timestamp</span>;  </span><br><span class=\"line\"><span class=\"comment\">-- 查询当月第几天: </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> dayofmonth(<span class=\"built_in\">current_date</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 月末</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> last_day(<span class=\"built_in\">current_date</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 当月第1天</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> date_sub(<span class=\"built_in\">current_date</span>,dayofmonth(<span class=\"built_in\">current_date</span>)<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 下个月第1天</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> add_months(date_sub(<span class=\"built_in\">current_date</span>,dayofmonth(<span class=\"built_in\">current_date</span>)<span class=\"number\">-1</span>),<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-sysdate\"><a href=\"#2-sysdate\" class=\"headerlink\" title=\"2. sysdate\"></a>2. sysdate</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sysdate(<span class=\"number\">-2</span>) ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-unix-timestamp\"><a href=\"#3-unix-timestamp\" class=\"headerlink\" title=\"3. unix_timestamp\"></a>3. unix_timestamp</h3><p>时间戳函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--日期转时间戳：从1970-01-01 00:00:00 UTC到指定时间的秒数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> unix_timestamp(); <span class=\"comment\">--获得当前时区的UNIX时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> unix_timestamp(<span class=\"string\">&#x27;2017-09-15 14:23:00&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">select</span> unix_timestamp(<span class=\"string\">&#x27;2017-09-15 14:23:00&#x27;</span>,<span class=\"string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> unix_timestamp(<span class=\"string\">&#x27;20170915 14:23:00&#x27;</span>,<span class=\"string\">&#x27;yyyyMMdd HH:mm:ss&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-年月日\"><a href=\"#4-年月日\" class=\"headerlink\" title=\"4. 年月日\"></a>4. 年月日</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select year(dt),month(dt),day(dt),hour(dt),minute(dt),second(dt),weekofyear(dt);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-trunc\"><a href=\"#5-trunc\" class=\"headerlink\" title=\"5. trunc\"></a>5. trunc</h3><p>获取月初、年初</p>\n<p>&gt;</p>\n<blockquote>\n<p>trunc(date,format)  format:MONTH/MON/MM, YEAR/YYYY/YY</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> trunc(<span class=\"string\">&#x27;2018-09-27&#x27;</span>,<span class=\"string\">&#x27;YY&#x27;</span>) <span class=\"keyword\">as</span> date_time,trunc(<span class=\"string\">&#x27;2018-09-27 21:16:13&#x27;</span>,<span class=\"string\">&#x27;MM&#x27;</span>) <span class=\"keyword\">as</span> date_time1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--date_time       date_time1</span></span><br><span class=\"line\"><span class=\"comment\">--2018-01-01      2018-09-01</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-next-day\"><a href=\"#6-next-day\" class=\"headerlink\" title=\"6. next_day\"></a>6. next_day</h3><p>当前日期下个星期X的日期</p>\n<p>&gt;</p>\n<blockquote>\n<p>next_day(date,formate) format:英文星期几的缩写或者全拼</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> next_day(<span class=\"string\">&#x27;2018-09-27&#x27;</span>,<span class=\"string\">&#x27;TH&#x27;</span>) <span class=\"keyword\">as</span> date_time,next_day(<span class=\"string\">&#x27;2018-09-27 21:16:13&#x27;</span>,<span class=\"string\">&#x27;TU&#x27;</span>) <span class=\"keyword\">as</span> date_time1;</span><br><span class=\"line\"><span class=\"comment\">-- date_time       date_time1</span></span><br><span class=\"line\"><span class=\"comment\">-- 2018-10-04      2018-10-02</span></span><br></pre></td></tr></table></figure>\n<pre><code> 2018-10-02\n</code></pre><p>```</p>"},{"title":"搭建hexo博客","date":"2021-06-23T05:02:38.000Z","_content":"\n<!-- more -->\n\n\n\n[TOC]\n\n\n\n    - 博客配置\n---\n\n记录一下搭建博客的过程。\n\n\n\n<!-- more -->\n\n\n\n## 安装hexo\n\n参考内容：https://www.jianshu.com/p/9bbae1d105be\n\n\n\n## 配置hexo与更换Next主题\n\n**下载主题**\n\n```\ngit clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n由于github被墙，使用代理科学上网后，clone经常报`OpenSSL SSL_connect`的错，因此我直接在网页上下载的zip包，解压到`themes/next`文件夹。\n\n\n\n**页面报错**\n\n跟换主题后重新`hexo s`，页面无法显示内容，提示以下信息：\n\n```\n{% extends '_layout.swig' %} {% import '_macro/post.swig' as post_template %} {% import '_macro/sidebar.swig' as sidebar_template %} {% block title %}{{ page.title }} | {{ config.title }}{% endblock %} {% block page_class %}page-post-detail{% endblock %} {% block content %}\n{{ post_template.render(page) }}\n{% if theme.jiathis %} {% include '_partials/share/jiathis.swig' %} {% elseif theme.baidushare %} {% include '_partials/share/baidushare.swig' %} {% elseif theme.add_this_id %} {% include '_partials/share/add-this.swig' %} {% elseif theme.duoshuo_shortname and theme.duoshuo_share %} {% include '_partials/share/duoshuo_share.swig' %} {% endif %}\n{% endblock %} {% block sidebar %} {{ sidebar_template.render(true) }} {% endblock %} {% block script_extra %} {% include '_scripts/pages/post-details.swig' %} {% endblock %}\n```\n\n根据[博客](https://blog.csdn.net/qq_39898645/article/details/109181736)介绍，原因是hexo在5.0之后把swig给删除了需要自己手动安装，安装后解决了该问题。\n\n```\nnpm i hexo-renderer-swig\n```\n\n\n\n**显示公式**\n\n由于我的博客中有大量公式，页面中无法显示。参考[博客](https://www.jianshu.com/p/9b9c241146bc)解决了该问题，问题的核心是配置好两个因素：mathjax和kramed。\n\n\n\n添加mathjax\n\n```\nnpm uninstall hexo-math --save\nnpm install hexo-renderer-mathjax --save\n```\n\n\n\n换渲染引擎\n\n```\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n\n由于我之前瞎试，装过pandoc，也要一起卸掉：`npm uninstall hexo-renderer-pandoc --save`\n\n\n\n修改渲染引擎的bug：到博客根目录下，找到node_modules\\kramed\\lib\\rules\\inline.js，第11行的 escape 变量：\n\n```\n//escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_>])/,\nescape: /^\\\\([`*\\[\\]()#$+\\-.!_>])/,\n```\n\n第20行的em变量：\n\n```\n//em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\n\n\n配置.\\themes\\next\\\\_config.yml\n\n```\n# MathJax Support\nmathjax:\n  enable: true\n  per_page: true\n  engine: mathjax\n  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML\n```\n\n\n\n在文章的Front-matter里打开mathjax开关\n\n```\ntitle: Hierarchical Attention Networks for Document Classification\ndate: 2021-06-23 09:26:17\ntags:\n    - 深度学习\n    - Attention\n    - Transformer\n    - 机器学习\n    - 每日论文\n    - 经典算法\n    - NLP\nmathjax: true\n```\n\n\n\n重启以下\n\n```\nhexo clean\nhexo generate\nhexo s\n```\n\n\n\n到这里我的公式一部分能显示，一部分不能显示。继续查了查，发现别人也有这个情况，比如多行公式的时候显示不了，是因为不能出现连续的大括号`{{`​。我怀疑我的也是类似的问题，于是试了一下在我的`:公式`的结构中，把冒号删了，居然所有公式都正常显示了，然后我又把冒号加回去，还是都可以显示！！！不知道上面那堆设置需要时间起作用还是我的修改触发了什么，总之问题解决了。\n\n后面有查了一些博客之后，推测更有可能是浏览器缓存导致的改动生效的延迟，刷新网页的时候应该`ctrl+F5`。\n\n\n\n操作完这套后，[本地预览](http://localhost:4000)可以正常显示公式，但github.io上却不行（有可能是我clean&generate没有放在最后一步）。根据[大佬](https://segmentfault.com/q/1010000007410421)的指示，我去查了一下github.io页面，确实有报错！\n\n1 error\n\n```\nError with Permissions-Policy header: Unrecognized feature: 'interest-cohort'.\n\nMixed Content: The page at 'https://wangdongdong122.github.io/' was loaded over HTTPS, but requested an insecure script 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'. This request has been blocked; the content must be served over HTTPS.\n```\n\n2 page errors\n\n```\nMixed content: load all resources via HTTPS to improve the security of your site\nEven though the initial HTML page is loaded over a secure HTTPS connection, some resources like images, stylesheets or scripts are being accessed over an insecure HTTP connection. Usage of insecure resources is restricted to strengthen the security of your entire site.\nTo resolve this issue, load all resources over a secure HTTPS connection.\n1 request\nMathJax.js?config=TeX-AMS-MML_HTMLorMML\n1 resource\nName\tRestriction Status\nMathJax.js?config=TeX-AMS-MML_HTMLorMML\tblocked\n```\n\ngoogle了一下错误内容，终于找到了[解决方案](https://github.com/github/pages-gem/issues/307)，原来只是`node_modules/hexo-renderer-mathjax/mathjax.html`中的 `<script>` 少了个type，终于搞定了！！\n\n```\nJust if someone else face the same problem, you should use this:\n\n<script src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" type=\"text/javascript\"></script>\n```\n\n\n\n最后再重启一次\n\n```\nhexo clean #删除渲染\nhexo generate #由source渲染成静态网页\nhexo s #部署本地服务\nhexo g ##推送到远程\n```\n\n\n\n","source":"_posts/0_代码相关/2021-06-23-搭建hexo博客.md","raw":"---\ntitle: 搭建hexo博客\ndate: 2021-06-23 13:02:38\ntags:\n    - 配置环境&安装工具\n    - default\ncategories: \n    - 代码相关\n---\n\n<!-- more -->\n\n\n\n[TOC]\n\n\n\n    - 博客配置\n---\n\n记录一下搭建博客的过程。\n\n\n\n<!-- more -->\n\n\n\n## 安装hexo\n\n参考内容：https://www.jianshu.com/p/9bbae1d105be\n\n\n\n## 配置hexo与更换Next主题\n\n**下载主题**\n\n```\ngit clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n由于github被墙，使用代理科学上网后，clone经常报`OpenSSL SSL_connect`的错，因此我直接在网页上下载的zip包，解压到`themes/next`文件夹。\n\n\n\n**页面报错**\n\n跟换主题后重新`hexo s`，页面无法显示内容，提示以下信息：\n\n```\n{% extends '_layout.swig' %} {% import '_macro/post.swig' as post_template %} {% import '_macro/sidebar.swig' as sidebar_template %} {% block title %}{{ page.title }} | {{ config.title }}{% endblock %} {% block page_class %}page-post-detail{% endblock %} {% block content %}\n{{ post_template.render(page) }}\n{% if theme.jiathis %} {% include '_partials/share/jiathis.swig' %} {% elseif theme.baidushare %} {% include '_partials/share/baidushare.swig' %} {% elseif theme.add_this_id %} {% include '_partials/share/add-this.swig' %} {% elseif theme.duoshuo_shortname and theme.duoshuo_share %} {% include '_partials/share/duoshuo_share.swig' %} {% endif %}\n{% endblock %} {% block sidebar %} {{ sidebar_template.render(true) }} {% endblock %} {% block script_extra %} {% include '_scripts/pages/post-details.swig' %} {% endblock %}\n```\n\n根据[博客](https://blog.csdn.net/qq_39898645/article/details/109181736)介绍，原因是hexo在5.0之后把swig给删除了需要自己手动安装，安装后解决了该问题。\n\n```\nnpm i hexo-renderer-swig\n```\n\n\n\n**显示公式**\n\n由于我的博客中有大量公式，页面中无法显示。参考[博客](https://www.jianshu.com/p/9b9c241146bc)解决了该问题，问题的核心是配置好两个因素：mathjax和kramed。\n\n\n\n添加mathjax\n\n```\nnpm uninstall hexo-math --save\nnpm install hexo-renderer-mathjax --save\n```\n\n\n\n换渲染引擎\n\n```\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n\n由于我之前瞎试，装过pandoc，也要一起卸掉：`npm uninstall hexo-renderer-pandoc --save`\n\n\n\n修改渲染引擎的bug：到博客根目录下，找到node_modules\\kramed\\lib\\rules\\inline.js，第11行的 escape 变量：\n\n```\n//escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_>])/,\nescape: /^\\\\([`*\\[\\]()#$+\\-.!_>])/,\n```\n\n第20行的em变量：\n\n```\n//em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\n\n\n配置.\\themes\\next\\\\_config.yml\n\n```\n# MathJax Support\nmathjax:\n  enable: true\n  per_page: true\n  engine: mathjax\n  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML\n```\n\n\n\n在文章的Front-matter里打开mathjax开关\n\n```\ntitle: Hierarchical Attention Networks for Document Classification\ndate: 2021-06-23 09:26:17\ntags:\n    - 深度学习\n    - Attention\n    - Transformer\n    - 机器学习\n    - 每日论文\n    - 经典算法\n    - NLP\nmathjax: true\n```\n\n\n\n重启以下\n\n```\nhexo clean\nhexo generate\nhexo s\n```\n\n\n\n到这里我的公式一部分能显示，一部分不能显示。继续查了查，发现别人也有这个情况，比如多行公式的时候显示不了，是因为不能出现连续的大括号`{{`​。我怀疑我的也是类似的问题，于是试了一下在我的`:公式`的结构中，把冒号删了，居然所有公式都正常显示了，然后我又把冒号加回去，还是都可以显示！！！不知道上面那堆设置需要时间起作用还是我的修改触发了什么，总之问题解决了。\n\n后面有查了一些博客之后，推测更有可能是浏览器缓存导致的改动生效的延迟，刷新网页的时候应该`ctrl+F5`。\n\n\n\n操作完这套后，[本地预览](http://localhost:4000)可以正常显示公式，但github.io上却不行（有可能是我clean&generate没有放在最后一步）。根据[大佬](https://segmentfault.com/q/1010000007410421)的指示，我去查了一下github.io页面，确实有报错！\n\n1 error\n\n```\nError with Permissions-Policy header: Unrecognized feature: 'interest-cohort'.\n\nMixed Content: The page at 'https://wangdongdong122.github.io/' was loaded over HTTPS, but requested an insecure script 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'. This request has been blocked; the content must be served over HTTPS.\n```\n\n2 page errors\n\n```\nMixed content: load all resources via HTTPS to improve the security of your site\nEven though the initial HTML page is loaded over a secure HTTPS connection, some resources like images, stylesheets or scripts are being accessed over an insecure HTTP connection. Usage of insecure resources is restricted to strengthen the security of your entire site.\nTo resolve this issue, load all resources over a secure HTTPS connection.\n1 request\nMathJax.js?config=TeX-AMS-MML_HTMLorMML\n1 resource\nName\tRestriction Status\nMathJax.js?config=TeX-AMS-MML_HTMLorMML\tblocked\n```\n\ngoogle了一下错误内容，终于找到了[解决方案](https://github.com/github/pages-gem/issues/307)，原来只是`node_modules/hexo-renderer-mathjax/mathjax.html`中的 `<script>` 少了个type，终于搞定了！！\n\n```\nJust if someone else face the same problem, you should use this:\n\n<script src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" type=\"text/javascript\"></script>\n```\n\n\n\n最后再重启一次\n\n```\nhexo clean #删除渲染\nhexo generate #由source渲染成静态网页\nhexo s #部署本地服务\nhexo g ##推送到远程\n```\n\n\n\n","slug":"0_代码相关/2021-06-23-搭建hexo博客","published":1,"updated":"2022-03-01T04:19:36.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4n00258s322bob8ndf","content":"<span id=\"more\"></span>\n<p>[TOC]</p>\n<pre><code>- 博客配置\n</code></pre><hr>\n<p>记录一下搭建博客的过程。</p>\n<!-- more -->\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>参考内容：<a href=\"https://www.jianshu.com/p/9bbae1d105be\">https://www.jianshu.com/p/9bbae1d105be</a></p>\n<h2 id=\"配置hexo与更换Next主题\"><a href=\"#配置hexo与更换Next主题\" class=\"headerlink\" title=\"配置hexo与更换Next主题\"></a>配置hexo与更换Next主题</h2><p><strong>下载主题</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>由于github被墙，使用代理科学上网后，clone经常报<code>OpenSSL SSL_connect</code>的错，因此我直接在网页上下载的zip包，解压到<code>themes/next</code>文件夹。</p>\n<p><strong>页面报错</strong></p>\n<p>跟换主题后重新<code>hexo s</code>，页面无法显示内容，提示以下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &#x27;_layout.swig&#x27; %&#125; &#123;% import &#x27;_macro/post.swig&#x27; as post_template %&#125; &#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template %&#125; &#123;% block title %&#125;&#123;&#123; page.title &#125;&#125; | &#123;&#123; config.title &#125;&#125;&#123;% endblock %&#125; &#123;% block page_class %&#125;page-post-detail&#123;% endblock %&#125; &#123;% block content %&#125;</span><br><span class=\"line\">&#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class=\"line\">&#123;% if theme.jiathis %&#125; &#123;% include &#x27;_partials/share/jiathis.swig&#x27; %&#125; &#123;% elseif theme.baidushare %&#125; &#123;% include &#x27;_partials/share/baidushare.swig&#x27; %&#125; &#123;% elseif theme.add_this_id %&#125; &#123;% include &#x27;_partials/share/add-this.swig&#x27; %&#125; &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125; &#123;% include &#x27;_partials/share/duoshuo_share.swig&#x27; %&#125; &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125; &#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(true) &#125;&#125; &#123;% endblock %&#125; &#123;% block script_extra %&#125; &#123;% include &#x27;_scripts/pages/post-details.swig&#x27; %&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p>根据<a href=\"https://blog.csdn.net/qq_39898645/article/details/109181736\">博客</a>介绍，原因是hexo在5.0之后把swig给删除了需要自己手动安装，安装后解决了该问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>\n<p><strong>显示公式</strong></p>\n<p>由于我的博客中有大量公式，页面中无法显示。参考<a href=\"https://www.jianshu.com/p/9b9c241146bc\">博客</a>解决了该问题，问题的核心是配置好两个因素：mathjax和kramed。</p>\n<p>添加mathjax</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-math --save</span><br><span class=\"line\">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure>\n<p>换渲染引擎</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>\n<p>由于我之前瞎试，装过pandoc，也要一起卸掉：<code>npm uninstall hexo-renderer-pandoc --save</code></p>\n<p>修改渲染引擎的bug：到博客根目录下，找到node_modules\\kramed\\lib\\rules\\inline.js，第11行的 escape 变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/,</span><br><span class=\"line\">escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/,</span><br></pre></td></tr></table></figure>\n<p>第20行的em变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</span><br><span class=\"line\">em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</span><br></pre></td></tr></table></figure>\n<p>配置.\\themes\\next\\_config.yml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># MathJax Support</span><br><span class=\"line\">mathjax:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  per_page: true</span><br><span class=\"line\">  engine: mathjax</span><br><span class=\"line\">  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure>\n<p>在文章的Front-matter里打开mathjax开关</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hierarchical Attention Networks for Document Classification</span><br><span class=\"line\">date: 2021-06-23 09:26:17</span><br><span class=\"line\">tags:</span><br><span class=\"line\">    - 深度学习</span><br><span class=\"line\">    - Attention</span><br><span class=\"line\">    - Transformer</span><br><span class=\"line\">    - 机器学习</span><br><span class=\"line\">    - 每日论文</span><br><span class=\"line\">    - 经典算法</span><br><span class=\"line\">    - NLP</span><br><span class=\"line\">mathjax: true</span><br></pre></td></tr></table></figure>\n<p>重启以下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>到这里我的公式一部分能显示，一部分不能显示。继续查了查，发现别人也有这个情况，比如多行公式的时候显示不了，是因为不能出现连续的大括号<code>&#123;&#123;</code>​。我怀疑我的也是类似的问题，于是试了一下在我的<code>:公式</code>的结构中，把冒号删了，居然所有公式都正常显示了，然后我又把冒号加回去，还是都可以显示！！！不知道上面那堆设置需要时间起作用还是我的修改触发了什么，总之问题解决了。</p>\n<p>后面有查了一些博客之后，推测更有可能是浏览器缓存导致的改动生效的延迟，刷新网页的时候应该<code>ctrl+F5</code>。</p>\n<p>操作完这套后，<a href=\"http://localhost:4000\">本地预览</a>可以正常显示公式，但github.io上却不行（有可能是我clean&amp;generate没有放在最后一步）。根据<a href=\"https://segmentfault.com/q/1010000007410421\">大佬</a>的指示，我去查了一下github.io页面，确实有报错！</p>\n<p>1 error</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error with Permissions-Policy header: Unrecognized feature: &#x27;interest-cohort&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Mixed Content: The page at &#x27;https://wangdongdong122.github.io/&#x27; was loaded over HTTPS, but requested an insecure script &#x27;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#x27;. This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure>\n<p>2 page errors</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mixed content: load all resources via HTTPS to improve the security of your site</span><br><span class=\"line\">Even though the initial HTML page is loaded over a secure HTTPS connection, some resources like images, stylesheets or scripts are being accessed over an insecure HTTP connection. Usage of insecure resources is restricted to strengthen the security of your entire site.</span><br><span class=\"line\">To resolve this issue, load all resources over a secure HTTPS connection.</span><br><span class=\"line\">1 request</span><br><span class=\"line\">MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br><span class=\"line\">1 resource</span><br><span class=\"line\">Name\tRestriction Status</span><br><span class=\"line\">MathJax.js?config=TeX-AMS-MML_HTMLorMML\tblocked</span><br></pre></td></tr></table></figure>\n<p>google了一下错误内容，终于找到了<a href=\"https://github.com/github/pages-gem/issues/307\">解决方案</a>，原来只是<code>node_modules/hexo-renderer-mathjax/mathjax.html</code>中的 <code>&lt;script&gt;</code> 少了个type，终于搞定了！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Just if someone else face the same problem, you should use this:</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>最后再重启一次</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean #删除渲染</span><br><span class=\"line\">hexo generate #由source渲染成静态网页</span><br><span class=\"line\">hexo s #部署本地服务</span><br><span class=\"line\">hexo g ##推送到远程</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<pre><code>- 博客配置\n</code></pre><hr>\n<p>记录一下搭建博客的过程。</p>\n<!-- more -->\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>参考内容：<a href=\"https://www.jianshu.com/p/9bbae1d105be\">https://www.jianshu.com/p/9bbae1d105be</a></p>\n<h2 id=\"配置hexo与更换Next主题\"><a href=\"#配置hexo与更换Next主题\" class=\"headerlink\" title=\"配置hexo与更换Next主题\"></a>配置hexo与更换Next主题</h2><p><strong>下载主题</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>由于github被墙，使用代理科学上网后，clone经常报<code>OpenSSL SSL_connect</code>的错，因此我直接在网页上下载的zip包，解压到<code>themes/next</code>文件夹。</p>\n<p><strong>页面报错</strong></p>\n<p>跟换主题后重新<code>hexo s</code>，页面无法显示内容，提示以下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &#x27;_layout.swig&#x27; %&#125; &#123;% import &#x27;_macro/post.swig&#x27; as post_template %&#125; &#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template %&#125; &#123;% block title %&#125;&#123;&#123; page.title &#125;&#125; | &#123;&#123; config.title &#125;&#125;&#123;% endblock %&#125; &#123;% block page_class %&#125;page-post-detail&#123;% endblock %&#125; &#123;% block content %&#125;</span><br><span class=\"line\">&#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class=\"line\">&#123;% if theme.jiathis %&#125; &#123;% include &#x27;_partials/share/jiathis.swig&#x27; %&#125; &#123;% elseif theme.baidushare %&#125; &#123;% include &#x27;_partials/share/baidushare.swig&#x27; %&#125; &#123;% elseif theme.add_this_id %&#125; &#123;% include &#x27;_partials/share/add-this.swig&#x27; %&#125; &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125; &#123;% include &#x27;_partials/share/duoshuo_share.swig&#x27; %&#125; &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125; &#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(true) &#125;&#125; &#123;% endblock %&#125; &#123;% block script_extra %&#125; &#123;% include &#x27;_scripts/pages/post-details.swig&#x27; %&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p>根据<a href=\"https://blog.csdn.net/qq_39898645/article/details/109181736\">博客</a>介绍，原因是hexo在5.0之后把swig给删除了需要自己手动安装，安装后解决了该问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>\n<p><strong>显示公式</strong></p>\n<p>由于我的博客中有大量公式，页面中无法显示。参考<a href=\"https://www.jianshu.com/p/9b9c241146bc\">博客</a>解决了该问题，问题的核心是配置好两个因素：mathjax和kramed。</p>\n<p>添加mathjax</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-math --save</span><br><span class=\"line\">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure>\n<p>换渲染引擎</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>\n<p>由于我之前瞎试，装过pandoc，也要一起卸掉：<code>npm uninstall hexo-renderer-pandoc --save</code></p>\n<p>修改渲染引擎的bug：到博客根目录下，找到node_modules\\kramed\\lib\\rules\\inline.js，第11行的 escape 变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/,</span><br><span class=\"line\">escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/,</span><br></pre></td></tr></table></figure>\n<p>第20行的em变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</span><br><span class=\"line\">em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</span><br></pre></td></tr></table></figure>\n<p>配置.\\themes\\next\\_config.yml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># MathJax Support</span><br><span class=\"line\">mathjax:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  per_page: true</span><br><span class=\"line\">  engine: mathjax</span><br><span class=\"line\">  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure>\n<p>在文章的Front-matter里打开mathjax开关</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hierarchical Attention Networks for Document Classification</span><br><span class=\"line\">date: 2021-06-23 09:26:17</span><br><span class=\"line\">tags:</span><br><span class=\"line\">    - 深度学习</span><br><span class=\"line\">    - Attention</span><br><span class=\"line\">    - Transformer</span><br><span class=\"line\">    - 机器学习</span><br><span class=\"line\">    - 每日论文</span><br><span class=\"line\">    - 经典算法</span><br><span class=\"line\">    - NLP</span><br><span class=\"line\">mathjax: true</span><br></pre></td></tr></table></figure>\n<p>重启以下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>到这里我的公式一部分能显示，一部分不能显示。继续查了查，发现别人也有这个情况，比如多行公式的时候显示不了，是因为不能出现连续的大括号<code>&#123;&#123;</code>​。我怀疑我的也是类似的问题，于是试了一下在我的<code>:公式</code>的结构中，把冒号删了，居然所有公式都正常显示了，然后我又把冒号加回去，还是都可以显示！！！不知道上面那堆设置需要时间起作用还是我的修改触发了什么，总之问题解决了。</p>\n<p>后面有查了一些博客之后，推测更有可能是浏览器缓存导致的改动生效的延迟，刷新网页的时候应该<code>ctrl+F5</code>。</p>\n<p>操作完这套后，<a href=\"http://localhost:4000\">本地预览</a>可以正常显示公式，但github.io上却不行（有可能是我clean&amp;generate没有放在最后一步）。根据<a href=\"https://segmentfault.com/q/1010000007410421\">大佬</a>的指示，我去查了一下github.io页面，确实有报错！</p>\n<p>1 error</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error with Permissions-Policy header: Unrecognized feature: &#x27;interest-cohort&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Mixed Content: The page at &#x27;https://wangdongdong122.github.io/&#x27; was loaded over HTTPS, but requested an insecure script &#x27;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#x27;. This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure>\n<p>2 page errors</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mixed content: load all resources via HTTPS to improve the security of your site</span><br><span class=\"line\">Even though the initial HTML page is loaded over a secure HTTPS connection, some resources like images, stylesheets or scripts are being accessed over an insecure HTTP connection. Usage of insecure resources is restricted to strengthen the security of your entire site.</span><br><span class=\"line\">To resolve this issue, load all resources over a secure HTTPS connection.</span><br><span class=\"line\">1 request</span><br><span class=\"line\">MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br><span class=\"line\">1 resource</span><br><span class=\"line\">Name\tRestriction Status</span><br><span class=\"line\">MathJax.js?config=TeX-AMS-MML_HTMLorMML\tblocked</span><br></pre></td></tr></table></figure>\n<p>google了一下错误内容，终于找到了<a href=\"https://github.com/github/pages-gem/issues/307\">解决方案</a>，原来只是<code>node_modules/hexo-renderer-mathjax/mathjax.html</code>中的 <code>&lt;script&gt;</code> 少了个type，终于搞定了！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Just if someone else face the same problem, you should use this:</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>最后再重启一次</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean #删除渲染</span><br><span class=\"line\">hexo generate #由source渲染成静态网页</span><br><span class=\"line\">hexo s #部署本地服务</span><br><span class=\"line\">hexo g ##推送到远程</span><br></pre></td></tr></table></figure>"},{"title":"C语言学习","date":"2022-03-01T03:32:38.000Z","_content":"\nC语言入门\n\n<!-- more -->\n\n\n[TOC]\n\n# 环境与入门\n\n## 实例代码\n\n```c\n#include <stdio.h>\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   \n   return 0;\n}\n```\n\n1. 程序的第一行 *#include <stdio.h>* 是**预处理器指令**，告诉 C 编译器在实际编译之前要包含 stdio.h 文件。\n2. 下一行 *int main()* 是主函数，程序从这里开始执行。\n3. 下一行 /*...*/ 将会被编译器忽略，这里放置程序的注释内容。它们被称为程序的注释。\n4. 下一行 *printf(...)* 是 C 中另一个可用的函数，会在屏幕上显示消息 \"Hello, World!\"。\n5. 下一行 **return 0;** 终止 main() 函数，并返回值 0。\n\n##  编译&执行C程序\n\n1. 开一个文本编辑器，添加上述代码。\n2. 保存文件为 *hello.c*。\n3. 打开命令提示符，进入到保存文件所在的目录。\n4. 键入 *gcc hello.c*，输入回车，编译代码。\n5. 如果代码中没有错误，命令提示符会跳到下一行，并生成 *a.out* 可执行文件。\n6. 现在，键入 *a.out* 来执行程序。\n\n```shell\ngcc hello.c\n./a.out\n```\n\n如果是多个 c 代码的源码文件，编译方法如下：\n\n```\n$ gcc test1.c test2.c -o main.out\n$ ./main.out\n```\n\ntest1.c 与 test2.c 是两个源代码文件\n\n# C语言基本语法\n\n## 注释\n\n```c\n//单行注释\n/* 单行注释 */\n/* \n 多行注释\n 多行注释\n 多行注释\n */\n```\n\n必须以分号结尾\n\n## printf\n\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"打印整数 ： %d \\n\",2)\n}\n```\n\n\n\n| 格式字符 | 意义                                       |\n| :------- | :----------------------------------------- |\n| d        | 以十进制形式输出带符号整数(正数不输出符号) |\n| o        | 以八进制形式输出无符号整数(不输出前缀0)    |\n| x,X      | 以十六进制形式输出无符号整数(不输出前缀Ox) |\n| u        | 以十进制形式输出无符号整数                 |\n| f        | 以小数形式输出单、双精度实数               |\n| e,E      | 以指数形式输出单、双精度实数               |\n| g,G      | 以%f或%e中较短的输出宽度输出单、双精度实数 |\n| c        | 输出单个字符                               |\n| s        | 输出字符串                                 |\n| p        | 输出指针地址                               |\n| lu       | 32位无符号整数                             |\n| llu      | 64位无符号整数                             |\n\n## C数据类型\n\n| 序号 | 类型与描述                                                   |\n| :--- | :----------------------------------------------------------- |\n| 1    | **基本类型：** 它们是算术类型，包括两种类型：整数类型和浮点类型。 |\n| 2    | **枚举类型：** 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。 |\n| 3    | **void 类型：** 类型说明符 *void* 表明没有可用的值。         |\n| 4    | **派生类型：** 它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。 |\n\n一个bite占8bit\n\n| 类型        | 存储大小    | 值范围                                               |\n| :---------- | :---------- | :--------------------------------------------------- |\n| char        | 1 字节      | -128 到 127 或 0 到 255                              |\n| int         | 2 或 4 字节 | -32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647 |\n| short       | 2 字节      | -32,768 到 32,767                                    |\n| long        | 4 字节      | -2,147,483,648 到 2,147,483,647                      |\n| float       | 4 字节      | 1.2E-38 到 3.4E+38                                   |\n| double      | 8 字节      | 2.3E-308 到 1.7E+308                                 |\n| long double | 16 字节     | 3.4E-4932 到 1.1E+4932                               |\n\n## 变量的定义\n\n变量只不过是程序可操作性的存储区的名称，每个变量有特定的类型，类型决定了变量存储的大小和布局\n\n变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。\n\n```c\nint i,j,k;\n```\n\n## 变量的声明\n\n变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。\n\n```c\nextern int i; //声明，不是定义\nint i; //声明，也是定义\n```\n\n变量的声明有两种情况：\n\n- 1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。\n\n- 2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。\n\n  除非有extern关键字，否则都是变量的定义。\n\n> 如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。\n\n- C 中有两种类型的表达式：\n\n  1. **左值（lvalue）：**指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。\n  2. **右值（rvalue）：**术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。\n\n  变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。  \n\n## 整数常量\n\n整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。\n\n整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意\n\n>85         /* 十进制 */\n0213       /* 八进制 */\n0x4b       /* 十六进制 */\n30         /* 整数 */\n30u        /* 无符号整数 */\n30l        /* 长整数 */\n30ul       /* 无符号长整数 */\n\n## 浮点常量\n\n## 定义常量\n\n```c\n#define L1 10; //使用的覅额与处理器\ncount int a=10 ;\n```\n\n## 存储类\n\n存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：auto , register, static , extern\n\n```c\n{\n    auto int mount;\n}\n```\n\n\n\n ### auto 存储类\n\nauto存储类是所有局部变量默认的存储类，只能修饰局部变量\n\n \n\n### register 存储类\n\n**register** 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 '&' 运算符（因为它没有内存位置）。\n\n>寄存器只用于需要快速访问的变量，比如计数器\n\n### static 存储类\n\n**static** 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，\n\n> 使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。(只初始化一次)\n\nstatic 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。\n\n> 全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。\n\n### extern 存储类\n\n**extern** 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 **extern** 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。\n\n当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 *extern* 来得到已定义的变量或函数的引用。可以这么理解，\n\n> *extern* 是用来在另一个文件中声明一个全局变量或函数。\n\nextern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：\n\n## 运算符\n\n### 算数运算符\n\n| /                                     | 分子除以分母，向下取整 |      |\n| ------------------------------------- | ---------------------- | ---- |\n| a++ 先赋值后运算 ； ++ a 先运算后赋值 |                        |      |\n\n### 逻辑运算符\n\n&&   ， ||  ， ！\n\n### 杂项运算符\n\n| 运算符   | 描述             | 实例                                                |\n| :------- | :--------------- | :-------------------------------------------------- |\n| sizeof() | 返回变量的大小。 | sizeof(a) 将返回 4，其中 a 是整数。                 |\n| &        | 返回变量的地址。 | &a; 将给出变量的实际地址。                          |\n| *        | 指向一个变量。   | *a; 将指向一个变量。（a为地址，*\\*a为该地址的变量） |\n| ? :      | 条件表达式       | 如果条件为真 ? 则值为 X : 否则值为 Y                |\n\n## 判断\n\nif , if...else ,  switch\n\nC 语言把任何**非零**和**非空**的值假定为 **true**，把**零**或 **null** 假定为 **false**。\n\n> 运算符(三元运算符):  Exp1 ? Exp2 : Exp3;\n>\n> 如果exp1为真 则运行exp2，否则运行exp3\n\n## 循环\n\nwhile ,  do ... while , for\n\n> ``` c\n> for ( init; condition; increment )\n> {\n>    statement(s);\n> }\n> ```\n\n```c\n#include <stdio.h>\n \nint main ()\n{\n   /* for 循环执行 */\n   for( int a = 10; a < 20; a = a + 1 )\n   {\n      printf(\"a 的值： %d\\n\", a);\n   }\n \n   return 0;\n}\n```\n\n### 循环控制语句\n\n| 控制语句                                                     | 描述                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [break 语句](https://www.runoob.com/cprogramming/c-break-statement.html) | 终止**循环**或 **switch** 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。 |\n| [continue 语句](https://www.runoob.com/cprogramming/c-continue-statement.html) | 告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。   |\n| [goto 语句](https://www.runoob.com/cprogramming/c-goto-statement.html) | 将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。 |\n\n无限循环\n\n```c\n# include <stdio.h>\n\nint main()\n{\n    for (;;)\n    {\n        printf(\"一直执行\")\n    }\n}\n```\n\n## 函数\n\n每个 C 程序都至少有一个函数，即主函数 **main()** \n\n函数还有很多叫法，比如方法、子例程或程序，等等。\n\n```c\nreturn_type function_name( parameter list )\n{\n   body of the function\n}\n```\n\n在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：\n\n### 函数声明\n\n在函数调用之前要进行声明\n\n```c\nreturn_type function_name( parameter list );\n```\n\n针对上面定义的函数 max()，以下是函数声明：\n\n```\nint max(int num1, int num2);\n```\n\n在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：\n\n```\nint max(int, int);\n```\n\n### 函数调用\n\n传值调用，引用调用\n\n```c\n#include <stdio.h>\n \n/* 函数声明 */\nvoid swap(int *x, int *y); \nint main ()\n{\n   /* 局部变量定义 */\n   int a = 100;\n   int b = 200;\n   printf(\"交换前，a 的值： %d\\n\", a );\n   printf(\"交换前，b 的值： %d\\n\", b );\n   /* 调用函数来交换值\n    * &a 表示指向 a 的指针，即变量 a 的地址\n    * &b 表示指向 b 的指针，即变量 b 的地址\n   */\n   swap(&a, &b);\n   printf(\"交换后，a 的值： %d\\n\", a );\n   printf(\"交换后，b 的值： %d\\n\", b );\n   return 0;\n}\n```\n\n## 作用域规则\n\n**全局变量与局部变量在内存中的区别**：\n\n- 全局变量保存在内存的全局存储区中，占用静态的存储单元；\n- 局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。\n\n","source":"_posts/0_代码相关/C语言学习.md","raw":"---\ntitle: C语言学习\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nC语言入门\n\n<!-- more -->\n\n\n[TOC]\n\n# 环境与入门\n\n## 实例代码\n\n```c\n#include <stdio.h>\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   \n   return 0;\n}\n```\n\n1. 程序的第一行 *#include <stdio.h>* 是**预处理器指令**，告诉 C 编译器在实际编译之前要包含 stdio.h 文件。\n2. 下一行 *int main()* 是主函数，程序从这里开始执行。\n3. 下一行 /*...*/ 将会被编译器忽略，这里放置程序的注释内容。它们被称为程序的注释。\n4. 下一行 *printf(...)* 是 C 中另一个可用的函数，会在屏幕上显示消息 \"Hello, World!\"。\n5. 下一行 **return 0;** 终止 main() 函数，并返回值 0。\n\n##  编译&执行C程序\n\n1. 开一个文本编辑器，添加上述代码。\n2. 保存文件为 *hello.c*。\n3. 打开命令提示符，进入到保存文件所在的目录。\n4. 键入 *gcc hello.c*，输入回车，编译代码。\n5. 如果代码中没有错误，命令提示符会跳到下一行，并生成 *a.out* 可执行文件。\n6. 现在，键入 *a.out* 来执行程序。\n\n```shell\ngcc hello.c\n./a.out\n```\n\n如果是多个 c 代码的源码文件，编译方法如下：\n\n```\n$ gcc test1.c test2.c -o main.out\n$ ./main.out\n```\n\ntest1.c 与 test2.c 是两个源代码文件\n\n# C语言基本语法\n\n## 注释\n\n```c\n//单行注释\n/* 单行注释 */\n/* \n 多行注释\n 多行注释\n 多行注释\n */\n```\n\n必须以分号结尾\n\n## printf\n\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"打印整数 ： %d \\n\",2)\n}\n```\n\n\n\n| 格式字符 | 意义                                       |\n| :------- | :----------------------------------------- |\n| d        | 以十进制形式输出带符号整数(正数不输出符号) |\n| o        | 以八进制形式输出无符号整数(不输出前缀0)    |\n| x,X      | 以十六进制形式输出无符号整数(不输出前缀Ox) |\n| u        | 以十进制形式输出无符号整数                 |\n| f        | 以小数形式输出单、双精度实数               |\n| e,E      | 以指数形式输出单、双精度实数               |\n| g,G      | 以%f或%e中较短的输出宽度输出单、双精度实数 |\n| c        | 输出单个字符                               |\n| s        | 输出字符串                                 |\n| p        | 输出指针地址                               |\n| lu       | 32位无符号整数                             |\n| llu      | 64位无符号整数                             |\n\n## C数据类型\n\n| 序号 | 类型与描述                                                   |\n| :--- | :----------------------------------------------------------- |\n| 1    | **基本类型：** 它们是算术类型，包括两种类型：整数类型和浮点类型。 |\n| 2    | **枚举类型：** 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。 |\n| 3    | **void 类型：** 类型说明符 *void* 表明没有可用的值。         |\n| 4    | **派生类型：** 它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。 |\n\n一个bite占8bit\n\n| 类型        | 存储大小    | 值范围                                               |\n| :---------- | :---------- | :--------------------------------------------------- |\n| char        | 1 字节      | -128 到 127 或 0 到 255                              |\n| int         | 2 或 4 字节 | -32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647 |\n| short       | 2 字节      | -32,768 到 32,767                                    |\n| long        | 4 字节      | -2,147,483,648 到 2,147,483,647                      |\n| float       | 4 字节      | 1.2E-38 到 3.4E+38                                   |\n| double      | 8 字节      | 2.3E-308 到 1.7E+308                                 |\n| long double | 16 字节     | 3.4E-4932 到 1.1E+4932                               |\n\n## 变量的定义\n\n变量只不过是程序可操作性的存储区的名称，每个变量有特定的类型，类型决定了变量存储的大小和布局\n\n变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。\n\n```c\nint i,j,k;\n```\n\n## 变量的声明\n\n变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。\n\n```c\nextern int i; //声明，不是定义\nint i; //声明，也是定义\n```\n\n变量的声明有两种情况：\n\n- 1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。\n\n- 2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。\n\n  除非有extern关键字，否则都是变量的定义。\n\n> 如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。\n\n- C 中有两种类型的表达式：\n\n  1. **左值（lvalue）：**指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。\n  2. **右值（rvalue）：**术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。\n\n  变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。  \n\n## 整数常量\n\n整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。\n\n整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意\n\n>85         /* 十进制 */\n0213       /* 八进制 */\n0x4b       /* 十六进制 */\n30         /* 整数 */\n30u        /* 无符号整数 */\n30l        /* 长整数 */\n30ul       /* 无符号长整数 */\n\n## 浮点常量\n\n## 定义常量\n\n```c\n#define L1 10; //使用的覅额与处理器\ncount int a=10 ;\n```\n\n## 存储类\n\n存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：auto , register, static , extern\n\n```c\n{\n    auto int mount;\n}\n```\n\n\n\n ### auto 存储类\n\nauto存储类是所有局部变量默认的存储类，只能修饰局部变量\n\n \n\n### register 存储类\n\n**register** 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 '&' 运算符（因为它没有内存位置）。\n\n>寄存器只用于需要快速访问的变量，比如计数器\n\n### static 存储类\n\n**static** 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，\n\n> 使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。(只初始化一次)\n\nstatic 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。\n\n> 全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。\n\n### extern 存储类\n\n**extern** 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 **extern** 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。\n\n当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 *extern* 来得到已定义的变量或函数的引用。可以这么理解，\n\n> *extern* 是用来在另一个文件中声明一个全局变量或函数。\n\nextern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：\n\n## 运算符\n\n### 算数运算符\n\n| /                                     | 分子除以分母，向下取整 |      |\n| ------------------------------------- | ---------------------- | ---- |\n| a++ 先赋值后运算 ； ++ a 先运算后赋值 |                        |      |\n\n### 逻辑运算符\n\n&&   ， ||  ， ！\n\n### 杂项运算符\n\n| 运算符   | 描述             | 实例                                                |\n| :------- | :--------------- | :-------------------------------------------------- |\n| sizeof() | 返回变量的大小。 | sizeof(a) 将返回 4，其中 a 是整数。                 |\n| &        | 返回变量的地址。 | &a; 将给出变量的实际地址。                          |\n| *        | 指向一个变量。   | *a; 将指向一个变量。（a为地址，*\\*a为该地址的变量） |\n| ? :      | 条件表达式       | 如果条件为真 ? 则值为 X : 否则值为 Y                |\n\n## 判断\n\nif , if...else ,  switch\n\nC 语言把任何**非零**和**非空**的值假定为 **true**，把**零**或 **null** 假定为 **false**。\n\n> 运算符(三元运算符):  Exp1 ? Exp2 : Exp3;\n>\n> 如果exp1为真 则运行exp2，否则运行exp3\n\n## 循环\n\nwhile ,  do ... while , for\n\n> ``` c\n> for ( init; condition; increment )\n> {\n>    statement(s);\n> }\n> ```\n\n```c\n#include <stdio.h>\n \nint main ()\n{\n   /* for 循环执行 */\n   for( int a = 10; a < 20; a = a + 1 )\n   {\n      printf(\"a 的值： %d\\n\", a);\n   }\n \n   return 0;\n}\n```\n\n### 循环控制语句\n\n| 控制语句                                                     | 描述                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [break 语句](https://www.runoob.com/cprogramming/c-break-statement.html) | 终止**循环**或 **switch** 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。 |\n| [continue 语句](https://www.runoob.com/cprogramming/c-continue-statement.html) | 告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。   |\n| [goto 语句](https://www.runoob.com/cprogramming/c-goto-statement.html) | 将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。 |\n\n无限循环\n\n```c\n# include <stdio.h>\n\nint main()\n{\n    for (;;)\n    {\n        printf(\"一直执行\")\n    }\n}\n```\n\n## 函数\n\n每个 C 程序都至少有一个函数，即主函数 **main()** \n\n函数还有很多叫法，比如方法、子例程或程序，等等。\n\n```c\nreturn_type function_name( parameter list )\n{\n   body of the function\n}\n```\n\n在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：\n\n### 函数声明\n\n在函数调用之前要进行声明\n\n```c\nreturn_type function_name( parameter list );\n```\n\n针对上面定义的函数 max()，以下是函数声明：\n\n```\nint max(int num1, int num2);\n```\n\n在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：\n\n```\nint max(int, int);\n```\n\n### 函数调用\n\n传值调用，引用调用\n\n```c\n#include <stdio.h>\n \n/* 函数声明 */\nvoid swap(int *x, int *y); \nint main ()\n{\n   /* 局部变量定义 */\n   int a = 100;\n   int b = 200;\n   printf(\"交换前，a 的值： %d\\n\", a );\n   printf(\"交换前，b 的值： %d\\n\", b );\n   /* 调用函数来交换值\n    * &a 表示指向 a 的指针，即变量 a 的地址\n    * &b 表示指向 b 的指针，即变量 b 的地址\n   */\n   swap(&a, &b);\n   printf(\"交换后，a 的值： %d\\n\", a );\n   printf(\"交换后，b 的值： %d\\n\", b );\n   return 0;\n}\n```\n\n## 作用域规则\n\n**全局变量与局部变量在内存中的区别**：\n\n- 全局变量保存在内存的全局存储区中，占用静态的存储单元；\n- 局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。\n\n","slug":"0_代码相关/C语言学习","published":1,"updated":"2022-03-01T03:49:44.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4o002a8s329fqk4nrq","content":"<p>C语言入门</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"环境与入门\"><a href=\"#环境与入门\" class=\"headerlink\" title=\"环境与入门\"></a>环境与入门</h1><h2 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 我的第一个 C 程序 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello, World! \\n&quot;</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>程序的第一行 <em>#include <stdio.h></em> 是<strong>预处理器指令</strong>，告诉 C 编译器在实际编译之前要包含 stdio.h 文件。</li>\n<li>下一行 <em>int main()</em> 是主函数，程序从这里开始执行。</li>\n<li>下一行 /<em>…</em>/ 将会被编译器忽略，这里放置程序的注释内容。它们被称为程序的注释。</li>\n<li>下一行 <em>printf(…)</em> 是 C 中另一个可用的函数，会在屏幕上显示消息 “Hello, World!”。</li>\n<li>下一行 <strong>return 0;</strong> 终止 main() 函数，并返回值 0。</li>\n</ol>\n<h2 id=\"编译-amp-执行C程序\"><a href=\"#编译-amp-执行C程序\" class=\"headerlink\" title=\"编译&amp;执行C程序\"></a>编译&amp;执行C程序</h2><ol>\n<li>开一个文本编辑器，添加上述代码。</li>\n<li>保存文件为 <em>hello.c</em>。</li>\n<li>打开命令提示符，进入到保存文件所在的目录。</li>\n<li>键入 <em>gcc hello.c</em>，输入回车，编译代码。</li>\n<li>如果代码中没有错误，命令提示符会跳到下一行，并生成 <em>a.out</em> 可执行文件。</li>\n<li>现在，键入 <em>a.out</em> 来执行程序。</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc hello.c</span><br><span class=\"line\">./a.out</span><br></pre></td></tr></table></figure>\n<p>如果是多个 c 代码的源码文件，编译方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc test1.c test2.c -o main.out</span><br><span class=\"line\">$ ./main.out</span><br></pre></td></tr></table></figure>\n<p>test1.c 与 test2.c 是两个源代码文件</p>\n<h1 id=\"C语言基本语法\"><a href=\"#C语言基本语法\" class=\"headerlink\" title=\"C语言基本语法\"></a>C语言基本语法</h1><h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/* 单行注释 */</span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> 多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> 多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> 多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>必须以分号结尾</p>\n<h2 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;打印整数 ： %d \\n&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">格式字符</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\">以十进制形式输出带符号整数(正数不输出符号)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">o</td>\n<td style=\"text-align:left\">以八进制形式输出无符号整数(不输出前缀0)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x,X</td>\n<td style=\"text-align:left\">以十六进制形式输出无符号整数(不输出前缀Ox)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">u</td>\n<td style=\"text-align:left\">以十进制形式输出无符号整数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">f</td>\n<td style=\"text-align:left\">以小数形式输出单、双精度实数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">e,E</td>\n<td style=\"text-align:left\">以指数形式输出单、双精度实数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g,G</td>\n<td style=\"text-align:left\">以%f或%e中较短的输出宽度输出单、双精度实数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">c</td>\n<td style=\"text-align:left\">输出单个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:left\">输出字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\">输出指针地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lu</td>\n<td style=\"text-align:left\">32位无符号整数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">llu</td>\n<td style=\"text-align:left\">64位无符号整数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"C数据类型\"><a href=\"#C数据类型\" class=\"headerlink\" title=\"C数据类型\"></a>C数据类型</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">类型与描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>基本类型：</strong> 它们是算术类型，包括两种类型：整数类型和浮点类型。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>枚举类型：</strong> 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>void 类型：</strong> 类型说明符 <em>void</em> 表明没有可用的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>派生类型：</strong> 它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>一个bite占8bit</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127 或 0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">-2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">1.2E-38 到 3.4E+38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8 字节</td>\n<td style=\"text-align:left\">2.3E-308 到 1.7E+308</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long double</td>\n<td style=\"text-align:left\">16 字节</td>\n<td style=\"text-align:left\">3.4E-4932 到 1.1E+4932</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"变量的定义\"><a href=\"#变量的定义\" class=\"headerlink\" title=\"变量的定义\"></a>变量的定义</h2><p>变量只不过是程序可操作性的存储区的名称，每个变量有特定的类型，类型决定了变量存储的大小和布局</p>\n<p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i,j,k;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量的声明\"><a href=\"#变量的声明\" class=\"headerlink\" title=\"变量的声明\"></a>变量的声明</h2><p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">//声明，不是定义</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i; <span class=\"comment\">//声明，也是定义</span></span><br></pre></td></tr></table></figure>\n<p>变量的声明有两种情况：</p>\n<ul>\n<li><p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p>\n</li>\n<li><p>2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。</p>\n<p>除非有extern关键字，否则都是变量的定义。</p>\n</li>\n</ul>\n<blockquote>\n<p>如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。</p>\n</blockquote>\n<ul>\n<li><p>C 中有两种类型的表达式：</p>\n<ol>\n<li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li>\n<li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li>\n</ol>\n<p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。  </p>\n</li>\n</ul>\n<h2 id=\"整数常量\"><a href=\"#整数常量\" class=\"headerlink\" title=\"整数常量\"></a>整数常量</h2><p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p>\n<p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意</p>\n<blockquote>\n<p>85         /<em> 十进制 </em>/<br>0213       /<em> 八进制 </em>/<br>0x4b       /<em> 十六进制 </em>/<br>30         /<em> 整数 </em>/<br>30u        /<em> 无符号整数 </em>/<br>30l        /<em> 长整数 </em>/<br>30ul       /<em> 无符号长整数 </em>/</p>\n</blockquote>\n<h2 id=\"浮点常量\"><a href=\"#浮点常量\" class=\"headerlink\" title=\"浮点常量\"></a>浮点常量</h2><h2 id=\"定义常量\"><a href=\"#定义常量\" class=\"headerlink\" title=\"定义常量\"></a>定义常量</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> L1 10; <span class=\"comment\">//使用的覅额与处理器</span></span></span><br><span class=\"line\">count <span class=\"keyword\">int</span> a=<span class=\"number\">10</span> ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"存储类\"><a href=\"#存储类\" class=\"headerlink\" title=\"存储类\"></a>存储类</h2><p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：auto , register, static , extern</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> <span class=\"keyword\">int</span> mount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"auto-存储类\"><a href=\"#auto-存储类\" class=\"headerlink\" title=\"auto 存储类\"></a>auto 存储类</h3><p>auto存储类是所有局部变量默认的存储类，只能修饰局部变量</p>\n<h3 id=\"register-存储类\"><a href=\"#register-存储类\" class=\"headerlink\" title=\"register 存储类\"></a>register 存储类</h3><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p>\n<blockquote>\n<p>寄存器只用于需要快速访问的变量，比如计数器</p>\n</blockquote>\n<h3 id=\"static-存储类\"><a href=\"#static-存储类\" class=\"headerlink\" title=\"static 存储类\"></a>static 存储类</h3><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，</p>\n<blockquote>\n<p>使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。(只初始化一次)</p>\n</blockquote>\n<p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>\n<blockquote>\n<p>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。</p>\n</blockquote>\n<h3 id=\"extern-存储类\"><a href=\"#extern-存储类\" class=\"headerlink\" title=\"extern 存储类\"></a>extern 存储类</h3><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 <strong>extern</strong> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>\n<p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，</p>\n<blockquote>\n<p><em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p>\n</blockquote>\n<p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>/</th>\n<th>分子除以分母，向下取整</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a++ 先赋值后运算 ； ++ a 先运算后赋值</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>&amp;&amp;   ， ||  ， ！</p>\n<h3 id=\"杂项运算符\"><a href=\"#杂项运算符\" class=\"headerlink\" title=\"杂项运算符\"></a>杂项运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">sizeof()</td>\n<td style=\"text-align:left\">返回变量的大小。</td>\n<td style=\"text-align:left\">sizeof(a) 将返回 4，其中 a 是整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;</td>\n<td style=\"text-align:left\">返回变量的地址。</td>\n<td style=\"text-align:left\">&a; 将给出变量的实际地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">指向一个变量。</td>\n<td style=\"text-align:left\"><em>a; 将指向一个变量。（a为地址，</em>*a为该地址的变量）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">? :</td>\n<td style=\"text-align:left\">条件表达式</td>\n<td style=\"text-align:left\">如果条件为真 ? 则值为 X : 否则值为 Y</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"判断\"><a href=\"#判断\" class=\"headerlink\" title=\"判断\"></a>判断</h2><p>if , if…else ,  switch</p>\n<p>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为 <strong>true</strong>，把<strong>零</strong>或 <strong>null</strong> 假定为 <strong>false</strong>。</p>\n<blockquote>\n<p>运算符(三元运算符):  Exp1 ? Exp2 : Exp3;</p>\n<p>如果exp1为真 则运行exp2，否则运行exp3</p>\n</blockquote>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>while ,  do … while , for</p>\n<blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( init; condition; increment )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   statement(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* for 循环执行 */</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>; a &lt; <span class=\"number\">20</span>; a = a + <span class=\"number\">1</span> )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a 的值： %d\\n&quot;</span>, a);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环控制语句\"><a href=\"#循环控制语句\" class=\"headerlink\" title=\"循环控制语句\"></a>循环控制语句</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">控制语句</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cprogramming/c-break-statement.html\">break 语句</a></td>\n<td style=\"text-align:left\">终止<strong>循环</strong>或 <strong>switch</strong> 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cprogramming/c-continue-statement.html\">continue 语句</a></td>\n<td style=\"text-align:left\">告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cprogramming/c-goto-statement.html\">goto 语句</a></td>\n<td style=\"text-align:left\">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>无限循环</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;一直执行&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>每个 C 程序都至少有一个函数，即主函数 <strong>main()</strong> </p>\n<p>函数还有很多叫法，比如方法、子例程或程序，等等。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">return_type <span class=\"title\">function_name</span><span class=\"params\">( parameter <span class=\"built_in\">list</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   body of the function</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p>\n<h3 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h3><p>在函数调用之前要进行声明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">return_type <span class=\"title\">function_name</span><span class=\"params\">( parameter <span class=\"built_in\">list</span> )</span></span>;</span><br></pre></td></tr></table></figure>\n<p>针对上面定义的函数 max()，以下是函数声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int max(int num1, int num2);</span><br></pre></td></tr></table></figure>\n<p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int max(int, int);</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h3><p>传值调用，引用调用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 函数声明 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> *y)</span></span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 局部变量定义 */</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;交换前，a 的值： %d\\n&quot;</span>, a );</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;交换前，b 的值： %d\\n&quot;</span>, b );</span><br><span class=\"line\">   <span class=\"comment\">/* 调用函数来交换值</span></span><br><span class=\"line\"><span class=\"comment\">    * &amp;a 表示指向 a 的指针，即变量 a 的地址</span></span><br><span class=\"line\"><span class=\"comment\">    * &amp;b 表示指向 b 的指针，即变量 b 的地址</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">   swap(&amp;a, &amp;b);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;交换后，a 的值： %d\\n&quot;</span>, a );</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;交换后，b 的值： %d\\n&quot;</span>, b );</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域规则\"><a href=\"#作用域规则\" class=\"headerlink\" title=\"作用域规则\"></a>作用域规则</h2><p><strong>全局变量与局部变量在内存中的区别</strong>：</p>\n<ul>\n<li>全局变量保存在内存的全局存储区中，占用静态的存储单元；</li>\n<li>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>C语言入门</p>","more":"<p>[TOC]</p>\n<h1 id=\"环境与入门\"><a href=\"#环境与入门\" class=\"headerlink\" title=\"环境与入门\"></a>环境与入门</h1><h2 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 我的第一个 C 程序 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello, World! \\n&quot;</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>程序的第一行 <em>#include <stdio.h></em> 是<strong>预处理器指令</strong>，告诉 C 编译器在实际编译之前要包含 stdio.h 文件。</li>\n<li>下一行 <em>int main()</em> 是主函数，程序从这里开始执行。</li>\n<li>下一行 /<em>…</em>/ 将会被编译器忽略，这里放置程序的注释内容。它们被称为程序的注释。</li>\n<li>下一行 <em>printf(…)</em> 是 C 中另一个可用的函数，会在屏幕上显示消息 “Hello, World!”。</li>\n<li>下一行 <strong>return 0;</strong> 终止 main() 函数，并返回值 0。</li>\n</ol>\n<h2 id=\"编译-amp-执行C程序\"><a href=\"#编译-amp-执行C程序\" class=\"headerlink\" title=\"编译&amp;执行C程序\"></a>编译&amp;执行C程序</h2><ol>\n<li>开一个文本编辑器，添加上述代码。</li>\n<li>保存文件为 <em>hello.c</em>。</li>\n<li>打开命令提示符，进入到保存文件所在的目录。</li>\n<li>键入 <em>gcc hello.c</em>，输入回车，编译代码。</li>\n<li>如果代码中没有错误，命令提示符会跳到下一行，并生成 <em>a.out</em> 可执行文件。</li>\n<li>现在，键入 <em>a.out</em> 来执行程序。</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc hello.c</span><br><span class=\"line\">./a.out</span><br></pre></td></tr></table></figure>\n<p>如果是多个 c 代码的源码文件，编译方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc test1.c test2.c -o main.out</span><br><span class=\"line\">$ ./main.out</span><br></pre></td></tr></table></figure>\n<p>test1.c 与 test2.c 是两个源代码文件</p>\n<h1 id=\"C语言基本语法\"><a href=\"#C语言基本语法\" class=\"headerlink\" title=\"C语言基本语法\"></a>C语言基本语法</h1><h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/* 单行注释 */</span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> 多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> 多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> 多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>必须以分号结尾</p>\n<h2 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;打印整数 ： %d \\n&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">格式字符</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\">以十进制形式输出带符号整数(正数不输出符号)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">o</td>\n<td style=\"text-align:left\">以八进制形式输出无符号整数(不输出前缀0)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x,X</td>\n<td style=\"text-align:left\">以十六进制形式输出无符号整数(不输出前缀Ox)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">u</td>\n<td style=\"text-align:left\">以十进制形式输出无符号整数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">f</td>\n<td style=\"text-align:left\">以小数形式输出单、双精度实数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">e,E</td>\n<td style=\"text-align:left\">以指数形式输出单、双精度实数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g,G</td>\n<td style=\"text-align:left\">以%f或%e中较短的输出宽度输出单、双精度实数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">c</td>\n<td style=\"text-align:left\">输出单个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:left\">输出字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\">输出指针地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lu</td>\n<td style=\"text-align:left\">32位无符号整数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">llu</td>\n<td style=\"text-align:left\">64位无符号整数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"C数据类型\"><a href=\"#C数据类型\" class=\"headerlink\" title=\"C数据类型\"></a>C数据类型</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">类型与描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>基本类型：</strong> 它们是算术类型，包括两种类型：整数类型和浮点类型。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>枚举类型：</strong> 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>void 类型：</strong> 类型说明符 <em>void</em> 表明没有可用的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>派生类型：</strong> 它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>一个bite占8bit</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127 或 0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">-2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">1.2E-38 到 3.4E+38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8 字节</td>\n<td style=\"text-align:left\">2.3E-308 到 1.7E+308</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long double</td>\n<td style=\"text-align:left\">16 字节</td>\n<td style=\"text-align:left\">3.4E-4932 到 1.1E+4932</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"变量的定义\"><a href=\"#变量的定义\" class=\"headerlink\" title=\"变量的定义\"></a>变量的定义</h2><p>变量只不过是程序可操作性的存储区的名称，每个变量有特定的类型，类型决定了变量存储的大小和布局</p>\n<p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i,j,k;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量的声明\"><a href=\"#变量的声明\" class=\"headerlink\" title=\"变量的声明\"></a>变量的声明</h2><p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">//声明，不是定义</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i; <span class=\"comment\">//声明，也是定义</span></span><br></pre></td></tr></table></figure>\n<p>变量的声明有两种情况：</p>\n<ul>\n<li><p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p>\n</li>\n<li><p>2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。</p>\n<p>除非有extern关键字，否则都是变量的定义。</p>\n</li>\n</ul>\n<blockquote>\n<p>如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。</p>\n</blockquote>\n<ul>\n<li><p>C 中有两种类型的表达式：</p>\n<ol>\n<li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li>\n<li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li>\n</ol>\n<p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。  </p>\n</li>\n</ul>\n<h2 id=\"整数常量\"><a href=\"#整数常量\" class=\"headerlink\" title=\"整数常量\"></a>整数常量</h2><p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p>\n<p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意</p>\n<blockquote>\n<p>85         /<em> 十进制 </em>/<br>0213       /<em> 八进制 </em>/<br>0x4b       /<em> 十六进制 </em>/<br>30         /<em> 整数 </em>/<br>30u        /<em> 无符号整数 </em>/<br>30l        /<em> 长整数 </em>/<br>30ul       /<em> 无符号长整数 </em>/</p>\n</blockquote>\n<h2 id=\"浮点常量\"><a href=\"#浮点常量\" class=\"headerlink\" title=\"浮点常量\"></a>浮点常量</h2><h2 id=\"定义常量\"><a href=\"#定义常量\" class=\"headerlink\" title=\"定义常量\"></a>定义常量</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> L1 10; <span class=\"comment\">//使用的覅额与处理器</span></span></span><br><span class=\"line\">count <span class=\"keyword\">int</span> a=<span class=\"number\">10</span> ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"存储类\"><a href=\"#存储类\" class=\"headerlink\" title=\"存储类\"></a>存储类</h2><p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：auto , register, static , extern</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> <span class=\"keyword\">int</span> mount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"auto-存储类\"><a href=\"#auto-存储类\" class=\"headerlink\" title=\"auto 存储类\"></a>auto 存储类</h3><p>auto存储类是所有局部变量默认的存储类，只能修饰局部变量</p>\n<h3 id=\"register-存储类\"><a href=\"#register-存储类\" class=\"headerlink\" title=\"register 存储类\"></a>register 存储类</h3><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p>\n<blockquote>\n<p>寄存器只用于需要快速访问的变量，比如计数器</p>\n</blockquote>\n<h3 id=\"static-存储类\"><a href=\"#static-存储类\" class=\"headerlink\" title=\"static 存储类\"></a>static 存储类</h3><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，</p>\n<blockquote>\n<p>使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。(只初始化一次)</p>\n</blockquote>\n<p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>\n<blockquote>\n<p>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。</p>\n</blockquote>\n<h3 id=\"extern-存储类\"><a href=\"#extern-存储类\" class=\"headerlink\" title=\"extern 存储类\"></a>extern 存储类</h3><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 <strong>extern</strong> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>\n<p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，</p>\n<blockquote>\n<p><em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p>\n</blockquote>\n<p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>/</th>\n<th>分子除以分母，向下取整</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a++ 先赋值后运算 ； ++ a 先运算后赋值</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>&amp;&amp;   ， ||  ， ！</p>\n<h3 id=\"杂项运算符\"><a href=\"#杂项运算符\" class=\"headerlink\" title=\"杂项运算符\"></a>杂项运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">sizeof()</td>\n<td style=\"text-align:left\">返回变量的大小。</td>\n<td style=\"text-align:left\">sizeof(a) 将返回 4，其中 a 是整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;</td>\n<td style=\"text-align:left\">返回变量的地址。</td>\n<td style=\"text-align:left\">&a; 将给出变量的实际地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">指向一个变量。</td>\n<td style=\"text-align:left\"><em>a; 将指向一个变量。（a为地址，</em>*a为该地址的变量）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">? :</td>\n<td style=\"text-align:left\">条件表达式</td>\n<td style=\"text-align:left\">如果条件为真 ? 则值为 X : 否则值为 Y</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"判断\"><a href=\"#判断\" class=\"headerlink\" title=\"判断\"></a>判断</h2><p>if , if…else ,  switch</p>\n<p>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为 <strong>true</strong>，把<strong>零</strong>或 <strong>null</strong> 假定为 <strong>false</strong>。</p>\n<blockquote>\n<p>运算符(三元运算符):  Exp1 ? Exp2 : Exp3;</p>\n<p>如果exp1为真 则运行exp2，否则运行exp3</p>\n</blockquote>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>while ,  do … while , for</p>\n<blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( init; condition; increment )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   statement(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* for 循环执行 */</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>; a &lt; <span class=\"number\">20</span>; a = a + <span class=\"number\">1</span> )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a 的值： %d\\n&quot;</span>, a);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环控制语句\"><a href=\"#循环控制语句\" class=\"headerlink\" title=\"循环控制语句\"></a>循环控制语句</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">控制语句</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cprogramming/c-break-statement.html\">break 语句</a></td>\n<td style=\"text-align:left\">终止<strong>循环</strong>或 <strong>switch</strong> 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cprogramming/c-continue-statement.html\">continue 语句</a></td>\n<td style=\"text-align:left\">告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cprogramming/c-goto-statement.html\">goto 语句</a></td>\n<td style=\"text-align:left\">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>无限循环</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;一直执行&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>每个 C 程序都至少有一个函数，即主函数 <strong>main()</strong> </p>\n<p>函数还有很多叫法，比如方法、子例程或程序，等等。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">return_type <span class=\"title\">function_name</span><span class=\"params\">( parameter <span class=\"built_in\">list</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   body of the function</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p>\n<h3 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h3><p>在函数调用之前要进行声明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">return_type <span class=\"title\">function_name</span><span class=\"params\">( parameter <span class=\"built_in\">list</span> )</span></span>;</span><br></pre></td></tr></table></figure>\n<p>针对上面定义的函数 max()，以下是函数声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int max(int num1, int num2);</span><br></pre></td></tr></table></figure>\n<p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int max(int, int);</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h3><p>传值调用，引用调用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* 函数声明 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> *y)</span></span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 局部变量定义 */</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;交换前，a 的值： %d\\n&quot;</span>, a );</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;交换前，b 的值： %d\\n&quot;</span>, b );</span><br><span class=\"line\">   <span class=\"comment\">/* 调用函数来交换值</span></span><br><span class=\"line\"><span class=\"comment\">    * &amp;a 表示指向 a 的指针，即变量 a 的地址</span></span><br><span class=\"line\"><span class=\"comment\">    * &amp;b 表示指向 b 的指针，即变量 b 的地址</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">   swap(&amp;a, &amp;b);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;交换后，a 的值： %d\\n&quot;</span>, a );</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;交换后，b 的值： %d\\n&quot;</span>, b );</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域规则\"><a href=\"#作用域规则\" class=\"headerlink\" title=\"作用域规则\"></a>作用域规则</h2><p><strong>全局变量与局部变量在内存中的区别</strong>：</p>\n<ul>\n<li>全局变量保存在内存的全局存储区中，占用静态的存储单元；</li>\n<li>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。</li>\n</ul>"},{"title":"VPN搭建","date":"2022-03-01T03:32:38.000Z","_content":"\n科学搭建~~~\n\n<!-- more -->\n\n\n VPN搭建\n\n[TOC]\n\n[**https://zoomyale.com/2016/vultr_and_ss/**](https://zoomyale.com/2016/vultr_and_ss/)\n\n#配置服务器shadowsocks\n\n```bash\nwget https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh #从github下载脚本（点击github对应文件raw，新网页的链接）\n\nchmod +x shadowsocks-all.sh  #给执行权限\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n\n[repositry 链接](https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh)\n\n- 用python版本安装\n- 不使用混淆插件\n- info在/etc/shadowsocks-python文件夹下\n- 修改端口后要 检查服务器shadowsocks是否运行\n\n```bash\n/etc/init.d/shadowsocks-libev status\n```\n\n置信息\n\n```bash\nnano /etc/shadowsocks-libev/config.json\n```\n\n#问题排查\n\n如果某天你的 ss 突然无法使用了，很可能就是端口被封了。\n\n这时你可以直接在这里，将端口修改为 1-65535 间任意其他数字。编辑完成后，按 Ctrl + X ，再输入 Y 并回车确认退出。\n\n```bash\nnano /etc/shadowsocks-libev/config.json\n```\n\n需注意的是，如果你更新了配置文件，得重启 ss 才能生效。重启命令如下：\n\n```bash\n/etc/init.d/shadowsocks-libev restart\n```\n\n\n\n\n\n \n\n \n\n\n\n\n\n\n\n\n\n","source":"_posts/0_代码相关/VPN搭建.md","raw":"---\ntitle: VPN搭建\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n科学搭建~~~\n\n<!-- more -->\n\n\n VPN搭建\n\n[TOC]\n\n[**https://zoomyale.com/2016/vultr_and_ss/**](https://zoomyale.com/2016/vultr_and_ss/)\n\n#配置服务器shadowsocks\n\n```bash\nwget https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh #从github下载脚本（点击github对应文件raw，新网页的链接）\n\nchmod +x shadowsocks-all.sh  #给执行权限\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n\n[repositry 链接](https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh)\n\n- 用python版本安装\n- 不使用混淆插件\n- info在/etc/shadowsocks-python文件夹下\n- 修改端口后要 检查服务器shadowsocks是否运行\n\n```bash\n/etc/init.d/shadowsocks-libev status\n```\n\n置信息\n\n```bash\nnano /etc/shadowsocks-libev/config.json\n```\n\n#问题排查\n\n如果某天你的 ss 突然无法使用了，很可能就是端口被封了。\n\n这时你可以直接在这里，将端口修改为 1-65535 间任意其他数字。编辑完成后，按 Ctrl + X ，再输入 Y 并回车确认退出。\n\n```bash\nnano /etc/shadowsocks-libev/config.json\n```\n\n需注意的是，如果你更新了配置文件，得重启 ss 才能生效。重启命令如下：\n\n```bash\n/etc/init.d/shadowsocks-libev restart\n```\n\n\n\n\n\n \n\n \n\n\n\n\n\n\n\n\n\n","slug":"0_代码相关/VPN搭建","published":1,"updated":"2022-03-01T03:54:56.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4p002d8s323p88bhjm","content":"<p>科学搭建~~~</p>\n<span id=\"more\"></span>\n<p> VPN搭建</p>\n<p>[TOC]</p>\n<p><a href=\"https://zoomyale.com/2016/vultr_and_ss/\"><strong>https://zoomyale.com/2016/vultr_and_ss/</strong></a></p>\n<h1 id=\"配置服务器shadowsocks\"><a href=\"#配置服务器shadowsocks\" class=\"headerlink\" title=\"配置服务器shadowsocks\"></a>配置服务器shadowsocks</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh <span class=\"comment\">#从github下载脚本（点击github对应文件raw，新网页的链接）</span></span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocks-all.sh  <span class=\"comment\">#给执行权限</span></span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\">repositry 链接</a></p>\n<ul>\n<li>用python版本安装</li>\n<li>不使用混淆插件</li>\n<li>info在/etc/shadowsocks-python文件夹下</li>\n<li>修改端口后要 检查服务器shadowsocks是否运行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/shadowsocks-libev status</span><br></pre></td></tr></table></figure>\n<p>置信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h1><p>如果某天你的 ss 突然无法使用了，很可能就是端口被封了。</p>\n<p>这时你可以直接在这里，将端口修改为 1-65535 间任意其他数字。编辑完成后，按 Ctrl + X ，再输入 Y 并回车确认退出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>\n<p>需注意的是，如果你更新了配置文件，得重启 ss 才能生效。重启命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/shadowsocks-libev restart</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>科学搭建~~~</p>","more":"<p> VPN搭建</p>\n<p>[TOC]</p>\n<p><a href=\"https://zoomyale.com/2016/vultr_and_ss/\"><strong>https://zoomyale.com/2016/vultr_and_ss/</strong></a></p>\n<h1 id=\"配置服务器shadowsocks\"><a href=\"#配置服务器shadowsocks\" class=\"headerlink\" title=\"配置服务器shadowsocks\"></a>配置服务器shadowsocks</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh <span class=\"comment\">#从github下载脚本（点击github对应文件raw，新网页的链接）</span></span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocks-all.sh  <span class=\"comment\">#给执行权限</span></span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\">repositry 链接</a></p>\n<ul>\n<li>用python版本安装</li>\n<li>不使用混淆插件</li>\n<li>info在/etc/shadowsocks-python文件夹下</li>\n<li>修改端口后要 检查服务器shadowsocks是否运行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/shadowsocks-libev status</span><br></pre></td></tr></table></figure>\n<p>置信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h1><p>如果某天你的 ss 突然无法使用了，很可能就是端口被封了。</p>\n<p>这时你可以直接在这里，将端口修改为 1-65535 间任意其他数字。编辑完成后，按 Ctrl + X ，再输入 Y 并回车确认退出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>\n<p>需注意的是，如果你更新了配置文件，得重启 ss 才能生效。重启命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/shadowsocks-libev restart</span><br></pre></td></tr></table></figure>"},{"title":"XGB","date":"2022-03-01T03:32:38.000Z","_content":"\nxgb包函数\n\n<!-- more -->\n\n\n# xgboost.sklearn.XGBClassifier\n\n## f_score\n\n```python\nfrom xgboost.sklearn import XGBClassifier\n\nmodel = XGBClassifier(**params)\nmodel.fit(x_train, y_train, eval_set=watchlist,  # 训练模型\n          eval_metric=\"logloss\",\n          early_stopping_rounds=30,\n          verbose=True)\n# feature importance 方法一\nimportance =model.get_booster().get_fscore()  #返回字典\n```\n\n结果（特征分叉次数）：\n\n![1565232108098](./pics/XGB.assets/1565232108098.png)\n\n```python\nimpo=model.feature_importances_ #返回array\n```\n\n结果（特征分叉次数占比）：\n\n![1565232794674](./pics/XGB.assets/1565232794674.png)\n\n\n\n#xgboost\n\n```python\nimport xgboost as xgb\nxgb_model = xgb.train (params, dtrain, num_boost_round, evals=watchlist, early_stopping_rounds=early_stopping_rounds, verbose_eval=True)\n\n# feature importance\nimportance =xgb_model.get_fscore() #返回字典\n```\n\n结果：\n\n![1565232255682](./pics/XGB.assets/1565232255682.png)\n\n","source":"_posts/0_代码相关/XGB.md","raw":"---\ntitle: XGB\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nxgb包函数\n\n<!-- more -->\n\n\n# xgboost.sklearn.XGBClassifier\n\n## f_score\n\n```python\nfrom xgboost.sklearn import XGBClassifier\n\nmodel = XGBClassifier(**params)\nmodel.fit(x_train, y_train, eval_set=watchlist,  # 训练模型\n          eval_metric=\"logloss\",\n          early_stopping_rounds=30,\n          verbose=True)\n# feature importance 方法一\nimportance =model.get_booster().get_fscore()  #返回字典\n```\n\n结果（特征分叉次数）：\n\n![1565232108098](./pics/XGB.assets/1565232108098.png)\n\n```python\nimpo=model.feature_importances_ #返回array\n```\n\n结果（特征分叉次数占比）：\n\n![1565232794674](./pics/XGB.assets/1565232794674.png)\n\n\n\n#xgboost\n\n```python\nimport xgboost as xgb\nxgb_model = xgb.train (params, dtrain, num_boost_round, evals=watchlist, early_stopping_rounds=early_stopping_rounds, verbose_eval=True)\n\n# feature importance\nimportance =xgb_model.get_fscore() #返回字典\n```\n\n结果：\n\n![1565232255682](./pics/XGB.assets/1565232255682.png)\n\n","slug":"0_代码相关/XGB","published":1,"updated":"2022-03-01T03:55:10.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4p002g8s32h4iec0jr","content":"<p>xgb包函数</p>\n<span id=\"more\"></span>\n<h1 id=\"xgboost-sklearn-XGBClassifier\"><a href=\"#xgboost-sklearn-XGBClassifier\" class=\"headerlink\" title=\"xgboost.sklearn.XGBClassifier\"></a>xgboost.sklearn.XGBClassifier</h1><h2 id=\"f-score\"><a href=\"#f-score\" class=\"headerlink\" title=\"f_score\"></a>f_score</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> xgboost.sklearn <span class=\"keyword\">import</span> XGBClassifier</span><br><span class=\"line\"></span><br><span class=\"line\">model = XGBClassifier(**params)</span><br><span class=\"line\">model.fit(x_train, y_train, eval_set=watchlist,  <span class=\"comment\"># 训练模型</span></span><br><span class=\"line\">          eval_metric=<span class=\"string\">&quot;logloss&quot;</span>,</span><br><span class=\"line\">          early_stopping_rounds=<span class=\"number\">30</span>,</span><br><span class=\"line\">          verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># feature importance 方法一</span></span><br><span class=\"line\">importance =model.get_booster().get_fscore()  <span class=\"comment\">#返回字典</span></span><br></pre></td></tr></table></figure>\n<p>结果（特征分叉次数）：</p>\n<p><img src=\"./pics/XGB.assets/1565232108098.png\" alt=\"1565232108098\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impo=model.feature_importances_ <span class=\"comment\">#返回array</span></span><br></pre></td></tr></table></figure>\n<p>结果（特征分叉次数占比）：</p>\n<p><img src=\"./pics/XGB.assets/1565232794674.png\" alt=\"1565232794674\"></p>\n<h1 id=\"xgboost\"><a href=\"#xgboost\" class=\"headerlink\" title=\"xgboost\"></a>xgboost</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\">xgb_model = xgb.train (params, dtrain, num_boost_round, evals=watchlist, early_stopping_rounds=early_stopping_rounds, verbose_eval=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># feature importance</span></span><br><span class=\"line\">importance =xgb_model.get_fscore() <span class=\"comment\">#返回字典</span></span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<p><img src=\"./pics/XGB.assets/1565232255682.png\" alt=\"1565232255682\"></p>\n","site":{"data":{}},"excerpt":"<p>xgb包函数</p>","more":"<h1 id=\"xgboost-sklearn-XGBClassifier\"><a href=\"#xgboost-sklearn-XGBClassifier\" class=\"headerlink\" title=\"xgboost.sklearn.XGBClassifier\"></a>xgboost.sklearn.XGBClassifier</h1><h2 id=\"f-score\"><a href=\"#f-score\" class=\"headerlink\" title=\"f_score\"></a>f_score</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> xgboost.sklearn <span class=\"keyword\">import</span> XGBClassifier</span><br><span class=\"line\"></span><br><span class=\"line\">model = XGBClassifier(**params)</span><br><span class=\"line\">model.fit(x_train, y_train, eval_set=watchlist,  <span class=\"comment\"># 训练模型</span></span><br><span class=\"line\">          eval_metric=<span class=\"string\">&quot;logloss&quot;</span>,</span><br><span class=\"line\">          early_stopping_rounds=<span class=\"number\">30</span>,</span><br><span class=\"line\">          verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># feature importance 方法一</span></span><br><span class=\"line\">importance =model.get_booster().get_fscore()  <span class=\"comment\">#返回字典</span></span><br></pre></td></tr></table></figure>\n<p>结果（特征分叉次数）：</p>\n<p><img src=\"./pics/XGB.assets/1565232108098.png\" alt=\"1565232108098\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impo=model.feature_importances_ <span class=\"comment\">#返回array</span></span><br></pre></td></tr></table></figure>\n<p>结果（特征分叉次数占比）：</p>\n<p><img src=\"./pics/XGB.assets/1565232794674.png\" alt=\"1565232794674\"></p>\n<h1 id=\"xgboost\"><a href=\"#xgboost\" class=\"headerlink\" title=\"xgboost\"></a>xgboost</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\">xgb_model = xgb.train (params, dtrain, num_boost_round, evals=watchlist, early_stopping_rounds=early_stopping_rounds, verbose_eval=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># feature importance</span></span><br><span class=\"line\">importance =xgb_model.get_fscore() <span class=\"comment\">#返回字典</span></span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<p><img src=\"./pics/XGB.assets/1565232255682.png\" alt=\"1565232255682\"></p>"},{"title":"anaconda+tensorflow安装教程","date":"2022-03-01T03:32:38.000Z","_content":"\nanaconda+tensorflow安装教程\n\n<!-- more -->\n\n\n[TOC]\n\n# 安装pip,conda,tensorflow\n\n\n\n1. 安装pip\n\n   ```shell\n   pip --version #check id exists\n   \n   sudo easy_install pip #安装pip\n   ```\n\n   pip --version错误：ImportError: No module named typing\n\n2. 官网下载并安装anaconda,安装时勾选添加环境变量【非常重要，不然后续会出错】\n\n   ```shell\n   # anaconda path 如果忘记勾选了，要配置环境变量\n   vim ~/.bash_proflw\n   export PATH=$PATH:/Users/hetianqi/opt/anaconda3/bin/\n   \n   \n   ```\n\n   \n\n3. cmd中确认conda安装正确\n\n   ```bash\n   conda -V\n   ```\n\n4. 创建新的虚拟环境\n\n   ```bash\n    #windows 的tensorflow只支持python3以上，3.6稳定，3.7和3.8都不稳定\n   conda create -n python3.6 python=3.6 \n   conda info -e\n   conda env list\n   conda activate python3.6  \n   ```\n\n5. 安装tensorflow\n\n   https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow/ 清华镜像，可查询tensorflow版本\n\n   ```bash\n   # pip+清华镜像\n   pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow==2.0.0\n   \n   # pip+豆瓣镜像\n   pip install -i https://pypi.douban.com/simple tensorflow==2.0.0\n   \n   # conda + \n   conda install --channel https://conda.anaconda.org/anaconda tensorflow=2.0.0\n   \n   pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas\n   ```\n\n\n1. 在jupyterlab中使用tf\n\n   ```shell\n   source activate 环境 #激活环境\n   conda install ipykernel\n   conda install ipython\n   conda install jupyterlab\n   ipython kernelspec install-self ––user\n   python -m ipykernel install --user --name 环境名称 --display-name “环境名称” \n   ```\n\n   \n\n2. 安装xgboost\n\n   ```bash\n   pip install -i https://pypi.tuna.tsinghua.edu.cn/simple XGBoost  #win10\n   conda install py-xgboost #mac\n   \n   ```\n\n3. 安装torch\n\n   ```shell\n   \n   pip install torch===1.3.0 torchvision===0.4.1 -f https://download.pytorch.org/whl/torch_stable.html -i  https://pypi.mirrors.ustc.edu.cn/simple/\n   ```\n\n# 安装scala,pyspark\n\n1. 安装brew\n\n   在网上搜了很多brew安装方式，包括使用官网的方式都安装报错\n   Failed to connect to raw.githubusercontent.com port 443: Connection refused\n\n   可使用一下源\n\n   ```\n   /bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n   ```\n\n2. 安装scala\n\n   ```shell\n   brew search scala #查看可安装版本\n   brew instal scala@2.12\n   # 修改~/.bash_profile\n   export PATH=\"/usr/local/opt/scala@2.11/bin:$PATH\n   scala -version #check是否安装成功\n   ```\n\n   报错： Error opening archive: Failed to open '/Users/hetianqi/Library/Caches/Homebrew/downloads/d1650a0762f1f057c43d5600d72a18d9aaa0c5da3cd172cac87ae9fcb6439bc0--openjdk-16.0.1.big_sur.bottle.tar.gz'\n\n   解决方法：export HOMEBREW_BOTTLE_DOMAIN='' \n\n   详细解释参考 https://zhuanlan.zhihu.com/p/383707713\n\n   > 如果scala交互模式下方向键乱码，则在~/.bash_profile中添加\n   >\n   > export TERM=xterm-color\n\n3. 安装spark\n\n   a) 下载安装包 http://spark.apache.org/downloads.html\n\n<img src=\"pics/anaconda+tensorflow安装教程/image-20211013142113102.png\" alt=\"image-20211013142113102\" style=\"zoom:50%;\" />\n\n​\t\tb) 解压安装包，复制到路径 /usr/local/Cellar/\n\n​\t\tc) 修改~/.bash_profile\n\n```shell\n\t\nexport SPARK_HOME=/usr/local/Cellar/spark/\nexport PATH=$SPARK_HOME:$SPARK_HOME/bin:$PATH\n```\n\n​\t\td) check是否安装成功\n\n```shell\nspark-shell\n```\n\n<img src=\"pics/anaconda+tensorflow安装教程/image-20211013142621551.png\" alt=\"image-20211013142621551\" style=\"zoom:50%;\" />\n\n\n\n4. 安装pyspark\n\n```shell\npip install pyspark\n```\n\n5. 配置idea for scala and spark\n\n   Step1：建空maven项目\n\n   Step2:  建scala目录并mark as source\n\n   Step3: 下载scala插件：preference --> pluging -->scala\n\n   Step4: 增加框架支持：右击工程--> add framework --> scala\n\n   Step5: 添加apache jars: 右击工程 --> open module settings --> libraries --> + java --> browes --> /usr/local/Cellar/spark/jars  (finder看不见这个文件夹可以 commmand + shift + G)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/0_代码相关/anaconda+tensorflow安装教程.md","raw":"---\ntitle: anaconda+tensorflow安装教程\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nanaconda+tensorflow安装教程\n\n<!-- more -->\n\n\n[TOC]\n\n# 安装pip,conda,tensorflow\n\n\n\n1. 安装pip\n\n   ```shell\n   pip --version #check id exists\n   \n   sudo easy_install pip #安装pip\n   ```\n\n   pip --version错误：ImportError: No module named typing\n\n2. 官网下载并安装anaconda,安装时勾选添加环境变量【非常重要，不然后续会出错】\n\n   ```shell\n   # anaconda path 如果忘记勾选了，要配置环境变量\n   vim ~/.bash_proflw\n   export PATH=$PATH:/Users/hetianqi/opt/anaconda3/bin/\n   \n   \n   ```\n\n   \n\n3. cmd中确认conda安装正确\n\n   ```bash\n   conda -V\n   ```\n\n4. 创建新的虚拟环境\n\n   ```bash\n    #windows 的tensorflow只支持python3以上，3.6稳定，3.7和3.8都不稳定\n   conda create -n python3.6 python=3.6 \n   conda info -e\n   conda env list\n   conda activate python3.6  \n   ```\n\n5. 安装tensorflow\n\n   https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow/ 清华镜像，可查询tensorflow版本\n\n   ```bash\n   # pip+清华镜像\n   pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow==2.0.0\n   \n   # pip+豆瓣镜像\n   pip install -i https://pypi.douban.com/simple tensorflow==2.0.0\n   \n   # conda + \n   conda install --channel https://conda.anaconda.org/anaconda tensorflow=2.0.0\n   \n   pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas\n   ```\n\n\n1. 在jupyterlab中使用tf\n\n   ```shell\n   source activate 环境 #激活环境\n   conda install ipykernel\n   conda install ipython\n   conda install jupyterlab\n   ipython kernelspec install-self ––user\n   python -m ipykernel install --user --name 环境名称 --display-name “环境名称” \n   ```\n\n   \n\n2. 安装xgboost\n\n   ```bash\n   pip install -i https://pypi.tuna.tsinghua.edu.cn/simple XGBoost  #win10\n   conda install py-xgboost #mac\n   \n   ```\n\n3. 安装torch\n\n   ```shell\n   \n   pip install torch===1.3.0 torchvision===0.4.1 -f https://download.pytorch.org/whl/torch_stable.html -i  https://pypi.mirrors.ustc.edu.cn/simple/\n   ```\n\n# 安装scala,pyspark\n\n1. 安装brew\n\n   在网上搜了很多brew安装方式，包括使用官网的方式都安装报错\n   Failed to connect to raw.githubusercontent.com port 443: Connection refused\n\n   可使用一下源\n\n   ```\n   /bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n   ```\n\n2. 安装scala\n\n   ```shell\n   brew search scala #查看可安装版本\n   brew instal scala@2.12\n   # 修改~/.bash_profile\n   export PATH=\"/usr/local/opt/scala@2.11/bin:$PATH\n   scala -version #check是否安装成功\n   ```\n\n   报错： Error opening archive: Failed to open '/Users/hetianqi/Library/Caches/Homebrew/downloads/d1650a0762f1f057c43d5600d72a18d9aaa0c5da3cd172cac87ae9fcb6439bc0--openjdk-16.0.1.big_sur.bottle.tar.gz'\n\n   解决方法：export HOMEBREW_BOTTLE_DOMAIN='' \n\n   详细解释参考 https://zhuanlan.zhihu.com/p/383707713\n\n   > 如果scala交互模式下方向键乱码，则在~/.bash_profile中添加\n   >\n   > export TERM=xterm-color\n\n3. 安装spark\n\n   a) 下载安装包 http://spark.apache.org/downloads.html\n\n<img src=\"pics/anaconda+tensorflow安装教程/image-20211013142113102.png\" alt=\"image-20211013142113102\" style=\"zoom:50%;\" />\n\n​\t\tb) 解压安装包，复制到路径 /usr/local/Cellar/\n\n​\t\tc) 修改~/.bash_profile\n\n```shell\n\t\nexport SPARK_HOME=/usr/local/Cellar/spark/\nexport PATH=$SPARK_HOME:$SPARK_HOME/bin:$PATH\n```\n\n​\t\td) check是否安装成功\n\n```shell\nspark-shell\n```\n\n<img src=\"pics/anaconda+tensorflow安装教程/image-20211013142621551.png\" alt=\"image-20211013142621551\" style=\"zoom:50%;\" />\n\n\n\n4. 安装pyspark\n\n```shell\npip install pyspark\n```\n\n5. 配置idea for scala and spark\n\n   Step1：建空maven项目\n\n   Step2:  建scala目录并mark as source\n\n   Step3: 下载scala插件：preference --> pluging -->scala\n\n   Step4: 增加框架支持：右击工程--> add framework --> scala\n\n   Step5: 添加apache jars: 右击工程 --> open module settings --> libraries --> + java --> browes --> /usr/local/Cellar/spark/jars  (finder看不见这个文件夹可以 commmand + shift + G)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"0_代码相关/anaconda+tensorflow安装教程","published":1,"updated":"2022-03-01T03:49:20.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4q002l8s32b3742amb","content":"<p>anaconda+tensorflow安装教程</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"安装pip-conda-tensorflow\"><a href=\"#安装pip-conda-tensorflow\" class=\"headerlink\" title=\"安装pip,conda,tensorflow\"></a>安装pip,conda,tensorflow</h1><ol>\n<li><p>安装pip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip --version #check id exists</span><br><span class=\"line\"></span><br><span class=\"line\">sudo easy_install pip #安装pip</span><br></pre></td></tr></table></figure>\n<p>pip —version错误：ImportError: No module named typing</p>\n</li>\n<li><p>官网下载并安装anaconda,安装时勾选添加环境变量【非常重要，不然后续会出错】</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> anaconda path 如果忘记勾选了，要配置环境变量</span></span><br><span class=\"line\">vim ~/.bash_proflw</span><br><span class=\"line\">export PATH=$PATH:/Users/hetianqi/opt/anaconda3/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>cmd中确认conda安装正确</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda -V</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建新的虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#windows 的tensorflow只支持python3以上，3.6稳定，3.7和3.8都不稳定</span></span><br><span class=\"line\">conda create -n python3.6 python=3.6 </span><br><span class=\"line\">conda info -e</span><br><span class=\"line\">conda env list</span><br><span class=\"line\">conda activate python3.6  </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装tensorflow</p>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow/\">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow/</a> 清华镜像，可查询tensorflow版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pip+清华镜像</span></span><br><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow==2.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pip+豆瓣镜像</span></span><br><span class=\"line\">pip install -i https://pypi.douban.com/simple tensorflow==2.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># conda + </span></span><br><span class=\"line\">conda install --channel https://conda.anaconda.org/anaconda tensorflow=2.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>在jupyterlab中使用tf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source activate 环境 #激活环境</span><br><span class=\"line\">conda install ipykernel</span><br><span class=\"line\">conda install ipython</span><br><span class=\"line\">conda install jupyterlab</span><br><span class=\"line\">ipython kernelspec install-self ––user</span><br><span class=\"line\">python -m ipykernel install --user --name 环境名称 --display-name “环境名称” </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>安装xgboost</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple XGBoost  <span class=\"comment\">#win10</span></span><br><span class=\"line\">conda install py-xgboost <span class=\"comment\">#mac</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装torch</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pip install torch===1.3.0 torchvision===0.4.1 -f https://download.pytorch.org/whl/torch_stable.html -i  https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"安装scala-pyspark\"><a href=\"#安装scala-pyspark\" class=\"headerlink\" title=\"安装scala,pyspark\"></a>安装scala,pyspark</h1><ol>\n<li><p>安装brew</p>\n<p>在网上搜了很多brew安装方式，包括使用官网的方式都安装报错<br>Failed to connect to raw.githubusercontent.com port 443: Connection refused</p>\n<p>可使用一下源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装scala</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew search scala #查看可安装版本</span><br><span class=\"line\">brew instal scala@2.12</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改~/.bash_profile</span></span><br><span class=\"line\">export PATH=&quot;/usr/local/opt/scala@2.11/bin:$PATH</span><br><span class=\"line\">scala -version #check是否安装成功</span><br></pre></td></tr></table></figure>\n<p>报错： Error opening archive: Failed to open ‘/Users/hetianqi/Library/Caches/Homebrew/downloads/d1650a0762f1f057c43d5600d72a18d9aaa0c5da3cd172cac87ae9fcb6439bc0—openjdk-16.0.1.big_sur.bottle.tar.gz’</p>\n<p>解决方法：export HOMEBREW_BOTTLE_DOMAIN=’’ </p>\n<p>详细解释参考 <a href=\"https://zhuanlan.zhihu.com/p/383707713\">https://zhuanlan.zhihu.com/p/383707713</a></p>\n<blockquote>\n<p>如果scala交互模式下方向键乱码，则在~/.bash_profile中添加</p>\n<p>export TERM=xterm-color</p>\n</blockquote>\n</li>\n<li><p>安装spark</p>\n<p>a) 下载安装包 <a href=\"http://spark.apache.org/downloads.html\">http://spark.apache.org/downloads.html</a></p>\n</li>\n</ol>\n<p><img src=\"pics/anaconda+tensorflow安装教程/image-20211013142113102.png\" alt=\"image-20211013142113102\" style=\"zoom:50%;\" /></p>\n<p>​        b) 解压安装包，复制到路径 /usr/local/Cellar/</p>\n<p>​        c) 修改~/.bash_profile</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">export SPARK_HOME=/usr/local/Cellar/spark/</span><br><span class=\"line\">export PATH=$SPARK_HOME:$SPARK_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>​        d) check是否安装成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark-shell</span><br></pre></td></tr></table></figure>\n<p><img src=\"pics/anaconda+tensorflow安装教程/image-20211013142621551.png\" alt=\"image-20211013142621551\" style=\"zoom:50%;\" /></p>\n<ol>\n<li>安装pyspark</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyspark</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>配置idea for scala and spark</p>\n<p>Step1：建空maven项目</p>\n<p>Step2:  建scala目录并mark as source</p>\n<p>Step3: 下载scala插件：preference —&gt; pluging —&gt;scala</p>\n<p>Step4: 增加框架支持：右击工程—&gt; add framework —&gt; scala</p>\n<p>Step5: 添加apache jars: 右击工程 —&gt; open module settings —&gt; libraries —&gt; + java —&gt; browes —&gt; /usr/local/Cellar/spark/jars  (finder看不见这个文件夹可以 commmand + shift + G)</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>anaconda+tensorflow安装教程</p>","more":"<p>[TOC]</p>\n<h1 id=\"安装pip-conda-tensorflow\"><a href=\"#安装pip-conda-tensorflow\" class=\"headerlink\" title=\"安装pip,conda,tensorflow\"></a>安装pip,conda,tensorflow</h1><ol>\n<li><p>安装pip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip --version #check id exists</span><br><span class=\"line\"></span><br><span class=\"line\">sudo easy_install pip #安装pip</span><br></pre></td></tr></table></figure>\n<p>pip —version错误：ImportError: No module named typing</p>\n</li>\n<li><p>官网下载并安装anaconda,安装时勾选添加环境变量【非常重要，不然后续会出错】</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> anaconda path 如果忘记勾选了，要配置环境变量</span></span><br><span class=\"line\">vim ~/.bash_proflw</span><br><span class=\"line\">export PATH=$PATH:/Users/hetianqi/opt/anaconda3/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>cmd中确认conda安装正确</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda -V</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建新的虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#windows 的tensorflow只支持python3以上，3.6稳定，3.7和3.8都不稳定</span></span><br><span class=\"line\">conda create -n python3.6 python=3.6 </span><br><span class=\"line\">conda info -e</span><br><span class=\"line\">conda env list</span><br><span class=\"line\">conda activate python3.6  </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装tensorflow</p>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow/\">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow/</a> 清华镜像，可查询tensorflow版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pip+清华镜像</span></span><br><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow==2.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pip+豆瓣镜像</span></span><br><span class=\"line\">pip install -i https://pypi.douban.com/simple tensorflow==2.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># conda + </span></span><br><span class=\"line\">conda install --channel https://conda.anaconda.org/anaconda tensorflow=2.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>在jupyterlab中使用tf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source activate 环境 #激活环境</span><br><span class=\"line\">conda install ipykernel</span><br><span class=\"line\">conda install ipython</span><br><span class=\"line\">conda install jupyterlab</span><br><span class=\"line\">ipython kernelspec install-self ––user</span><br><span class=\"line\">python -m ipykernel install --user --name 环境名称 --display-name “环境名称” </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>安装xgboost</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple XGBoost  <span class=\"comment\">#win10</span></span><br><span class=\"line\">conda install py-xgboost <span class=\"comment\">#mac</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装torch</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pip install torch===1.3.0 torchvision===0.4.1 -f https://download.pytorch.org/whl/torch_stable.html -i  https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"安装scala-pyspark\"><a href=\"#安装scala-pyspark\" class=\"headerlink\" title=\"安装scala,pyspark\"></a>安装scala,pyspark</h1><ol>\n<li><p>安装brew</p>\n<p>在网上搜了很多brew安装方式，包括使用官网的方式都安装报错<br>Failed to connect to raw.githubusercontent.com port 443: Connection refused</p>\n<p>可使用一下源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装scala</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew search scala #查看可安装版本</span><br><span class=\"line\">brew instal scala@2.12</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改~/.bash_profile</span></span><br><span class=\"line\">export PATH=&quot;/usr/local/opt/scala@2.11/bin:$PATH</span><br><span class=\"line\">scala -version #check是否安装成功</span><br></pre></td></tr></table></figure>\n<p>报错： Error opening archive: Failed to open ‘/Users/hetianqi/Library/Caches/Homebrew/downloads/d1650a0762f1f057c43d5600d72a18d9aaa0c5da3cd172cac87ae9fcb6439bc0—openjdk-16.0.1.big_sur.bottle.tar.gz’</p>\n<p>解决方法：export HOMEBREW_BOTTLE_DOMAIN=’’ </p>\n<p>详细解释参考 <a href=\"https://zhuanlan.zhihu.com/p/383707713\">https://zhuanlan.zhihu.com/p/383707713</a></p>\n<blockquote>\n<p>如果scala交互模式下方向键乱码，则在~/.bash_profile中添加</p>\n<p>export TERM=xterm-color</p>\n</blockquote>\n</li>\n<li><p>安装spark</p>\n<p>a) 下载安装包 <a href=\"http://spark.apache.org/downloads.html\">http://spark.apache.org/downloads.html</a></p>\n</li>\n</ol>\n<p><img src=\"pics/anaconda+tensorflow安装教程/image-20211013142113102.png\" alt=\"image-20211013142113102\" style=\"zoom:50%;\" /></p>\n<p>​        b) 解压安装包，复制到路径 /usr/local/Cellar/</p>\n<p>​        c) 修改~/.bash_profile</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">export SPARK_HOME=/usr/local/Cellar/spark/</span><br><span class=\"line\">export PATH=$SPARK_HOME:$SPARK_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>​        d) check是否安装成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark-shell</span><br></pre></td></tr></table></figure>\n<p><img src=\"pics/anaconda+tensorflow安装教程/image-20211013142621551.png\" alt=\"image-20211013142621551\" style=\"zoom:50%;\" /></p>\n<ol>\n<li>安装pyspark</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyspark</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>配置idea for scala and spark</p>\n<p>Step1：建空maven项目</p>\n<p>Step2:  建scala目录并mark as source</p>\n<p>Step3: 下载scala插件：preference —&gt; pluging —&gt;scala</p>\n<p>Step4: 增加框架支持：右击工程—&gt; add framework —&gt; scala</p>\n<p>Step5: 添加apache jars: 右击工程 —&gt; open module settings —&gt; libraries —&gt; + java —&gt; browes —&gt; /usr/local/Cellar/spark/jars  (finder看不见这个文件夹可以 commmand + shift + G)</p>\n</li>\n</ol>"},{"title":"AWK语法","date":"2022-03-01T03:32:38.000Z","_content":"\nAWK工具书\n\n<!-- more -->\n\n[TOC]\n\n# AWK\n\n\n\n## 1. 格式\n\n### 1). 命令形式\n\n`awk [-F|-f|-v] ‘BEGIN{} //{command1; command2} END{}’ file`\n\n> BEGIN{ 这里面放的是执行前的语句 } ，其中的语句只会运行一次\n> END {这里面放的是处理完所有的行后要执行的语句 } 。其中的语句也只会运行一次\n> {这里面放的是处理每一行时要执行的语句} ，这里的语句会读文件的每行都运行一次\n\n [-F|-f|-v]   大参数，-F指定分隔符，-f调用脚本，-v定义变量 var=value\n\n'  '          引用代码块\n\nBEGIN   初始化代码块，在对每一行进行处理之前，初始化代码，主要是引用全局变量，设置FS分隔符\n\n//           匹配代码块，可以是字符串或正则表达式\n\n{}           命令代码块，包含一条或多条命令\n\n；          多条命令使用分号分隔\n\nEND      结尾代码块，在对每一行进行处理之后再执行的代码块，主要是进行最终计算或输出结尾摘要信息\n\n\n\n\n\n### 2). 特殊要点\n\n[linux awk 内置变量使用介绍](https://www.cnblogs.com/chengmo/archive/2010/10/06/1844818.html)\n\n\n| 特殊符号       | 含义                                                         |\n| -------------- | ------------------------------------------------------------ |\n| $0             | 表示整个当前行                                               |\n| $1             | 每行第一个字段                                               |\n| NF             | 字段数量变量                                                 |\n| NR             | 每行的记录号，多文件记录递增                                 |\n| FNR            | 与NR类似，不过多文件记录不递增，每个文件都从1开始            |\n| \\t             | 制表符                                                       |\n| \\n             | 换行符                                                       |\n| FS             | BEGIN时定义分隔符，输入字段分隔符 默认是空格                 |\n| RS             | 输入的记录分隔符， 默认为换行符(即文本是按一行一行输入)      |\n| ~              | 匹配，与==相比不是精确比较                                   |\n| !~             | 不匹配，不精确比较                                           |\n| ==             | 等于，必须全部相等，精确比较                                 |\n| !=             | 不等于，精确比较                                             |\n| &&             | 逻辑与                                                       |\n| \\|\\|           | 逻辑或                                                       |\n| +              | 匹配时表示1个或1个以上                                       |\n| /\\[0-9][0-9]+/ | 两个或两个以上数字                                           |\n| /\\[0-9][0-9]*/ | 一个或一个以上数字                                           |\n| FILENAME       | 文件名                                                       |\n| OFS            | 输出字段分隔符， 默认也是空格，可以改为制表符等              |\n| ORS            | 输出的记录分隔符，默认为换行符,即处理结果也是一行一行输出到屏幕 |\n| -F'[:#/]'      | 定义三个分隔符                                               |\n\n## 2. 内置函数\n\n[linux awk 内置函数详细介绍](https://www.cnblogs.com/chengmo/archive/2010/10/08/1845913.html)\n\n> 这篇博客的函数都写在begin{}中\n\n### 1). 算术函数\n\n| **函数名**      | **说明**                                                     |\n| --------------- | ------------------------------------------------------------ |\n| atan2( y, x )   | 返回 y/x 的反正切。                                          |\n| cos( x )        | 返回 x 的余弦；x 是弧度。                                    |\n| sin( x )        | 返回 x 的正弦；x 是弧度。                                    |\n| exp( x )        | 返回 x 幂函数。                                              |\n| log( x )        | 返回 x 的自然对数。                                          |\n| sqrt( x )       | 返回 x 平方根。                                              |\n| int( x )        | 返回 x 的截断至整数的值。                                    |\n| rand( )         | 返回任意数字 n，其中 0 <= n < 1。                            |\n| srand( [Expr] ) | 将 rand 函数的种子值设置为 Expr 参数的值。返回先前的种子值。 |\n\n```BASH\n# OFMT 设置输出数据格式是保留3位小数\nawk 'BEGIN{OFMT=\"%.3f\";fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;}'\n# 0.841 22026.466 2.303 3 \n\n#获得随机数：\nawk 'BEGIN{srand();fr=int(100*rand());print fr;}'\n# 78\n```\n\n### 2). 字符串函数\n\n| **函数**                            | **说明**                                                     |\n| ----------------------------------- | ------------------------------------------------------------ |\n| gsub( Ere, Repl, [ In ] )           | 除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行，。 |\n| sub( Ere, Repl, [ In ] )            | 用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere  参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &（和符号）由 In  参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。 |\n| index( String1, String2 )           | 在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。 |\n| length [(String)]                   | 返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。 |\n| blength [(String)]                  | 返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。 |\n| substr( String, M, [ N ] )          | 返回具有 N 参数指定的字符数量子串。子串从 String  参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N  参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。 |\n| match( String, Ere )                | 在 String 参数指定的字符串（Ere  参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART  特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。 |\n| split( String, A, [Ere] )           | 将 String 参数指定的参数分割为数组元素 A[1], A[2], . .  ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS  特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。 |\n| tolower( String )                   | 返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。 |\n| toupper( String )                   | 返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。 |\n| sprintf(Format, Expr, Expr, . . . ) | 根据 Format 参数指定的 [printf](http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/printf.htm#a8zed0gaco) 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。 |\n\n> Ere都可以是正则表达式\n\n```BASH\n# 在 info中查找满足正则表达式，/[0-9]+/ 用””替换，并且替换后的值，赋值给info 未给info值，默认是$0\nawk 'BEGIN{info=\"this is a test2010test!\";gsub(/[0-9]+/,\"!\",info);print info}' \n# this is a test!test!\n\n# 查找字符串（index使用）\nawk 'BEGIN{info=\"this is a test2010test!\";print index(info,\"test\")?\"ok\":\"no found\";}'\n# ok\n# 未找到，返回0\n\n# 正则表达式匹配查找(match使用）\nawk 'BEGIN{info=\"this is a test2010test!\";print match(info,/[0-9]+/)?\"ok\":\"no found\";}'   # ok \n\n# 截取字符串(substr使用）\nawk 'BEGIN{info=\"this is a test2010test!\";print substr(info,4,10);}'\n# s is a tes\n# 从第 4个 字符开始，截取10个长度字符串\n\n# 字符串分割（split使用）\nawk 'BEGIN{info=\"this is a test\";split(info,tA,\" \");print length(tA);for(k in tA){print k,tA[k];}}'\n# 4\n# 4 test\n# 1 this\n# 2 is\n# 3 a\n# 分割info,动态创建数组tA,这里比较有意思，awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意。\n```\n\n> awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意\n>\n> 应该是因为awk中数组其实是字段。\n\n**格式化字符串输出（sprintf使用）**\n\n格式化字符串包括两部分内容: 一部分是正常字符, 这些字符将按原样输出; 另一部分是格式化规定字符, 以\"%\"开始, 后跟一个或几个规定字符,用来确定输出内容格式。 \n\n| **格式符** | **说明**                      |\n| ---------- | ----------------------------- |\n| %d         | 十进制有符号整数              |\n| %u         | 十进制无符号整数              |\n| %f         | 浮点数                        |\n| %s         | 字符串                        |\n| %c         | 单个字符                      |\n| %p         | 指针的值                      |\n| %e         | 指数形式的浮点数              |\n| %x         | %X 无符号以十六进制表示的整数 |\n| %o         | 无符号以八进制表示的整数      |\n| %g         | 自动选择合适的表示法          |\n\n```bash\nawk 'BEGIN{n1=124.113;n2=-1.224;n3=1.2345; printf(\"%.2f,%.2u,%.2g,%X,%o\\n\",n1,n2,n3,n1,n1);}'\n# 124.11,18446744073709551615,1.2,7C,174 \n```\n\n\n\n### 3). 时间函数\n\n| **函数名**                         | **说明**                                                     |\n| ---------------------------------- | ------------------------------------------------------------ |\n| mktime( YYYY MM DD HH MM SS[ DST]) | 生成时间格式                                                 |\n| strftime([format [, timestamp]])   | 格式化时间输出，将时间戳转为时间字符串  具体格式，见下表.    |\n| systime()                          | 得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数 |\n\n```bash\n# 创建指定时间(mktime使用）\nawk 'BEGIN{tstamp=mktime(\"2001 01 01 12 12 12\");print strftime(\"%c\",tstamp);}'\n# 2001年01月01日 星期一 12时12分12秒 \n\n# 求2个时间段中间时间差,介绍了strftime使用方法 \nawk 'BEGIN{tstamp1=mktime(\"2001 01 01 12 12 12\");tstamp2=mktime(\"2001 02 01 0 0 0\");print tstamp2-tstamp1;}'\n# 2634468 \n\nawk 'BEGIN{tstamp1=mktime(\"2001 01 01 12 12 12\");tstamp2=systime();print tstamp2-tstamp1;}'\n# 308201392 \n```\n\n**strftime日期和时间格式说明符**\n\n| 格式 | 描述                                                     |\n| ---- | -------------------------------------------------------- |\n| %a   | 星期几的缩写(Sun)                                        |\n| %A   | 星期几的完整写法(Sunday)                                 |\n| %b   | 月名的缩写(Oct)                                          |\n| %B   | 月名的完整写法(October)                                  |\n| %c   | 本地日期和时间                                           |\n| %d   | 十进制日期                                               |\n| %D   | 日期 08/20/99                                            |\n| %e   | 日期，如果只有一位会补上一个空格                         |\n| %H   | 用十进制表示24小时格式的小时                             |\n| %I   | 用十进制表示12小时格式的小时                             |\n| %j   | 从1月1日起一年中的第几天                                 |\n| %m   | 十进制表示的月份                                         |\n| %M   | 十进制表示的分钟                                         |\n| %p   | 12小时表示法(AM/PM)                                      |\n| %S   | 十进制表示的秒                                           |\n| %U   | 十进制表示的一年中的第几个星期(星期天作为一个星期的开始) |\n| %w   | 十进制表示的星期几(星期天是0)                            |\n| %W   | 十进制表示的一年中的第几个星期(星期一作为一个星期的开始) |\n| %x   | 重新设置本地日期(08/20/99)                               |\n| %X   | 重新设置本地时间(12：00：00)                             |\n| %y   | 两位数字表示的年(99)                                     |\n| %Y   | 当前月份                                                 |\n| %Z   | 时区(PDT)                                                |\n| %%   | 百分号(%)                                                |\n\n### 4). 一般函数\n\n| **函数**                           | **说明**                                                     |\n| ---------------------------------- | ------------------------------------------------------------ |\n| close( Expression )                | 用同一个带字符串值的 Expression 参数来关闭由 print 或  printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回  0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。 |\n| system(Command )                   | 执行 Command 参数指定的命令，并返回退出状态。等同于 [system](http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf2/system.htm#a181929c) 子例程。 |\n| Expression \\| getline [ Variable ] | 从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 [popen](http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/popen.htm#sk62b0shad)  子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且  Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0  记录变量和 NF 特殊变量设置为从流读取的记录。 |\n| getline [ Variable ] < Expression  | 从 Expression 参数指定的文件读取输入的下一个记录，并将  Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline  函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。 |\n| getline [ Variable ]               | 将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。 |\n\n```bash\n# 打开外部文件（close用法）\nawk 'BEGIN{while(\"cat /etc/passwd\"|getline){print $0;};close(\"/etc/passwd\");}'\n# root:x:0:0:root:/root:/bin/bash\n# bin:x:1:1:bin:/bin:/sbin/nologin\n# daemon:x:2:2:daemon:/sbin:/sbin/nologin \n\n# 逐行读取外部文件(getline使用方法）\nawk 'BEGIN{while(getline < \"/etc/passwd\"){print $0;};close(\"/etc/passwd\");}'\n# root:x:0:0:root:/root:/bin/bash\n# bin:x:1:1:bin:/bin:/sbin/nologin\n# daemon:x:2:2:daemon:/sbin:/sbin/nologin \n\nawk 'BEGIN{print \"Enter your name:\";getline name;print name;}'\n# Enter your name:\n# wangdongdong\n# wangdongdong\n\n# 调用外部应用程序(system使用方法）\nawk 'BEGIN{b=system(\"python helloworld.py\");print b;}'\n# helloworld\n# 0\n```\n\n\n\n## 3. 数组\n\n[linux awk数组操作详细介绍](https://www.cnblogs.com/chengmo/archive/2010/10/08/1846190.html)\n\n\n\n\n\n## 4. 案例\n\n### 1). print\n\nprint 是awk打印指定内容的主要命令\n\n```bash\nawk '{print}' /etc/passwd == awk '{print $0}' /etc/passwd \nawk '{print \" \"}' /etc/passwd #不输出passwd的内容，而是输出相同个数的空行，进一步解释了awk是一行一行处理文本\nawk '{print \"a\"}' /etc/passwd #输出相同个数的a行，一行只有一个a字母\nawk -F\":\" '{print $1}' /etc/passwd \nawk -F: '{print $1; print $2}' /etc/passwd #将每一行的前二个字段，分行输出，进一步理解一行一行处理文本\nawk -F: '{print $1,$3,$6}' OFS=\"\\t\" /etc/passwd #输出字段1,3,6，以制表符作为分隔符\n```\n\n\n\n### 2). -f指定脚本文件\n\n```bash\nawk -f script.awk  file\n\n# script.awk内容如下：\nBEGIN{\nFS=\":\"\n}\n{print $1}   #效果与awk -F\":\" '{print $1}'相同,只是分隔符使用FS在代码自身中指定\n\nawk 'BEGIN{X=0} /^$/{ X+=1 } END{print \"I find\",X,\"blank lines.\"}' test \n# I find 4 blank lines.\n\nls -l|awk 'BEGIN{sum=0} !/^d/{sum+=$5} END{print \"total size is\",sum}' #计算文件大小 \n#total size is 17487\n```\n\n\n\n### 3). -F指定分隔符\n\n\\$1 指指定分隔符后，第一个字段，$3第三个字段， \\t是制表符\n\n一个或多个连续的空格或制表符看做一个定界符，即多个空格看做一个空格\n\n```bash\nawk -F\":\" '{print $1}'  /etc/passwd\nawk -F\":\" '{print $1 $3}'  /etc/passwd #$1与$3相连输出，不分隔\nawk -F\":\" '{print $1,$3}'  /etc/passwd #多了一个逗号，$1与$3使用空格分隔\nawk -F\":\" '{print $1 \" \" $3}'  /etc/passwd #$1与$3之间手动添加空格分隔\nawk -F\":\" '{print \"Username:\" $1 \"\\t\\t Uid:\" $3 }' /etc/passwd #自定义输出  \nawk -F: '{print NF}' /etc/passwd #显示每行有多少字段\nawk -F: '{print $NF}' /etc/passwd #将每行第NF个字段的值打印出来\nawk -F: 'NF==4 {print }' /etc/passwd #显示只有4个字段的行\nawk -F: 'NF>2{print $0}' /etc/passwd #显示每行字段数量大于2的行\nawk '{print NR,$0}' /etc/passwd #输出每行的行号\nawk -F: '{print NR,NF,$NF,\"\\t\",$0}' /etc/passwd #依次打印行号，字段数，最后字段值，制表符，每行内容\nawk -F: 'NR==5{print}'  /etc/passwd #显示第5行\nawk -F: 'NR==5 || NR==6{print}'  /etc/passwd #显示第5行和第6行\nroute -n|awk 'NR!=1{print}' #不显示第一行\n```\n\n\n\n### 4). IF语句\n\n必须用在{}中，且比较内容用()扩起来\n\n```bash\nawk -F: '{if($1~/mail/) print $1}' /etc/passwd #简写\nawk -F: '{if($1~/mail/) {print $1}}' /etc/passwd #全写\nawk -F: '{if($1~/mail/) {print $1} else {print $2}}' /etc/passwd #if...else...\n\nawk -F: '{if($3>100) print \"large\"; else print \"small\"}' /etc/passwd\nawk -F: 'BEGIN{A=0;B=0} {if($3>100) {A++; print \"large\"} else {B++; print \"small\"}} END{print A,\"\\t\",B}' /etc/passwd  #ID大于100,A加1，否则B加1\nawk -F: '{if($3<100) next; else print}' /etc/passwd #小于100跳过，否则显示\nawk -F: '{print ($3>100 ? \"yes\":\"no\")}'  /etc/passwd \nawk -F: '{print ($3>100 ? $3\":\\tyes\":$3\":\\tno\")}'  /etc/passwd\n```\n\n\n\n### 5). 条件表达式\n\n**==   !=   >   >=** \n\n```bash\nawk -F\":\" '$1==\"mysql\"{print $3}' /etc/passwd  \nawk -F\":\" '{if($1==\"mysql\") print $3}' /etc/passwd #与上面相同 \nawk -F\":\" '$1!=\"mysql\"{print $3}' /etc/passwd #不等于\nawk -F\":\" '$3>1000{print $3}' /etc/passwd #大于\nawk -F\":\" '$3>=100{print $3}' /etc/passwd #大于等于\nawk -F\":\" '$3<1{print $3}' /etc/passwd #小于\nawk -F\":\" '$3<=1{print $3}' /etc/passwd #小于等于\n```\n\n\n\n### 6). 逻辑运算符\n\n**&&　||** \n\n```bash\nawk -F: '$1~/mail/ && $3>8 {print }' /etc/passwd #逻辑与，$1匹配mail，并且$3>8\nawk -F: '{if($1~/mail/ && $3>8) print }' /etc/passwd\nawk -F: '$1~/mail/ || $3>1000 {print }' /etc/passwd #逻辑或\nawk -F: '{if($1~/mail/ || $3>1000) print }' /etc/passwd \n```\n\n\n\n### 7). 数值运算\n\n```bash\nawk -F: '$3 > 100' /etc/passwd    \nawk -F: '$3 > 100 || $3 < 5' /etc/passwd  \nawk -F: '$3+$4 > 200' /etc/passwd\nawk -F: '/mysql|mail/{print $3+10}' /etc/passwd #第三个字段加10打印 \nawk -F: '/mysql/{print $3-$4}' /etc/passwd #减法\nawk -F: '/mysql/{print $3*$4}' /etc/passwd #求乘积\nawk '/MemFree/{print $2/1024}' /proc/meminfo #除法\nawk '/MemFree/{print int($2/1024)}' /proc/meminfo #取整\n```\n\n\n\n### 8). 输出分隔符OFS\n\n```bash\nawk '$6 ~ /FIN/ || NR==1 {print NR,$4,$5,$6}' OFS=\"\\t\" netstat.txt\nawk '$6 ~ /WAIT/ || NR==1 {print NR,$4,$5,$6}' OFS=\"\\t\" netstat.txt        \n#输出字段6匹配WAIT的行，其中输出每行行号，字段4，5,6，并使用制表符分割字段\n```\n\n\n\n### 9). 输出处理结果到文件\n\n①在命令代码块中直接输出 route -n|awk 'NR!=1{print > \"./fs\"}'   \n\n②使用重定向进行输出  route -n|awk 'NR!=1{print}'  > ./fs\n\n\n\n### 10). 格式化输出\n\n```bash\nnetstat -anp|awk '{printf \"%-8s %-8s %-10s\\n\",$1,$2,$3}' \n```\n\nprintf表示格式输出\n\n%格式化输出分隔符\n\n-8长度为8个字符\n\ns表示字符串类型\n\n打印每行前三个字段，指定第一个字段输出字符串类型(长度为8)，第二个字段输出字符串类型(长度为8),\n\n第三个字段输出字符串类型(长度为10)\n\n```bash\nnetstat -anp|awk '$6==\"LISTEN\" || NR==1 {printf \"%-10s %-10s %-10s \\n\",$1,$2,$3}'\nnetstat -anp|awk '$6==\"LISTEN\" || NR==1 {printf \"%-3s %-10s %-10s %-10s \\n\",NR,$1,$2,$3}'\n```\n\n\n\n### 11). 数组\n\n```bash\nnetstat -anp|awk 'NR!=1{a[$6]++} END{for (i in a) print i,\"\\t\",a[i]}'\nnetstat -anp|awk 'NR!=1{a[$6]++} END{for (i in a) \\\n  printf \"%-20s %-10s %-5s \\n\", i,\"\\t\",a[i]}'\n```\n\n\n\n### 12). 其他应用\n\n```bash\nawk -F: '{print NF}' helloworld.sh #输出文件每行有多少字段\nawk -F: '{print $1,$2,$3,$4,$5}' helloworld.sh #输出前5个字段\nawk -F: '{print $1,$2,$3,$4,$5}' OFS='\\t' helloworld.sh #输出前5个字段并使用制表符分隔输出\nawk -F: '{print NR,$1,$2,$3,$4,$5}' OFS='\\t' helloworld.sh #制表符分隔输出前5个字段，并打印行号\nawk -F'[:#]' '{print NF}'  helloworld.sh #指定多个分隔符: #，输出每行多少字段\nawk -F'[:#]' '{print $1,$2,$3,$4,$5,$6,$7}' OFS='\\t' helloworld.sh #制表符分隔输出多字段\nawk -F'[:#/]' '{print NF}' helloworld.sh #指定三个分隔符，并输出每行字段数\nawk -F'[:#/]' '{print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12}' hi.sh #制表符分隔输出多字段\n\n#计算/home目录下，普通文件的大小，使用KB作为单位\nls -l|awk 'BEGIN{sum=0} !/^d/{sum+=$5} END{print \"total size is:\",sum/1024,\"KB\"}'\nls -l|awk 'BEGIN{sum=0} !/^d/{sum+=$5} END{print \"total size is:\",int(sum/1024),\"KB\"}' #int是取整的意思\n\n#统计netstat -anp 状态为LISTEN和CONNECT的连接数量分别是多少\nnetstat -anp|awk '$6~/LISTEN|CONNECTED/{sum[$6]++} END{for (i in sum) printf \"%-10s %-6s %-3s \\n\", i,\" \",sum[i]}'\n\n#统计/home目录下不同用户的普通文件的总数是多少？\nls -l|awk 'NR!=1 && !/^d/{sum[$3]++} END{for (i in sum) printf \"%-6s %-5s %-3s \\n\",i,\" \",sum[i]}'   \n\n#统计/home目录下不同用户的普通文件的大小总size是多少？\nls -l|awk 'NR!=1 && !/^d/{sum[$3]+=$5} END{for (i in sum) printf \"%-6s %-5s %-3s %-2s \\n\",i,\" \",sum[i]/1024/1024,\"MB\"}'\n\n#输出成绩表\nawk 'BEGIN{math=0;eng=0;com=0;printf \"Lineno.   Name    No.    Math   English   Computer    Total\\n\";printf \"------------------------------------------------------------\\n\"}{math+=$3; eng+=$4; com+=$5;printf \"%-8s %-7s %-7s %-7s %-9s %-10s %-7s \\n\",NR,$1,$2,$3,$4,$5,$3+$4+$5} END{printf \"------------------------------------------------------------\\n\";printf \"%-24s %-7s %-9s %-20s \\n\",\"Total:\",math,eng,com;printf \"%-24s %-7s %-9s %-20s \\n\",\"Avg:\",math/NR,eng/NR,com/NR}' test\n\n```\n\n\n\n### 13). Vlookup\n\n[awk实现excel vlookup](https://www.jianshu.com/p/01906e4b7af7)\n\n```bash\n# 数据\n$ cat a.txt \n1       abc\n2       def\n3       ghi\n4       jlm\n$ cat b.txt \n3       shit\n1       rubb\n# 方法\nawk 'NR==FNR{a[$1]=$2;next}NR>FNR{if($1 in a)print $0\"\\t\"a[$1]}' a.txt b.txt \n# 3       shit    ghi\n# 1       rubb    abc\n```\n\n> 注：a是一个字典，`NR==FNR`时在第一个文件，`NR>FNR`时在读b.txt\n>\n> `NR==FNR{a[$1]=$2;next}`是使用第一个文件`a.txt`初始化字典，将其每行`$1`作为key，`$2`作为value\n>\n> `if($1 in a)`指序号`$1`是否在a的key中，如果在打印的`a[$1]`为key：`$1`对于的value\n>\n> 查看字典：`awk 'NR==FNR{a[$1]=$2;next}END{for(k in a){print k,a[k]}}' a.txt b.txt`\n\n\n\n\n\n\n\n### 14). group by\n\n[总结一下awk的group by功能](http://www.cppblog.com/datouwang/articles/45582.html)\n\n通过数组的key作为作为on的条件，value进行聚合运算\n\n```bash\n# 数据\ncat c.txt\n06 01 06 30      2.700         81.000\n06 01 06 45      3.900        175.500\n06 01 07 00      2.400          0.000\n06 01 07 15      0.160          2.400\n06 01 08 00      0.380          0.000\n06 01 08 15      0.300          4.500\n06 01 08 30      3.900        117.000\n06 01 08 45      5.520        248.400\n06 01 09 00      6.600          0.000\n06 01 09 15      9.600        144.000\n06 01 09 30      3.300         99.000\n06 01 09 45      2.300        103.500\n06 01 10 15      7.880        118.200\n06 01 10 30     10.820        324.600\n06 01 10 45      7.360        331.200\n06 01 11 00     11.940          0.000\n06 01 11 15      4.200         63.000\n06 01 11 30      3.180         95.400\n06 01 11 45      1.800         81.000\n06 01 12 00     30.970          0.000\n# 实现\n# 单列group by单列聚合\nawk '{a[$2]+=$5}END{for(i in a) printf \"%s %10.3f\\n\",i,a[i]}' c.txt\n\n# 单列group by多列聚合\nawk '{a[$2]+=$5;b[$2]+=$6}END{for(i in a) printf \"%s %10.3f %14.3f\\n\",i,a[i],b[i]}' c.txt \n\n# 多列group by单列聚合\nawk '{a[$2\" \"$3]+=$5}END{for(i in a) printf \"%s %10.3f\\n\",i,a[i]}' c.txt # 求和\nawk '{a[$2\" \"$3]+=1}END{for(i in a) printf \"%s %10.3f\\n\",i,a[i]}' c.txt # 计数\nawk '{s[$2\" \"$3]+=$5;n[$2\" \"$3]+=1}END{for(i in s){avg_v=s[i]/n[i];printf \"%s %10.3f\\n\",i,avg_v}}' c.txt # 平均\n \n# 多列group by多列聚合：多来一个数组\nawk '{a[$2\" \"$3]+=$5;b[$2\" \"$3]+=$6}END{for(i in a) printf \"%s %14.3f %14.3f\\n\",i,a[i],b[i]}' c.txt\n```\n\nawk -F' ' '/from/{print}'\n\n```\nawk '{for(i=0;++i<=NF;)a[i]=a[i]?a[i] FS $i:$i}END{for(i=0;i++<NF;)printf a[i]\"\\b \\n\"}' \n```\n\n\n\n## 5. 正则表达式\n\n[awk 正则表达式、正则运算符详细介绍](https://www.cnblogs.com/myyan/p/4765683.html)\n\n[linux shell 正则表达式(BREs,EREs,PREs)差异比较](https://www.cnblogs.com/chengmo/archive/2010/10/10/1847287.html)\n\n\n\n### 1). +\n\n指定如果**一个或多个字符**或扩展正则表达式的具体值（在 +（加号）前）在这个字符串中，则字符串匹配。\n\n命令行：`awk '/smith+ern/' testfile`\n\n将包含字符 smit，后跟一个或多个 h 字符，并以字符 ern 结束的字符串的任何记录打印至标准输出。\n\n此示例中的输出是：smithern, harry smithhern, anne\n\n\n\n### 2). ?\n\n指定如果**零个或一个字符**或扩展正则表达式的具体值（在 ?（问号）之前）在字符串中，则字符串匹配。\n\n命令行： `awk '/smith?/' testfile`\n\n将包含字符 `smit`，后跟零个或一个 `h` 字符的实例的所有记录打印至标准输出。\n\n此示例中的输出是：smith, alan smithern, harry smithhern, anne smitters, alexis\n\n\n\n### 3). |\n\n指定如果以 |（垂直线）隔开的字符串的**任何一个在字符串中**，则字符串匹配。\n\n命令行：`awk '/allen | alan /' testfile`\n\n将包含字符串 allen 或 alan 的所有记录打印至标准输出。\n\n此示例中的输出是：smiley, allen smith, alan\n\n\n\n### 4). ()\n\n在正则表达式中将字符串组合在一起。\n\n命令行： `awk '/a(ll)?(nn)?e/' testfile`\n\n将具有字符串 `ae` 或 `alle` 或 `anne` 或 `allnne` 的所有记录打印至标准输出。\n\n此示例中的输出是：smiley, allen smithhern, anne\n\n\n\n### 5). {m}\n\n指定如果**正好有 m 个模式的具体值位于字符串中**，则字符串匹配。\n\n命令行：awk '/l{2}/' testfile\n\n打印至标准输出：smiley, allen\n\n\n\n### 6). {m,}\n\n指定如果**至少 m 个模式的具体值在字符串中**，则字符串匹配。\n\n命令行：`awk '/t{2,}/' testfile`\n\n打印至标准输出：smitters, alexis\n\n\n\n### 7). {m, n}\n\n指定如果 **m 和 n 之间（包含的 m 和 n）个模式**的具体值在字符串中（其中m<= n），则字符串匹配。\n\n命令行：`awk '/er{1, 2}/' testfile`\n\n打印至标准输出：smithern, harry smithern, anne smitters, alexis\n\n\n\n### 8). [String]\n\n指定正则表达式与方括号内 **String 变量指定的任何字符匹配**。\n\n命令行：`awk '/sm[a-h]/' testfile`\n\n将具有 `sm` 后跟以字母顺序从 `a` 到 `h` 排列的任何字符的所有记录打印至标准输出。\n\n此示例的输出是：smawley, andy\n\n\n\n### 9). \\[^ String]\n\n在 [ ]（方括号）和在指定字符串开头的 ^ (插入记号) 指明**正则表达式与方括号内的任何字符不匹配。**\n\n命令行：`awk '/sm\\[^a-h]/' testfile`\n\n打印至标准输出：smiley, allen smith, alan smithern, harry smithhern, anne smitters, alexis\n\n\n\n### 10). ~, !~\n\n表示**指定变量与正则表达式****匹配**（\\~）或**不匹配**（!~）的条件语句。\n\n命令行：` awk '$1 ~ /n/' testfile`\n\n将第一个字段包含字符 `n` 的所有记录打印至标准输出。\n\n此示例中的输出是：smithern, harry smithhern, anne\n\n\n\n### 11). ^\n\n**指定**字段或记录的**开头**。\n\n命令行： awk '$2 ~ /^h/' testfile\n\n将把字符 `h` 作为第二个字段的第一个字符的所有记录打印至标准输出。\n\n此示例中的输出是：smithern, harry\n\n\n\n### 12). $\n\n**指定**字段或记录的**末尾**。\n\n命令行： awk '\\$2 ~ /y$/' testfile\n\n将把字符 `y` 作为第二个字段的最后一个字符的所有记录打印至标准输出。\n\n此示例中的输出是：smawley, andy smithern, harry\n\n\n\n### 13). .（句号）\n\n**表示**除了在空白末尾的终端换行字符以外的**任何一个字符**。\n\n命令行： awk '/a..e/' testfile\n\n将具有以两个字符隔开的字符 `a` 和 e 的所有记录打印至标准输出。\n\n此示例中的输出是：smawley, andy smiley, allen smithhern, anne\n\n\n\n### 14). *（星号）\n\n表示**零个或更多的任意字符。**\n\n命令行： awk '/a.*e/' testfile\n\n将具有以零个或更多字符隔开的字符 `a` 和 e 的所有记录打印至标准输出。\n\n此示例中的输出是：smawley, andy smiley, allen smithhern, anne smitters, alexis\n\n\n\n### 15). \\ (反斜杠)\n\n转义字符。当位于在扩展正则表达式中具有特殊含义的任何字符之前时，转义字符除去该字符的任何特殊含义。\n\n例如，命令行： /a\\/\\//\n\n将与模式 a // 匹配，因为反斜杠否定斜杠作为正则表达式定界符的通常含义。要将反斜杠本身指定为字符，则使用双反斜杠。有关反斜杠及其使用的更多信息，请参阅以下关于转义序列的内容。\n","source":"_posts/0_代码相关/awk.md","raw":"---\ntitle: AWK语法\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n\n---\n\nAWK工具书\n\n<!-- more -->\n\n[TOC]\n\n# AWK\n\n\n\n## 1. 格式\n\n### 1). 命令形式\n\n`awk [-F|-f|-v] ‘BEGIN{} //{command1; command2} END{}’ file`\n\n> BEGIN{ 这里面放的是执行前的语句 } ，其中的语句只会运行一次\n> END {这里面放的是处理完所有的行后要执行的语句 } 。其中的语句也只会运行一次\n> {这里面放的是处理每一行时要执行的语句} ，这里的语句会读文件的每行都运行一次\n\n [-F|-f|-v]   大参数，-F指定分隔符，-f调用脚本，-v定义变量 var=value\n\n'  '          引用代码块\n\nBEGIN   初始化代码块，在对每一行进行处理之前，初始化代码，主要是引用全局变量，设置FS分隔符\n\n//           匹配代码块，可以是字符串或正则表达式\n\n{}           命令代码块，包含一条或多条命令\n\n；          多条命令使用分号分隔\n\nEND      结尾代码块，在对每一行进行处理之后再执行的代码块，主要是进行最终计算或输出结尾摘要信息\n\n\n\n\n\n### 2). 特殊要点\n\n[linux awk 内置变量使用介绍](https://www.cnblogs.com/chengmo/archive/2010/10/06/1844818.html)\n\n\n| 特殊符号       | 含义                                                         |\n| -------------- | ------------------------------------------------------------ |\n| $0             | 表示整个当前行                                               |\n| $1             | 每行第一个字段                                               |\n| NF             | 字段数量变量                                                 |\n| NR             | 每行的记录号，多文件记录递增                                 |\n| FNR            | 与NR类似，不过多文件记录不递增，每个文件都从1开始            |\n| \\t             | 制表符                                                       |\n| \\n             | 换行符                                                       |\n| FS             | BEGIN时定义分隔符，输入字段分隔符 默认是空格                 |\n| RS             | 输入的记录分隔符， 默认为换行符(即文本是按一行一行输入)      |\n| ~              | 匹配，与==相比不是精确比较                                   |\n| !~             | 不匹配，不精确比较                                           |\n| ==             | 等于，必须全部相等，精确比较                                 |\n| !=             | 不等于，精确比较                                             |\n| &&             | 逻辑与                                                       |\n| \\|\\|           | 逻辑或                                                       |\n| +              | 匹配时表示1个或1个以上                                       |\n| /\\[0-9][0-9]+/ | 两个或两个以上数字                                           |\n| /\\[0-9][0-9]*/ | 一个或一个以上数字                                           |\n| FILENAME       | 文件名                                                       |\n| OFS            | 输出字段分隔符， 默认也是空格，可以改为制表符等              |\n| ORS            | 输出的记录分隔符，默认为换行符,即处理结果也是一行一行输出到屏幕 |\n| -F'[:#/]'      | 定义三个分隔符                                               |\n\n## 2. 内置函数\n\n[linux awk 内置函数详细介绍](https://www.cnblogs.com/chengmo/archive/2010/10/08/1845913.html)\n\n> 这篇博客的函数都写在begin{}中\n\n### 1). 算术函数\n\n| **函数名**      | **说明**                                                     |\n| --------------- | ------------------------------------------------------------ |\n| atan2( y, x )   | 返回 y/x 的反正切。                                          |\n| cos( x )        | 返回 x 的余弦；x 是弧度。                                    |\n| sin( x )        | 返回 x 的正弦；x 是弧度。                                    |\n| exp( x )        | 返回 x 幂函数。                                              |\n| log( x )        | 返回 x 的自然对数。                                          |\n| sqrt( x )       | 返回 x 平方根。                                              |\n| int( x )        | 返回 x 的截断至整数的值。                                    |\n| rand( )         | 返回任意数字 n，其中 0 <= n < 1。                            |\n| srand( [Expr] ) | 将 rand 函数的种子值设置为 Expr 参数的值。返回先前的种子值。 |\n\n```BASH\n# OFMT 设置输出数据格式是保留3位小数\nawk 'BEGIN{OFMT=\"%.3f\";fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;}'\n# 0.841 22026.466 2.303 3 \n\n#获得随机数：\nawk 'BEGIN{srand();fr=int(100*rand());print fr;}'\n# 78\n```\n\n### 2). 字符串函数\n\n| **函数**                            | **说明**                                                     |\n| ----------------------------------- | ------------------------------------------------------------ |\n| gsub( Ere, Repl, [ In ] )           | 除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行，。 |\n| sub( Ere, Repl, [ In ] )            | 用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere  参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &（和符号）由 In  参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。 |\n| index( String1, String2 )           | 在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。 |\n| length [(String)]                   | 返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。 |\n| blength [(String)]                  | 返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。 |\n| substr( String, M, [ N ] )          | 返回具有 N 参数指定的字符数量子串。子串从 String  参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N  参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。 |\n| match( String, Ere )                | 在 String 参数指定的字符串（Ere  参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART  特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。 |\n| split( String, A, [Ere] )           | 将 String 参数指定的参数分割为数组元素 A[1], A[2], . .  ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS  特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。 |\n| tolower( String )                   | 返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。 |\n| toupper( String )                   | 返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。 |\n| sprintf(Format, Expr, Expr, . . . ) | 根据 Format 参数指定的 [printf](http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/printf.htm#a8zed0gaco) 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。 |\n\n> Ere都可以是正则表达式\n\n```BASH\n# 在 info中查找满足正则表达式，/[0-9]+/ 用””替换，并且替换后的值，赋值给info 未给info值，默认是$0\nawk 'BEGIN{info=\"this is a test2010test!\";gsub(/[0-9]+/,\"!\",info);print info}' \n# this is a test!test!\n\n# 查找字符串（index使用）\nawk 'BEGIN{info=\"this is a test2010test!\";print index(info,\"test\")?\"ok\":\"no found\";}'\n# ok\n# 未找到，返回0\n\n# 正则表达式匹配查找(match使用）\nawk 'BEGIN{info=\"this is a test2010test!\";print match(info,/[0-9]+/)?\"ok\":\"no found\";}'   # ok \n\n# 截取字符串(substr使用）\nawk 'BEGIN{info=\"this is a test2010test!\";print substr(info,4,10);}'\n# s is a tes\n# 从第 4个 字符开始，截取10个长度字符串\n\n# 字符串分割（split使用）\nawk 'BEGIN{info=\"this is a test\";split(info,tA,\" \");print length(tA);for(k in tA){print k,tA[k];}}'\n# 4\n# 4 test\n# 1 this\n# 2 is\n# 3 a\n# 分割info,动态创建数组tA,这里比较有意思，awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意。\n```\n\n> awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意\n>\n> 应该是因为awk中数组其实是字段。\n\n**格式化字符串输出（sprintf使用）**\n\n格式化字符串包括两部分内容: 一部分是正常字符, 这些字符将按原样输出; 另一部分是格式化规定字符, 以\"%\"开始, 后跟一个或几个规定字符,用来确定输出内容格式。 \n\n| **格式符** | **说明**                      |\n| ---------- | ----------------------------- |\n| %d         | 十进制有符号整数              |\n| %u         | 十进制无符号整数              |\n| %f         | 浮点数                        |\n| %s         | 字符串                        |\n| %c         | 单个字符                      |\n| %p         | 指针的值                      |\n| %e         | 指数形式的浮点数              |\n| %x         | %X 无符号以十六进制表示的整数 |\n| %o         | 无符号以八进制表示的整数      |\n| %g         | 自动选择合适的表示法          |\n\n```bash\nawk 'BEGIN{n1=124.113;n2=-1.224;n3=1.2345; printf(\"%.2f,%.2u,%.2g,%X,%o\\n\",n1,n2,n3,n1,n1);}'\n# 124.11,18446744073709551615,1.2,7C,174 \n```\n\n\n\n### 3). 时间函数\n\n| **函数名**                         | **说明**                                                     |\n| ---------------------------------- | ------------------------------------------------------------ |\n| mktime( YYYY MM DD HH MM SS[ DST]) | 生成时间格式                                                 |\n| strftime([format [, timestamp]])   | 格式化时间输出，将时间戳转为时间字符串  具体格式，见下表.    |\n| systime()                          | 得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数 |\n\n```bash\n# 创建指定时间(mktime使用）\nawk 'BEGIN{tstamp=mktime(\"2001 01 01 12 12 12\");print strftime(\"%c\",tstamp);}'\n# 2001年01月01日 星期一 12时12分12秒 \n\n# 求2个时间段中间时间差,介绍了strftime使用方法 \nawk 'BEGIN{tstamp1=mktime(\"2001 01 01 12 12 12\");tstamp2=mktime(\"2001 02 01 0 0 0\");print tstamp2-tstamp1;}'\n# 2634468 \n\nawk 'BEGIN{tstamp1=mktime(\"2001 01 01 12 12 12\");tstamp2=systime();print tstamp2-tstamp1;}'\n# 308201392 \n```\n\n**strftime日期和时间格式说明符**\n\n| 格式 | 描述                                                     |\n| ---- | -------------------------------------------------------- |\n| %a   | 星期几的缩写(Sun)                                        |\n| %A   | 星期几的完整写法(Sunday)                                 |\n| %b   | 月名的缩写(Oct)                                          |\n| %B   | 月名的完整写法(October)                                  |\n| %c   | 本地日期和时间                                           |\n| %d   | 十进制日期                                               |\n| %D   | 日期 08/20/99                                            |\n| %e   | 日期，如果只有一位会补上一个空格                         |\n| %H   | 用十进制表示24小时格式的小时                             |\n| %I   | 用十进制表示12小时格式的小时                             |\n| %j   | 从1月1日起一年中的第几天                                 |\n| %m   | 十进制表示的月份                                         |\n| %M   | 十进制表示的分钟                                         |\n| %p   | 12小时表示法(AM/PM)                                      |\n| %S   | 十进制表示的秒                                           |\n| %U   | 十进制表示的一年中的第几个星期(星期天作为一个星期的开始) |\n| %w   | 十进制表示的星期几(星期天是0)                            |\n| %W   | 十进制表示的一年中的第几个星期(星期一作为一个星期的开始) |\n| %x   | 重新设置本地日期(08/20/99)                               |\n| %X   | 重新设置本地时间(12：00：00)                             |\n| %y   | 两位数字表示的年(99)                                     |\n| %Y   | 当前月份                                                 |\n| %Z   | 时区(PDT)                                                |\n| %%   | 百分号(%)                                                |\n\n### 4). 一般函数\n\n| **函数**                           | **说明**                                                     |\n| ---------------------------------- | ------------------------------------------------------------ |\n| close( Expression )                | 用同一个带字符串值的 Expression 参数来关闭由 print 或  printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回  0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。 |\n| system(Command )                   | 执行 Command 参数指定的命令，并返回退出状态。等同于 [system](http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf2/system.htm#a181929c) 子例程。 |\n| Expression \\| getline [ Variable ] | 从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 [popen](http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/popen.htm#sk62b0shad)  子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且  Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0  记录变量和 NF 特殊变量设置为从流读取的记录。 |\n| getline [ Variable ] < Expression  | 从 Expression 参数指定的文件读取输入的下一个记录，并将  Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline  函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。 |\n| getline [ Variable ]               | 将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。 |\n\n```bash\n# 打开外部文件（close用法）\nawk 'BEGIN{while(\"cat /etc/passwd\"|getline){print $0;};close(\"/etc/passwd\");}'\n# root:x:0:0:root:/root:/bin/bash\n# bin:x:1:1:bin:/bin:/sbin/nologin\n# daemon:x:2:2:daemon:/sbin:/sbin/nologin \n\n# 逐行读取外部文件(getline使用方法）\nawk 'BEGIN{while(getline < \"/etc/passwd\"){print $0;};close(\"/etc/passwd\");}'\n# root:x:0:0:root:/root:/bin/bash\n# bin:x:1:1:bin:/bin:/sbin/nologin\n# daemon:x:2:2:daemon:/sbin:/sbin/nologin \n\nawk 'BEGIN{print \"Enter your name:\";getline name;print name;}'\n# Enter your name:\n# wangdongdong\n# wangdongdong\n\n# 调用外部应用程序(system使用方法）\nawk 'BEGIN{b=system(\"python helloworld.py\");print b;}'\n# helloworld\n# 0\n```\n\n\n\n## 3. 数组\n\n[linux awk数组操作详细介绍](https://www.cnblogs.com/chengmo/archive/2010/10/08/1846190.html)\n\n\n\n\n\n## 4. 案例\n\n### 1). print\n\nprint 是awk打印指定内容的主要命令\n\n```bash\nawk '{print}' /etc/passwd == awk '{print $0}' /etc/passwd \nawk '{print \" \"}' /etc/passwd #不输出passwd的内容，而是输出相同个数的空行，进一步解释了awk是一行一行处理文本\nawk '{print \"a\"}' /etc/passwd #输出相同个数的a行，一行只有一个a字母\nawk -F\":\" '{print $1}' /etc/passwd \nawk -F: '{print $1; print $2}' /etc/passwd #将每一行的前二个字段，分行输出，进一步理解一行一行处理文本\nawk -F: '{print $1,$3,$6}' OFS=\"\\t\" /etc/passwd #输出字段1,3,6，以制表符作为分隔符\n```\n\n\n\n### 2). -f指定脚本文件\n\n```bash\nawk -f script.awk  file\n\n# script.awk内容如下：\nBEGIN{\nFS=\":\"\n}\n{print $1}   #效果与awk -F\":\" '{print $1}'相同,只是分隔符使用FS在代码自身中指定\n\nawk 'BEGIN{X=0} /^$/{ X+=1 } END{print \"I find\",X,\"blank lines.\"}' test \n# I find 4 blank lines.\n\nls -l|awk 'BEGIN{sum=0} !/^d/{sum+=$5} END{print \"total size is\",sum}' #计算文件大小 \n#total size is 17487\n```\n\n\n\n### 3). -F指定分隔符\n\n\\$1 指指定分隔符后，第一个字段，$3第三个字段， \\t是制表符\n\n一个或多个连续的空格或制表符看做一个定界符，即多个空格看做一个空格\n\n```bash\nawk -F\":\" '{print $1}'  /etc/passwd\nawk -F\":\" '{print $1 $3}'  /etc/passwd #$1与$3相连输出，不分隔\nawk -F\":\" '{print $1,$3}'  /etc/passwd #多了一个逗号，$1与$3使用空格分隔\nawk -F\":\" '{print $1 \" \" $3}'  /etc/passwd #$1与$3之间手动添加空格分隔\nawk -F\":\" '{print \"Username:\" $1 \"\\t\\t Uid:\" $3 }' /etc/passwd #自定义输出  \nawk -F: '{print NF}' /etc/passwd #显示每行有多少字段\nawk -F: '{print $NF}' /etc/passwd #将每行第NF个字段的值打印出来\nawk -F: 'NF==4 {print }' /etc/passwd #显示只有4个字段的行\nawk -F: 'NF>2{print $0}' /etc/passwd #显示每行字段数量大于2的行\nawk '{print NR,$0}' /etc/passwd #输出每行的行号\nawk -F: '{print NR,NF,$NF,\"\\t\",$0}' /etc/passwd #依次打印行号，字段数，最后字段值，制表符，每行内容\nawk -F: 'NR==5{print}'  /etc/passwd #显示第5行\nawk -F: 'NR==5 || NR==6{print}'  /etc/passwd #显示第5行和第6行\nroute -n|awk 'NR!=1{print}' #不显示第一行\n```\n\n\n\n### 4). IF语句\n\n必须用在{}中，且比较内容用()扩起来\n\n```bash\nawk -F: '{if($1~/mail/) print $1}' /etc/passwd #简写\nawk -F: '{if($1~/mail/) {print $1}}' /etc/passwd #全写\nawk -F: '{if($1~/mail/) {print $1} else {print $2}}' /etc/passwd #if...else...\n\nawk -F: '{if($3>100) print \"large\"; else print \"small\"}' /etc/passwd\nawk -F: 'BEGIN{A=0;B=0} {if($3>100) {A++; print \"large\"} else {B++; print \"small\"}} END{print A,\"\\t\",B}' /etc/passwd  #ID大于100,A加1，否则B加1\nawk -F: '{if($3<100) next; else print}' /etc/passwd #小于100跳过，否则显示\nawk -F: '{print ($3>100 ? \"yes\":\"no\")}'  /etc/passwd \nawk -F: '{print ($3>100 ? $3\":\\tyes\":$3\":\\tno\")}'  /etc/passwd\n```\n\n\n\n### 5). 条件表达式\n\n**==   !=   >   >=** \n\n```bash\nawk -F\":\" '$1==\"mysql\"{print $3}' /etc/passwd  \nawk -F\":\" '{if($1==\"mysql\") print $3}' /etc/passwd #与上面相同 \nawk -F\":\" '$1!=\"mysql\"{print $3}' /etc/passwd #不等于\nawk -F\":\" '$3>1000{print $3}' /etc/passwd #大于\nawk -F\":\" '$3>=100{print $3}' /etc/passwd #大于等于\nawk -F\":\" '$3<1{print $3}' /etc/passwd #小于\nawk -F\":\" '$3<=1{print $3}' /etc/passwd #小于等于\n```\n\n\n\n### 6). 逻辑运算符\n\n**&&　||** \n\n```bash\nawk -F: '$1~/mail/ && $3>8 {print }' /etc/passwd #逻辑与，$1匹配mail，并且$3>8\nawk -F: '{if($1~/mail/ && $3>8) print }' /etc/passwd\nawk -F: '$1~/mail/ || $3>1000 {print }' /etc/passwd #逻辑或\nawk -F: '{if($1~/mail/ || $3>1000) print }' /etc/passwd \n```\n\n\n\n### 7). 数值运算\n\n```bash\nawk -F: '$3 > 100' /etc/passwd    \nawk -F: '$3 > 100 || $3 < 5' /etc/passwd  \nawk -F: '$3+$4 > 200' /etc/passwd\nawk -F: '/mysql|mail/{print $3+10}' /etc/passwd #第三个字段加10打印 \nawk -F: '/mysql/{print $3-$4}' /etc/passwd #减法\nawk -F: '/mysql/{print $3*$4}' /etc/passwd #求乘积\nawk '/MemFree/{print $2/1024}' /proc/meminfo #除法\nawk '/MemFree/{print int($2/1024)}' /proc/meminfo #取整\n```\n\n\n\n### 8). 输出分隔符OFS\n\n```bash\nawk '$6 ~ /FIN/ || NR==1 {print NR,$4,$5,$6}' OFS=\"\\t\" netstat.txt\nawk '$6 ~ /WAIT/ || NR==1 {print NR,$4,$5,$6}' OFS=\"\\t\" netstat.txt        \n#输出字段6匹配WAIT的行，其中输出每行行号，字段4，5,6，并使用制表符分割字段\n```\n\n\n\n### 9). 输出处理结果到文件\n\n①在命令代码块中直接输出 route -n|awk 'NR!=1{print > \"./fs\"}'   \n\n②使用重定向进行输出  route -n|awk 'NR!=1{print}'  > ./fs\n\n\n\n### 10). 格式化输出\n\n```bash\nnetstat -anp|awk '{printf \"%-8s %-8s %-10s\\n\",$1,$2,$3}' \n```\n\nprintf表示格式输出\n\n%格式化输出分隔符\n\n-8长度为8个字符\n\ns表示字符串类型\n\n打印每行前三个字段，指定第一个字段输出字符串类型(长度为8)，第二个字段输出字符串类型(长度为8),\n\n第三个字段输出字符串类型(长度为10)\n\n```bash\nnetstat -anp|awk '$6==\"LISTEN\" || NR==1 {printf \"%-10s %-10s %-10s \\n\",$1,$2,$3}'\nnetstat -anp|awk '$6==\"LISTEN\" || NR==1 {printf \"%-3s %-10s %-10s %-10s \\n\",NR,$1,$2,$3}'\n```\n\n\n\n### 11). 数组\n\n```bash\nnetstat -anp|awk 'NR!=1{a[$6]++} END{for (i in a) print i,\"\\t\",a[i]}'\nnetstat -anp|awk 'NR!=1{a[$6]++} END{for (i in a) \\\n  printf \"%-20s %-10s %-5s \\n\", i,\"\\t\",a[i]}'\n```\n\n\n\n### 12). 其他应用\n\n```bash\nawk -F: '{print NF}' helloworld.sh #输出文件每行有多少字段\nawk -F: '{print $1,$2,$3,$4,$5}' helloworld.sh #输出前5个字段\nawk -F: '{print $1,$2,$3,$4,$5}' OFS='\\t' helloworld.sh #输出前5个字段并使用制表符分隔输出\nawk -F: '{print NR,$1,$2,$3,$4,$5}' OFS='\\t' helloworld.sh #制表符分隔输出前5个字段，并打印行号\nawk -F'[:#]' '{print NF}'  helloworld.sh #指定多个分隔符: #，输出每行多少字段\nawk -F'[:#]' '{print $1,$2,$3,$4,$5,$6,$7}' OFS='\\t' helloworld.sh #制表符分隔输出多字段\nawk -F'[:#/]' '{print NF}' helloworld.sh #指定三个分隔符，并输出每行字段数\nawk -F'[:#/]' '{print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12}' hi.sh #制表符分隔输出多字段\n\n#计算/home目录下，普通文件的大小，使用KB作为单位\nls -l|awk 'BEGIN{sum=0} !/^d/{sum+=$5} END{print \"total size is:\",sum/1024,\"KB\"}'\nls -l|awk 'BEGIN{sum=0} !/^d/{sum+=$5} END{print \"total size is:\",int(sum/1024),\"KB\"}' #int是取整的意思\n\n#统计netstat -anp 状态为LISTEN和CONNECT的连接数量分别是多少\nnetstat -anp|awk '$6~/LISTEN|CONNECTED/{sum[$6]++} END{for (i in sum) printf \"%-10s %-6s %-3s \\n\", i,\" \",sum[i]}'\n\n#统计/home目录下不同用户的普通文件的总数是多少？\nls -l|awk 'NR!=1 && !/^d/{sum[$3]++} END{for (i in sum) printf \"%-6s %-5s %-3s \\n\",i,\" \",sum[i]}'   \n\n#统计/home目录下不同用户的普通文件的大小总size是多少？\nls -l|awk 'NR!=1 && !/^d/{sum[$3]+=$5} END{for (i in sum) printf \"%-6s %-5s %-3s %-2s \\n\",i,\" \",sum[i]/1024/1024,\"MB\"}'\n\n#输出成绩表\nawk 'BEGIN{math=0;eng=0;com=0;printf \"Lineno.   Name    No.    Math   English   Computer    Total\\n\";printf \"------------------------------------------------------------\\n\"}{math+=$3; eng+=$4; com+=$5;printf \"%-8s %-7s %-7s %-7s %-9s %-10s %-7s \\n\",NR,$1,$2,$3,$4,$5,$3+$4+$5} END{printf \"------------------------------------------------------------\\n\";printf \"%-24s %-7s %-9s %-20s \\n\",\"Total:\",math,eng,com;printf \"%-24s %-7s %-9s %-20s \\n\",\"Avg:\",math/NR,eng/NR,com/NR}' test\n\n```\n\n\n\n### 13). Vlookup\n\n[awk实现excel vlookup](https://www.jianshu.com/p/01906e4b7af7)\n\n```bash\n# 数据\n$ cat a.txt \n1       abc\n2       def\n3       ghi\n4       jlm\n$ cat b.txt \n3       shit\n1       rubb\n# 方法\nawk 'NR==FNR{a[$1]=$2;next}NR>FNR{if($1 in a)print $0\"\\t\"a[$1]}' a.txt b.txt \n# 3       shit    ghi\n# 1       rubb    abc\n```\n\n> 注：a是一个字典，`NR==FNR`时在第一个文件，`NR>FNR`时在读b.txt\n>\n> `NR==FNR{a[$1]=$2;next}`是使用第一个文件`a.txt`初始化字典，将其每行`$1`作为key，`$2`作为value\n>\n> `if($1 in a)`指序号`$1`是否在a的key中，如果在打印的`a[$1]`为key：`$1`对于的value\n>\n> 查看字典：`awk 'NR==FNR{a[$1]=$2;next}END{for(k in a){print k,a[k]}}' a.txt b.txt`\n\n\n\n\n\n\n\n### 14). group by\n\n[总结一下awk的group by功能](http://www.cppblog.com/datouwang/articles/45582.html)\n\n通过数组的key作为作为on的条件，value进行聚合运算\n\n```bash\n# 数据\ncat c.txt\n06 01 06 30      2.700         81.000\n06 01 06 45      3.900        175.500\n06 01 07 00      2.400          0.000\n06 01 07 15      0.160          2.400\n06 01 08 00      0.380          0.000\n06 01 08 15      0.300          4.500\n06 01 08 30      3.900        117.000\n06 01 08 45      5.520        248.400\n06 01 09 00      6.600          0.000\n06 01 09 15      9.600        144.000\n06 01 09 30      3.300         99.000\n06 01 09 45      2.300        103.500\n06 01 10 15      7.880        118.200\n06 01 10 30     10.820        324.600\n06 01 10 45      7.360        331.200\n06 01 11 00     11.940          0.000\n06 01 11 15      4.200         63.000\n06 01 11 30      3.180         95.400\n06 01 11 45      1.800         81.000\n06 01 12 00     30.970          0.000\n# 实现\n# 单列group by单列聚合\nawk '{a[$2]+=$5}END{for(i in a) printf \"%s %10.3f\\n\",i,a[i]}' c.txt\n\n# 单列group by多列聚合\nawk '{a[$2]+=$5;b[$2]+=$6}END{for(i in a) printf \"%s %10.3f %14.3f\\n\",i,a[i],b[i]}' c.txt \n\n# 多列group by单列聚合\nawk '{a[$2\" \"$3]+=$5}END{for(i in a) printf \"%s %10.3f\\n\",i,a[i]}' c.txt # 求和\nawk '{a[$2\" \"$3]+=1}END{for(i in a) printf \"%s %10.3f\\n\",i,a[i]}' c.txt # 计数\nawk '{s[$2\" \"$3]+=$5;n[$2\" \"$3]+=1}END{for(i in s){avg_v=s[i]/n[i];printf \"%s %10.3f\\n\",i,avg_v}}' c.txt # 平均\n \n# 多列group by多列聚合：多来一个数组\nawk '{a[$2\" \"$3]+=$5;b[$2\" \"$3]+=$6}END{for(i in a) printf \"%s %14.3f %14.3f\\n\",i,a[i],b[i]}' c.txt\n```\n\nawk -F' ' '/from/{print}'\n\n```\nawk '{for(i=0;++i<=NF;)a[i]=a[i]?a[i] FS $i:$i}END{for(i=0;i++<NF;)printf a[i]\"\\b \\n\"}' \n```\n\n\n\n## 5. 正则表达式\n\n[awk 正则表达式、正则运算符详细介绍](https://www.cnblogs.com/myyan/p/4765683.html)\n\n[linux shell 正则表达式(BREs,EREs,PREs)差异比较](https://www.cnblogs.com/chengmo/archive/2010/10/10/1847287.html)\n\n\n\n### 1). +\n\n指定如果**一个或多个字符**或扩展正则表达式的具体值（在 +（加号）前）在这个字符串中，则字符串匹配。\n\n命令行：`awk '/smith+ern/' testfile`\n\n将包含字符 smit，后跟一个或多个 h 字符，并以字符 ern 结束的字符串的任何记录打印至标准输出。\n\n此示例中的输出是：smithern, harry smithhern, anne\n\n\n\n### 2). ?\n\n指定如果**零个或一个字符**或扩展正则表达式的具体值（在 ?（问号）之前）在字符串中，则字符串匹配。\n\n命令行： `awk '/smith?/' testfile`\n\n将包含字符 `smit`，后跟零个或一个 `h` 字符的实例的所有记录打印至标准输出。\n\n此示例中的输出是：smith, alan smithern, harry smithhern, anne smitters, alexis\n\n\n\n### 3). |\n\n指定如果以 |（垂直线）隔开的字符串的**任何一个在字符串中**，则字符串匹配。\n\n命令行：`awk '/allen | alan /' testfile`\n\n将包含字符串 allen 或 alan 的所有记录打印至标准输出。\n\n此示例中的输出是：smiley, allen smith, alan\n\n\n\n### 4). ()\n\n在正则表达式中将字符串组合在一起。\n\n命令行： `awk '/a(ll)?(nn)?e/' testfile`\n\n将具有字符串 `ae` 或 `alle` 或 `anne` 或 `allnne` 的所有记录打印至标准输出。\n\n此示例中的输出是：smiley, allen smithhern, anne\n\n\n\n### 5). {m}\n\n指定如果**正好有 m 个模式的具体值位于字符串中**，则字符串匹配。\n\n命令行：awk '/l{2}/' testfile\n\n打印至标准输出：smiley, allen\n\n\n\n### 6). {m,}\n\n指定如果**至少 m 个模式的具体值在字符串中**，则字符串匹配。\n\n命令行：`awk '/t{2,}/' testfile`\n\n打印至标准输出：smitters, alexis\n\n\n\n### 7). {m, n}\n\n指定如果 **m 和 n 之间（包含的 m 和 n）个模式**的具体值在字符串中（其中m<= n），则字符串匹配。\n\n命令行：`awk '/er{1, 2}/' testfile`\n\n打印至标准输出：smithern, harry smithern, anne smitters, alexis\n\n\n\n### 8). [String]\n\n指定正则表达式与方括号内 **String 变量指定的任何字符匹配**。\n\n命令行：`awk '/sm[a-h]/' testfile`\n\n将具有 `sm` 后跟以字母顺序从 `a` 到 `h` 排列的任何字符的所有记录打印至标准输出。\n\n此示例的输出是：smawley, andy\n\n\n\n### 9). \\[^ String]\n\n在 [ ]（方括号）和在指定字符串开头的 ^ (插入记号) 指明**正则表达式与方括号内的任何字符不匹配。**\n\n命令行：`awk '/sm\\[^a-h]/' testfile`\n\n打印至标准输出：smiley, allen smith, alan smithern, harry smithhern, anne smitters, alexis\n\n\n\n### 10). ~, !~\n\n表示**指定变量与正则表达式****匹配**（\\~）或**不匹配**（!~）的条件语句。\n\n命令行：` awk '$1 ~ /n/' testfile`\n\n将第一个字段包含字符 `n` 的所有记录打印至标准输出。\n\n此示例中的输出是：smithern, harry smithhern, anne\n\n\n\n### 11). ^\n\n**指定**字段或记录的**开头**。\n\n命令行： awk '$2 ~ /^h/' testfile\n\n将把字符 `h` 作为第二个字段的第一个字符的所有记录打印至标准输出。\n\n此示例中的输出是：smithern, harry\n\n\n\n### 12). $\n\n**指定**字段或记录的**末尾**。\n\n命令行： awk '\\$2 ~ /y$/' testfile\n\n将把字符 `y` 作为第二个字段的最后一个字符的所有记录打印至标准输出。\n\n此示例中的输出是：smawley, andy smithern, harry\n\n\n\n### 13). .（句号）\n\n**表示**除了在空白末尾的终端换行字符以外的**任何一个字符**。\n\n命令行： awk '/a..e/' testfile\n\n将具有以两个字符隔开的字符 `a` 和 e 的所有记录打印至标准输出。\n\n此示例中的输出是：smawley, andy smiley, allen smithhern, anne\n\n\n\n### 14). *（星号）\n\n表示**零个或更多的任意字符。**\n\n命令行： awk '/a.*e/' testfile\n\n将具有以零个或更多字符隔开的字符 `a` 和 e 的所有记录打印至标准输出。\n\n此示例中的输出是：smawley, andy smiley, allen smithhern, anne smitters, alexis\n\n\n\n### 15). \\ (反斜杠)\n\n转义字符。当位于在扩展正则表达式中具有特殊含义的任何字符之前时，转义字符除去该字符的任何特殊含义。\n\n例如，命令行： /a\\/\\//\n\n将与模式 a // 匹配，因为反斜杠否定斜杠作为正则表达式定界符的通常含义。要将反斜杠本身指定为字符，则使用双反斜杠。有关反斜杠及其使用的更多信息，请参阅以下关于转义序列的内容。\n","slug":"0_代码相关/awk","published":1,"updated":"2022-03-01T03:49:35.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4r002o8s322if3ca2x","content":"<p>AWK工具书</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"AWK\"><a href=\"#AWK\" class=\"headerlink\" title=\"AWK\"></a>AWK</h1><h2 id=\"1-格式\"><a href=\"#1-格式\" class=\"headerlink\" title=\"1. 格式\"></a>1. 格式</h2><h3 id=\"1-命令形式\"><a href=\"#1-命令形式\" class=\"headerlink\" title=\"1). 命令形式\"></a>1). 命令形式</h3><p><code>awk [-F|-f|-v] ‘BEGIN&#123;&#125; //&#123;command1; command2&#125; END&#123;&#125;’ file</code></p>\n<blockquote>\n<p>BEGIN{ 这里面放的是执行前的语句 } ，其中的语句只会运行一次<br>END {这里面放的是处理完所有的行后要执行的语句 } 。其中的语句也只会运行一次<br>{这里面放的是处理每一行时要执行的语句} ，这里的语句会读文件的每行都运行一次</p>\n</blockquote>\n<p> [-F|-f|-v]   大参数，-F指定分隔符，-f调用脚本，-v定义变量 var=value</p>\n<p>‘  ‘          引用代码块</p>\n<p>BEGIN   初始化代码块，在对每一行进行处理之前，初始化代码，主要是引用全局变量，设置FS分隔符</p>\n<p>//           匹配代码块，可以是字符串或正则表达式</p>\n<p>{}           命令代码块，包含一条或多条命令</p>\n<p>；          多条命令使用分号分隔</p>\n<p>END      结尾代码块，在对每一行进行处理之后再执行的代码块，主要是进行最终计算或输出结尾摘要信息</p>\n<h3 id=\"2-特殊要点\"><a href=\"#2-特殊要点\" class=\"headerlink\" title=\"2). 特殊要点\"></a>2). 特殊要点</h3><p><a href=\"https://www.cnblogs.com/chengmo/archive/2010/10/06/1844818.html\">linux awk 内置变量使用介绍</a></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>特殊符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$0</td>\n<td>表示整个当前行</td>\n</tr>\n<tr>\n<td>$1</td>\n<td>每行第一个字段</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>字段数量变量</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>每行的记录号，多文件记录递增</td>\n</tr>\n<tr>\n<td>FNR</td>\n<td>与NR类似，不过多文件记录不递增，每个文件都从1开始</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>BEGIN时定义分隔符，输入字段分隔符 默认是空格</td>\n</tr>\n<tr>\n<td>RS</td>\n<td>输入的记录分隔符， 默认为换行符(即文本是按一行一行输入)</td>\n</tr>\n<tr>\n<td>~</td>\n<td>匹配，与==相比不是精确比较</td>\n</tr>\n<tr>\n<td>!~</td>\n<td>不匹配，不精确比较</td>\n</tr>\n<tr>\n<td>==</td>\n<td>等于，必须全部相等，精确比较</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于，精确比较</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>\\</td>\n<td></td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配时表示1个或1个以上</td>\n</tr>\n<tr>\n<td>/[0-9][0-9]+/</td>\n<td>两个或两个以上数字</td>\n</tr>\n<tr>\n<td>/[0-9][0-9]*/</td>\n<td>一个或一个以上数字</td>\n</tr>\n<tr>\n<td>FILENAME</td>\n<td>文件名</td>\n</tr>\n<tr>\n<td>OFS</td>\n<td>输出字段分隔符， 默认也是空格，可以改为制表符等</td>\n</tr>\n<tr>\n<td>ORS</td>\n<td>输出的记录分隔符，默认为换行符,即处理结果也是一行一行输出到屏幕</td>\n</tr>\n<tr>\n<td>-F’[:#/]’</td>\n<td>定义三个分隔符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2-内置函数\"><a href=\"#2-内置函数\" class=\"headerlink\" title=\"2. 内置函数\"></a>2. 内置函数</h2><p><a href=\"https://www.cnblogs.com/chengmo/archive/2010/10/08/1845913.html\">linux awk 内置函数详细介绍</a></p>\n<blockquote>\n<p>这篇博客的函数都写在begin{}中</p>\n</blockquote>\n<h3 id=\"1-算术函数\"><a href=\"#1-算术函数\" class=\"headerlink\" title=\"1). 算术函数\"></a>1). 算术函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>函数名</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>atan2( y, x )</td>\n<td>返回 y/x 的反正切。</td>\n</tr>\n<tr>\n<td>cos( x )</td>\n<td>返回 x 的余弦；x 是弧度。</td>\n</tr>\n<tr>\n<td>sin( x )</td>\n<td>返回 x 的正弦；x 是弧度。</td>\n</tr>\n<tr>\n<td>exp( x )</td>\n<td>返回 x 幂函数。</td>\n</tr>\n<tr>\n<td>log( x )</td>\n<td>返回 x 的自然对数。</td>\n</tr>\n<tr>\n<td>sqrt( x )</td>\n<td>返回 x 平方根。</td>\n</tr>\n<tr>\n<td>int( x )</td>\n<td>返回 x 的截断至整数的值。</td>\n</tr>\n<tr>\n<td>rand( )</td>\n<td>返回任意数字 n，其中 0 &lt;= n &lt; 1。</td>\n</tr>\n<tr>\n<td>srand( [Expr] )</td>\n<td>将 rand 函数的种子值设置为 Expr 参数的值。返回先前的种子值。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># OFMT 设置输出数据格式是保留3位小数</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;OFMT=&quot;%.3f&quot;;fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 0.841 22026.466 2.303 3 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获得随机数：</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 78</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-字符串函数\"><a href=\"#2-字符串函数\" class=\"headerlink\" title=\"2). 字符串函数\"></a>2). 字符串函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gsub( Ere, Repl, [ In ] )</td>\n<td>除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行，。</td>\n</tr>\n<tr>\n<td>sub( Ere, Repl, [ In ] )</td>\n<td>用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere  参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &amp;（和符号）由 In  参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>index( String1, String2 )</td>\n<td>在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。</td>\n</tr>\n<tr>\n<td>length [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>blength [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>substr( String, M, [ N ] )</td>\n<td>返回具有 N 参数指定的字符数量子串。子串从 String  参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N  参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。</td>\n</tr>\n<tr>\n<td>match( String, Ere )</td>\n<td>在 String 参数指定的字符串（Ere  参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART  特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。</td>\n</tr>\n<tr>\n<td>split( String, A, [Ere] )</td>\n<td>将 String 参数指定的参数分割为数组元素 A[1], A[2], . .  ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS  特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。</td>\n</tr>\n<tr>\n<td>tolower( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>toupper( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>sprintf(Format, Expr, Expr, . . . )</td>\n<td>根据 Format 参数指定的 <a href=\"http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/printf.htm#a8zed0gaco\">printf</a> 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>Ere都可以是正则表达式</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 info中查找满足正则表达式，/[0-9]+/ 用””替换，并且替换后的值，赋值给info 未给info值，默认是$0</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;gsub(/[0-9]+/,&quot;!&quot;,info);print info&#125;&#x27;</span> </span><br><span class=\"line\"><span class=\"comment\"># this is a test!test!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找字符串（index使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print index(info,&quot;test&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># ok</span></span><br><span class=\"line\"><span class=\"comment\"># 未找到，返回0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正则表达式匹配查找(match使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print match(info,/[0-9]+/)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span>   <span class=\"comment\"># ok </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取字符串(substr使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print substr(info,4,10);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># s is a tes</span></span><br><span class=\"line\"><span class=\"comment\"># 从第 4个 字符开始，截取10个长度字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串分割（split使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test&quot;;split(info,tA,&quot; &quot;);print length(tA);for(k in tA)&#123;print k,tA[k];&#125;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 4</span></span><br><span class=\"line\"><span class=\"comment\"># 4 test</span></span><br><span class=\"line\"><span class=\"comment\"># 1 this</span></span><br><span class=\"line\"><span class=\"comment\"># 2 is</span></span><br><span class=\"line\"><span class=\"comment\"># 3 a</span></span><br><span class=\"line\"><span class=\"comment\"># 分割info,动态创建数组tA,这里比较有意思，awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意</p>\n<p>应该是因为awk中数组其实是字段。</p>\n</blockquote>\n<p><strong>格式化字符串输出（sprintf使用）</strong></p>\n<p>格式化字符串包括两部分内容: 一部分是正常字符, 这些字符将按原样输出; 另一部分是格式化规定字符, 以”%”开始, 后跟一个或几个规定字符,用来确定输出内容格式。 </p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>格式符</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%d</td>\n<td>十进制有符号整数</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>十进制无符号整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>单个字符</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>指针的值</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>指数形式的浮点数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>%X 无符号以十六进制表示的整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>无符号以八进制表示的整数</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>自动选择合适的表示法</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;n1=124.113;n2=-1.224;n3=1.2345; printf(&quot;%.2f,%.2u,%.2g,%X,%o\\n&quot;,n1,n2,n3,n1,n1);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 124.11,18446744073709551615,1.2,7C,174 </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-时间函数\"><a href=\"#3-时间函数\" class=\"headerlink\" title=\"3). 时间函数\"></a>3). 时间函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>函数名</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mktime( YYYY MM DD HH MM SS[ DST])</td>\n<td>生成时间格式</td>\n</tr>\n<tr>\n<td>strftime([format [, timestamp]])</td>\n<td>格式化时间输出，将时间戳转为时间字符串  具体格式，见下表.</td>\n</tr>\n<tr>\n<td>systime()</td>\n<td>得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建指定时间(mktime使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;tstamp=mktime(&quot;2001 01 01 12 12 12&quot;);print strftime(&quot;%c&quot;,tstamp);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 2001年01月01日 星期一 12时12分12秒 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 求2个时间段中间时间差,介绍了strftime使用方法 </span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;tstamp1=mktime(&quot;2001 01 01 12 12 12&quot;);tstamp2=mktime(&quot;2001 02 01 0 0 0&quot;);print tstamp2-tstamp1;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 2634468 </span></span><br><span class=\"line\"></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;tstamp1=mktime(&quot;2001 01 01 12 12 12&quot;);tstamp2=systime();print tstamp2-tstamp1;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 308201392 </span></span><br></pre></td></tr></table></figure>\n<p><strong>strftime日期和时间格式说明符</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>星期几的缩写(Sun)</td>\n</tr>\n<tr>\n<td>%A</td>\n<td>星期几的完整写法(Sunday)</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>月名的缩写(Oct)</td>\n</tr>\n<tr>\n<td>%B</td>\n<td>月名的完整写法(October)</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>本地日期和时间</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>十进制日期</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>日期 08/20/99</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>日期，如果只有一位会补上一个空格</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>用十进制表示24小时格式的小时</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>用十进制表示12小时格式的小时</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>从1月1日起一年中的第几天</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>十进制表示的月份</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>十进制表示的分钟</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>12小时表示法(AM/PM)</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>十进制表示的秒</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>十进制表示的一年中的第几个星期(星期天作为一个星期的开始)</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>十进制表示的星期几(星期天是0)</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>十进制表示的一年中的第几个星期(星期一作为一个星期的开始)</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>重新设置本地日期(08/20/99)</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>重新设置本地时间(12：00：00)</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>两位数字表示的年(99)</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>当前月份</td>\n</tr>\n<tr>\n<td>%Z</td>\n<td>时区(PDT)</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>百分号(%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-一般函数\"><a href=\"#4-一般函数\" class=\"headerlink\" title=\"4). 一般函数\"></a>4). 一般函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>close( Expression )</td>\n<td>用同一个带字符串值的 Expression 参数来关闭由 print 或  printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回  0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。</td>\n</tr>\n<tr>\n<td>system(Command )</td>\n<td>执行 Command 参数指定的命令，并返回退出状态。等同于 <a href=\"http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf2/system.htm#a181929c\">system</a> 子例程。</td>\n</tr>\n<tr>\n<td>Expression \\</td>\n<td>getline [ Variable ]</td>\n<td>从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 <a href=\"http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/popen.htm#sk62b0shad\">popen</a>  子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且  Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0  记录变量和 NF 特殊变量设置为从流读取的记录。</td>\n</tr>\n<tr>\n<td>getline [ Variable ] &lt; Expression</td>\n<td>从 Expression 参数指定的文件读取输入的下一个记录，并将  Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline  函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。</td>\n</tr>\n<tr>\n<td>getline [ Variable ]</td>\n<td>将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开外部文件（close用法）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;while(&quot;cat /etc/passwd&quot;|getline)&#123;print $0;&#125;;close(&quot;/etc/passwd&quot;);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># root:x:0:0:root:/root:/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class=\"line\"><span class=\"comment\"># daemon:x:2:2:daemon:/sbin:/sbin/nologin </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逐行读取外部文件(getline使用方法）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;while(getline &lt; &quot;/etc/passwd&quot;)&#123;print $0;&#125;;close(&quot;/etc/passwd&quot;);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># root:x:0:0:root:/root:/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class=\"line\"><span class=\"comment\"># daemon:x:2:2:daemon:/sbin:/sbin/nologin </span></span><br><span class=\"line\"></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;print &quot;Enter your name:&quot;;getline name;print name;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># Enter your name:</span></span><br><span class=\"line\"><span class=\"comment\"># wangdongdong</span></span><br><span class=\"line\"><span class=\"comment\"># wangdongdong</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用外部应用程序(system使用方法）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;b=system(&quot;python helloworld.py&quot;);print b;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># helloworld</span></span><br><span class=\"line\"><span class=\"comment\"># 0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-数组\"><a href=\"#3-数组\" class=\"headerlink\" title=\"3. 数组\"></a>3. 数组</h2><p><a href=\"https://www.cnblogs.com/chengmo/archive/2010/10/08/1846190.html\">linux awk数组操作详细介绍</a></p>\n<h2 id=\"4-案例\"><a href=\"#4-案例\" class=\"headerlink\" title=\"4. 案例\"></a>4. 案例</h2><h3 id=\"1-print\"><a href=\"#1-print\" class=\"headerlink\" title=\"1). print\"></a>1). print</h3><p>print 是awk打印指定内容的主要命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print&#125;&#x27;</span> /etc/passwd == awk <span class=\"string\">&#x27;&#123;print $0&#125;&#x27;</span> /etc/passwd </span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print &quot; &quot;&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#不输出passwd的内容，而是输出相同个数的空行，进一步解释了awk是一行一行处理文本</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print &quot;a&quot;&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#输出相同个数的a行，一行只有一个a字母</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd </span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1; print $2&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#将每一行的前二个字段，分行输出，进一步理解一行一行处理文本</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1,$3,$6&#125;&#x27;</span> OFS=<span class=\"string\">&quot;\\t&quot;</span> /etc/passwd <span class=\"comment\">#输出字段1,3,6，以制表符作为分隔符</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-f指定脚本文件\"><a href=\"#2-f指定脚本文件\" class=\"headerlink\" title=\"2). -f指定脚本文件\"></a>2). -f指定脚本文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -f script.awk  file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># script.awk内容如下：</span></span><br><span class=\"line\">BEGIN&#123;</span><br><span class=\"line\">FS=<span class=\"string\">&quot;:&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;<span class=\"built_in\">print</span> <span class=\"variable\">$1</span>&#125;   <span class=\"comment\">#效果与awk -F&quot;:&quot; &#x27;&#123;print $1&#125;&#x27;相同,只是分隔符使用FS在代码自身中指定</span></span><br><span class=\"line\"></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;X=0&#125; /^$/&#123; X+=1 &#125; END&#123;print &quot;I find&quot;,X,&quot;blank lines.&quot;&#125;&#x27;</span> <span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># I find 4 blank lines.</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print &quot;total size is&quot;,sum&#125;&#x27;</span> <span class=\"comment\">#计算文件大小 </span></span><br><span class=\"line\"><span class=\"comment\">#total size is 17487</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-F指定分隔符\"><a href=\"#3-F指定分隔符\" class=\"headerlink\" title=\"3). -F指定分隔符\"></a>3). -F指定分隔符</h3><p>$1 指指定分隔符后，第一个字段，$3第三个字段， \\t是制表符</p>\n<p>一个或多个连续的空格或制表符看做一个定界符，即多个空格看做一个空格</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>  /etc/passwd</span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1 $3&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#$1与$3相连输出，不分隔</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1,$3&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#多了一个逗号，$1与$3使用空格分隔</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1 &quot; &quot; $3&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#$1与$3之间手动添加空格分隔</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print &quot;Username:&quot; $1 &quot;\\t\\t Uid:&quot; $3 &#125;&#x27;</span> /etc/passwd <span class=\"comment\">#自定义输出  </span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print NF&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#显示每行有多少字段</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#将每行第NF个字段的值打印出来</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;NF==4 &#123;print &#125;&#x27;</span> /etc/passwd <span class=\"comment\">#显示只有4个字段的行</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;NF&gt;2&#123;print $0&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#显示每行字段数量大于2的行</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print NR,$0&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#输出每行的行号</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print NR,NF,$NF,&quot;\\t&quot;,$0&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#依次打印行号，字段数，最后字段值，制表符，每行内容</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;NR==5&#123;print&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#显示第5行</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;NR==5 || NR==6&#123;print&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#显示第5行和第6行</span></span><br><span class=\"line\">route -n|awk <span class=\"string\">&#x27;NR!=1&#123;print&#125;&#x27;</span> <span class=\"comment\">#不显示第一行</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-IF语句\"><a href=\"#4-IF语句\" class=\"headerlink\" title=\"4). IF语句\"></a>4). IF语句</h3><p>必须用在{}中，且比较内容用()扩起来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/) print $1&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#简写</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/) &#123;print $1&#125;&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#全写</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/) &#123;print $1&#125; else &#123;print $2&#125;&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#if...else...</span></span><br><span class=\"line\"></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($3&gt;100) print &quot;large&quot;; else print &quot;small&quot;&#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;BEGIN&#123;A=0;B=0&#125; &#123;if($3&gt;100) &#123;A++; print &quot;large&quot;&#125; else &#123;B++; print &quot;small&quot;&#125;&#125; END&#123;print A,&quot;\\t&quot;,B&#125;&#x27;</span> /etc/passwd  <span class=\"comment\">#ID大于100,A加1，否则B加1</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($3&lt;100) next; else print&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#小于100跳过，否则显示</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print ($3&gt;100 ? &quot;yes&quot;:&quot;no&quot;)&#125;&#x27;</span>  /etc/passwd </span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print ($3&gt;100 ? $3&quot;:\\tyes&quot;:$3&quot;:\\tno&quot;)&#125;&#x27;</span>  /etc/passwd</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-条件表达式\"><a href=\"#5-条件表达式\" class=\"headerlink\" title=\"5). 条件表达式\"></a>5). 条件表达式</h3><p><strong>==   !=   &gt;   &gt;=</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$1==&quot;mysql&quot;&#123;print $3&#125;&#x27;</span> /etc/passwd  </span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;if($1==&quot;mysql&quot;) print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#与上面相同 </span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$1!=&quot;mysql&quot;&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#不等于</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$3&gt;1000&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#大于</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$3&gt;=100&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#大于等于</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$3&lt;1&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#小于</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$3&lt;=1&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#小于等于</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-逻辑运算符\"><a href=\"#6-逻辑运算符\" class=\"headerlink\" title=\"6). 逻辑运算符\"></a>6). 逻辑运算符</h3><p><strong>&amp;&amp;　||</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">&#x27;$1~/mail/ &amp;&amp; $3&gt;8 &#123;print &#125;&#x27;</span> /etc/passwd <span class=\"comment\">#逻辑与，$1匹配mail，并且$3&gt;8</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/ &amp;&amp; $3&gt;8) print &#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;$1~/mail/ || $3&gt;1000 &#123;print &#125;&#x27;</span> /etc/passwd <span class=\"comment\">#逻辑或</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/ || $3&gt;1000) print &#125;&#x27;</span> /etc/passwd </span><br></pre></td></tr></table></figure>\n<h3 id=\"7-数值运算\"><a href=\"#7-数值运算\" class=\"headerlink\" title=\"7). 数值运算\"></a>7). 数值运算</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">&#x27;$3 &gt; 100&#x27;</span> /etc/passwd    </span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;$3 &gt; 100 || $3 &lt; 5&#x27;</span> /etc/passwd  </span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;$3+$4 &gt; 200&#x27;</span> /etc/passwd</span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;/mysql|mail/&#123;print $3+10&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#第三个字段加10打印 </span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;/mysql/&#123;print $3-$4&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#减法</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;/mysql/&#123;print $3*$4&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#求乘积</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;/MemFree/&#123;print $2/1024&#125;&#x27;</span> /proc/meminfo <span class=\"comment\">#除法</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;/MemFree/&#123;print int($2/1024)&#125;&#x27;</span> /proc/meminfo <span class=\"comment\">#取整</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-输出分隔符OFS\"><a href=\"#8-输出分隔符OFS\" class=\"headerlink\" title=\"8). 输出分隔符OFS\"></a>8). 输出分隔符OFS</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;$6 ~ /FIN/ || NR==1 &#123;print NR,$4,$5,$6&#125;&#x27;</span> OFS=<span class=\"string\">&quot;\\t&quot;</span> netstat.txt</span><br><span class=\"line\">awk <span class=\"string\">&#x27;$6 ~ /WAIT/ || NR==1 &#123;print NR,$4,$5,$6&#125;&#x27;</span> OFS=<span class=\"string\">&quot;\\t&quot;</span> netstat.txt        </span><br><span class=\"line\"><span class=\"comment\">#输出字段6匹配WAIT的行，其中输出每行行号，字段4，5,6，并使用制表符分割字段</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-输出处理结果到文件\"><a href=\"#9-输出处理结果到文件\" class=\"headerlink\" title=\"9). 输出处理结果到文件\"></a>9). 输出处理结果到文件</h3><p>①在命令代码块中直接输出 route -n|awk ‘NR!=1{print &gt; “./fs”}’   </p>\n<p>②使用重定向进行输出  route -n|awk ‘NR!=1{print}’  &gt; ./fs</p>\n<h3 id=\"10-格式化输出\"><a href=\"#10-格式化输出\" class=\"headerlink\" title=\"10). 格式化输出\"></a>10). 格式化输出</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;&#123;printf &quot;%-8s %-8s %-10s\\n&quot;,$1,$2,$3&#125;&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p>printf表示格式输出</p>\n<p>%格式化输出分隔符</p>\n<p>-8长度为8个字符</p>\n<p>s表示字符串类型</p>\n<p>打印每行前三个字段，指定第一个字段输出字符串类型(长度为8)，第二个字段输出字符串类型(长度为8),</p>\n<p>第三个字段输出字符串类型(长度为10)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;$6==&quot;LISTEN&quot; || NR==1 &#123;printf &quot;%-10s %-10s %-10s \\n&quot;,$1,$2,$3&#125;&#x27;</span></span><br><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;$6==&quot;LISTEN&quot; || NR==1 &#123;printf &quot;%-3s %-10s %-10s %-10s \\n&quot;,NR,$1,$2,$3&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"11-数组\"><a href=\"#11-数组\" class=\"headerlink\" title=\"11). 数组\"></a>11). 数组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;NR!=1&#123;a[$6]++&#125; END&#123;for (i in a) print i,&quot;\\t&quot;,a[i]&#125;&#x27;</span></span><br><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;NR!=1&#123;a[$6]++&#125; END&#123;for (i in a) \\</span></span><br><span class=\"line\"><span class=\"string\">  printf &quot;%-20s %-10s %-5s \\n&quot;, i,&quot;\\t&quot;,a[i]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-其他应用\"><a href=\"#12-其他应用\" class=\"headerlink\" title=\"12). 其他应用\"></a>12). 其他应用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print NF&#125;&#x27;</span> helloworld.sh <span class=\"comment\">#输出文件每行有多少字段</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1,$2,$3,$4,$5&#125;&#x27;</span> helloworld.sh <span class=\"comment\">#输出前5个字段</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1,$2,$3,$4,$5&#125;&#x27;</span> OFS=<span class=\"string\">&#x27;\\t&#x27;</span> helloworld.sh <span class=\"comment\">#输出前5个字段并使用制表符分隔输出</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print NR,$1,$2,$3,$4,$5&#125;&#x27;</span> OFS=<span class=\"string\">&#x27;\\t&#x27;</span> helloworld.sh <span class=\"comment\">#制表符分隔输出前5个字段，并打印行号</span></span><br><span class=\"line\">awk -F<span class=\"string\">&#x27;[:#]&#x27;</span> <span class=\"string\">&#x27;&#123;print NF&#125;&#x27;</span>  helloworld.sh <span class=\"comment\">#指定多个分隔符: #，输出每行多少字段</span></span><br><span class=\"line\">awk -F<span class=\"string\">&#x27;[:#]&#x27;</span> <span class=\"string\">&#x27;&#123;print $1,$2,$3,$4,$5,$6,$7&#125;&#x27;</span> OFS=<span class=\"string\">&#x27;\\t&#x27;</span> helloworld.sh <span class=\"comment\">#制表符分隔输出多字段</span></span><br><span class=\"line\">awk -F<span class=\"string\">&#x27;[:#/]&#x27;</span> <span class=\"string\">&#x27;&#123;print NF&#125;&#x27;</span> helloworld.sh <span class=\"comment\">#指定三个分隔符，并输出每行字段数</span></span><br><span class=\"line\">awk -F<span class=\"string\">&#x27;[:#/]&#x27;</span> <span class=\"string\">&#x27;&#123;print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12&#125;&#x27;</span> hi.sh <span class=\"comment\">#制表符分隔输出多字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#计算/home目录下，普通文件的大小，使用KB作为单位</span></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print &quot;total size is:&quot;,sum/1024,&quot;KB&quot;&#125;&#x27;</span></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print &quot;total size is:&quot;,int(sum/1024),&quot;KB&quot;&#125;&#x27;</span> <span class=\"comment\">#int是取整的意思</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#统计netstat -anp 状态为LISTEN和CONNECT的连接数量分别是多少</span></span><br><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;$6~/LISTEN|CONNECTED/&#123;sum[$6]++&#125; END&#123;for (i in sum) printf &quot;%-10s %-6s %-3s \\n&quot;, i,&quot; &quot;,sum[i]&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#统计/home目录下不同用户的普通文件的总数是多少？</span></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;NR!=1 &amp;&amp; !/^d/&#123;sum[$3]++&#125; END&#123;for (i in sum) printf &quot;%-6s %-5s %-3s \\n&quot;,i,&quot; &quot;,sum[i]&#125;&#x27;</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#统计/home目录下不同用户的普通文件的大小总size是多少？</span></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;NR!=1 &amp;&amp; !/^d/&#123;sum[$3]+=$5&#125; END&#123;for (i in sum) printf &quot;%-6s %-5s %-3s %-2s \\n&quot;,i,&quot; &quot;,sum[i]/1024/1024,&quot;MB&quot;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出成绩表</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;math=0;eng=0;com=0;printf &quot;Lineno.   Name    No.    Math   English   Computer    Total\\n&quot;;printf &quot;------------------------------------------------------------\\n&quot;&#125;&#123;math+=$3; eng+=$4; com+=$5;printf &quot;%-8s %-7s %-7s %-7s %-9s %-10s %-7s \\n&quot;,NR,$1,$2,$3,$4,$5,$3+$4+$5&#125; END&#123;printf &quot;------------------------------------------------------------\\n&quot;;printf &quot;%-24s %-7s %-9s %-20s \\n&quot;,&quot;Total:&quot;,math,eng,com;printf &quot;%-24s %-7s %-9s %-20s \\n&quot;,&quot;Avg:&quot;,math/NR,eng/NR,com/NR&#125;&#x27;</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"13-Vlookup\"><a href=\"#13-Vlookup\" class=\"headerlink\" title=\"13). Vlookup\"></a>13). Vlookup</h3><p><a href=\"https://www.jianshu.com/p/01906e4b7af7\">awk实现excel vlookup</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据</span></span><br><span class=\"line\">$ cat a.txt </span><br><span class=\"line\">1       abc</span><br><span class=\"line\">2       def</span><br><span class=\"line\">3       ghi</span><br><span class=\"line\">4       jlm</span><br><span class=\"line\">$ cat b.txt </span><br><span class=\"line\">3       shit</span><br><span class=\"line\">1       rubb</span><br><span class=\"line\"><span class=\"comment\"># 方法</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;NR==FNR&#123;a[$1]=$2;next&#125;NR&gt;FNR&#123;if($1 in a)print $0&quot;\\t&quot;a[$1]&#125;&#x27;</span> a.txt b.txt </span><br><span class=\"line\"><span class=\"comment\"># 3       shit    ghi</span></span><br><span class=\"line\"><span class=\"comment\"># 1       rubb    abc</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：a是一个字典，<code>NR==FNR</code>时在第一个文件，<code>NR&gt;FNR</code>时在读b.txt</p>\n<p><code>NR==FNR&#123;a[$1]=$2;next&#125;</code>是使用第一个文件<code>a.txt</code>初始化字典，将其每行<code>$1</code>作为key，<code>$2</code>作为value</p>\n<p><code>if($1 in a)</code>指序号<code>$1</code>是否在a的key中，如果在打印的<code>a[$1]</code>为key：<code>$1</code>对于的value</p>\n<p>查看字典：<code>awk &#39;NR==FNR&#123;a[$1]=$2;next&#125;END&#123;for(k in a)&#123;print k,a[k]&#125;&#125;&#39; a.txt b.txt</code></p>\n</blockquote>\n<h3 id=\"14-group-by\"><a href=\"#14-group-by\" class=\"headerlink\" title=\"14). group by\"></a>14). group by</h3><p><a href=\"http://www.cppblog.com/datouwang/articles/45582.html\">总结一下awk的group by功能</a></p>\n<p>通过数组的key作为作为on的条件，value进行聚合运算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据</span></span><br><span class=\"line\">cat c.txt</span><br><span class=\"line\">06 01 06 30      2.700         81.000</span><br><span class=\"line\">06 01 06 45      3.900        175.500</span><br><span class=\"line\">06 01 07 00      2.400          0.000</span><br><span class=\"line\">06 01 07 15      0.160          2.400</span><br><span class=\"line\">06 01 08 00      0.380          0.000</span><br><span class=\"line\">06 01 08 15      0.300          4.500</span><br><span class=\"line\">06 01 08 30      3.900        117.000</span><br><span class=\"line\">06 01 08 45      5.520        248.400</span><br><span class=\"line\">06 01 09 00      6.600          0.000</span><br><span class=\"line\">06 01 09 15      9.600        144.000</span><br><span class=\"line\">06 01 09 30      3.300         99.000</span><br><span class=\"line\">06 01 09 45      2.300        103.500</span><br><span class=\"line\">06 01 10 15      7.880        118.200</span><br><span class=\"line\">06 01 10 30     10.820        324.600</span><br><span class=\"line\">06 01 10 45      7.360        331.200</span><br><span class=\"line\">06 01 11 00     11.940          0.000</span><br><span class=\"line\">06 01 11 15      4.200         63.000</span><br><span class=\"line\">06 01 11 30      3.180         95.400</span><br><span class=\"line\">06 01 11 45      1.800         81.000</span><br><span class=\"line\">06 01 12 00     30.970          0.000</span><br><span class=\"line\"><span class=\"comment\"># 实现</span></span><br><span class=\"line\"><span class=\"comment\"># 单列group by单列聚合</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2]+=$5&#125;END&#123;for(i in a) printf &quot;%s %10.3f\\n&quot;,i,a[i]&#125;&#x27;</span> c.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单列group by多列聚合</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2]+=$5;b[$2]+=$6&#125;END&#123;for(i in a) printf &quot;%s %10.3f %14.3f\\n&quot;,i,a[i],b[i]&#125;&#x27;</span> c.txt </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多列group by单列聚合</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2&quot; &quot;$3]+=$5&#125;END&#123;for(i in a) printf &quot;%s %10.3f\\n&quot;,i,a[i]&#125;&#x27;</span> c.txt <span class=\"comment\"># 求和</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2&quot; &quot;$3]+=1&#125;END&#123;for(i in a) printf &quot;%s %10.3f\\n&quot;,i,a[i]&#125;&#x27;</span> c.txt <span class=\"comment\"># 计数</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;s[$2&quot; &quot;$3]+=$5;n[$2&quot; &quot;$3]+=1&#125;END&#123;for(i in s)&#123;avg_v=s[i]/n[i];printf &quot;%s %10.3f\\n&quot;,i,avg_v&#125;&#125;&#x27;</span> c.txt <span class=\"comment\"># 平均</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 多列group by多列聚合：多来一个数组</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2&quot; &quot;$3]+=$5;b[$2&quot; &quot;$3]+=$6&#125;END&#123;for(i in a) printf &quot;%s %14.3f %14.3f\\n&quot;,i,a[i],b[i]&#125;&#x27;</span> c.txt</span><br></pre></td></tr></table></figure>\n<p>awk -F’ ‘ ‘/from/{print}’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &#x27;&#123;for(i=0;++i&lt;=NF;)a[i]=a[i]?a[i] FS $i:$i&#125;END&#123;for(i=0;i++&lt;NF;)printf a[i]&quot;\\b \\n&quot;&#125;&#x27; </span><br></pre></td></tr></table></figure>\n<h2 id=\"5-正则表达式\"><a href=\"#5-正则表达式\" class=\"headerlink\" title=\"5. 正则表达式\"></a>5. 正则表达式</h2><p><a href=\"https://www.cnblogs.com/myyan/p/4765683.html\">awk 正则表达式、正则运算符详细介绍</a></p>\n<p><a href=\"https://www.cnblogs.com/chengmo/archive/2010/10/10/1847287.html\">linux shell 正则表达式(BREs,EREs,PREs)差异比较</a></p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1). +\"></a>1). +</h3><p>指定如果<strong>一个或多个字符</strong>或扩展正则表达式的具体值（在 +（加号）前）在这个字符串中，则字符串匹配。</p>\n<p>命令行：<code>awk &#39;/smith+ern/&#39; testfile</code></p>\n<p>将包含字符 smit，后跟一个或多个 h 字符，并以字符 ern 结束的字符串的任何记录打印至标准输出。</p>\n<p>此示例中的输出是：smithern, harry smithhern, anne</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2). ?\"></a>2). ?</h3><p>指定如果<strong>零个或一个字符</strong>或扩展正则表达式的具体值（在 ?（问号）之前）在字符串中，则字符串匹配。</p>\n<p>命令行： <code>awk &#39;/smith?/&#39; testfile</code></p>\n<p>将包含字符 <code>smit</code>，后跟零个或一个 <code>h</code> 字符的实例的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smith, alan smithern, harry smithhern, anne smitters, alexis</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3). |\"></a>3). |</h3><p>指定如果以 |（垂直线）隔开的字符串的<strong>任何一个在字符串中</strong>，则字符串匹配。</p>\n<p>命令行：<code>awk &#39;/allen | alan /&#39; testfile</code></p>\n<p>将包含字符串 allen 或 alan 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smiley, allen smith, alan</p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4). ()\"></a>4). ()</h3><p>在正则表达式中将字符串组合在一起。</p>\n<p>命令行： <code>awk &#39;/a(ll)?(nn)?e/&#39; testfile</code></p>\n<p>将具有字符串 <code>ae</code> 或 <code>alle</code> 或 <code>anne</code> 或 <code>allnne</code> 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smiley, allen smithhern, anne</p>\n<h3 id=\"5-m\"><a href=\"#5-m\" class=\"headerlink\" title=\"5). {m}\"></a>5). {m}</h3><p>指定如果<strong>正好有 m 个模式的具体值位于字符串中</strong>，则字符串匹配。</p>\n<p>命令行：awk ‘/l{2}/‘ testfile</p>\n<p>打印至标准输出：smiley, allen</p>\n<h3 id=\"6-m\"><a href=\"#6-m\" class=\"headerlink\" title=\"6). {m,}\"></a>6). {m,}</h3><p>指定如果<strong>至少 m 个模式的具体值在字符串中</strong>，则字符串匹配。</p>\n<p>命令行：<code>awk &#39;/t&#123;2,&#125;/&#39; testfile</code></p>\n<p>打印至标准输出：smitters, alexis</p>\n<h3 id=\"7-m-n\"><a href=\"#7-m-n\" class=\"headerlink\" title=\"7). {m, n}\"></a>7). {m, n}</h3><p>指定如果 <strong>m 和 n 之间（包含的 m 和 n）个模式</strong>的具体值在字符串中（其中m&lt;= n），则字符串匹配。</p>\n<p>命令行：<code>awk &#39;/er&#123;1, 2&#125;/&#39; testfile</code></p>\n<p>打印至标准输出：smithern, harry smithern, anne smitters, alexis</p>\n<h3 id=\"8-String\"><a href=\"#8-String\" class=\"headerlink\" title=\"8). [String]\"></a>8). [String]</h3><p>指定正则表达式与方括号内 <strong>String 变量指定的任何字符匹配</strong>。</p>\n<p>命令行：<code>awk &#39;/sm[a-h]/&#39; testfile</code></p>\n<p>将具有 <code>sm</code> 后跟以字母顺序从 <code>a</code> 到 <code>h</code> 排列的任何字符的所有记录打印至标准输出。</p>\n<p>此示例的输出是：smawley, andy</p>\n<h3 id=\"9-String\"><a href=\"#9-String\" class=\"headerlink\" title=\"9). [^ String]\"></a>9). [^ String]</h3><p>在 [ ]（方括号）和在指定字符串开头的 ^ (插入记号) 指明<strong>正则表达式与方括号内的任何字符不匹配。</strong></p>\n<p>命令行：<code>awk &#39;/sm\\[^a-h]/&#39; testfile</code></p>\n<p>打印至标准输出：smiley, allen smith, alan smithern, harry smithhern, anne smitters, alexis</p>\n<h3 id=\"10\"><a href=\"#10\" class=\"headerlink\" title=\"10). ~, !~\"></a>10). ~, !~</h3><p>表示<strong>指定变量与正则表达式**</strong>匹配<strong>（~）或</strong>不匹配**（!~）的条件语句。</p>\n<p>命令行：<code>awk &#39;$1 ~ /n/&#39; testfile</code></p>\n<p>将第一个字段包含字符 <code>n</code> 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smithern, harry smithhern, anne</p>\n<h3 id=\"11\"><a href=\"#11\" class=\"headerlink\" title=\"11). ^\"></a>11). ^</h3><p><strong>指定</strong>字段或记录的<strong>开头</strong>。</p>\n<p>命令行： awk ‘$2 ~ /^h/‘ testfile</p>\n<p>将把字符 <code>h</code> 作为第二个字段的第一个字符的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smithern, harry</p>\n<h3 id=\"12\"><a href=\"#12\" class=\"headerlink\" title=\"12). $\"></a>12). $</h3><p><strong>指定</strong>字段或记录的<strong>末尾</strong>。</p>\n<p>命令行： awk ‘$2 ~ /y$/‘ testfile</p>\n<p>将把字符 <code>y</code> 作为第二个字段的最后一个字符的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smawley, andy smithern, harry</p>\n<h3 id=\"13-（句号）\"><a href=\"#13-（句号）\" class=\"headerlink\" title=\"13). .（句号）\"></a>13). .（句号）</h3><p><strong>表示</strong>除了在空白末尾的终端换行字符以外的<strong>任何一个字符</strong>。</p>\n<p>命令行： awk ‘/a..e/‘ testfile</p>\n<p>将具有以两个字符隔开的字符 <code>a</code> 和 e 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smawley, andy smiley, allen smithhern, anne</p>\n<h3 id=\"14-（星号）\"><a href=\"#14-（星号）\" class=\"headerlink\" title=\"14). *（星号）\"></a>14). *（星号）</h3><p>表示<strong>零个或更多的任意字符。</strong></p>\n<p>命令行： awk ‘/a.*e/‘ testfile</p>\n<p>将具有以零个或更多字符隔开的字符 <code>a</code> 和 e 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smawley, andy smiley, allen smithhern, anne smitters, alexis</p>\n<h3 id=\"15-反斜杠\"><a href=\"#15-反斜杠\" class=\"headerlink\" title=\"15). \\ (反斜杠)\"></a>15). \\ (反斜杠)</h3><p>转义字符。当位于在扩展正则表达式中具有特殊含义的任何字符之前时，转义字符除去该字符的任何特殊含义。</p>\n<p>例如，命令行： /a\\/\\//</p>\n<p>将与模式 a // 匹配，因为反斜杠否定斜杠作为正则表达式定界符的通常含义。要将反斜杠本身指定为字符，则使用双反斜杠。有关反斜杠及其使用的更多信息，请参阅以下关于转义序列的内容。</p>\n","site":{"data":{}},"excerpt":"<p>AWK工具书</p>","more":"<p>[TOC]</p>\n<h1 id=\"AWK\"><a href=\"#AWK\" class=\"headerlink\" title=\"AWK\"></a>AWK</h1><h2 id=\"1-格式\"><a href=\"#1-格式\" class=\"headerlink\" title=\"1. 格式\"></a>1. 格式</h2><h3 id=\"1-命令形式\"><a href=\"#1-命令形式\" class=\"headerlink\" title=\"1). 命令形式\"></a>1). 命令形式</h3><p><code>awk [-F|-f|-v] ‘BEGIN&#123;&#125; //&#123;command1; command2&#125; END&#123;&#125;’ file</code></p>\n<blockquote>\n<p>BEGIN{ 这里面放的是执行前的语句 } ，其中的语句只会运行一次<br>END {这里面放的是处理完所有的行后要执行的语句 } 。其中的语句也只会运行一次<br>{这里面放的是处理每一行时要执行的语句} ，这里的语句会读文件的每行都运行一次</p>\n</blockquote>\n<p> [-F|-f|-v]   大参数，-F指定分隔符，-f调用脚本，-v定义变量 var=value</p>\n<p>‘  ‘          引用代码块</p>\n<p>BEGIN   初始化代码块，在对每一行进行处理之前，初始化代码，主要是引用全局变量，设置FS分隔符</p>\n<p>//           匹配代码块，可以是字符串或正则表达式</p>\n<p>{}           命令代码块，包含一条或多条命令</p>\n<p>；          多条命令使用分号分隔</p>\n<p>END      结尾代码块，在对每一行进行处理之后再执行的代码块，主要是进行最终计算或输出结尾摘要信息</p>\n<h3 id=\"2-特殊要点\"><a href=\"#2-特殊要点\" class=\"headerlink\" title=\"2). 特殊要点\"></a>2). 特殊要点</h3><p><a href=\"https://www.cnblogs.com/chengmo/archive/2010/10/06/1844818.html\">linux awk 内置变量使用介绍</a></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>特殊符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$0</td>\n<td>表示整个当前行</td>\n</tr>\n<tr>\n<td>$1</td>\n<td>每行第一个字段</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>字段数量变量</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>每行的记录号，多文件记录递增</td>\n</tr>\n<tr>\n<td>FNR</td>\n<td>与NR类似，不过多文件记录不递增，每个文件都从1开始</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>BEGIN时定义分隔符，输入字段分隔符 默认是空格</td>\n</tr>\n<tr>\n<td>RS</td>\n<td>输入的记录分隔符， 默认为换行符(即文本是按一行一行输入)</td>\n</tr>\n<tr>\n<td>~</td>\n<td>匹配，与==相比不是精确比较</td>\n</tr>\n<tr>\n<td>!~</td>\n<td>不匹配，不精确比较</td>\n</tr>\n<tr>\n<td>==</td>\n<td>等于，必须全部相等，精确比较</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于，精确比较</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>\\</td>\n<td></td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配时表示1个或1个以上</td>\n</tr>\n<tr>\n<td>/[0-9][0-9]+/</td>\n<td>两个或两个以上数字</td>\n</tr>\n<tr>\n<td>/[0-9][0-9]*/</td>\n<td>一个或一个以上数字</td>\n</tr>\n<tr>\n<td>FILENAME</td>\n<td>文件名</td>\n</tr>\n<tr>\n<td>OFS</td>\n<td>输出字段分隔符， 默认也是空格，可以改为制表符等</td>\n</tr>\n<tr>\n<td>ORS</td>\n<td>输出的记录分隔符，默认为换行符,即处理结果也是一行一行输出到屏幕</td>\n</tr>\n<tr>\n<td>-F’[:#/]’</td>\n<td>定义三个分隔符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2-内置函数\"><a href=\"#2-内置函数\" class=\"headerlink\" title=\"2. 内置函数\"></a>2. 内置函数</h2><p><a href=\"https://www.cnblogs.com/chengmo/archive/2010/10/08/1845913.html\">linux awk 内置函数详细介绍</a></p>\n<blockquote>\n<p>这篇博客的函数都写在begin{}中</p>\n</blockquote>\n<h3 id=\"1-算术函数\"><a href=\"#1-算术函数\" class=\"headerlink\" title=\"1). 算术函数\"></a>1). 算术函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>函数名</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>atan2( y, x )</td>\n<td>返回 y/x 的反正切。</td>\n</tr>\n<tr>\n<td>cos( x )</td>\n<td>返回 x 的余弦；x 是弧度。</td>\n</tr>\n<tr>\n<td>sin( x )</td>\n<td>返回 x 的正弦；x 是弧度。</td>\n</tr>\n<tr>\n<td>exp( x )</td>\n<td>返回 x 幂函数。</td>\n</tr>\n<tr>\n<td>log( x )</td>\n<td>返回 x 的自然对数。</td>\n</tr>\n<tr>\n<td>sqrt( x )</td>\n<td>返回 x 平方根。</td>\n</tr>\n<tr>\n<td>int( x )</td>\n<td>返回 x 的截断至整数的值。</td>\n</tr>\n<tr>\n<td>rand( )</td>\n<td>返回任意数字 n，其中 0 &lt;= n &lt; 1。</td>\n</tr>\n<tr>\n<td>srand( [Expr] )</td>\n<td>将 rand 函数的种子值设置为 Expr 参数的值。返回先前的种子值。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># OFMT 设置输出数据格式是保留3位小数</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;OFMT=&quot;%.3f&quot;;fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 0.841 22026.466 2.303 3 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获得随机数：</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 78</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-字符串函数\"><a href=\"#2-字符串函数\" class=\"headerlink\" title=\"2). 字符串函数\"></a>2). 字符串函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gsub( Ere, Repl, [ In ] )</td>\n<td>除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行，。</td>\n</tr>\n<tr>\n<td>sub( Ere, Repl, [ In ] )</td>\n<td>用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere  参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &amp;（和符号）由 In  参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>index( String1, String2 )</td>\n<td>在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。</td>\n</tr>\n<tr>\n<td>length [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>blength [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>substr( String, M, [ N ] )</td>\n<td>返回具有 N 参数指定的字符数量子串。子串从 String  参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N  参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。</td>\n</tr>\n<tr>\n<td>match( String, Ere )</td>\n<td>在 String 参数指定的字符串（Ere  参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART  特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。</td>\n</tr>\n<tr>\n<td>split( String, A, [Ere] )</td>\n<td>将 String 参数指定的参数分割为数组元素 A[1], A[2], . .  ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS  特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。</td>\n</tr>\n<tr>\n<td>tolower( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>toupper( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>sprintf(Format, Expr, Expr, . . . )</td>\n<td>根据 Format 参数指定的 <a href=\"http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/printf.htm#a8zed0gaco\">printf</a> 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>Ere都可以是正则表达式</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 info中查找满足正则表达式，/[0-9]+/ 用””替换，并且替换后的值，赋值给info 未给info值，默认是$0</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;gsub(/[0-9]+/,&quot;!&quot;,info);print info&#125;&#x27;</span> </span><br><span class=\"line\"><span class=\"comment\"># this is a test!test!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找字符串（index使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print index(info,&quot;test&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># ok</span></span><br><span class=\"line\"><span class=\"comment\"># 未找到，返回0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正则表达式匹配查找(match使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print match(info,/[0-9]+/)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span>   <span class=\"comment\"># ok </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取字符串(substr使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print substr(info,4,10);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># s is a tes</span></span><br><span class=\"line\"><span class=\"comment\"># 从第 4个 字符开始，截取10个长度字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串分割（split使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;info=&quot;this is a test&quot;;split(info,tA,&quot; &quot;);print length(tA);for(k in tA)&#123;print k,tA[k];&#125;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 4</span></span><br><span class=\"line\"><span class=\"comment\"># 4 test</span></span><br><span class=\"line\"><span class=\"comment\"># 1 this</span></span><br><span class=\"line\"><span class=\"comment\"># 2 is</span></span><br><span class=\"line\"><span class=\"comment\"># 3 a</span></span><br><span class=\"line\"><span class=\"comment\"># 分割info,动态创建数组tA,这里比较有意思，awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意</p>\n<p>应该是因为awk中数组其实是字段。</p>\n</blockquote>\n<p><strong>格式化字符串输出（sprintf使用）</strong></p>\n<p>格式化字符串包括两部分内容: 一部分是正常字符, 这些字符将按原样输出; 另一部分是格式化规定字符, 以”%”开始, 后跟一个或几个规定字符,用来确定输出内容格式。 </p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>格式符</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%d</td>\n<td>十进制有符号整数</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>十进制无符号整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>单个字符</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>指针的值</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>指数形式的浮点数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>%X 无符号以十六进制表示的整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>无符号以八进制表示的整数</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>自动选择合适的表示法</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;n1=124.113;n2=-1.224;n3=1.2345; printf(&quot;%.2f,%.2u,%.2g,%X,%o\\n&quot;,n1,n2,n3,n1,n1);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 124.11,18446744073709551615,1.2,7C,174 </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-时间函数\"><a href=\"#3-时间函数\" class=\"headerlink\" title=\"3). 时间函数\"></a>3). 时间函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>函数名</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mktime( YYYY MM DD HH MM SS[ DST])</td>\n<td>生成时间格式</td>\n</tr>\n<tr>\n<td>strftime([format [, timestamp]])</td>\n<td>格式化时间输出，将时间戳转为时间字符串  具体格式，见下表.</td>\n</tr>\n<tr>\n<td>systime()</td>\n<td>得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建指定时间(mktime使用）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;tstamp=mktime(&quot;2001 01 01 12 12 12&quot;);print strftime(&quot;%c&quot;,tstamp);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 2001年01月01日 星期一 12时12分12秒 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 求2个时间段中间时间差,介绍了strftime使用方法 </span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;tstamp1=mktime(&quot;2001 01 01 12 12 12&quot;);tstamp2=mktime(&quot;2001 02 01 0 0 0&quot;);print tstamp2-tstamp1;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 2634468 </span></span><br><span class=\"line\"></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;tstamp1=mktime(&quot;2001 01 01 12 12 12&quot;);tstamp2=systime();print tstamp2-tstamp1;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 308201392 </span></span><br></pre></td></tr></table></figure>\n<p><strong>strftime日期和时间格式说明符</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>星期几的缩写(Sun)</td>\n</tr>\n<tr>\n<td>%A</td>\n<td>星期几的完整写法(Sunday)</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>月名的缩写(Oct)</td>\n</tr>\n<tr>\n<td>%B</td>\n<td>月名的完整写法(October)</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>本地日期和时间</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>十进制日期</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>日期 08/20/99</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>日期，如果只有一位会补上一个空格</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>用十进制表示24小时格式的小时</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>用十进制表示12小时格式的小时</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>从1月1日起一年中的第几天</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>十进制表示的月份</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>十进制表示的分钟</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>12小时表示法(AM/PM)</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>十进制表示的秒</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>十进制表示的一年中的第几个星期(星期天作为一个星期的开始)</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>十进制表示的星期几(星期天是0)</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>十进制表示的一年中的第几个星期(星期一作为一个星期的开始)</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>重新设置本地日期(08/20/99)</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>重新设置本地时间(12：00：00)</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>两位数字表示的年(99)</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>当前月份</td>\n</tr>\n<tr>\n<td>%Z</td>\n<td>时区(PDT)</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>百分号(%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"4-一般函数\"><a href=\"#4-一般函数\" class=\"headerlink\" title=\"4). 一般函数\"></a>4). 一般函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>close( Expression )</td>\n<td>用同一个带字符串值的 Expression 参数来关闭由 print 或  printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回  0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。</td>\n</tr>\n<tr>\n<td>system(Command )</td>\n<td>执行 Command 参数指定的命令，并返回退出状态。等同于 <a href=\"http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf2/system.htm#a181929c\">system</a> 子例程。</td>\n</tr>\n<tr>\n<td>Expression \\</td>\n<td>getline [ Variable ]</td>\n<td>从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 <a href=\"http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/popen.htm#sk62b0shad\">popen</a>  子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且  Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0  记录变量和 NF 特殊变量设置为从流读取的记录。</td>\n</tr>\n<tr>\n<td>getline [ Variable ] &lt; Expression</td>\n<td>从 Expression 参数指定的文件读取输入的下一个记录，并将  Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline  函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。</td>\n</tr>\n<tr>\n<td>getline [ Variable ]</td>\n<td>将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开外部文件（close用法）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;while(&quot;cat /etc/passwd&quot;|getline)&#123;print $0;&#125;;close(&quot;/etc/passwd&quot;);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># root:x:0:0:root:/root:/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class=\"line\"><span class=\"comment\"># daemon:x:2:2:daemon:/sbin:/sbin/nologin </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逐行读取外部文件(getline使用方法）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;while(getline &lt; &quot;/etc/passwd&quot;)&#123;print $0;&#125;;close(&quot;/etc/passwd&quot;);&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># root:x:0:0:root:/root:/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class=\"line\"><span class=\"comment\"># daemon:x:2:2:daemon:/sbin:/sbin/nologin </span></span><br><span class=\"line\"></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;print &quot;Enter your name:&quot;;getline name;print name;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># Enter your name:</span></span><br><span class=\"line\"><span class=\"comment\"># wangdongdong</span></span><br><span class=\"line\"><span class=\"comment\"># wangdongdong</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用外部应用程序(system使用方法）</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;b=system(&quot;python helloworld.py&quot;);print b;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># helloworld</span></span><br><span class=\"line\"><span class=\"comment\"># 0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-数组\"><a href=\"#3-数组\" class=\"headerlink\" title=\"3. 数组\"></a>3. 数组</h2><p><a href=\"https://www.cnblogs.com/chengmo/archive/2010/10/08/1846190.html\">linux awk数组操作详细介绍</a></p>\n<h2 id=\"4-案例\"><a href=\"#4-案例\" class=\"headerlink\" title=\"4. 案例\"></a>4. 案例</h2><h3 id=\"1-print\"><a href=\"#1-print\" class=\"headerlink\" title=\"1). print\"></a>1). print</h3><p>print 是awk打印指定内容的主要命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print&#125;&#x27;</span> /etc/passwd == awk <span class=\"string\">&#x27;&#123;print $0&#125;&#x27;</span> /etc/passwd </span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print &quot; &quot;&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#不输出passwd的内容，而是输出相同个数的空行，进一步解释了awk是一行一行处理文本</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print &quot;a&quot;&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#输出相同个数的a行，一行只有一个a字母</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd </span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1; print $2&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#将每一行的前二个字段，分行输出，进一步理解一行一行处理文本</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1,$3,$6&#125;&#x27;</span> OFS=<span class=\"string\">&quot;\\t&quot;</span> /etc/passwd <span class=\"comment\">#输出字段1,3,6，以制表符作为分隔符</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-f指定脚本文件\"><a href=\"#2-f指定脚本文件\" class=\"headerlink\" title=\"2). -f指定脚本文件\"></a>2). -f指定脚本文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -f script.awk  file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># script.awk内容如下：</span></span><br><span class=\"line\">BEGIN&#123;</span><br><span class=\"line\">FS=<span class=\"string\">&quot;:&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;<span class=\"built_in\">print</span> <span class=\"variable\">$1</span>&#125;   <span class=\"comment\">#效果与awk -F&quot;:&quot; &#x27;&#123;print $1&#125;&#x27;相同,只是分隔符使用FS在代码自身中指定</span></span><br><span class=\"line\"></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;X=0&#125; /^$/&#123; X+=1 &#125; END&#123;print &quot;I find&quot;,X,&quot;blank lines.&quot;&#125;&#x27;</span> <span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># I find 4 blank lines.</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print &quot;total size is&quot;,sum&#125;&#x27;</span> <span class=\"comment\">#计算文件大小 </span></span><br><span class=\"line\"><span class=\"comment\">#total size is 17487</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-F指定分隔符\"><a href=\"#3-F指定分隔符\" class=\"headerlink\" title=\"3). -F指定分隔符\"></a>3). -F指定分隔符</h3><p>$1 指指定分隔符后，第一个字段，$3第三个字段， \\t是制表符</p>\n<p>一个或多个连续的空格或制表符看做一个定界符，即多个空格看做一个空格</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>  /etc/passwd</span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1 $3&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#$1与$3相连输出，不分隔</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1,$3&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#多了一个逗号，$1与$3使用空格分隔</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print $1 &quot; &quot; $3&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#$1与$3之间手动添加空格分隔</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;print &quot;Username:&quot; $1 &quot;\\t\\t Uid:&quot; $3 &#125;&#x27;</span> /etc/passwd <span class=\"comment\">#自定义输出  </span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print NF&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#显示每行有多少字段</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#将每行第NF个字段的值打印出来</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;NF==4 &#123;print &#125;&#x27;</span> /etc/passwd <span class=\"comment\">#显示只有4个字段的行</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;NF&gt;2&#123;print $0&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#显示每行字段数量大于2的行</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print NR,$0&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#输出每行的行号</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print NR,NF,$NF,&quot;\\t&quot;,$0&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#依次打印行号，字段数，最后字段值，制表符，每行内容</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;NR==5&#123;print&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#显示第5行</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;NR==5 || NR==6&#123;print&#125;&#x27;</span>  /etc/passwd <span class=\"comment\">#显示第5行和第6行</span></span><br><span class=\"line\">route -n|awk <span class=\"string\">&#x27;NR!=1&#123;print&#125;&#x27;</span> <span class=\"comment\">#不显示第一行</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-IF语句\"><a href=\"#4-IF语句\" class=\"headerlink\" title=\"4). IF语句\"></a>4). IF语句</h3><p>必须用在{}中，且比较内容用()扩起来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/) print $1&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#简写</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/) &#123;print $1&#125;&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#全写</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/) &#123;print $1&#125; else &#123;print $2&#125;&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#if...else...</span></span><br><span class=\"line\"></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($3&gt;100) print &quot;large&quot;; else print &quot;small&quot;&#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;BEGIN&#123;A=0;B=0&#125; &#123;if($3&gt;100) &#123;A++; print &quot;large&quot;&#125; else &#123;B++; print &quot;small&quot;&#125;&#125; END&#123;print A,&quot;\\t&quot;,B&#125;&#x27;</span> /etc/passwd  <span class=\"comment\">#ID大于100,A加1，否则B加1</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($3&lt;100) next; else print&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#小于100跳过，否则显示</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print ($3&gt;100 ? &quot;yes&quot;:&quot;no&quot;)&#125;&#x27;</span>  /etc/passwd </span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print ($3&gt;100 ? $3&quot;:\\tyes&quot;:$3&quot;:\\tno&quot;)&#125;&#x27;</span>  /etc/passwd</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-条件表达式\"><a href=\"#5-条件表达式\" class=\"headerlink\" title=\"5). 条件表达式\"></a>5). 条件表达式</h3><p><strong>==   !=   &gt;   &gt;=</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$1==&quot;mysql&quot;&#123;print $3&#125;&#x27;</span> /etc/passwd  </span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;&#123;if($1==&quot;mysql&quot;) print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#与上面相同 </span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$1!=&quot;mysql&quot;&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#不等于</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$3&gt;1000&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#大于</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$3&gt;=100&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#大于等于</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$3&lt;1&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#小于</span></span><br><span class=\"line\">awk -F<span class=\"string\">&quot;:&quot;</span> <span class=\"string\">&#x27;$3&lt;=1&#123;print $3&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#小于等于</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-逻辑运算符\"><a href=\"#6-逻辑运算符\" class=\"headerlink\" title=\"6). 逻辑运算符\"></a>6). 逻辑运算符</h3><p><strong>&amp;&amp;　||</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">&#x27;$1~/mail/ &amp;&amp; $3&gt;8 &#123;print &#125;&#x27;</span> /etc/passwd <span class=\"comment\">#逻辑与，$1匹配mail，并且$3&gt;8</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/ &amp;&amp; $3&gt;8) print &#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;$1~/mail/ || $3&gt;1000 &#123;print &#125;&#x27;</span> /etc/passwd <span class=\"comment\">#逻辑或</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;if($1~/mail/ || $3&gt;1000) print &#125;&#x27;</span> /etc/passwd </span><br></pre></td></tr></table></figure>\n<h3 id=\"7-数值运算\"><a href=\"#7-数值运算\" class=\"headerlink\" title=\"7). 数值运算\"></a>7). 数值运算</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">&#x27;$3 &gt; 100&#x27;</span> /etc/passwd    </span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;$3 &gt; 100 || $3 &lt; 5&#x27;</span> /etc/passwd  </span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;$3+$4 &gt; 200&#x27;</span> /etc/passwd</span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;/mysql|mail/&#123;print $3+10&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#第三个字段加10打印 </span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;/mysql/&#123;print $3-$4&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#减法</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;/mysql/&#123;print $3*$4&#125;&#x27;</span> /etc/passwd <span class=\"comment\">#求乘积</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;/MemFree/&#123;print $2/1024&#125;&#x27;</span> /proc/meminfo <span class=\"comment\">#除法</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;/MemFree/&#123;print int($2/1024)&#125;&#x27;</span> /proc/meminfo <span class=\"comment\">#取整</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-输出分隔符OFS\"><a href=\"#8-输出分隔符OFS\" class=\"headerlink\" title=\"8). 输出分隔符OFS\"></a>8). 输出分隔符OFS</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;$6 ~ /FIN/ || NR==1 &#123;print NR,$4,$5,$6&#125;&#x27;</span> OFS=<span class=\"string\">&quot;\\t&quot;</span> netstat.txt</span><br><span class=\"line\">awk <span class=\"string\">&#x27;$6 ~ /WAIT/ || NR==1 &#123;print NR,$4,$5,$6&#125;&#x27;</span> OFS=<span class=\"string\">&quot;\\t&quot;</span> netstat.txt        </span><br><span class=\"line\"><span class=\"comment\">#输出字段6匹配WAIT的行，其中输出每行行号，字段4，5,6，并使用制表符分割字段</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-输出处理结果到文件\"><a href=\"#9-输出处理结果到文件\" class=\"headerlink\" title=\"9). 输出处理结果到文件\"></a>9). 输出处理结果到文件</h3><p>①在命令代码块中直接输出 route -n|awk ‘NR!=1{print &gt; “./fs”}’   </p>\n<p>②使用重定向进行输出  route -n|awk ‘NR!=1{print}’  &gt; ./fs</p>\n<h3 id=\"10-格式化输出\"><a href=\"#10-格式化输出\" class=\"headerlink\" title=\"10). 格式化输出\"></a>10). 格式化输出</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;&#123;printf &quot;%-8s %-8s %-10s\\n&quot;,$1,$2,$3&#125;&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p>printf表示格式输出</p>\n<p>%格式化输出分隔符</p>\n<p>-8长度为8个字符</p>\n<p>s表示字符串类型</p>\n<p>打印每行前三个字段，指定第一个字段输出字符串类型(长度为8)，第二个字段输出字符串类型(长度为8),</p>\n<p>第三个字段输出字符串类型(长度为10)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;$6==&quot;LISTEN&quot; || NR==1 &#123;printf &quot;%-10s %-10s %-10s \\n&quot;,$1,$2,$3&#125;&#x27;</span></span><br><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;$6==&quot;LISTEN&quot; || NR==1 &#123;printf &quot;%-3s %-10s %-10s %-10s \\n&quot;,NR,$1,$2,$3&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"11-数组\"><a href=\"#11-数组\" class=\"headerlink\" title=\"11). 数组\"></a>11). 数组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;NR!=1&#123;a[$6]++&#125; END&#123;for (i in a) print i,&quot;\\t&quot;,a[i]&#125;&#x27;</span></span><br><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;NR!=1&#123;a[$6]++&#125; END&#123;for (i in a) \\</span></span><br><span class=\"line\"><span class=\"string\">  printf &quot;%-20s %-10s %-5s \\n&quot;, i,&quot;\\t&quot;,a[i]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-其他应用\"><a href=\"#12-其他应用\" class=\"headerlink\" title=\"12). 其他应用\"></a>12). 其他应用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print NF&#125;&#x27;</span> helloworld.sh <span class=\"comment\">#输出文件每行有多少字段</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1,$2,$3,$4,$5&#125;&#x27;</span> helloworld.sh <span class=\"comment\">#输出前5个字段</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1,$2,$3,$4,$5&#125;&#x27;</span> OFS=<span class=\"string\">&#x27;\\t&#x27;</span> helloworld.sh <span class=\"comment\">#输出前5个字段并使用制表符分隔输出</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print NR,$1,$2,$3,$4,$5&#125;&#x27;</span> OFS=<span class=\"string\">&#x27;\\t&#x27;</span> helloworld.sh <span class=\"comment\">#制表符分隔输出前5个字段，并打印行号</span></span><br><span class=\"line\">awk -F<span class=\"string\">&#x27;[:#]&#x27;</span> <span class=\"string\">&#x27;&#123;print NF&#125;&#x27;</span>  helloworld.sh <span class=\"comment\">#指定多个分隔符: #，输出每行多少字段</span></span><br><span class=\"line\">awk -F<span class=\"string\">&#x27;[:#]&#x27;</span> <span class=\"string\">&#x27;&#123;print $1,$2,$3,$4,$5,$6,$7&#125;&#x27;</span> OFS=<span class=\"string\">&#x27;\\t&#x27;</span> helloworld.sh <span class=\"comment\">#制表符分隔输出多字段</span></span><br><span class=\"line\">awk -F<span class=\"string\">&#x27;[:#/]&#x27;</span> <span class=\"string\">&#x27;&#123;print NF&#125;&#x27;</span> helloworld.sh <span class=\"comment\">#指定三个分隔符，并输出每行字段数</span></span><br><span class=\"line\">awk -F<span class=\"string\">&#x27;[:#/]&#x27;</span> <span class=\"string\">&#x27;&#123;print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12&#125;&#x27;</span> hi.sh <span class=\"comment\">#制表符分隔输出多字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#计算/home目录下，普通文件的大小，使用KB作为单位</span></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print &quot;total size is:&quot;,sum/1024,&quot;KB&quot;&#125;&#x27;</span></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print &quot;total size is:&quot;,int(sum/1024),&quot;KB&quot;&#125;&#x27;</span> <span class=\"comment\">#int是取整的意思</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#统计netstat -anp 状态为LISTEN和CONNECT的连接数量分别是多少</span></span><br><span class=\"line\">netstat -anp|awk <span class=\"string\">&#x27;$6~/LISTEN|CONNECTED/&#123;sum[$6]++&#125; END&#123;for (i in sum) printf &quot;%-10s %-6s %-3s \\n&quot;, i,&quot; &quot;,sum[i]&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#统计/home目录下不同用户的普通文件的总数是多少？</span></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;NR!=1 &amp;&amp; !/^d/&#123;sum[$3]++&#125; END&#123;for (i in sum) printf &quot;%-6s %-5s %-3s \\n&quot;,i,&quot; &quot;,sum[i]&#125;&#x27;</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#统计/home目录下不同用户的普通文件的大小总size是多少？</span></span><br><span class=\"line\">ls -l|awk <span class=\"string\">&#x27;NR!=1 &amp;&amp; !/^d/&#123;sum[$3]+=$5&#125; END&#123;for (i in sum) printf &quot;%-6s %-5s %-3s %-2s \\n&quot;,i,&quot; &quot;,sum[i]/1024/1024,&quot;MB&quot;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出成绩表</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123;math=0;eng=0;com=0;printf &quot;Lineno.   Name    No.    Math   English   Computer    Total\\n&quot;;printf &quot;------------------------------------------------------------\\n&quot;&#125;&#123;math+=$3; eng+=$4; com+=$5;printf &quot;%-8s %-7s %-7s %-7s %-9s %-10s %-7s \\n&quot;,NR,$1,$2,$3,$4,$5,$3+$4+$5&#125; END&#123;printf &quot;------------------------------------------------------------\\n&quot;;printf &quot;%-24s %-7s %-9s %-20s \\n&quot;,&quot;Total:&quot;,math,eng,com;printf &quot;%-24s %-7s %-9s %-20s \\n&quot;,&quot;Avg:&quot;,math/NR,eng/NR,com/NR&#125;&#x27;</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"13-Vlookup\"><a href=\"#13-Vlookup\" class=\"headerlink\" title=\"13). Vlookup\"></a>13). Vlookup</h3><p><a href=\"https://www.jianshu.com/p/01906e4b7af7\">awk实现excel vlookup</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据</span></span><br><span class=\"line\">$ cat a.txt </span><br><span class=\"line\">1       abc</span><br><span class=\"line\">2       def</span><br><span class=\"line\">3       ghi</span><br><span class=\"line\">4       jlm</span><br><span class=\"line\">$ cat b.txt </span><br><span class=\"line\">3       shit</span><br><span class=\"line\">1       rubb</span><br><span class=\"line\"><span class=\"comment\"># 方法</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;NR==FNR&#123;a[$1]=$2;next&#125;NR&gt;FNR&#123;if($1 in a)print $0&quot;\\t&quot;a[$1]&#125;&#x27;</span> a.txt b.txt </span><br><span class=\"line\"><span class=\"comment\"># 3       shit    ghi</span></span><br><span class=\"line\"><span class=\"comment\"># 1       rubb    abc</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：a是一个字典，<code>NR==FNR</code>时在第一个文件，<code>NR&gt;FNR</code>时在读b.txt</p>\n<p><code>NR==FNR&#123;a[$1]=$2;next&#125;</code>是使用第一个文件<code>a.txt</code>初始化字典，将其每行<code>$1</code>作为key，<code>$2</code>作为value</p>\n<p><code>if($1 in a)</code>指序号<code>$1</code>是否在a的key中，如果在打印的<code>a[$1]</code>为key：<code>$1</code>对于的value</p>\n<p>查看字典：<code>awk &#39;NR==FNR&#123;a[$1]=$2;next&#125;END&#123;for(k in a)&#123;print k,a[k]&#125;&#125;&#39; a.txt b.txt</code></p>\n</blockquote>\n<h3 id=\"14-group-by\"><a href=\"#14-group-by\" class=\"headerlink\" title=\"14). group by\"></a>14). group by</h3><p><a href=\"http://www.cppblog.com/datouwang/articles/45582.html\">总结一下awk的group by功能</a></p>\n<p>通过数组的key作为作为on的条件，value进行聚合运算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据</span></span><br><span class=\"line\">cat c.txt</span><br><span class=\"line\">06 01 06 30      2.700         81.000</span><br><span class=\"line\">06 01 06 45      3.900        175.500</span><br><span class=\"line\">06 01 07 00      2.400          0.000</span><br><span class=\"line\">06 01 07 15      0.160          2.400</span><br><span class=\"line\">06 01 08 00      0.380          0.000</span><br><span class=\"line\">06 01 08 15      0.300          4.500</span><br><span class=\"line\">06 01 08 30      3.900        117.000</span><br><span class=\"line\">06 01 08 45      5.520        248.400</span><br><span class=\"line\">06 01 09 00      6.600          0.000</span><br><span class=\"line\">06 01 09 15      9.600        144.000</span><br><span class=\"line\">06 01 09 30      3.300         99.000</span><br><span class=\"line\">06 01 09 45      2.300        103.500</span><br><span class=\"line\">06 01 10 15      7.880        118.200</span><br><span class=\"line\">06 01 10 30     10.820        324.600</span><br><span class=\"line\">06 01 10 45      7.360        331.200</span><br><span class=\"line\">06 01 11 00     11.940          0.000</span><br><span class=\"line\">06 01 11 15      4.200         63.000</span><br><span class=\"line\">06 01 11 30      3.180         95.400</span><br><span class=\"line\">06 01 11 45      1.800         81.000</span><br><span class=\"line\">06 01 12 00     30.970          0.000</span><br><span class=\"line\"><span class=\"comment\"># 实现</span></span><br><span class=\"line\"><span class=\"comment\"># 单列group by单列聚合</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2]+=$5&#125;END&#123;for(i in a) printf &quot;%s %10.3f\\n&quot;,i,a[i]&#125;&#x27;</span> c.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单列group by多列聚合</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2]+=$5;b[$2]+=$6&#125;END&#123;for(i in a) printf &quot;%s %10.3f %14.3f\\n&quot;,i,a[i],b[i]&#125;&#x27;</span> c.txt </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多列group by单列聚合</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2&quot; &quot;$3]+=$5&#125;END&#123;for(i in a) printf &quot;%s %10.3f\\n&quot;,i,a[i]&#125;&#x27;</span> c.txt <span class=\"comment\"># 求和</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2&quot; &quot;$3]+=1&#125;END&#123;for(i in a) printf &quot;%s %10.3f\\n&quot;,i,a[i]&#125;&#x27;</span> c.txt <span class=\"comment\"># 计数</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;s[$2&quot; &quot;$3]+=$5;n[$2&quot; &quot;$3]+=1&#125;END&#123;for(i in s)&#123;avg_v=s[i]/n[i];printf &quot;%s %10.3f\\n&quot;,i,avg_v&#125;&#125;&#x27;</span> c.txt <span class=\"comment\"># 平均</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 多列group by多列聚合：多来一个数组</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;a[$2&quot; &quot;$3]+=$5;b[$2&quot; &quot;$3]+=$6&#125;END&#123;for(i in a) printf &quot;%s %14.3f %14.3f\\n&quot;,i,a[i],b[i]&#125;&#x27;</span> c.txt</span><br></pre></td></tr></table></figure>\n<p>awk -F’ ‘ ‘/from/{print}’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &#x27;&#123;for(i=0;++i&lt;=NF;)a[i]=a[i]?a[i] FS $i:$i&#125;END&#123;for(i=0;i++&lt;NF;)printf a[i]&quot;\\b \\n&quot;&#125;&#x27; </span><br></pre></td></tr></table></figure>\n<h2 id=\"5-正则表达式\"><a href=\"#5-正则表达式\" class=\"headerlink\" title=\"5. 正则表达式\"></a>5. 正则表达式</h2><p><a href=\"https://www.cnblogs.com/myyan/p/4765683.html\">awk 正则表达式、正则运算符详细介绍</a></p>\n<p><a href=\"https://www.cnblogs.com/chengmo/archive/2010/10/10/1847287.html\">linux shell 正则表达式(BREs,EREs,PREs)差异比较</a></p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1). +\"></a>1). +</h3><p>指定如果<strong>一个或多个字符</strong>或扩展正则表达式的具体值（在 +（加号）前）在这个字符串中，则字符串匹配。</p>\n<p>命令行：<code>awk &#39;/smith+ern/&#39; testfile</code></p>\n<p>将包含字符 smit，后跟一个或多个 h 字符，并以字符 ern 结束的字符串的任何记录打印至标准输出。</p>\n<p>此示例中的输出是：smithern, harry smithhern, anne</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2). ?\"></a>2). ?</h3><p>指定如果<strong>零个或一个字符</strong>或扩展正则表达式的具体值（在 ?（问号）之前）在字符串中，则字符串匹配。</p>\n<p>命令行： <code>awk &#39;/smith?/&#39; testfile</code></p>\n<p>将包含字符 <code>smit</code>，后跟零个或一个 <code>h</code> 字符的实例的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smith, alan smithern, harry smithhern, anne smitters, alexis</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3). |\"></a>3). |</h3><p>指定如果以 |（垂直线）隔开的字符串的<strong>任何一个在字符串中</strong>，则字符串匹配。</p>\n<p>命令行：<code>awk &#39;/allen | alan /&#39; testfile</code></p>\n<p>将包含字符串 allen 或 alan 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smiley, allen smith, alan</p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4). ()\"></a>4). ()</h3><p>在正则表达式中将字符串组合在一起。</p>\n<p>命令行： <code>awk &#39;/a(ll)?(nn)?e/&#39; testfile</code></p>\n<p>将具有字符串 <code>ae</code> 或 <code>alle</code> 或 <code>anne</code> 或 <code>allnne</code> 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smiley, allen smithhern, anne</p>\n<h3 id=\"5-m\"><a href=\"#5-m\" class=\"headerlink\" title=\"5). {m}\"></a>5). {m}</h3><p>指定如果<strong>正好有 m 个模式的具体值位于字符串中</strong>，则字符串匹配。</p>\n<p>命令行：awk ‘/l{2}/‘ testfile</p>\n<p>打印至标准输出：smiley, allen</p>\n<h3 id=\"6-m\"><a href=\"#6-m\" class=\"headerlink\" title=\"6). {m,}\"></a>6). {m,}</h3><p>指定如果<strong>至少 m 个模式的具体值在字符串中</strong>，则字符串匹配。</p>\n<p>命令行：<code>awk &#39;/t&#123;2,&#125;/&#39; testfile</code></p>\n<p>打印至标准输出：smitters, alexis</p>\n<h3 id=\"7-m-n\"><a href=\"#7-m-n\" class=\"headerlink\" title=\"7). {m, n}\"></a>7). {m, n}</h3><p>指定如果 <strong>m 和 n 之间（包含的 m 和 n）个模式</strong>的具体值在字符串中（其中m&lt;= n），则字符串匹配。</p>\n<p>命令行：<code>awk &#39;/er&#123;1, 2&#125;/&#39; testfile</code></p>\n<p>打印至标准输出：smithern, harry smithern, anne smitters, alexis</p>\n<h3 id=\"8-String\"><a href=\"#8-String\" class=\"headerlink\" title=\"8). [String]\"></a>8). [String]</h3><p>指定正则表达式与方括号内 <strong>String 变量指定的任何字符匹配</strong>。</p>\n<p>命令行：<code>awk &#39;/sm[a-h]/&#39; testfile</code></p>\n<p>将具有 <code>sm</code> 后跟以字母顺序从 <code>a</code> 到 <code>h</code> 排列的任何字符的所有记录打印至标准输出。</p>\n<p>此示例的输出是：smawley, andy</p>\n<h3 id=\"9-String\"><a href=\"#9-String\" class=\"headerlink\" title=\"9). [^ String]\"></a>9). [^ String]</h3><p>在 [ ]（方括号）和在指定字符串开头的 ^ (插入记号) 指明<strong>正则表达式与方括号内的任何字符不匹配。</strong></p>\n<p>命令行：<code>awk &#39;/sm\\[^a-h]/&#39; testfile</code></p>\n<p>打印至标准输出：smiley, allen smith, alan smithern, harry smithhern, anne smitters, alexis</p>\n<h3 id=\"10\"><a href=\"#10\" class=\"headerlink\" title=\"10). ~, !~\"></a>10). ~, !~</h3><p>表示<strong>指定变量与正则表达式**</strong>匹配<strong>（~）或</strong>不匹配**（!~）的条件语句。</p>\n<p>命令行：<code>awk &#39;$1 ~ /n/&#39; testfile</code></p>\n<p>将第一个字段包含字符 <code>n</code> 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smithern, harry smithhern, anne</p>\n<h3 id=\"11\"><a href=\"#11\" class=\"headerlink\" title=\"11). ^\"></a>11). ^</h3><p><strong>指定</strong>字段或记录的<strong>开头</strong>。</p>\n<p>命令行： awk ‘$2 ~ /^h/‘ testfile</p>\n<p>将把字符 <code>h</code> 作为第二个字段的第一个字符的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smithern, harry</p>\n<h3 id=\"12\"><a href=\"#12\" class=\"headerlink\" title=\"12). $\"></a>12). $</h3><p><strong>指定</strong>字段或记录的<strong>末尾</strong>。</p>\n<p>命令行： awk ‘$2 ~ /y$/‘ testfile</p>\n<p>将把字符 <code>y</code> 作为第二个字段的最后一个字符的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smawley, andy smithern, harry</p>\n<h3 id=\"13-（句号）\"><a href=\"#13-（句号）\" class=\"headerlink\" title=\"13). .（句号）\"></a>13). .（句号）</h3><p><strong>表示</strong>除了在空白末尾的终端换行字符以外的<strong>任何一个字符</strong>。</p>\n<p>命令行： awk ‘/a..e/‘ testfile</p>\n<p>将具有以两个字符隔开的字符 <code>a</code> 和 e 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smawley, andy smiley, allen smithhern, anne</p>\n<h3 id=\"14-（星号）\"><a href=\"#14-（星号）\" class=\"headerlink\" title=\"14). *（星号）\"></a>14). *（星号）</h3><p>表示<strong>零个或更多的任意字符。</strong></p>\n<p>命令行： awk ‘/a.*e/‘ testfile</p>\n<p>将具有以零个或更多字符隔开的字符 <code>a</code> 和 e 的所有记录打印至标准输出。</p>\n<p>此示例中的输出是：smawley, andy smiley, allen smithhern, anne smitters, alexis</p>\n<h3 id=\"15-反斜杠\"><a href=\"#15-反斜杠\" class=\"headerlink\" title=\"15). \\ (反斜杠)\"></a>15). \\ (反斜杠)</h3><p>转义字符。当位于在扩展正则表达式中具有特殊含义的任何字符之前时，转义字符除去该字符的任何特殊含义。</p>\n<p>例如，命令行： /a\\/\\//</p>\n<p>将与模式 a // 匹配，因为反斜杠否定斜杠作为正则表达式定界符的通常含义。要将反斜杠本身指定为字符，则使用双反斜杠。有关反斜杠及其使用的更多信息，请参阅以下关于转义序列的内容。</p>"},{"title":"final_cut_pro基础知识","date":"2022-03-01T03:32:38.000Z","_content":"\n最常用的FCP操作\n\n<!-- more -->\n\n\n快捷键：\n\ni\n\no\n\ne\n\nd\n\nB:切割\n\nA：选择\n\nT：修建\n\ncmmand+-\n\nshif+z:自动缩放\n\nctrl+T: 基本字幕\n\n# 基础知识\n\n- 资源库：最高文件夹\n- 事件\n- 项目：影片名字\n\n# 插入快捷键\n\n选择素材，按快捷键\n\nQ: 插到时间轴所在位置,有视频的话会在新时间线\n\nW:插到当前事件轴位置，分隔\n\n**E**：插到时间线最后\n\nD：覆盖到时间轴位置\n\n# 精修快捷键\n\nB: 切割\n\nA：选择\n\nshif：连续多选\n\n右键生成复合片段：合并片段\n\n# 多轨道剪辑\n\n**主序列片段只有一个，移动主序列片段时会影响其他序列的片段**\n\n# 转场\n\n直接拖到两个片段之间，呈灰色即转场成功\n\n可在检查器设置转场参数\n\n# 字幕\n\n基本字幕\n\n# 音画匹配\n\n- 右键—> 分离音频\n\n# 关键帧\n\n\t- 对某个属性打两个关键帧，可实现该属性过度\n\n# 速率和方向\n\ncontrl+option+r: 调整速度\n\n# 聚焦 抠像 遮罩\n\n聚焦：模糊分类中\n\n# 主要情节\n\n主要时间轴：右键—> 从故事情节提取\n\n非主要-》主要：右键—> 覆盖至主要故事情节\n\n# 声音\n\n- 合成异常\n- No\n\n\n\n\n\n","source":"_posts/0_代码相关/final_cut_pro基础知识.md","raw":"---\ntitle: final_cut_pro基础知识\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n最常用的FCP操作\n\n<!-- more -->\n\n\n快捷键：\n\ni\n\no\n\ne\n\nd\n\nB:切割\n\nA：选择\n\nT：修建\n\ncmmand+-\n\nshif+z:自动缩放\n\nctrl+T: 基本字幕\n\n# 基础知识\n\n- 资源库：最高文件夹\n- 事件\n- 项目：影片名字\n\n# 插入快捷键\n\n选择素材，按快捷键\n\nQ: 插到时间轴所在位置,有视频的话会在新时间线\n\nW:插到当前事件轴位置，分隔\n\n**E**：插到时间线最后\n\nD：覆盖到时间轴位置\n\n# 精修快捷键\n\nB: 切割\n\nA：选择\n\nshif：连续多选\n\n右键生成复合片段：合并片段\n\n# 多轨道剪辑\n\n**主序列片段只有一个，移动主序列片段时会影响其他序列的片段**\n\n# 转场\n\n直接拖到两个片段之间，呈灰色即转场成功\n\n可在检查器设置转场参数\n\n# 字幕\n\n基本字幕\n\n# 音画匹配\n\n- 右键—> 分离音频\n\n# 关键帧\n\n\t- 对某个属性打两个关键帧，可实现该属性过度\n\n# 速率和方向\n\ncontrl+option+r: 调整速度\n\n# 聚焦 抠像 遮罩\n\n聚焦：模糊分类中\n\n# 主要情节\n\n主要时间轴：右键—> 从故事情节提取\n\n非主要-》主要：右键—> 覆盖至主要故事情节\n\n# 声音\n\n- 合成异常\n- No\n\n\n\n\n\n","slug":"0_代码相关/final_cut_pro基础知识","published":1,"updated":"2022-03-01T03:50:02.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4s002t8s3258hn0izk","content":"<p>最常用的FCP操作</p>\n<span id=\"more\"></span>\n<p>快捷键：</p>\n<p>i</p>\n<p>o</p>\n<p>e</p>\n<p>d</p>\n<p>B:切割</p>\n<p>A：选择</p>\n<p>T：修建</p>\n<p>cmmand+-</p>\n<p>shif+z:自动缩放</p>\n<p>ctrl+T: 基本字幕</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><ul>\n<li>资源库：最高文件夹</li>\n<li>事件</li>\n<li>项目：影片名字</li>\n</ul>\n<h1 id=\"插入快捷键\"><a href=\"#插入快捷键\" class=\"headerlink\" title=\"插入快捷键\"></a>插入快捷键</h1><p>选择素材，按快捷键</p>\n<p>Q: 插到时间轴所在位置,有视频的话会在新时间线</p>\n<p>W:插到当前事件轴位置，分隔</p>\n<p><strong>E</strong>：插到时间线最后</p>\n<p>D：覆盖到时间轴位置</p>\n<h1 id=\"精修快捷键\"><a href=\"#精修快捷键\" class=\"headerlink\" title=\"精修快捷键\"></a>精修快捷键</h1><p>B: 切割</p>\n<p>A：选择</p>\n<p>shif：连续多选</p>\n<p>右键生成复合片段：合并片段</p>\n<h1 id=\"多轨道剪辑\"><a href=\"#多轨道剪辑\" class=\"headerlink\" title=\"多轨道剪辑\"></a>多轨道剪辑</h1><p><strong>主序列片段只有一个，移动主序列片段时会影响其他序列的片段</strong></p>\n<h1 id=\"转场\"><a href=\"#转场\" class=\"headerlink\" title=\"转场\"></a>转场</h1><p>直接拖到两个片段之间，呈灰色即转场成功</p>\n<p>可在检查器设置转场参数</p>\n<h1 id=\"字幕\"><a href=\"#字幕\" class=\"headerlink\" title=\"字幕\"></a>字幕</h1><p>基本字幕</p>\n<h1 id=\"音画匹配\"><a href=\"#音画匹配\" class=\"headerlink\" title=\"音画匹配\"></a>音画匹配</h1><ul>\n<li>右键—&gt; 分离音频</li>\n</ul>\n<h1 id=\"关键帧\"><a href=\"#关键帧\" class=\"headerlink\" title=\"关键帧\"></a>关键帧</h1><pre><code>- 对某个属性打两个关键帧，可实现该属性过度\n</code></pre><h1 id=\"速率和方向\"><a href=\"#速率和方向\" class=\"headerlink\" title=\"速率和方向\"></a>速率和方向</h1><p>contrl+option+r: 调整速度</p>\n<h1 id=\"聚焦-抠像-遮罩\"><a href=\"#聚焦-抠像-遮罩\" class=\"headerlink\" title=\"聚焦 抠像 遮罩\"></a>聚焦 抠像 遮罩</h1><p>聚焦：模糊分类中</p>\n<h1 id=\"主要情节\"><a href=\"#主要情节\" class=\"headerlink\" title=\"主要情节\"></a>主要情节</h1><p>主要时间轴：右键—&gt; 从故事情节提取</p>\n<p>非主要-》主要：右键—&gt; 覆盖至主要故事情节</p>\n<h1 id=\"声音\"><a href=\"#声音\" class=\"headerlink\" title=\"声音\"></a>声音</h1><ul>\n<li>合成异常</li>\n<li>No</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最常用的FCP操作</p>","more":"<p>快捷键：</p>\n<p>i</p>\n<p>o</p>\n<p>e</p>\n<p>d</p>\n<p>B:切割</p>\n<p>A：选择</p>\n<p>T：修建</p>\n<p>cmmand+-</p>\n<p>shif+z:自动缩放</p>\n<p>ctrl+T: 基本字幕</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><ul>\n<li>资源库：最高文件夹</li>\n<li>事件</li>\n<li>项目：影片名字</li>\n</ul>\n<h1 id=\"插入快捷键\"><a href=\"#插入快捷键\" class=\"headerlink\" title=\"插入快捷键\"></a>插入快捷键</h1><p>选择素材，按快捷键</p>\n<p>Q: 插到时间轴所在位置,有视频的话会在新时间线</p>\n<p>W:插到当前事件轴位置，分隔</p>\n<p><strong>E</strong>：插到时间线最后</p>\n<p>D：覆盖到时间轴位置</p>\n<h1 id=\"精修快捷键\"><a href=\"#精修快捷键\" class=\"headerlink\" title=\"精修快捷键\"></a>精修快捷键</h1><p>B: 切割</p>\n<p>A：选择</p>\n<p>shif：连续多选</p>\n<p>右键生成复合片段：合并片段</p>\n<h1 id=\"多轨道剪辑\"><a href=\"#多轨道剪辑\" class=\"headerlink\" title=\"多轨道剪辑\"></a>多轨道剪辑</h1><p><strong>主序列片段只有一个，移动主序列片段时会影响其他序列的片段</strong></p>\n<h1 id=\"转场\"><a href=\"#转场\" class=\"headerlink\" title=\"转场\"></a>转场</h1><p>直接拖到两个片段之间，呈灰色即转场成功</p>\n<p>可在检查器设置转场参数</p>\n<h1 id=\"字幕\"><a href=\"#字幕\" class=\"headerlink\" title=\"字幕\"></a>字幕</h1><p>基本字幕</p>\n<h1 id=\"音画匹配\"><a href=\"#音画匹配\" class=\"headerlink\" title=\"音画匹配\"></a>音画匹配</h1><ul>\n<li>右键—&gt; 分离音频</li>\n</ul>\n<h1 id=\"关键帧\"><a href=\"#关键帧\" class=\"headerlink\" title=\"关键帧\"></a>关键帧</h1><pre><code>- 对某个属性打两个关键帧，可实现该属性过度\n</code></pre><h1 id=\"速率和方向\"><a href=\"#速率和方向\" class=\"headerlink\" title=\"速率和方向\"></a>速率和方向</h1><p>contrl+option+r: 调整速度</p>\n<h1 id=\"聚焦-抠像-遮罩\"><a href=\"#聚焦-抠像-遮罩\" class=\"headerlink\" title=\"聚焦 抠像 遮罩\"></a>聚焦 抠像 遮罩</h1><p>聚焦：模糊分类中</p>\n<h1 id=\"主要情节\"><a href=\"#主要情节\" class=\"headerlink\" title=\"主要情节\"></a>主要情节</h1><p>主要时间轴：右键—&gt; 从故事情节提取</p>\n<p>非主要-》主要：右键—&gt; 覆盖至主要故事情节</p>\n<h1 id=\"声音\"><a href=\"#声音\" class=\"headerlink\" title=\"声音\"></a>声音</h1><ul>\n<li>合成异常</li>\n<li>No</li>\n</ul>"},{"title":"git基础操作笔记","date":"2022-03-01T03:32:38.000Z","_content":"\ngit工具书\n\n<!-- more -->\n\n\n\n\n\n[TOC]\n\n# merge时产生冲突\n\n![image-20210202171431394](/Users/hetianqi/Documents/charging/notes_of_the_world/git基础操作笔记.assets/image-20210202171431394.png)\n\n# git删除远程文件或者文件夹\n\ngit删除远程文件夹或文件的方法\n\nhttps://www.cnblogs.com/xusir/p/4111723.html\n\n由于本地修改了文件夹大全名大小写的原因，同步到git上并不区分大小写，造成了一些文件同步不了，所以要先把git远程库上文件夹删除掉，然后再重新同步\n\n如下，我把src里的全部移除，但是本地文件还保留。\n\ngit rm -r -n --cached  */src/\\*      //-n：加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。\n\ngit rm -r --cached  */src/\\*      //最终执行命令. \n\ngit commit -m\"移除src目录下所有文件的版本控制\"    //提交 \n\ngit push origin master   //提交到远程服务器\n\n若用git status命令查看，则/src/目录下文件出现在结果列表里， 我们不希望这个目录下的文件出现，则在项目根目录下，和.git 同级目录下，新建一个.gitignore文件，\n\n把.gitignore提交到远程服务器。 则/src目录就不会被提交了。\n# git基础操作\n\n\n\n![1541381811863](git基础操作笔记.assets\\1541381811863.png)\n\n\n\n```shell\ngit init #在现有目录中初始化仓库\ngit diff #查看已暂存和未暂存的修改\ngit log #查看提交历史\ngit reset HEAD [file] #取消暂存的文件\ngit checkout --[file] #撤消对文件的修改\ngit branch testing #建立分支\ngit checkout testing #切换分支\ngit merge #分支合并\ngit remote #查看远程仓库名称\ngit branch -r #查看远程分支的名称\n```\n\n## crontab同步git仓库\n添加远程仓库的时候使用https,并加入用户名、密码\n```shell\ngit remote add origin http://hetianqi:htq0625HTQ%24@git.jd.com/jd_git/monitors.git\n```\n\n## gitignore\n\n```\n# 忽略子目录\n**/log/*\n\n# 忽略*.o和*.a文件\n*.[oa] \n\n# 忽略*.b和*.B文件，my.b除外\n*.[bB]\n!my.b\n\n# 忽略dbg文件和dbg目录(只要)\ndbg\n\n# 只忽略dbg目录，不忽略dbg文件\ndbg/\n\n# 只忽略dbg文件，不忽略dbg目录\ndbg\n!dbg/\n\n# 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内\n\n/dbg\n\n# 以'#'开始的行，被视为注释.\n\n * ？：代表任意的一个字符\n    * ＊：代表任意数目的字符\n    * {!ab}：必须不是此类型\n    * {ab,bb,cx}：代表ab,bb,cx中任一类型即可\n    * [abc]：代表a,b,c中任一字符即可\n    * [ ^abc]：代表必须不是a,b,c中任一字符\n```\n\n```shell\n# mac配置全局gitignore\ngit config --global core.excludesfile ~/.gitignore_global\n\nvim ~/.gitignore_global\n\n  \n\n# for Mac OS X System Files\n.DS_Store\nThumbs.db\n\n# for emacs\n*~\n[#]*[#]\n\n# for Eclipse\n*.project\n\n# for Logs and databases\n*.log\n*.dat\n\n# remove SVN\n.svn\n\n# for Xcode\n.*.swp\n.clang_complete\n*.xcodeproj/project.xcworkspace/\n*.xcodeproj/xcuserdata/\n\n# for IDEA\n**/build/*\n.idea/*\n*.iml\n**/out/*\n\n# for PYCHARM\n**/__pycache__/*\n**/.ipynb_checkpoints/*\n\n\n```\n\n\n## fetch 和 pull的区别\nhttps://www.cnblogs.com/runnerjack/p/9342362.html\ngit fetch 命令：\n```shell\n$ git fetch <远程主机名> //这个命令将某个远程主机的更新全部取回本地\n如果只想取回特定分支的更新，可以指定分支名：\n\n$ git fetch <远程主机名> <分支名> //注意之间有空格\n最常见的命令如取回origin 主机的master 分支：\n\n$ git fetch origin master\n取回更新后，会返回一个FETCH_HEAD ，指的是某个branch在服务器上的最新状态，我们可以在本地通过它查看刚取回的更新信息：\n\n$ git log -p FETCH_HEAD\n前面提到，git pull 的过程可以理解为：\n\ngit fetch origin master //从远程主机的master分支拉取最新内容 \ngit merge FETCH_HEAD    //将拉取下来的最新内容合并到当前所在的分支中\n1\n2\n即将远程主机的某个分支的更新取回，并与本地指定的分支合并，完整格式可表示为：\n\n$ git pull <远程主机名> <远程分支名>:<本地分支名>\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略：\n\n$ git pull origin next\n```\n## 按后缀添加文件\n\n```\nfind . -name '*.py' -exec git add {} \\;\nfind . -name '*.sh' -exec git add {} \\;\nfind . -name '*.sql' -exec git add {} \\;\n\nfind . -name '*.dump' -exec git add {} \\;\nfind . -name '*.ipynb' -exec git add {} \\;\nfind . -name '*.model' -exec git add {} \\;\nfind . -name '*.model' -exec git checkout {} \n\nfind . -name '*.model' -exec git add {} \\;\n\n\n\nfind ./ -regex .*transform_5k/.*meta -exec git add {} \\;\n\n\nfind /notebook/rta_cvr_git/3_tfModels/application/MMOE/transform_5k/ -name '*' -exec git add {} \\;\n```\n\n## git切换关联的远程仓库\n```\n// 先删除关联\ngit remote rm origin\n// 再关联新的地址\ngit remote add origin XXXXXXXXXXXXX\n```\n\n## 删除某些已经存在的索引及文件\n\n原理：对所有文件的commit log进行重写，排除掉某些文件即可。\n命令如下：\n\n1. 删除远程和本地索引\n\n```shell\ngit filter-branch -f --tree-filter 'rm -rf */.ipynb_checkpoints/*' HEAD\n```\n\n当然，如果你还需要push到远端，就\n\n```shell\ngit push --set-upstream origin master  --force #也可以是别的分支\n```\n\n2. 删除远程文件：IDE里直接删除并commit\n3. pull\n\n\n\n注意\n\n1、其他分支也需要删除commit索引\n\n\n\n## 强制覆盖本地的代码\n\n```shell\ngit fetch --all\n#然后，你有两个选择：\ngit reset --hard origin/master\n#或者如果你在其他分支上：\ngit reset --hard origin/<branch_name>\n\ngit pull\n\n\n#说明：\n#git fetch从远程下载最新的，而不尝试合并或rebase任何东西。\n#然后git reset将主分支重置为您刚刚获取的内容。 --hard选项更改工作树中的所有文件以匹配origin/master中的文件。\n```\n\n## git push\n\n  git push的一般形式为 git push <远程主机名> <本地分支名>  <远程分支名> ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名， 第一个master是本地分支名，第二个master是远程分支名。\n\n**Git push**\n\n​        在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。\n\n​    git push的一般形式为 git push <远程主机名> <本地分支名>  <远程分支名> ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，\n\n​    第一个master是本地分支名，第二个master是远程分支名。\n\n​    **1.1 git push origin master**\n\n​        如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建\n\n​     **1.2** **git push origin ：refs/for/master** \n\n　　如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master\n\n​    **1.3** **git push origin**\n\n　　 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 \n\n　**1.4 git push**\n\n　　如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名\n\n　**1.5 git push 的其他命令**\n\n　　这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：\n\n　　　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，\n\n　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式\n\n　　　　　　如果想更改设置，可以使用git config命令。git config --global push.default matching OR git config --global push.default simple；可以使用git config -l 查看配置\n\n　　　　（2） git push --all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项\n\n　　　　（3） git push --force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。\n\n　　　　（4） git push origin --tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令\n\n## 本地repository关联到远程\n\n### 1. 打开在你的项目文件夹，输入下面的命令\n\n```\ngit init\n```\n\n![img](git基础操作笔记.assets\\643024-20161117105613529-1331892400.png)\n\n 输完上面的命令，文件夹中会出现一个.git文件夹，如下图所示，其他的的文件也会出现蓝色小问号的标志\n\n ![img](git基础操作笔记.assets\\643024-20161020175232498-1872971817.png)\n\n###  2. 添加所有文件\n\n```\ngit add .\n```\n\n注意最后的点是有用的哦\n\n![img](git基础操作笔记.assets\\643024-20161117105642248-437211863.png)\n\n 输入完成后，文件夹如下所示\n\n![img](git基础操作笔记.assets\\643024-20161020175721045-34264600.png)\n\n###  3. 提交所有文件\n\n```\ngit commit -m \"这里是备注信息\" -a\n```\n\n![img](git基础操作笔记.assets\\643024-20161117105723982-456456864.png)\n\n 完成后，文件夹显示如下\n\n![img](git基础操作笔记.assets\\643024-20161020180119123-417194644.png)\n\n都会出现绿色的小对勾\n\n###  4. 连接到远程仓库\n\n提前在你的github中新建一个仓库，操作如下\n\n![img](git基础操作笔记.assets\\643024-20161020180953357-871156867.png)\n\n建好后，取好项目名称，点击create repository按钮，完成仓库的建立\n\n![img](git基础操作笔记.assets\\643024-20161020180830388-1568291414.png)\n\n![img](git基础操作笔记.assets\\643024-20161026120125703-263387261.png)\n\n点击红色框出的小按钮，复制链接 \n\n### 5. 连接远程仓库\n在本地的命令框中输入下面的命令，即连接到了名为poster的仓库上\n\n```\ngit remote add origin https://github.com/OliveKong/poster.git \n```\n\n ![img](git基础操作笔记.assets\\643024-20161117105800279-1083550297.png)\n\n \n\n### 6.把本地项目推送到远程仓库\n\n```\ngit push -u origin master \n```\n\n![img](git基础操作笔记.assets\\643024-20161117105822107-1011418356.png)\n\n## git ignore\n\n.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。\n\n解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:\n\n```\ngit rm -r --cached .\ngit add .\ngit commit -m 'update .gitignore'\n```\n\n\n\n# git 工作流程\n\n<https://blog.csdn.net/zyw0713/article/details/80083431>\n\n## 主master分支\n\n## 开发分支develop\n\n```bash\n#Git创建Develop分支的命令\ngit checkout -b develop master  #相当于 创建新分支：git branch branchName 切换到新分支：git checkout branchName\n\n#将Develop分支发布到Master分支的命令\ngit checkout master\ngit merge --no-ff develop\n```\n\n--no-ff参数：默认情况下，Git执行\"快进式合并\"，会直接将Master分支指向Develop分支。强推。少用！！\n\n## 临时分支（功能feature，预发布release，fixbug）\n\n前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。\n\n但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：\n\n* 功能分支 （feature）\n\n* 预发布分支 (release)\n\n* 修补bug分支 (fixbug)\n\n这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。\n\n```bash\n#创建一个功能分支\ngit checkout -b feature-x develop\n#合并到develop分支\ngit checkout develop\ngit merge --no-ff feature-x\n```\n\n```bash\n#删除feature分支\ngit branch -d feature-x\n```\n\n## 克隆其他分支\n\n假设要clone dev分支：\n\n```bash\ngit clone ........ #把项目从远程clone到本地，默认clonemaster分支\ngit pull origin dev:dev  #把远程的dev分支拉到本地的dev分支。冒号前是远程分支名，冒号后是本地分支名\n```\n\n# 注释规范\n\nAdded (新加入的需求)\n\n　　Fixed： (修复bug )\n\n　　Changed ：(完成的任务)\n\n　　Updated： (完成的任务，或者由于第三方模块变化而做的变化)\n\n　　Mod: 修改（Modify）\n\n　　Add: a new module to have faster process, 表示新增（Add）\n\n　　Rem: deprecate unused modules, 表示移除（Remove）\n\n　　Ref: improved the implementation of module X, 表示重构（Refactory）\n\n假如有 Issues 系统，其中可以包含 Issue 的 ID。比如：Issue #123456\n\n \n\n# 上传大文件失败\n\n参考： https://blog.csdn.net/quiet_girl/article/details/79487966\n\ngit push 时，存在大文件会报错，即使删除大文件后，还会报错。主要是因为大文件存在没有被提交的commit记录里面。\n\n**解决方案：删除有大文件的commit记录即可**\n\n1、git status 查看未被传送到远程代码库的提交状态\n\n2、git cherry -v 查看未被传送到远程代码库的提交描述和说明\n\n```bash\ncc@lcc MyDoc$ git cherry -v \n+ 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12 kafka console消费失败\n+ 0f535fa58f413913c2c5ce37b85bf0803ea88f0b kafka console消费失败\n+ 3342e8c5db5c8d4533a70c80cf2a480ef0dd94f8 kafka console消费失败\n+ de978a99704e1bec6d2e81fcfd24900e6be43d8e kafka console消费失败\n+ f96a7d270c8d6a253530309a9f485a8d2a84befe kafka console消费失败\n+ 8ebe1f4d47845ddf21e7f14c031e73ec4f786722 drui io\n+ f8e4b51169d00242fff77aae182097cecbbff95a drui io\n\n\n```\n\n3、git reset commit_id 撤销未被传送到远程代码库的提交\n\n```bash\n这里我选择第一个\ncc@lcc MyDoc$ git reset 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12\nUnstaged changes after reset:\n\n```\n\n移除大文件：\n\n```bash\nlcc@lcc MyDoc$ git rm --cached *.pdf\n#这里我直接移除所有的pdf文件。\n\n#然后备份这些pdf文件 \nlcc@lcc MyDoc$ mv ./*/*.pdf ~/Downloads/\n```\n\n## 【git】全局配置和单个仓库的用户名邮箱配置\n\nGit全局配置和单个仓库的用户名邮箱配置\n\n学习git的时候, 大家刚开始使用之前都配置了一个全局的用户名和邮箱\n\n$ git config --global user.name \"github's Name\"\n\n$ git config --global user.email \"github@xx.com\"\n\n$ git config --list\n\n \n\n如果你公司的项目是放在自建的gitlab上面, 如果你不进行配置用户名和邮箱的话, 则会使用全局的, 这个时候是错误的, 正确的做法是针对公司的项目, 在项目根目录下进行单独配置\n\n$ git config user.name \"gitlab's Name\"\n\n$ git config user.email \"gitlab@xx.com\"\n\n$ git config --list\n\n git config --list查看当前配置, 在当前项目下面查看的配置是全局配置+当前项目的配置, 使用的时候会优先使用当前项目的配置\n\n# 问题集锦\n\n## not staged\n\n![1565317459057](git基础操作笔记.assets/1565317459057.png)\n\n解决：如果已add .之后还是报这个问题，就是这几个目录下有git文件（这些git文件没有add）\n\n## Please commit your changes or stash them before you merge.\n\n```shell\ngit stash\ngit pull\n```\n\n## fatal: refusing to merge unrelated histories\n\n```shell\ngit pull origin master --allow-unrelated-histories\n```\n\n## 中文显示乱码\n\nhttps://blog.csdn.net/u012145252/article/details/81775362\n\n```shell\ngit config --global core.quotepath false\n```\n\n","source":"_posts/0_代码相关/git基础操作笔记.md","raw":"---\ntitle: git基础操作笔记\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\ngit工具书\n\n<!-- more -->\n\n\n\n\n\n[TOC]\n\n# merge时产生冲突\n\n![image-20210202171431394](/Users/hetianqi/Documents/charging/notes_of_the_world/git基础操作笔记.assets/image-20210202171431394.png)\n\n# git删除远程文件或者文件夹\n\ngit删除远程文件夹或文件的方法\n\nhttps://www.cnblogs.com/xusir/p/4111723.html\n\n由于本地修改了文件夹大全名大小写的原因，同步到git上并不区分大小写，造成了一些文件同步不了，所以要先把git远程库上文件夹删除掉，然后再重新同步\n\n如下，我把src里的全部移除，但是本地文件还保留。\n\ngit rm -r -n --cached  */src/\\*      //-n：加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。\n\ngit rm -r --cached  */src/\\*      //最终执行命令. \n\ngit commit -m\"移除src目录下所有文件的版本控制\"    //提交 \n\ngit push origin master   //提交到远程服务器\n\n若用git status命令查看，则/src/目录下文件出现在结果列表里， 我们不希望这个目录下的文件出现，则在项目根目录下，和.git 同级目录下，新建一个.gitignore文件，\n\n把.gitignore提交到远程服务器。 则/src目录就不会被提交了。\n# git基础操作\n\n\n\n![1541381811863](git基础操作笔记.assets\\1541381811863.png)\n\n\n\n```shell\ngit init #在现有目录中初始化仓库\ngit diff #查看已暂存和未暂存的修改\ngit log #查看提交历史\ngit reset HEAD [file] #取消暂存的文件\ngit checkout --[file] #撤消对文件的修改\ngit branch testing #建立分支\ngit checkout testing #切换分支\ngit merge #分支合并\ngit remote #查看远程仓库名称\ngit branch -r #查看远程分支的名称\n```\n\n## crontab同步git仓库\n添加远程仓库的时候使用https,并加入用户名、密码\n```shell\ngit remote add origin http://hetianqi:htq0625HTQ%24@git.jd.com/jd_git/monitors.git\n```\n\n## gitignore\n\n```\n# 忽略子目录\n**/log/*\n\n# 忽略*.o和*.a文件\n*.[oa] \n\n# 忽略*.b和*.B文件，my.b除外\n*.[bB]\n!my.b\n\n# 忽略dbg文件和dbg目录(只要)\ndbg\n\n# 只忽略dbg目录，不忽略dbg文件\ndbg/\n\n# 只忽略dbg文件，不忽略dbg目录\ndbg\n!dbg/\n\n# 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内\n\n/dbg\n\n# 以'#'开始的行，被视为注释.\n\n * ？：代表任意的一个字符\n    * ＊：代表任意数目的字符\n    * {!ab}：必须不是此类型\n    * {ab,bb,cx}：代表ab,bb,cx中任一类型即可\n    * [abc]：代表a,b,c中任一字符即可\n    * [ ^abc]：代表必须不是a,b,c中任一字符\n```\n\n```shell\n# mac配置全局gitignore\ngit config --global core.excludesfile ~/.gitignore_global\n\nvim ~/.gitignore_global\n\n  \n\n# for Mac OS X System Files\n.DS_Store\nThumbs.db\n\n# for emacs\n*~\n[#]*[#]\n\n# for Eclipse\n*.project\n\n# for Logs and databases\n*.log\n*.dat\n\n# remove SVN\n.svn\n\n# for Xcode\n.*.swp\n.clang_complete\n*.xcodeproj/project.xcworkspace/\n*.xcodeproj/xcuserdata/\n\n# for IDEA\n**/build/*\n.idea/*\n*.iml\n**/out/*\n\n# for PYCHARM\n**/__pycache__/*\n**/.ipynb_checkpoints/*\n\n\n```\n\n\n## fetch 和 pull的区别\nhttps://www.cnblogs.com/runnerjack/p/9342362.html\ngit fetch 命令：\n```shell\n$ git fetch <远程主机名> //这个命令将某个远程主机的更新全部取回本地\n如果只想取回特定分支的更新，可以指定分支名：\n\n$ git fetch <远程主机名> <分支名> //注意之间有空格\n最常见的命令如取回origin 主机的master 分支：\n\n$ git fetch origin master\n取回更新后，会返回一个FETCH_HEAD ，指的是某个branch在服务器上的最新状态，我们可以在本地通过它查看刚取回的更新信息：\n\n$ git log -p FETCH_HEAD\n前面提到，git pull 的过程可以理解为：\n\ngit fetch origin master //从远程主机的master分支拉取最新内容 \ngit merge FETCH_HEAD    //将拉取下来的最新内容合并到当前所在的分支中\n1\n2\n即将远程主机的某个分支的更新取回，并与本地指定的分支合并，完整格式可表示为：\n\n$ git pull <远程主机名> <远程分支名>:<本地分支名>\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略：\n\n$ git pull origin next\n```\n## 按后缀添加文件\n\n```\nfind . -name '*.py' -exec git add {} \\;\nfind . -name '*.sh' -exec git add {} \\;\nfind . -name '*.sql' -exec git add {} \\;\n\nfind . -name '*.dump' -exec git add {} \\;\nfind . -name '*.ipynb' -exec git add {} \\;\nfind . -name '*.model' -exec git add {} \\;\nfind . -name '*.model' -exec git checkout {} \n\nfind . -name '*.model' -exec git add {} \\;\n\n\n\nfind ./ -regex .*transform_5k/.*meta -exec git add {} \\;\n\n\nfind /notebook/rta_cvr_git/3_tfModels/application/MMOE/transform_5k/ -name '*' -exec git add {} \\;\n```\n\n## git切换关联的远程仓库\n```\n// 先删除关联\ngit remote rm origin\n// 再关联新的地址\ngit remote add origin XXXXXXXXXXXXX\n```\n\n## 删除某些已经存在的索引及文件\n\n原理：对所有文件的commit log进行重写，排除掉某些文件即可。\n命令如下：\n\n1. 删除远程和本地索引\n\n```shell\ngit filter-branch -f --tree-filter 'rm -rf */.ipynb_checkpoints/*' HEAD\n```\n\n当然，如果你还需要push到远端，就\n\n```shell\ngit push --set-upstream origin master  --force #也可以是别的分支\n```\n\n2. 删除远程文件：IDE里直接删除并commit\n3. pull\n\n\n\n注意\n\n1、其他分支也需要删除commit索引\n\n\n\n## 强制覆盖本地的代码\n\n```shell\ngit fetch --all\n#然后，你有两个选择：\ngit reset --hard origin/master\n#或者如果你在其他分支上：\ngit reset --hard origin/<branch_name>\n\ngit pull\n\n\n#说明：\n#git fetch从远程下载最新的，而不尝试合并或rebase任何东西。\n#然后git reset将主分支重置为您刚刚获取的内容。 --hard选项更改工作树中的所有文件以匹配origin/master中的文件。\n```\n\n## git push\n\n  git push的一般形式为 git push <远程主机名> <本地分支名>  <远程分支名> ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名， 第一个master是本地分支名，第二个master是远程分支名。\n\n**Git push**\n\n​        在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。\n\n​    git push的一般形式为 git push <远程主机名> <本地分支名>  <远程分支名> ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，\n\n​    第一个master是本地分支名，第二个master是远程分支名。\n\n​    **1.1 git push origin master**\n\n​        如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建\n\n​     **1.2** **git push origin ：refs/for/master** \n\n　　如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master\n\n​    **1.3** **git push origin**\n\n　　 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 \n\n　**1.4 git push**\n\n　　如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名\n\n　**1.5 git push 的其他命令**\n\n　　这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：\n\n　　　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，\n\n　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式\n\n　　　　　　如果想更改设置，可以使用git config命令。git config --global push.default matching OR git config --global push.default simple；可以使用git config -l 查看配置\n\n　　　　（2） git push --all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项\n\n　　　　（3） git push --force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。\n\n　　　　（4） git push origin --tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令\n\n## 本地repository关联到远程\n\n### 1. 打开在你的项目文件夹，输入下面的命令\n\n```\ngit init\n```\n\n![img](git基础操作笔记.assets\\643024-20161117105613529-1331892400.png)\n\n 输完上面的命令，文件夹中会出现一个.git文件夹，如下图所示，其他的的文件也会出现蓝色小问号的标志\n\n ![img](git基础操作笔记.assets\\643024-20161020175232498-1872971817.png)\n\n###  2. 添加所有文件\n\n```\ngit add .\n```\n\n注意最后的点是有用的哦\n\n![img](git基础操作笔记.assets\\643024-20161117105642248-437211863.png)\n\n 输入完成后，文件夹如下所示\n\n![img](git基础操作笔记.assets\\643024-20161020175721045-34264600.png)\n\n###  3. 提交所有文件\n\n```\ngit commit -m \"这里是备注信息\" -a\n```\n\n![img](git基础操作笔记.assets\\643024-20161117105723982-456456864.png)\n\n 完成后，文件夹显示如下\n\n![img](git基础操作笔记.assets\\643024-20161020180119123-417194644.png)\n\n都会出现绿色的小对勾\n\n###  4. 连接到远程仓库\n\n提前在你的github中新建一个仓库，操作如下\n\n![img](git基础操作笔记.assets\\643024-20161020180953357-871156867.png)\n\n建好后，取好项目名称，点击create repository按钮，完成仓库的建立\n\n![img](git基础操作笔记.assets\\643024-20161020180830388-1568291414.png)\n\n![img](git基础操作笔记.assets\\643024-20161026120125703-263387261.png)\n\n点击红色框出的小按钮，复制链接 \n\n### 5. 连接远程仓库\n在本地的命令框中输入下面的命令，即连接到了名为poster的仓库上\n\n```\ngit remote add origin https://github.com/OliveKong/poster.git \n```\n\n ![img](git基础操作笔记.assets\\643024-20161117105800279-1083550297.png)\n\n \n\n### 6.把本地项目推送到远程仓库\n\n```\ngit push -u origin master \n```\n\n![img](git基础操作笔记.assets\\643024-20161117105822107-1011418356.png)\n\n## git ignore\n\n.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。\n\n解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:\n\n```\ngit rm -r --cached .\ngit add .\ngit commit -m 'update .gitignore'\n```\n\n\n\n# git 工作流程\n\n<https://blog.csdn.net/zyw0713/article/details/80083431>\n\n## 主master分支\n\n## 开发分支develop\n\n```bash\n#Git创建Develop分支的命令\ngit checkout -b develop master  #相当于 创建新分支：git branch branchName 切换到新分支：git checkout branchName\n\n#将Develop分支发布到Master分支的命令\ngit checkout master\ngit merge --no-ff develop\n```\n\n--no-ff参数：默认情况下，Git执行\"快进式合并\"，会直接将Master分支指向Develop分支。强推。少用！！\n\n## 临时分支（功能feature，预发布release，fixbug）\n\n前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。\n\n但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：\n\n* 功能分支 （feature）\n\n* 预发布分支 (release)\n\n* 修补bug分支 (fixbug)\n\n这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。\n\n```bash\n#创建一个功能分支\ngit checkout -b feature-x develop\n#合并到develop分支\ngit checkout develop\ngit merge --no-ff feature-x\n```\n\n```bash\n#删除feature分支\ngit branch -d feature-x\n```\n\n## 克隆其他分支\n\n假设要clone dev分支：\n\n```bash\ngit clone ........ #把项目从远程clone到本地，默认clonemaster分支\ngit pull origin dev:dev  #把远程的dev分支拉到本地的dev分支。冒号前是远程分支名，冒号后是本地分支名\n```\n\n# 注释规范\n\nAdded (新加入的需求)\n\n　　Fixed： (修复bug )\n\n　　Changed ：(完成的任务)\n\n　　Updated： (完成的任务，或者由于第三方模块变化而做的变化)\n\n　　Mod: 修改（Modify）\n\n　　Add: a new module to have faster process, 表示新增（Add）\n\n　　Rem: deprecate unused modules, 表示移除（Remove）\n\n　　Ref: improved the implementation of module X, 表示重构（Refactory）\n\n假如有 Issues 系统，其中可以包含 Issue 的 ID。比如：Issue #123456\n\n \n\n# 上传大文件失败\n\n参考： https://blog.csdn.net/quiet_girl/article/details/79487966\n\ngit push 时，存在大文件会报错，即使删除大文件后，还会报错。主要是因为大文件存在没有被提交的commit记录里面。\n\n**解决方案：删除有大文件的commit记录即可**\n\n1、git status 查看未被传送到远程代码库的提交状态\n\n2、git cherry -v 查看未被传送到远程代码库的提交描述和说明\n\n```bash\ncc@lcc MyDoc$ git cherry -v \n+ 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12 kafka console消费失败\n+ 0f535fa58f413913c2c5ce37b85bf0803ea88f0b kafka console消费失败\n+ 3342e8c5db5c8d4533a70c80cf2a480ef0dd94f8 kafka console消费失败\n+ de978a99704e1bec6d2e81fcfd24900e6be43d8e kafka console消费失败\n+ f96a7d270c8d6a253530309a9f485a8d2a84befe kafka console消费失败\n+ 8ebe1f4d47845ddf21e7f14c031e73ec4f786722 drui io\n+ f8e4b51169d00242fff77aae182097cecbbff95a drui io\n\n\n```\n\n3、git reset commit_id 撤销未被传送到远程代码库的提交\n\n```bash\n这里我选择第一个\ncc@lcc MyDoc$ git reset 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12\nUnstaged changes after reset:\n\n```\n\n移除大文件：\n\n```bash\nlcc@lcc MyDoc$ git rm --cached *.pdf\n#这里我直接移除所有的pdf文件。\n\n#然后备份这些pdf文件 \nlcc@lcc MyDoc$ mv ./*/*.pdf ~/Downloads/\n```\n\n## 【git】全局配置和单个仓库的用户名邮箱配置\n\nGit全局配置和单个仓库的用户名邮箱配置\n\n学习git的时候, 大家刚开始使用之前都配置了一个全局的用户名和邮箱\n\n$ git config --global user.name \"github's Name\"\n\n$ git config --global user.email \"github@xx.com\"\n\n$ git config --list\n\n \n\n如果你公司的项目是放在自建的gitlab上面, 如果你不进行配置用户名和邮箱的话, 则会使用全局的, 这个时候是错误的, 正确的做法是针对公司的项目, 在项目根目录下进行单独配置\n\n$ git config user.name \"gitlab's Name\"\n\n$ git config user.email \"gitlab@xx.com\"\n\n$ git config --list\n\n git config --list查看当前配置, 在当前项目下面查看的配置是全局配置+当前项目的配置, 使用的时候会优先使用当前项目的配置\n\n# 问题集锦\n\n## not staged\n\n![1565317459057](git基础操作笔记.assets/1565317459057.png)\n\n解决：如果已add .之后还是报这个问题，就是这几个目录下有git文件（这些git文件没有add）\n\n## Please commit your changes or stash them before you merge.\n\n```shell\ngit stash\ngit pull\n```\n\n## fatal: refusing to merge unrelated histories\n\n```shell\ngit pull origin master --allow-unrelated-histories\n```\n\n## 中文显示乱码\n\nhttps://blog.csdn.net/u012145252/article/details/81775362\n\n```shell\ngit config --global core.quotepath false\n```\n\n","slug":"0_代码相关/git基础操作笔记","published":1,"updated":"2022-03-01T03:50:09.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4t002w8s3255f2b726","content":"<p>git工具书</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"merge时产生冲突\"><a href=\"#merge时产生冲突\" class=\"headerlink\" title=\"merge时产生冲突\"></a>merge时产生冲突</h1><p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/git基础操作笔记.assets/image-20210202171431394.png\" alt=\"image-20210202171431394\"></p>\n<h1 id=\"git删除远程文件或者文件夹\"><a href=\"#git删除远程文件或者文件夹\" class=\"headerlink\" title=\"git删除远程文件或者文件夹\"></a>git删除远程文件或者文件夹</h1><p>git删除远程文件夹或文件的方法</p>\n<p><a href=\"https://www.cnblogs.com/xusir/p/4111723.html\">https://www.cnblogs.com/xusir/p/4111723.html</a></p>\n<p>由于本地修改了文件夹大全名大小写的原因，同步到git上并不区分大小写，造成了一些文件同步不了，所以要先把git远程库上文件夹删除掉，然后再重新同步</p>\n<p>如下，我把src里的全部移除，但是本地文件还保留。</p>\n<p>git rm -r -n —cached  <em>/src/\\</em>      //-n：加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。</p>\n<p>git rm -r —cached  <em>/src/\\</em>      //最终执行命令. </p>\n<p>git commit -m”移除src目录下所有文件的版本控制”    //提交 </p>\n<p>git push origin master   //提交到远程服务器</p>\n<p>若用git status命令查看，则/src/目录下文件出现在结果列表里， 我们不希望这个目录下的文件出现，则在项目根目录下，和.git 同级目录下，新建一个.gitignore文件，</p>\n<p>把.gitignore提交到远程服务器。 则/src目录就不会被提交了。</p>\n<h1 id=\"git基础操作\"><a href=\"#git基础操作\" class=\"headerlink\" title=\"git基础操作\"></a>git基础操作</h1><p><img src=\"git基础操作笔记.assets\\1541381811863.png\" alt=\"1541381811863\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init #在现有目录中初始化仓库</span><br><span class=\"line\">git diff #查看已暂存和未暂存的修改</span><br><span class=\"line\">git log #查看提交历史</span><br><span class=\"line\">git reset HEAD [file] #取消暂存的文件</span><br><span class=\"line\">git checkout --[file] #撤消对文件的修改</span><br><span class=\"line\">git branch testing #建立分支</span><br><span class=\"line\">git checkout testing #切换分支</span><br><span class=\"line\">git merge #分支合并</span><br><span class=\"line\">git remote #查看远程仓库名称</span><br><span class=\"line\">git branch -r #查看远程分支的名称</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab同步git仓库\"><a href=\"#crontab同步git仓库\" class=\"headerlink\" title=\"crontab同步git仓库\"></a>crontab同步git仓库</h2><p>添加远程仓库的时候使用https,并加入用户名、密码<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin http://hetianqi:htq0625HTQ%24@git.jd.com/jd_git/monitors.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\"gitignore\"></a>gitignore</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 忽略子目录</span><br><span class=\"line\">**/log/*</span><br><span class=\"line\"></span><br><span class=\"line\"># 忽略*.o和*.a文件</span><br><span class=\"line\">*.[oa] </span><br><span class=\"line\"></span><br><span class=\"line\"># 忽略*.b和*.B文件，my.b除外</span><br><span class=\"line\">*.[bB]</span><br><span class=\"line\">!my.b</span><br><span class=\"line\"></span><br><span class=\"line\"># 忽略dbg文件和dbg目录(只要)</span><br><span class=\"line\">dbg</span><br><span class=\"line\"></span><br><span class=\"line\"># 只忽略dbg目录，不忽略dbg文件</span><br><span class=\"line\">dbg/</span><br><span class=\"line\"></span><br><span class=\"line\"># 只忽略dbg文件，不忽略dbg目录</span><br><span class=\"line\">dbg</span><br><span class=\"line\">!dbg/</span><br><span class=\"line\"></span><br><span class=\"line\"># 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内</span><br><span class=\"line\"></span><br><span class=\"line\">/dbg</span><br><span class=\"line\"></span><br><span class=\"line\"># 以&#x27;#&#x27;开始的行，被视为注释.</span><br><span class=\"line\"></span><br><span class=\"line\"> * ？：代表任意的一个字符</span><br><span class=\"line\">    * ＊：代表任意数目的字符</span><br><span class=\"line\">    * &#123;!ab&#125;：必须不是此类型</span><br><span class=\"line\">    * &#123;ab,bb,cx&#125;：代表ab,bb,cx中任一类型即可</span><br><span class=\"line\">    * [abc]：代表a,b,c中任一字符即可</span><br><span class=\"line\">    * [ ^abc]：代表必须不是a,b,c中任一字符</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mac配置全局gitignore</span></span><br><span class=\"line\">git config --global core.excludesfile ~/.gitignore_global</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.gitignore_global</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> Mac OS X System Files</span></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> emacs</span></span><br><span class=\"line\">*~</span><br><span class=\"line\"><span class=\"meta\">[#</span><span class=\"bash\">]*[<span class=\"comment\">#]</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> Eclipse</span></span><br><span class=\"line\">*.project</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> Logs and databases</span></span><br><span class=\"line\">*.log</span><br><span class=\"line\">*.dat</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> remove SVN</span></span><br><span class=\"line\">.svn</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> Xcode</span></span><br><span class=\"line\">.*.swp</span><br><span class=\"line\">.clang_complete</span><br><span class=\"line\">*.xcodeproj/project.xcworkspace/</span><br><span class=\"line\">*.xcodeproj/xcuserdata/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> IDEA</span></span><br><span class=\"line\">**/build/*</span><br><span class=\"line\">.idea/*</span><br><span class=\"line\">*.iml</span><br><span class=\"line\">**/out/*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> PYCHARM</span></span><br><span class=\"line\">**/__pycache__/*</span><br><span class=\"line\">**/.ipynb_checkpoints/*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"fetch-和-pull的区别\"><a href=\"#fetch-和-pull的区别\" class=\"headerlink\" title=\"fetch 和 pull的区别\"></a>fetch 和 pull的区别</h2><p><a href=\"https://www.cnblogs.com/runnerjack/p/9342362.html\">https://www.cnblogs.com/runnerjack/p/9342362.html</a><br>git fetch 命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch &lt;远程主机名&gt; //这个命令将某个远程主机的更新全部取回本地</span></span><br><span class=\"line\">如果只想取回特定分支的更新，可以指定分支名：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch &lt;远程主机名&gt; &lt;分支名&gt; //注意之间有空格</span></span><br><span class=\"line\">最常见的命令如取回origin 主机的master 分支：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch origin master</span></span><br><span class=\"line\">取回更新后，会返回一个FETCH_HEAD ，指的是某个branch在服务器上的最新状态，我们可以在本地通过它查看刚取回的更新信息：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -p FETCH_HEAD</span></span><br><span class=\"line\">前面提到，git pull 的过程可以理解为：</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch origin master //从远程主机的master分支拉取最新内容 </span><br><span class=\"line\">git merge FETCH_HEAD    //将拉取下来的最新内容合并到当前所在的分支中</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">即将远程主机的某个分支的更新取回，并与本地指定的分支合并，完整格式可表示为：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></span><br><span class=\"line\">如果远程分支是与当前分支合并，则冒号后面的部分可以省略：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull origin next</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"按后缀添加文件\"><a href=\"#按后缀添加文件\" class=\"headerlink\" title=\"按后缀添加文件\"></a>按后缀添加文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name &#x27;*.py&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.sh&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.sql&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\">find . -name &#x27;*.dump&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.ipynb&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.model&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.model&#x27; -exec git checkout &#123;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">find . -name &#x27;*.model&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">find ./ -regex .*transform_5k/.*meta -exec git add &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">find /notebook/rta_cvr_git/3_tfModels/application/MMOE/transform_5k/ -name &#x27;*&#x27; -exec git add &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<h2 id=\"git切换关联的远程仓库\"><a href=\"#git切换关联的远程仓库\" class=\"headerlink\" title=\"git切换关联的远程仓库\"></a>git切换关联的远程仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 先删除关联</span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\">// 再关联新的地址</span><br><span class=\"line\">git remote add origin XXXXXXXXXXXXX</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除某些已经存在的索引及文件\"><a href=\"#删除某些已经存在的索引及文件\" class=\"headerlink\" title=\"删除某些已经存在的索引及文件\"></a>删除某些已经存在的索引及文件</h2><p>原理：对所有文件的commit log进行重写，排除掉某些文件即可。<br>命令如下：</p>\n<ol>\n<li>删除远程和本地索引</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch -f --tree-filter &#x27;rm -rf */.ipynb_checkpoints/*&#x27; HEAD</span><br></pre></td></tr></table></figure>\n<p>当然，如果你还需要push到远端，就</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin master  --force #也可以是别的分支</span><br></pre></td></tr></table></figure>\n<ol>\n<li>删除远程文件：IDE里直接删除并commit</li>\n<li>pull</li>\n</ol>\n<p>注意</p>\n<p>1、其他分支也需要删除commit索引</p>\n<h2 id=\"强制覆盖本地的代码\"><a href=\"#强制覆盖本地的代码\" class=\"headerlink\" title=\"强制覆盖本地的代码\"></a>强制覆盖本地的代码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后，你有两个选择：</span></span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者如果你在其他分支上：</span></span><br><span class=\"line\">git reset --hard origin/&lt;branch_name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">说明：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">git fetch从远程下载最新的，而不尝试合并或rebase任何东西。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后git reset将主分支重置为您刚刚获取的内容。 --hard选项更改工作树中的所有文件以匹配origin/master中的文件。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h2><p>  git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt; ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名， 第一个master是本地分支名，第二个master是远程分支名。</p>\n<p><strong>Git push</strong></p>\n<p>​        在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。</p>\n<p>​    git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt; ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，</p>\n<p>​    第一个master是本地分支名，第二个master是远程分支名。</p>\n<p>​    <strong>1.1 git push origin master</strong></p>\n<p>​        如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</p>\n<p>​     <strong>1.2</strong> <strong>git push origin ：refs/for/master</strong> </p>\n<p>　　如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin —delete master</p>\n<p>​    <strong>1.3</strong> <strong>git push origin</strong></p>\n<p>　　 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 </p>\n<p>　<strong>1.4 git push</strong></p>\n<p>　　如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</p>\n<p>　<strong>1.5 git push 的其他命令</strong></p>\n<p>　　这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：</p>\n<p>　　　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，</p>\n<p>　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式</p>\n<p>　　　　　　如果想更改设置，可以使用git config命令。git config —global push.default matching OR git config —global push.default simple；可以使用git config -l 查看配置</p>\n<p>　　　　（2） git push —all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</p>\n<p>　　　　（3） git push —force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。</p>\n<p>　　　　（4） git push origin —tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令</p>\n<h2 id=\"本地repository关联到远程\"><a href=\"#本地repository关联到远程\" class=\"headerlink\" title=\"本地repository关联到远程\"></a>本地repository关联到远程</h2><h3 id=\"1-打开在你的项目文件夹，输入下面的命令\"><a href=\"#1-打开在你的项目文件夹，输入下面的命令\" class=\"headerlink\" title=\"1. 打开在你的项目文件夹，输入下面的命令\"></a>1. 打开在你的项目文件夹，输入下面的命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p><img src=\"git基础操作笔记.assets\\643024-20161117105613529-1331892400.png\" alt=\"img\"></p>\n<p> 输完上面的命令，文件夹中会出现一个.git文件夹，如下图所示，其他的的文件也会出现蓝色小问号的标志</p>\n<p> <img src=\"git基础操作笔记.assets\\643024-20161020175232498-1872971817.png\" alt=\"img\"></p>\n<h3 id=\"2-添加所有文件\"><a href=\"#2-添加所有文件\" class=\"headerlink\" title=\"2. 添加所有文件\"></a>2. 添加所有文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<p>注意最后的点是有用的哦</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161117105642248-437211863.png\" alt=\"img\"></p>\n<p> 输入完成后，文件夹如下所示</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161020175721045-34264600.png\" alt=\"img\"></p>\n<h3 id=\"3-提交所有文件\"><a href=\"#3-提交所有文件\" class=\"headerlink\" title=\"3. 提交所有文件\"></a>3. 提交所有文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;这里是备注信息&quot; -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"git基础操作笔记.assets\\643024-20161117105723982-456456864.png\" alt=\"img\"></p>\n<p> 完成后，文件夹显示如下</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161020180119123-417194644.png\" alt=\"img\"></p>\n<p>都会出现绿色的小对勾</p>\n<h3 id=\"4-连接到远程仓库\"><a href=\"#4-连接到远程仓库\" class=\"headerlink\" title=\"4. 连接到远程仓库\"></a>4. 连接到远程仓库</h3><p>提前在你的github中新建一个仓库，操作如下</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161020180953357-871156867.png\" alt=\"img\"></p>\n<p>建好后，取好项目名称，点击create repository按钮，完成仓库的建立</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161020180830388-1568291414.png\" alt=\"img\"></p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161026120125703-263387261.png\" alt=\"img\"></p>\n<p>点击红色框出的小按钮，复制链接 </p>\n<h3 id=\"5-连接远程仓库\"><a href=\"#5-连接远程仓库\" class=\"headerlink\" title=\"5. 连接远程仓库\"></a>5. 连接远程仓库</h3><p>在本地的命令框中输入下面的命令，即连接到了名为poster的仓库上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/OliveKong/poster.git </span><br></pre></td></tr></table></figure>\n<p> <img src=\"git基础操作笔记.assets\\643024-20161117105800279-1083550297.png\" alt=\"img\"></p>\n<h3 id=\"6-把本地项目推送到远程仓库\"><a href=\"#6-把本地项目推送到远程仓库\" class=\"headerlink\" title=\"6.把本地项目推送到远程仓库\"></a>6.把本地项目推送到远程仓库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master </span><br></pre></td></tr></table></figure>\n<p><img src=\"git基础操作笔记.assets\\643024-20161117105822107-1011418356.png\" alt=\"img\"></p>\n<h2 id=\"git-ignore\"><a href=\"#git-ignore\" class=\"headerlink\" title=\"git ignore\"></a>git ignore</h2><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p>\n<p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &#x27;update .gitignore&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"git-工作流程\"><a href=\"#git-工作流程\" class=\"headerlink\" title=\"git 工作流程\"></a>git 工作流程</h1><p><a href=\"https://blog.csdn.net/zyw0713/article/details/80083431\">https://blog.csdn.net/zyw0713/article/details/80083431</a></p>\n<h2 id=\"主master分支\"><a href=\"#主master分支\" class=\"headerlink\" title=\"主master分支\"></a>主master分支</h2><h2 id=\"开发分支develop\"><a href=\"#开发分支develop\" class=\"headerlink\" title=\"开发分支develop\"></a>开发分支develop</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Git创建Develop分支的命令</span></span><br><span class=\"line\">git checkout -b develop master  <span class=\"comment\">#相当于 创建新分支：git branch branchName 切换到新分支：git checkout branchName</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将Develop分支发布到Master分支的命令</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff develop</span><br></pre></td></tr></table></figure>\n<p>—no-ff参数：默认情况下，Git执行”快进式合并”，会直接将Master分支指向Develop分支。强推。少用！！</p>\n<h2 id=\"临时分支（功能feature，预发布release，fixbug）\"><a href=\"#临时分支（功能feature，预发布release，fixbug）\" class=\"headerlink\" title=\"临时分支（功能feature，预发布release，fixbug）\"></a>临时分支（功能feature，预发布release，fixbug）</h2><p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。</p>\n<p>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>\n<ul>\n<li><p>功能分支 （feature）</p>\n</li>\n<li><p>预发布分支 (release)</p>\n</li>\n<li><p>修补bug分支 (fixbug)</p>\n</li>\n</ul>\n<p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个功能分支</span></span><br><span class=\"line\">git checkout -b feature-x develop</span><br><span class=\"line\"><span class=\"comment\">#合并到develop分支</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除feature分支</span></span><br><span class=\"line\">git branch -d feature-x</span><br></pre></td></tr></table></figure>\n<h2 id=\"克隆其他分支\"><a href=\"#克隆其他分支\" class=\"headerlink\" title=\"克隆其他分支\"></a>克隆其他分支</h2><p>假设要clone dev分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> ........ <span class=\"comment\">#把项目从远程clone到本地，默认clonemaster分支</span></span><br><span class=\"line\">git pull origin dev:dev  <span class=\"comment\">#把远程的dev分支拉到本地的dev分支。冒号前是远程分支名，冒号后是本地分支名</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h1><p>Added (新加入的需求)</p>\n<p>　　Fixed： (修复bug )</p>\n<p>　　Changed ：(完成的任务)</p>\n<p>　　Updated： (完成的任务，或者由于第三方模块变化而做的变化)</p>\n<p>　　Mod: 修改（Modify）</p>\n<p>　　Add: a new module to have faster process, 表示新增（Add）</p>\n<p>　　Rem: deprecate unused modules, 表示移除（Remove）</p>\n<p>　　Ref: improved the implementation of module X, 表示重构（Refactory）</p>\n<p>假如有 Issues 系统，其中可以包含 Issue 的 ID。比如：Issue #123456</p>\n<h1 id=\"上传大文件失败\"><a href=\"#上传大文件失败\" class=\"headerlink\" title=\"上传大文件失败\"></a>上传大文件失败</h1><p>参考： <a href=\"https://blog.csdn.net/quiet_girl/article/details/79487966\">https://blog.csdn.net/quiet_girl/article/details/79487966</a></p>\n<p>git push 时，存在大文件会报错，即使删除大文件后，还会报错。主要是因为大文件存在没有被提交的commit记录里面。</p>\n<p><strong>解决方案：删除有大文件的commit记录即可</strong></p>\n<p>1、git status 查看未被传送到远程代码库的提交状态</p>\n<p>2、git cherry -v 查看未被传送到远程代码库的提交描述和说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc@lcc MyDoc$ git cherry -v </span><br><span class=\"line\">+ 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12 kafka console消费失败</span><br><span class=\"line\">+ 0f535fa58f413913c2c5ce37b85bf0803ea88f0b kafka console消费失败</span><br><span class=\"line\">+ 3342e8c5db5c8d4533a70c80cf2a480ef0dd94f8 kafka console消费失败</span><br><span class=\"line\">+ de978a99704e1bec6d2e81fcfd24900e6be43d8e kafka console消费失败</span><br><span class=\"line\">+ f96a7d270c8d6a253530309a9f485a8d2a84befe kafka console消费失败</span><br><span class=\"line\">+ 8ebe1f4d47845ddf21e7f14c031e73ec4f786722 drui io</span><br><span class=\"line\">+ f8e4b51169d00242fff77aae182097cecbbff95a drui io</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、git reset commit_id 撤销未被传送到远程代码库的提交</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里我选择第一个</span><br><span class=\"line\">cc@lcc MyDoc$ git reset 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12</span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>移除大文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lcc@lcc MyDoc$ git rm --cached *.pdf</span><br><span class=\"line\"><span class=\"comment\">#这里我直接移除所有的pdf文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#然后备份这些pdf文件 </span></span><br><span class=\"line\">lcc@lcc MyDoc$ mv ./*/*.pdf ~/Downloads/</span><br></pre></td></tr></table></figure>\n<h2 id=\"【git】全局配置和单个仓库的用户名邮箱配置\"><a href=\"#【git】全局配置和单个仓库的用户名邮箱配置\" class=\"headerlink\" title=\"【git】全局配置和单个仓库的用户名邮箱配置\"></a>【git】全局配置和单个仓库的用户名邮箱配置</h2><p>Git全局配置和单个仓库的用户名邮箱配置</p>\n<p>学习git的时候, 大家刚开始使用之前都配置了一个全局的用户名和邮箱</p>\n<p>$ git config —global user.name “github’s Name”</p>\n<p>$ git config —global user.email “github@xx.com”</p>\n<p>$ git config —list</p>\n<p>如果你公司的项目是放在自建的gitlab上面, 如果你不进行配置用户名和邮箱的话, 则会使用全局的, 这个时候是错误的, 正确的做法是针对公司的项目, 在项目根目录下进行单独配置</p>\n<p>$ git config user.name “gitlab’s Name”</p>\n<p>$ git config user.email “gitlab@xx.com”</p>\n<p>$ git config —list</p>\n<p> git config —list查看当前配置, 在当前项目下面查看的配置是全局配置+当前项目的配置, 使用的时候会优先使用当前项目的配置</p>\n<h1 id=\"问题集锦\"><a href=\"#问题集锦\" class=\"headerlink\" title=\"问题集锦\"></a>问题集锦</h1><h2 id=\"not-staged\"><a href=\"#not-staged\" class=\"headerlink\" title=\"not staged\"></a>not staged</h2>\n<p>解决：如果已add .之后还是报这个问题，就是这几个目录下有git文件（这些git文件没有add）</p>\n<h2 id=\"Please-commit-your-changes-or-stash-them-before-you-merge\"><a href=\"#Please-commit-your-changes-or-stash-them-before-you-merge\" class=\"headerlink\" title=\"Please commit your changes or stash them before you merge.\"></a>Please commit your changes or stash them before you merge.</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<h2 id=\"fatal-refusing-to-merge-unrelated-histories\"><a href=\"#fatal-refusing-to-merge-unrelated-histories\" class=\"headerlink\" title=\"fatal: refusing to merge unrelated histories\"></a>fatal: refusing to merge unrelated histories</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n<h2 id=\"中文显示乱码\"><a href=\"#中文显示乱码\" class=\"headerlink\" title=\"中文显示乱码\"></a>中文显示乱码</h2><p><a href=\"https://blog.csdn.net/u012145252/article/details/81775362\">https://blog.csdn.net/u012145252/article/details/81775362</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>git工具书</p>","more":"<p>[TOC]</p>\n<h1 id=\"merge时产生冲突\"><a href=\"#merge时产生冲突\" class=\"headerlink\" title=\"merge时产生冲突\"></a>merge时产生冲突</h1><p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/git基础操作笔记.assets/image-20210202171431394.png\" alt=\"image-20210202171431394\"></p>\n<h1 id=\"git删除远程文件或者文件夹\"><a href=\"#git删除远程文件或者文件夹\" class=\"headerlink\" title=\"git删除远程文件或者文件夹\"></a>git删除远程文件或者文件夹</h1><p>git删除远程文件夹或文件的方法</p>\n<p><a href=\"https://www.cnblogs.com/xusir/p/4111723.html\">https://www.cnblogs.com/xusir/p/4111723.html</a></p>\n<p>由于本地修改了文件夹大全名大小写的原因，同步到git上并不区分大小写，造成了一些文件同步不了，所以要先把git远程库上文件夹删除掉，然后再重新同步</p>\n<p>如下，我把src里的全部移除，但是本地文件还保留。</p>\n<p>git rm -r -n —cached  <em>/src/\\</em>      //-n：加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。</p>\n<p>git rm -r —cached  <em>/src/\\</em>      //最终执行命令. </p>\n<p>git commit -m”移除src目录下所有文件的版本控制”    //提交 </p>\n<p>git push origin master   //提交到远程服务器</p>\n<p>若用git status命令查看，则/src/目录下文件出现在结果列表里， 我们不希望这个目录下的文件出现，则在项目根目录下，和.git 同级目录下，新建一个.gitignore文件，</p>\n<p>把.gitignore提交到远程服务器。 则/src目录就不会被提交了。</p>\n<h1 id=\"git基础操作\"><a href=\"#git基础操作\" class=\"headerlink\" title=\"git基础操作\"></a>git基础操作</h1><p><img src=\"git基础操作笔记.assets\\1541381811863.png\" alt=\"1541381811863\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init #在现有目录中初始化仓库</span><br><span class=\"line\">git diff #查看已暂存和未暂存的修改</span><br><span class=\"line\">git log #查看提交历史</span><br><span class=\"line\">git reset HEAD [file] #取消暂存的文件</span><br><span class=\"line\">git checkout --[file] #撤消对文件的修改</span><br><span class=\"line\">git branch testing #建立分支</span><br><span class=\"line\">git checkout testing #切换分支</span><br><span class=\"line\">git merge #分支合并</span><br><span class=\"line\">git remote #查看远程仓库名称</span><br><span class=\"line\">git branch -r #查看远程分支的名称</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab同步git仓库\"><a href=\"#crontab同步git仓库\" class=\"headerlink\" title=\"crontab同步git仓库\"></a>crontab同步git仓库</h2><p>添加远程仓库的时候使用https,并加入用户名、密码<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin http://hetianqi:htq0625HTQ%24@git.jd.com/jd_git/monitors.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\"gitignore\"></a>gitignore</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 忽略子目录</span><br><span class=\"line\">**/log/*</span><br><span class=\"line\"></span><br><span class=\"line\"># 忽略*.o和*.a文件</span><br><span class=\"line\">*.[oa] </span><br><span class=\"line\"></span><br><span class=\"line\"># 忽略*.b和*.B文件，my.b除外</span><br><span class=\"line\">*.[bB]</span><br><span class=\"line\">!my.b</span><br><span class=\"line\"></span><br><span class=\"line\"># 忽略dbg文件和dbg目录(只要)</span><br><span class=\"line\">dbg</span><br><span class=\"line\"></span><br><span class=\"line\"># 只忽略dbg目录，不忽略dbg文件</span><br><span class=\"line\">dbg/</span><br><span class=\"line\"></span><br><span class=\"line\"># 只忽略dbg文件，不忽略dbg目录</span><br><span class=\"line\">dbg</span><br><span class=\"line\">!dbg/</span><br><span class=\"line\"></span><br><span class=\"line\"># 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内</span><br><span class=\"line\"></span><br><span class=\"line\">/dbg</span><br><span class=\"line\"></span><br><span class=\"line\"># 以&#x27;#&#x27;开始的行，被视为注释.</span><br><span class=\"line\"></span><br><span class=\"line\"> * ？：代表任意的一个字符</span><br><span class=\"line\">    * ＊：代表任意数目的字符</span><br><span class=\"line\">    * &#123;!ab&#125;：必须不是此类型</span><br><span class=\"line\">    * &#123;ab,bb,cx&#125;：代表ab,bb,cx中任一类型即可</span><br><span class=\"line\">    * [abc]：代表a,b,c中任一字符即可</span><br><span class=\"line\">    * [ ^abc]：代表必须不是a,b,c中任一字符</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mac配置全局gitignore</span></span><br><span class=\"line\">git config --global core.excludesfile ~/.gitignore_global</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.gitignore_global</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> Mac OS X System Files</span></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> emacs</span></span><br><span class=\"line\">*~</span><br><span class=\"line\"><span class=\"meta\">[#</span><span class=\"bash\">]*[<span class=\"comment\">#]</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> Eclipse</span></span><br><span class=\"line\">*.project</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> Logs and databases</span></span><br><span class=\"line\">*.log</span><br><span class=\"line\">*.dat</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> remove SVN</span></span><br><span class=\"line\">.svn</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> Xcode</span></span><br><span class=\"line\">.*.swp</span><br><span class=\"line\">.clang_complete</span><br><span class=\"line\">*.xcodeproj/project.xcworkspace/</span><br><span class=\"line\">*.xcodeproj/xcuserdata/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> IDEA</span></span><br><span class=\"line\">**/build/*</span><br><span class=\"line\">.idea/*</span><br><span class=\"line\">*.iml</span><br><span class=\"line\">**/out/*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> PYCHARM</span></span><br><span class=\"line\">**/__pycache__/*</span><br><span class=\"line\">**/.ipynb_checkpoints/*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"fetch-和-pull的区别\"><a href=\"#fetch-和-pull的区别\" class=\"headerlink\" title=\"fetch 和 pull的区别\"></a>fetch 和 pull的区别</h2><p><a href=\"https://www.cnblogs.com/runnerjack/p/9342362.html\">https://www.cnblogs.com/runnerjack/p/9342362.html</a><br>git fetch 命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch &lt;远程主机名&gt; //这个命令将某个远程主机的更新全部取回本地</span></span><br><span class=\"line\">如果只想取回特定分支的更新，可以指定分支名：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch &lt;远程主机名&gt; &lt;分支名&gt; //注意之间有空格</span></span><br><span class=\"line\">最常见的命令如取回origin 主机的master 分支：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git fetch origin master</span></span><br><span class=\"line\">取回更新后，会返回一个FETCH_HEAD ，指的是某个branch在服务器上的最新状态，我们可以在本地通过它查看刚取回的更新信息：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -p FETCH_HEAD</span></span><br><span class=\"line\">前面提到，git pull 的过程可以理解为：</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch origin master //从远程主机的master分支拉取最新内容 </span><br><span class=\"line\">git merge FETCH_HEAD    //将拉取下来的最新内容合并到当前所在的分支中</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">即将远程主机的某个分支的更新取回，并与本地指定的分支合并，完整格式可表示为：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></span><br><span class=\"line\">如果远程分支是与当前分支合并，则冒号后面的部分可以省略：</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull origin next</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"按后缀添加文件\"><a href=\"#按后缀添加文件\" class=\"headerlink\" title=\"按后缀添加文件\"></a>按后缀添加文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name &#x27;*.py&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.sh&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.sql&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\">find . -name &#x27;*.dump&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.ipynb&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.model&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\">find . -name &#x27;*.model&#x27; -exec git checkout &#123;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">find . -name &#x27;*.model&#x27; -exec git add &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">find ./ -regex .*transform_5k/.*meta -exec git add &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">find /notebook/rta_cvr_git/3_tfModels/application/MMOE/transform_5k/ -name &#x27;*&#x27; -exec git add &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<h2 id=\"git切换关联的远程仓库\"><a href=\"#git切换关联的远程仓库\" class=\"headerlink\" title=\"git切换关联的远程仓库\"></a>git切换关联的远程仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 先删除关联</span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\">// 再关联新的地址</span><br><span class=\"line\">git remote add origin XXXXXXXXXXXXX</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除某些已经存在的索引及文件\"><a href=\"#删除某些已经存在的索引及文件\" class=\"headerlink\" title=\"删除某些已经存在的索引及文件\"></a>删除某些已经存在的索引及文件</h2><p>原理：对所有文件的commit log进行重写，排除掉某些文件即可。<br>命令如下：</p>\n<ol>\n<li>删除远程和本地索引</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch -f --tree-filter &#x27;rm -rf */.ipynb_checkpoints/*&#x27; HEAD</span><br></pre></td></tr></table></figure>\n<p>当然，如果你还需要push到远端，就</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin master  --force #也可以是别的分支</span><br></pre></td></tr></table></figure>\n<ol>\n<li>删除远程文件：IDE里直接删除并commit</li>\n<li>pull</li>\n</ol>\n<p>注意</p>\n<p>1、其他分支也需要删除commit索引</p>\n<h2 id=\"强制覆盖本地的代码\"><a href=\"#强制覆盖本地的代码\" class=\"headerlink\" title=\"强制覆盖本地的代码\"></a>强制覆盖本地的代码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后，你有两个选择：</span></span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者如果你在其他分支上：</span></span><br><span class=\"line\">git reset --hard origin/&lt;branch_name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">说明：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">git fetch从远程下载最新的，而不尝试合并或rebase任何东西。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后git reset将主分支重置为您刚刚获取的内容。 --hard选项更改工作树中的所有文件以匹配origin/master中的文件。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h2><p>  git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt; ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名， 第一个master是本地分支名，第二个master是远程分支名。</p>\n<p><strong>Git push</strong></p>\n<p>​        在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。</p>\n<p>​    git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt; ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，</p>\n<p>​    第一个master是本地分支名，第二个master是远程分支名。</p>\n<p>​    <strong>1.1 git push origin master</strong></p>\n<p>​        如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</p>\n<p>​     <strong>1.2</strong> <strong>git push origin ：refs/for/master</strong> </p>\n<p>　　如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin —delete master</p>\n<p>​    <strong>1.3</strong> <strong>git push origin</strong></p>\n<p>　　 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 </p>\n<p>　<strong>1.4 git push</strong></p>\n<p>　　如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</p>\n<p>　<strong>1.5 git push 的其他命令</strong></p>\n<p>　　这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：</p>\n<p>　　　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，</p>\n<p>　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式</p>\n<p>　　　　　　如果想更改设置，可以使用git config命令。git config —global push.default matching OR git config —global push.default simple；可以使用git config -l 查看配置</p>\n<p>　　　　（2） git push —all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</p>\n<p>　　　　（3） git push —force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。</p>\n<p>　　　　（4） git push origin —tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令</p>\n<h2 id=\"本地repository关联到远程\"><a href=\"#本地repository关联到远程\" class=\"headerlink\" title=\"本地repository关联到远程\"></a>本地repository关联到远程</h2><h3 id=\"1-打开在你的项目文件夹，输入下面的命令\"><a href=\"#1-打开在你的项目文件夹，输入下面的命令\" class=\"headerlink\" title=\"1. 打开在你的项目文件夹，输入下面的命令\"></a>1. 打开在你的项目文件夹，输入下面的命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p><img src=\"git基础操作笔记.assets\\643024-20161117105613529-1331892400.png\" alt=\"img\"></p>\n<p> 输完上面的命令，文件夹中会出现一个.git文件夹，如下图所示，其他的的文件也会出现蓝色小问号的标志</p>\n<p> <img src=\"git基础操作笔记.assets\\643024-20161020175232498-1872971817.png\" alt=\"img\"></p>\n<h3 id=\"2-添加所有文件\"><a href=\"#2-添加所有文件\" class=\"headerlink\" title=\"2. 添加所有文件\"></a>2. 添加所有文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<p>注意最后的点是有用的哦</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161117105642248-437211863.png\" alt=\"img\"></p>\n<p> 输入完成后，文件夹如下所示</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161020175721045-34264600.png\" alt=\"img\"></p>\n<h3 id=\"3-提交所有文件\"><a href=\"#3-提交所有文件\" class=\"headerlink\" title=\"3. 提交所有文件\"></a>3. 提交所有文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;这里是备注信息&quot; -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"git基础操作笔记.assets\\643024-20161117105723982-456456864.png\" alt=\"img\"></p>\n<p> 完成后，文件夹显示如下</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161020180119123-417194644.png\" alt=\"img\"></p>\n<p>都会出现绿色的小对勾</p>\n<h3 id=\"4-连接到远程仓库\"><a href=\"#4-连接到远程仓库\" class=\"headerlink\" title=\"4. 连接到远程仓库\"></a>4. 连接到远程仓库</h3><p>提前在你的github中新建一个仓库，操作如下</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161020180953357-871156867.png\" alt=\"img\"></p>\n<p>建好后，取好项目名称，点击create repository按钮，完成仓库的建立</p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161020180830388-1568291414.png\" alt=\"img\"></p>\n<p><img src=\"git基础操作笔记.assets\\643024-20161026120125703-263387261.png\" alt=\"img\"></p>\n<p>点击红色框出的小按钮，复制链接 </p>\n<h3 id=\"5-连接远程仓库\"><a href=\"#5-连接远程仓库\" class=\"headerlink\" title=\"5. 连接远程仓库\"></a>5. 连接远程仓库</h3><p>在本地的命令框中输入下面的命令，即连接到了名为poster的仓库上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/OliveKong/poster.git </span><br></pre></td></tr></table></figure>\n<p> <img src=\"git基础操作笔记.assets\\643024-20161117105800279-1083550297.png\" alt=\"img\"></p>\n<h3 id=\"6-把本地项目推送到远程仓库\"><a href=\"#6-把本地项目推送到远程仓库\" class=\"headerlink\" title=\"6.把本地项目推送到远程仓库\"></a>6.把本地项目推送到远程仓库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master </span><br></pre></td></tr></table></figure>\n<p><img src=\"git基础操作笔记.assets\\643024-20161117105822107-1011418356.png\" alt=\"img\"></p>\n<h2 id=\"git-ignore\"><a href=\"#git-ignore\" class=\"headerlink\" title=\"git ignore\"></a>git ignore</h2><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p>\n<p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &#x27;update .gitignore&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"git-工作流程\"><a href=\"#git-工作流程\" class=\"headerlink\" title=\"git 工作流程\"></a>git 工作流程</h1><p><a href=\"https://blog.csdn.net/zyw0713/article/details/80083431\">https://blog.csdn.net/zyw0713/article/details/80083431</a></p>\n<h2 id=\"主master分支\"><a href=\"#主master分支\" class=\"headerlink\" title=\"主master分支\"></a>主master分支</h2><h2 id=\"开发分支develop\"><a href=\"#开发分支develop\" class=\"headerlink\" title=\"开发分支develop\"></a>开发分支develop</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Git创建Develop分支的命令</span></span><br><span class=\"line\">git checkout -b develop master  <span class=\"comment\">#相当于 创建新分支：git branch branchName 切换到新分支：git checkout branchName</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将Develop分支发布到Master分支的命令</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff develop</span><br></pre></td></tr></table></figure>\n<p>—no-ff参数：默认情况下，Git执行”快进式合并”，会直接将Master分支指向Develop分支。强推。少用！！</p>\n<h2 id=\"临时分支（功能feature，预发布release，fixbug）\"><a href=\"#临时分支（功能feature，预发布release，fixbug）\" class=\"headerlink\" title=\"临时分支（功能feature，预发布release，fixbug）\"></a>临时分支（功能feature，预发布release，fixbug）</h2><p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。</p>\n<p>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>\n<ul>\n<li><p>功能分支 （feature）</p>\n</li>\n<li><p>预发布分支 (release)</p>\n</li>\n<li><p>修补bug分支 (fixbug)</p>\n</li>\n</ul>\n<p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个功能分支</span></span><br><span class=\"line\">git checkout -b feature-x develop</span><br><span class=\"line\"><span class=\"comment\">#合并到develop分支</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除feature分支</span></span><br><span class=\"line\">git branch -d feature-x</span><br></pre></td></tr></table></figure>\n<h2 id=\"克隆其他分支\"><a href=\"#克隆其他分支\" class=\"headerlink\" title=\"克隆其他分支\"></a>克隆其他分支</h2><p>假设要clone dev分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> ........ <span class=\"comment\">#把项目从远程clone到本地，默认clonemaster分支</span></span><br><span class=\"line\">git pull origin dev:dev  <span class=\"comment\">#把远程的dev分支拉到本地的dev分支。冒号前是远程分支名，冒号后是本地分支名</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h1><p>Added (新加入的需求)</p>\n<p>　　Fixed： (修复bug )</p>\n<p>　　Changed ：(完成的任务)</p>\n<p>　　Updated： (完成的任务，或者由于第三方模块变化而做的变化)</p>\n<p>　　Mod: 修改（Modify）</p>\n<p>　　Add: a new module to have faster process, 表示新增（Add）</p>\n<p>　　Rem: deprecate unused modules, 表示移除（Remove）</p>\n<p>　　Ref: improved the implementation of module X, 表示重构（Refactory）</p>\n<p>假如有 Issues 系统，其中可以包含 Issue 的 ID。比如：Issue #123456</p>\n<h1 id=\"上传大文件失败\"><a href=\"#上传大文件失败\" class=\"headerlink\" title=\"上传大文件失败\"></a>上传大文件失败</h1><p>参考： <a href=\"https://blog.csdn.net/quiet_girl/article/details/79487966\">https://blog.csdn.net/quiet_girl/article/details/79487966</a></p>\n<p>git push 时，存在大文件会报错，即使删除大文件后，还会报错。主要是因为大文件存在没有被提交的commit记录里面。</p>\n<p><strong>解决方案：删除有大文件的commit记录即可</strong></p>\n<p>1、git status 查看未被传送到远程代码库的提交状态</p>\n<p>2、git cherry -v 查看未被传送到远程代码库的提交描述和说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc@lcc MyDoc$ git cherry -v </span><br><span class=\"line\">+ 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12 kafka console消费失败</span><br><span class=\"line\">+ 0f535fa58f413913c2c5ce37b85bf0803ea88f0b kafka console消费失败</span><br><span class=\"line\">+ 3342e8c5db5c8d4533a70c80cf2a480ef0dd94f8 kafka console消费失败</span><br><span class=\"line\">+ de978a99704e1bec6d2e81fcfd24900e6be43d8e kafka console消费失败</span><br><span class=\"line\">+ f96a7d270c8d6a253530309a9f485a8d2a84befe kafka console消费失败</span><br><span class=\"line\">+ 8ebe1f4d47845ddf21e7f14c031e73ec4f786722 drui io</span><br><span class=\"line\">+ f8e4b51169d00242fff77aae182097cecbbff95a drui io</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、git reset commit_id 撤销未被传送到远程代码库的提交</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里我选择第一个</span><br><span class=\"line\">cc@lcc MyDoc$ git reset 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12</span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>移除大文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lcc@lcc MyDoc$ git rm --cached *.pdf</span><br><span class=\"line\"><span class=\"comment\">#这里我直接移除所有的pdf文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#然后备份这些pdf文件 </span></span><br><span class=\"line\">lcc@lcc MyDoc$ mv ./*/*.pdf ~/Downloads/</span><br></pre></td></tr></table></figure>\n<h2 id=\"【git】全局配置和单个仓库的用户名邮箱配置\"><a href=\"#【git】全局配置和单个仓库的用户名邮箱配置\" class=\"headerlink\" title=\"【git】全局配置和单个仓库的用户名邮箱配置\"></a>【git】全局配置和单个仓库的用户名邮箱配置</h2><p>Git全局配置和单个仓库的用户名邮箱配置</p>\n<p>学习git的时候, 大家刚开始使用之前都配置了一个全局的用户名和邮箱</p>\n<p>$ git config —global user.name “github’s Name”</p>\n<p>$ git config —global user.email “github@xx.com”</p>\n<p>$ git config —list</p>\n<p>如果你公司的项目是放在自建的gitlab上面, 如果你不进行配置用户名和邮箱的话, 则会使用全局的, 这个时候是错误的, 正确的做法是针对公司的项目, 在项目根目录下进行单独配置</p>\n<p>$ git config user.name “gitlab’s Name”</p>\n<p>$ git config user.email “gitlab@xx.com”</p>\n<p>$ git config —list</p>\n<p> git config —list查看当前配置, 在当前项目下面查看的配置是全局配置+当前项目的配置, 使用的时候会优先使用当前项目的配置</p>\n<h1 id=\"问题集锦\"><a href=\"#问题集锦\" class=\"headerlink\" title=\"问题集锦\"></a>问题集锦</h1><h2 id=\"not-staged\"><a href=\"#not-staged\" class=\"headerlink\" title=\"not staged\"></a>not staged</h2>\n<p>解决：如果已add .之后还是报这个问题，就是这几个目录下有git文件（这些git文件没有add）</p>\n<h2 id=\"Please-commit-your-changes-or-stash-them-before-you-merge\"><a href=\"#Please-commit-your-changes-or-stash-them-before-you-merge\" class=\"headerlink\" title=\"Please commit your changes or stash them before you merge.\"></a>Please commit your changes or stash them before you merge.</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<h2 id=\"fatal-refusing-to-merge-unrelated-histories\"><a href=\"#fatal-refusing-to-merge-unrelated-histories\" class=\"headerlink\" title=\"fatal: refusing to merge unrelated histories\"></a>fatal: refusing to merge unrelated histories</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n<h2 id=\"中文显示乱码\"><a href=\"#中文显示乱码\" class=\"headerlink\" title=\"中文显示乱码\"></a>中文显示乱码</h2><p><a href=\"https://blog.csdn.net/u012145252/article/details/81775362\">https://blog.csdn.net/u012145252/article/details/81775362</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>"},{"title":"hdfs常用命令","date":"2022-03-01T03:32:38.000Z","_content":"\nhdfs常用操作\n\n<!-- more -->\n\n\n```shell\nhttp://hadoop.apache.org/docs/r1.0.4/cn/hdfs_shell.html\n1.hdfs命令行\n    （1）查看帮助\n        hdfs dfs -help \n        \n    （2）查看当前目录信息\n        hdfs dfs -ls /\n        \n    （3）上传文件\n        hdfs dfs -put /本地路径 /hdfs路径\n        \n    （4）剪切文件\n        hdfs dfs -moveFromLocal a.txt /aa.txt\n        \n    （5）下载文件到本地\n        hdfs dfs -get /hdfs路径 /本地路径\n        \n    （6）合并下载\n        hdfs dfs -getmerge /hdfs路径文件夹 /合并后的文件\n        \n    （7）创建文件夹\n        hdfs dfs -mkdir /hello\n        \n    （8）创建多级文件夹\n        hdfs dfs -mkdir -p /hello/world\n        \n    （9）移动hdfs文件\n        hdfs dfs -mv /hdfs路径 /hdfs路径\n        \n    （10）复制hdfs文件\n        hdfs dfs -cp /hdfs路径 /hdfs路径\n        \n    （11）删除hdfs文件\n        hdfs dfs -rm /aa.txt\n        \n    （12）删除hdfs文件夹\n        hdfs dfs -rm -r /hello\n        \n    （13）查看hdfs中的文件\n        hdfs dfs -cat /文件\n        hdfs dfs -tail -f /文件\n        \n    （14）查看文件夹中有多少个文件\n        hdfs dfs -count /文件夹\n        \n    （15）查看hdfs的总空间\n        hdfs dfs -df /\n        hdfs dfs -df -h /\n        \n    （16）修改副本数    \n        hdfs dfs -setrep 1 /a.txt\n```\n\n","source":"_posts/0_代码相关/hdfs常用命令.md","raw":"---\ntitle: hdfs常用命令\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nhdfs常用操作\n\n<!-- more -->\n\n\n```shell\nhttp://hadoop.apache.org/docs/r1.0.4/cn/hdfs_shell.html\n1.hdfs命令行\n    （1）查看帮助\n        hdfs dfs -help \n        \n    （2）查看当前目录信息\n        hdfs dfs -ls /\n        \n    （3）上传文件\n        hdfs dfs -put /本地路径 /hdfs路径\n        \n    （4）剪切文件\n        hdfs dfs -moveFromLocal a.txt /aa.txt\n        \n    （5）下载文件到本地\n        hdfs dfs -get /hdfs路径 /本地路径\n        \n    （6）合并下载\n        hdfs dfs -getmerge /hdfs路径文件夹 /合并后的文件\n        \n    （7）创建文件夹\n        hdfs dfs -mkdir /hello\n        \n    （8）创建多级文件夹\n        hdfs dfs -mkdir -p /hello/world\n        \n    （9）移动hdfs文件\n        hdfs dfs -mv /hdfs路径 /hdfs路径\n        \n    （10）复制hdfs文件\n        hdfs dfs -cp /hdfs路径 /hdfs路径\n        \n    （11）删除hdfs文件\n        hdfs dfs -rm /aa.txt\n        \n    （12）删除hdfs文件夹\n        hdfs dfs -rm -r /hello\n        \n    （13）查看hdfs中的文件\n        hdfs dfs -cat /文件\n        hdfs dfs -tail -f /文件\n        \n    （14）查看文件夹中有多少个文件\n        hdfs dfs -count /文件夹\n        \n    （15）查看hdfs的总空间\n        hdfs dfs -df /\n        hdfs dfs -df -h /\n        \n    （16）修改副本数    \n        hdfs dfs -setrep 1 /a.txt\n```\n\n","slug":"0_代码相关/hdfs常用命令","published":1,"updated":"2022-03-01T03:50:21.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4t002z8s32090z0zk7","content":"<p>hdfs常用操作</p>\n<span id=\"more\"></span>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://hadoop.apache.org/docs/r1.0.4/cn/hdfs_shell.html</span><br><span class=\"line\">1.hdfs命令行</span><br><span class=\"line\">    （1）查看帮助</span><br><span class=\"line\">        hdfs dfs -help </span><br><span class=\"line\">        </span><br><span class=\"line\">    （2）查看当前目录信息</span><br><span class=\"line\">        hdfs dfs -ls /</span><br><span class=\"line\">        </span><br><span class=\"line\">    （3）上传文件</span><br><span class=\"line\">        hdfs dfs -put /本地路径 /hdfs路径</span><br><span class=\"line\">        </span><br><span class=\"line\">    （4）剪切文件</span><br><span class=\"line\">        hdfs dfs -moveFromLocal a.txt /aa.txt</span><br><span class=\"line\">        </span><br><span class=\"line\">    （5）下载文件到本地</span><br><span class=\"line\">        hdfs dfs -get /hdfs路径 /本地路径</span><br><span class=\"line\">        </span><br><span class=\"line\">    （6）合并下载</span><br><span class=\"line\">        hdfs dfs -getmerge /hdfs路径文件夹 /合并后的文件</span><br><span class=\"line\">        </span><br><span class=\"line\">    （7）创建文件夹</span><br><span class=\"line\">        hdfs dfs -mkdir /hello</span><br><span class=\"line\">        </span><br><span class=\"line\">    （8）创建多级文件夹</span><br><span class=\"line\">        hdfs dfs -mkdir -p /hello/world</span><br><span class=\"line\">        </span><br><span class=\"line\">    （9）移动hdfs文件</span><br><span class=\"line\">        hdfs dfs -mv /hdfs路径 /hdfs路径</span><br><span class=\"line\">        </span><br><span class=\"line\">    （10）复制hdfs文件</span><br><span class=\"line\">        hdfs dfs -cp /hdfs路径 /hdfs路径</span><br><span class=\"line\">        </span><br><span class=\"line\">    （11）删除hdfs文件</span><br><span class=\"line\">        hdfs dfs -rm /aa.txt</span><br><span class=\"line\">        </span><br><span class=\"line\">    （12）删除hdfs文件夹</span><br><span class=\"line\">        hdfs dfs -rm -r /hello</span><br><span class=\"line\">        </span><br><span class=\"line\">    （13）查看hdfs中的文件</span><br><span class=\"line\">        hdfs dfs -cat /文件</span><br><span class=\"line\">        hdfs dfs -tail -f /文件</span><br><span class=\"line\">        </span><br><span class=\"line\">    （14）查看文件夹中有多少个文件</span><br><span class=\"line\">        hdfs dfs -count /文件夹</span><br><span class=\"line\">        </span><br><span class=\"line\">    （15）查看hdfs的总空间</span><br><span class=\"line\">        hdfs dfs -df /</span><br><span class=\"line\">        hdfs dfs -df -h /</span><br><span class=\"line\">        </span><br><span class=\"line\">    （16）修改副本数    </span><br><span class=\"line\">        hdfs dfs -setrep 1 /a.txt</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>hdfs常用操作</p>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://hadoop.apache.org/docs/r1.0.4/cn/hdfs_shell.html</span><br><span class=\"line\">1.hdfs命令行</span><br><span class=\"line\">    （1）查看帮助</span><br><span class=\"line\">        hdfs dfs -help </span><br><span class=\"line\">        </span><br><span class=\"line\">    （2）查看当前目录信息</span><br><span class=\"line\">        hdfs dfs -ls /</span><br><span class=\"line\">        </span><br><span class=\"line\">    （3）上传文件</span><br><span class=\"line\">        hdfs dfs -put /本地路径 /hdfs路径</span><br><span class=\"line\">        </span><br><span class=\"line\">    （4）剪切文件</span><br><span class=\"line\">        hdfs dfs -moveFromLocal a.txt /aa.txt</span><br><span class=\"line\">        </span><br><span class=\"line\">    （5）下载文件到本地</span><br><span class=\"line\">        hdfs dfs -get /hdfs路径 /本地路径</span><br><span class=\"line\">        </span><br><span class=\"line\">    （6）合并下载</span><br><span class=\"line\">        hdfs dfs -getmerge /hdfs路径文件夹 /合并后的文件</span><br><span class=\"line\">        </span><br><span class=\"line\">    （7）创建文件夹</span><br><span class=\"line\">        hdfs dfs -mkdir /hello</span><br><span class=\"line\">        </span><br><span class=\"line\">    （8）创建多级文件夹</span><br><span class=\"line\">        hdfs dfs -mkdir -p /hello/world</span><br><span class=\"line\">        </span><br><span class=\"line\">    （9）移动hdfs文件</span><br><span class=\"line\">        hdfs dfs -mv /hdfs路径 /hdfs路径</span><br><span class=\"line\">        </span><br><span class=\"line\">    （10）复制hdfs文件</span><br><span class=\"line\">        hdfs dfs -cp /hdfs路径 /hdfs路径</span><br><span class=\"line\">        </span><br><span class=\"line\">    （11）删除hdfs文件</span><br><span class=\"line\">        hdfs dfs -rm /aa.txt</span><br><span class=\"line\">        </span><br><span class=\"line\">    （12）删除hdfs文件夹</span><br><span class=\"line\">        hdfs dfs -rm -r /hello</span><br><span class=\"line\">        </span><br><span class=\"line\">    （13）查看hdfs中的文件</span><br><span class=\"line\">        hdfs dfs -cat /文件</span><br><span class=\"line\">        hdfs dfs -tail -f /文件</span><br><span class=\"line\">        </span><br><span class=\"line\">    （14）查看文件夹中有多少个文件</span><br><span class=\"line\">        hdfs dfs -count /文件夹</span><br><span class=\"line\">        </span><br><span class=\"line\">    （15）查看hdfs的总空间</span><br><span class=\"line\">        hdfs dfs -df /</span><br><span class=\"line\">        hdfs dfs -df -h /</span><br><span class=\"line\">        </span><br><span class=\"line\">    （16）修改副本数    </span><br><span class=\"line\">        hdfs dfs -setrep 1 /a.txt</span><br></pre></td></tr></table></figure>"},{"title":"hive","date":"2022-03-01T03:32:38.000Z","_content":"\nhive 常用操作\n\n<!-- more -->\n\n\n[TOC]\n\n# 建表\n\n```sql\ncreate table if not exists tb_name\n(a string comment 'a',b string comment 'b')\nrow format delimited\nfields terminated by '\\t'\nstored as textfile;\n```\n\n\n\n# 增加map数量\n\n```\nset mapred.max.split.size=10000000; -- 决定每个map处理的最大的文件大小，单位为B\nset mapred.min.split.size.per.node=10000000; -- 节点中可以处理的最小的文件大小\nset mapred.min.split.size.per.rack=10000000; -- 机架中可以处理的最小的文件大小\nset hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;---实现map中的数据合并需要设置下面的参数，集群默认就是这个格式\n```\n\n# 查询log\n\n```shell\nyarn logs -applicationId=application_1556066424096_26253 | less\n```\n\n# 设置变量\n\n```bash\n#hivevar\nhive -d name=hetianqi -f temp.sql\n```\n\n```sql\nset name;\n--set name=hetinaiq;\nselect * from table where name=${name}\n```\n\n# Hive中Create table... as 和 Create table ... like 的区别和使用注意\n\nhttps://blog.csdn.net/lzw2016/article/details/97811799","source":"_posts/0_代码相关/hive.md","raw":"---\ntitle: hive\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nhive 常用操作\n\n<!-- more -->\n\n\n[TOC]\n\n# 建表\n\n```sql\ncreate table if not exists tb_name\n(a string comment 'a',b string comment 'b')\nrow format delimited\nfields terminated by '\\t'\nstored as textfile;\n```\n\n\n\n# 增加map数量\n\n```\nset mapred.max.split.size=10000000; -- 决定每个map处理的最大的文件大小，单位为B\nset mapred.min.split.size.per.node=10000000; -- 节点中可以处理的最小的文件大小\nset mapred.min.split.size.per.rack=10000000; -- 机架中可以处理的最小的文件大小\nset hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;---实现map中的数据合并需要设置下面的参数，集群默认就是这个格式\n```\n\n# 查询log\n\n```shell\nyarn logs -applicationId=application_1556066424096_26253 | less\n```\n\n# 设置变量\n\n```bash\n#hivevar\nhive -d name=hetianqi -f temp.sql\n```\n\n```sql\nset name;\n--set name=hetinaiq;\nselect * from table where name=${name}\n```\n\n# Hive中Create table... as 和 Create table ... like 的区别和使用注意\n\nhttps://blog.csdn.net/lzw2016/article/details/97811799","slug":"0_代码相关/hive","published":1,"updated":"2022-03-01T03:50:37.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4u00328s32c9at28u4","content":"<p>hive 常用操作</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> tb_name</span><br><span class=\"line\">(a string comment <span class=\"string\">&#x27;a&#x27;</span>,b string comment <span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"><span class=\"type\">row</span> format delimited</span><br><span class=\"line\">fields terminated <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span></span><br><span class=\"line\">stored <span class=\"keyword\">as</span> textfile;</span><br></pre></td></tr></table></figure>\n<h1 id=\"增加map数量\"><a href=\"#增加map数量\" class=\"headerlink\" title=\"增加map数量\"></a>增加map数量</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mapred.max.split.size=10000000; -- 决定每个map处理的最大的文件大小，单位为B</span><br><span class=\"line\">set mapred.min.split.size.per.node=10000000; -- 节点中可以处理的最小的文件大小</span><br><span class=\"line\">set mapred.min.split.size.per.rack=10000000; -- 机架中可以处理的最小的文件大小</span><br><span class=\"line\">set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;---实现map中的数据合并需要设置下面的参数，集群默认就是这个格式</span><br></pre></td></tr></table></figure>\n<h1 id=\"查询log\"><a href=\"#查询log\" class=\"headerlink\" title=\"查询log\"></a>查询log</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn logs -applicationId=application_1556066424096_26253 | less</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置变量\"><a href=\"#设置变量\" class=\"headerlink\" title=\"设置变量\"></a>设置变量</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#hivevar</span></span><br><span class=\"line\">hive -d name=hetianqi -f temp.sql</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> name;</span><br><span class=\"line\"><span class=\"comment\">--set name=hetinaiq;</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> name<span class=\"operator\">=</span>$&#123;name&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Hive中Create-table…-as-和-Create-table-…-like-的区别和使用注意\"><a href=\"#Hive中Create-table…-as-和-Create-table-…-like-的区别和使用注意\" class=\"headerlink\" title=\"Hive中Create table… as 和 Create table … like 的区别和使用注意\"></a>Hive中Create table… as 和 Create table … like 的区别和使用注意</h1><p><a href=\"https://blog.csdn.net/lzw2016/article/details/97811799\">https://blog.csdn.net/lzw2016/article/details/97811799</a></p>\n","site":{"data":{}},"excerpt":"<p>hive 常用操作</p>","more":"<p>[TOC]</p>\n<h1 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> tb_name</span><br><span class=\"line\">(a string comment <span class=\"string\">&#x27;a&#x27;</span>,b string comment <span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"><span class=\"type\">row</span> format delimited</span><br><span class=\"line\">fields terminated <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span></span><br><span class=\"line\">stored <span class=\"keyword\">as</span> textfile;</span><br></pre></td></tr></table></figure>\n<h1 id=\"增加map数量\"><a href=\"#增加map数量\" class=\"headerlink\" title=\"增加map数量\"></a>增加map数量</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mapred.max.split.size=10000000; -- 决定每个map处理的最大的文件大小，单位为B</span><br><span class=\"line\">set mapred.min.split.size.per.node=10000000; -- 节点中可以处理的最小的文件大小</span><br><span class=\"line\">set mapred.min.split.size.per.rack=10000000; -- 机架中可以处理的最小的文件大小</span><br><span class=\"line\">set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;---实现map中的数据合并需要设置下面的参数，集群默认就是这个格式</span><br></pre></td></tr></table></figure>\n<h1 id=\"查询log\"><a href=\"#查询log\" class=\"headerlink\" title=\"查询log\"></a>查询log</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn logs -applicationId=application_1556066424096_26253 | less</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置变量\"><a href=\"#设置变量\" class=\"headerlink\" title=\"设置变量\"></a>设置变量</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#hivevar</span></span><br><span class=\"line\">hive -d name=hetianqi -f temp.sql</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> name;</span><br><span class=\"line\"><span class=\"comment\">--set name=hetinaiq;</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> name<span class=\"operator\">=</span>$&#123;name&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Hive中Create-table…-as-和-Create-table-…-like-的区别和使用注意\"><a href=\"#Hive中Create-table…-as-和-Create-table-…-like-的区别和使用注意\" class=\"headerlink\" title=\"Hive中Create table… as 和 Create table … like 的区别和使用注意\"></a>Hive中Create table… as 和 Create table … like 的区别和使用注意</h1><p><a href=\"https://blog.csdn.net/lzw2016/article/details/97811799\">https://blog.csdn.net/lzw2016/article/details/97811799</a></p>"},{"title":"iterm奇淫技巧","date":"2022-03-01T03:32:38.000Z","_content":"\nitem 配置\n\n<!-- more -->\n\n\n# 1.修改tag名称\n\n快捷键 ： command+i  ，修改session name。\n\n<img src=\"pics/iterm奇淫技巧/image-20210901114300463.png\" alt=\"image-20210901114300463\" style=\"zoom:25%;\" />\n\n右键-new tag 现在的tag就能显示自定义名称\n\n<img src=\"pics/iterm奇淫技巧/image-20210901114353748.png\" alt=\"image-20210901114353748\" style=\"zoom:25%;\" />","source":"_posts/0_代码相关/iterm奇淫技巧.md","raw":"---\ntitle: iterm奇淫技巧\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nitem 配置\n\n<!-- more -->\n\n\n# 1.修改tag名称\n\n快捷键 ： command+i  ，修改session name。\n\n<img src=\"pics/iterm奇淫技巧/image-20210901114300463.png\" alt=\"image-20210901114300463\" style=\"zoom:25%;\" />\n\n右键-new tag 现在的tag就能显示自定义名称\n\n<img src=\"pics/iterm奇淫技巧/image-20210901114353748.png\" alt=\"image-20210901114353748\" style=\"zoom:25%;\" />","slug":"0_代码相关/iterm奇淫技巧","published":1,"updated":"2022-03-01T03:50:46.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4u00358s32bx7e1zcf","content":"<p>item 配置</p>\n<span id=\"more\"></span>\n<h1 id=\"1-修改tag名称\"><a href=\"#1-修改tag名称\" class=\"headerlink\" title=\"1.修改tag名称\"></a>1.修改tag名称</h1><p>快捷键 ： command+i  ，修改session name。</p>\n<p><img src=\"pics/iterm奇淫技巧/image-20210901114300463.png\" alt=\"image-20210901114300463\" style=\"zoom:25%;\" /></p>\n<p>右键-new tag 现在的tag就能显示自定义名称</p>\n<p><img src=\"pics/iterm奇淫技巧/image-20210901114353748.png\" alt=\"image-20210901114353748\" style=\"zoom:25%;\" /></p>\n","site":{"data":{}},"excerpt":"<p>item 配置</p>","more":"<h1 id=\"1-修改tag名称\"><a href=\"#1-修改tag名称\" class=\"headerlink\" title=\"1.修改tag名称\"></a>1.修改tag名称</h1><p>快捷键 ： command+i  ，修改session name。</p>\n<p><img src=\"pics/iterm奇淫技巧/image-20210901114300463.png\" alt=\"image-20210901114300463\" style=\"zoom:25%;\" /></p>\n<p>右键-new tag 现在的tag就能显示自定义名称</p>\n<p><img src=\"pics/iterm奇淫技巧/image-20210901114353748.png\" alt=\"image-20210901114353748\" style=\"zoom:25%;\" /></p>"},{"title":"mac使用rz sz","date":"2022-03-01T03:32:38.000Z","_content":"\nmac配置rz sz\n\n<!-- more -->\n\n\n一、安装brew\n `/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\n 二、安装iterm2\n `brew cask install iterm2`\n 三、安装lrzsz\n `sudo brew install lrzsz`\n 四、将下面2个脚本保存到 `/usr/local/bin/`下\n 1.iterm2-recv-zmodem.sh\n\n\n\n```bash\n#!/bin/bash\n# Author: Matt Mastracci (matthew@mastracci.com)\n# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n# licensed under cc-wiki with attribution required \n# Remainder of script public domain\n\nosascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\nif [[ $NAME = \"iTerm\" ]]; then\n    FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\nelse\n    FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\nfi\n\nif [[ $FILE = \"\" ]]; then\n    echo Cancelled.\n    # Send ZModem cancel\n    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n    sleep 1\n    echo\n    echo \\# Cancelled transfer\nelse\n    cd \"$FILE\"\n    /usr/local/bin/rz -E -e -b\n    sleep 1\n    echo\n    echo\n    echo \\# Sent \\-\\> $FILE\nfi\n```\n\n2.iterm2-send-zmodem.sh\n\n\n\n```bash\n#!/bin/bash\n# Author: Matt Mastracci (matthew@mastracci.com)\n# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n# licensed under cc-wiki with attribution required \n# Remainder of script public domain\n\nosascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\nif [[ $NAME = \"iTerm\" ]]; then\n    FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\nelse\n    FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\nfi\nif [[ $FILE = \"\" ]]; then\n    echo Cancelled.\n    # Send ZModem cancel\n    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n    sleep 1\n    echo\n    echo \\# Cancelled transfer\nelse\n    /usr/local/bin/sz \"$FILE\" -e -b\n    sleep 1\n    echo\n    echo \\# Received $FILE\nfi\n```\n\n五、添加iTerm2 trigger\n\nItem-profile-advanced-edit-default-add\n\n\n\n![image-20200403193423571](/Users/hetianqi/Library/Application Support/typora-user-images/image-20200403193423571.png)\n\n> 注意！！！\n>\n> paramers一定要加绝对路径！！！\n\n配置项：\n\nRegular expression      　　Action      　　　　　　　Parameters\n\n/*/*B0100　　　　　　　　Run Silent Coprocess　　/usr/local/bin/iterm2-send-zmodem.sh\n\n/*/*B00000000000000　  Run Silent Coprocess　　/usr/local/bin/iterm2-recv-zmodem.sh\n\n 六：sudo\n\nsudo chmod 777 /usr/local/bin/iterm2-*\n\n配置完重启即可使用rz 和sz命令。\n\n\n\n作者：小黑胖_\n链接：https://www.jianshu.com/p/c23896b96b6c\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/0_代码相关/mac使用rz sz.md","raw":"---\ntitle: mac使用rz sz\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nmac配置rz sz\n\n<!-- more -->\n\n\n一、安装brew\n `/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\n 二、安装iterm2\n `brew cask install iterm2`\n 三、安装lrzsz\n `sudo brew install lrzsz`\n 四、将下面2个脚本保存到 `/usr/local/bin/`下\n 1.iterm2-recv-zmodem.sh\n\n\n\n```bash\n#!/bin/bash\n# Author: Matt Mastracci (matthew@mastracci.com)\n# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n# licensed under cc-wiki with attribution required \n# Remainder of script public domain\n\nosascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\nif [[ $NAME = \"iTerm\" ]]; then\n    FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\nelse\n    FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\nfi\n\nif [[ $FILE = \"\" ]]; then\n    echo Cancelled.\n    # Send ZModem cancel\n    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n    sleep 1\n    echo\n    echo \\# Cancelled transfer\nelse\n    cd \"$FILE\"\n    /usr/local/bin/rz -E -e -b\n    sleep 1\n    echo\n    echo\n    echo \\# Sent \\-\\> $FILE\nfi\n```\n\n2.iterm2-send-zmodem.sh\n\n\n\n```bash\n#!/bin/bash\n# Author: Matt Mastracci (matthew@mastracci.com)\n# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n# licensed under cc-wiki with attribution required \n# Remainder of script public domain\n\nosascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\nif [[ $NAME = \"iTerm\" ]]; then\n    FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\nelse\n    FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\nfi\nif [[ $FILE = \"\" ]]; then\n    echo Cancelled.\n    # Send ZModem cancel\n    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n    sleep 1\n    echo\n    echo \\# Cancelled transfer\nelse\n    /usr/local/bin/sz \"$FILE\" -e -b\n    sleep 1\n    echo\n    echo \\# Received $FILE\nfi\n```\n\n五、添加iTerm2 trigger\n\nItem-profile-advanced-edit-default-add\n\n\n\n![image-20200403193423571](/Users/hetianqi/Library/Application Support/typora-user-images/image-20200403193423571.png)\n\n> 注意！！！\n>\n> paramers一定要加绝对路径！！！\n\n配置项：\n\nRegular expression      　　Action      　　　　　　　Parameters\n\n/*/*B0100　　　　　　　　Run Silent Coprocess　　/usr/local/bin/iterm2-send-zmodem.sh\n\n/*/*B00000000000000　  Run Silent Coprocess　　/usr/local/bin/iterm2-recv-zmodem.sh\n\n 六：sudo\n\nsudo chmod 777 /usr/local/bin/iterm2-*\n\n配置完重启即可使用rz 和sz命令。\n\n\n\n作者：小黑胖_\n链接：https://www.jianshu.com/p/c23896b96b6c\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"0_代码相关/mac使用rz sz","published":1,"updated":"2022-03-01T03:51:14.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4v00388s3266se60k4","content":"<p>mac配置rz sz</p>\n<span id=\"more\"></span>\n<p>一、安装brew<br> <code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code><br> 二、安装iterm2<br> <code>brew cask install iterm2</code><br> 三、安装lrzsz<br> <code>sudo brew install lrzsz</code><br> 四、将下面2个脚本保存到 <code>/usr/local/bin/</code>下<br> 1.iterm2-recv-zmodem.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class=\"line\"><span class=\"comment\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class=\"line\"><span class=\"comment\"># licensed under cc-wiki with attribution required </span></span><br><span class=\"line\"><span class=\"comment\"># Remainder of script public domain</span></span><br><span class=\"line\"></span><br><span class=\"line\">osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to version&#x27;</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$NAME</span> = <span class=\"string\">&quot;iTerm&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    FILE=`osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm&quot; to activate&#x27;</span> -e <span class=\"string\">&#x27;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#x27;</span> -e <span class=\"string\">&quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;</span>`</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    FILE=`osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to activate&#x27;</span> -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#x27;</span> -e <span class=\"string\">&quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;</span>`</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$FILE</span> = <span class=\"string\">&quot;&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> Cancelled.</span><br><span class=\"line\">    <span class=\"comment\"># Send ZModem cancel</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Cancelled transfer</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"variable\">$FILE</span>&quot;</span></span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/rz -E -e -b</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Sent \\-\\&gt; $FILE</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>2.iterm2-send-zmodem.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class=\"line\"><span class=\"comment\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class=\"line\"><span class=\"comment\"># licensed under cc-wiki with attribution required </span></span><br><span class=\"line\"><span class=\"comment\"># Remainder of script public domain</span></span><br><span class=\"line\"></span><br><span class=\"line\">osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to version&#x27;</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$NAME</span> = <span class=\"string\">&quot;iTerm&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    FILE=`osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm&quot; to activate&#x27;</span> -e <span class=\"string\">&#x27;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#x27;</span> -e <span class=\"string\">&quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;</span>`</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    FILE=`osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to activate&#x27;</span> -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#x27;</span> -e <span class=\"string\">&quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;</span>`</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$FILE</span> = <span class=\"string\">&quot;&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> Cancelled.</span><br><span class=\"line\">    <span class=\"comment\"># Send ZModem cancel</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Cancelled transfer</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/sz <span class=\"string\">&quot;<span class=\"variable\">$FILE</span>&quot;</span> -e -b</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Received $FILE</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>五、添加iTerm2 trigger</p>\n<p>Item-profile-advanced-edit-default-add</p>\n<p><img src=\"/Users/hetianqi/Library/Application Support/typora-user-images/image-20200403193423571.png\" alt=\"image-20200403193423571\"></p>\n<blockquote>\n<p>注意！！！</p>\n<p>paramers一定要加绝对路径！！！</p>\n</blockquote>\n<p>配置项：</p>\n<p>Regular expression      　　Action      　　　　　　　Parameters</p>\n<p>/<em>/</em>B0100　　　　　　　　Run Silent Coprocess　　/usr/local/bin/iterm2-send-zmodem.sh</p>\n<p>/<em>/</em>B00000000000000　  Run Silent Coprocess　　/usr/local/bin/iterm2-recv-zmodem.sh</p>\n<p> 六：sudo</p>\n<p>sudo chmod 777 /usr/local/bin/iterm2-*</p>\n<p>配置完重启即可使用rz 和sz命令。</p>\n<p>作者：小黑胖_<br>链接：<a href=\"https://www.jianshu.com/p/c23896b96b6c\">https://www.jianshu.com/p/c23896b96b6c</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"<p>mac配置rz sz</p>","more":"<p>一、安装brew<br> <code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code><br> 二、安装iterm2<br> <code>brew cask install iterm2</code><br> 三、安装lrzsz<br> <code>sudo brew install lrzsz</code><br> 四、将下面2个脚本保存到 <code>/usr/local/bin/</code>下<br> 1.iterm2-recv-zmodem.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class=\"line\"><span class=\"comment\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class=\"line\"><span class=\"comment\"># licensed under cc-wiki with attribution required </span></span><br><span class=\"line\"><span class=\"comment\"># Remainder of script public domain</span></span><br><span class=\"line\"></span><br><span class=\"line\">osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to version&#x27;</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$NAME</span> = <span class=\"string\">&quot;iTerm&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    FILE=`osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm&quot; to activate&#x27;</span> -e <span class=\"string\">&#x27;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#x27;</span> -e <span class=\"string\">&quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;</span>`</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    FILE=`osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to activate&#x27;</span> -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#x27;</span> -e <span class=\"string\">&quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;</span>`</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$FILE</span> = <span class=\"string\">&quot;&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> Cancelled.</span><br><span class=\"line\">    <span class=\"comment\"># Send ZModem cancel</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Cancelled transfer</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"variable\">$FILE</span>&quot;</span></span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/rz -E -e -b</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Sent \\-\\&gt; $FILE</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>2.iterm2-send-zmodem.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class=\"line\"><span class=\"comment\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class=\"line\"><span class=\"comment\"># licensed under cc-wiki with attribution required </span></span><br><span class=\"line\"><span class=\"comment\"># Remainder of script public domain</span></span><br><span class=\"line\"></span><br><span class=\"line\">osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to version&#x27;</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$NAME</span> = <span class=\"string\">&quot;iTerm&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    FILE=`osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm&quot; to activate&#x27;</span> -e <span class=\"string\">&#x27;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#x27;</span> -e <span class=\"string\">&quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;</span>`</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    FILE=`osascript -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to activate&#x27;</span> -e <span class=\"string\">&#x27;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#x27;</span> -e <span class=\"string\">&quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;</span>`</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$FILE</span> = <span class=\"string\">&quot;&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> Cancelled.</span><br><span class=\"line\">    <span class=\"comment\"># Send ZModem cancel</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Cancelled transfer</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/sz <span class=\"string\">&quot;<span class=\"variable\">$FILE</span>&quot;</span> -e -b</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Received $FILE</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>五、添加iTerm2 trigger</p>\n<p>Item-profile-advanced-edit-default-add</p>\n<p><img src=\"/Users/hetianqi/Library/Application Support/typora-user-images/image-20200403193423571.png\" alt=\"image-20200403193423571\"></p>\n<blockquote>\n<p>注意！！！</p>\n<p>paramers一定要加绝对路径！！！</p>\n</blockquote>\n<p>配置项：</p>\n<p>Regular expression      　　Action      　　　　　　　Parameters</p>\n<p>/<em>/</em>B0100　　　　　　　　Run Silent Coprocess　　/usr/local/bin/iterm2-send-zmodem.sh</p>\n<p>/<em>/</em>B00000000000000　  Run Silent Coprocess　　/usr/local/bin/iterm2-recv-zmodem.sh</p>\n<p> 六：sudo</p>\n<p>sudo chmod 777 /usr/local/bin/iterm2-*</p>\n<p>配置完重启即可使用rz 和sz命令。</p>\n<p>作者：小黑胖_<br>链接：<a href=\"https://www.jianshu.com/p/c23896b96b6c\">https://www.jianshu.com/p/c23896b96b6c</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>"},{"title":"mathtype破解教程","date":"2022-03-01T03:32:38.000Z","_content":"\n如题\n\n<!-- more -->\n\n\n1. `Windows + R` 然后输入`regedit.exe` 后确定，如下图所示：\n   ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190426093524662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70)\n2. 来到目录`HKEY_CURRENT_USER\\Software\\Install Options` 下，删除图片中红线标出来的文件：\n   ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190426094144337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70)\n3. 操作完上面的步骤后，重新打开MathType，又可以试用30天啦~\n   ![在这里插入图片描述](pics/20190426094446490.png)","source":"_posts/0_代码相关/mathtype破解教程.md","raw":"---\ntitle: mathtype破解教程\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n如题\n\n<!-- more -->\n\n\n1. `Windows + R` 然后输入`regedit.exe` 后确定，如下图所示：\n   ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190426093524662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70)\n2. 来到目录`HKEY_CURRENT_USER\\Software\\Install Options` 下，删除图片中红线标出来的文件：\n   ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190426094144337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70)\n3. 操作完上面的步骤后，重新打开MathType，又可以试用30天啦~\n   ![在这里插入图片描述](pics/20190426094446490.png)","slug":"0_代码相关/mathtype破解教程","published":1,"updated":"2022-03-01T03:51:24.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4w003b8s3226ca0op9","content":"<p>如题</p>\n<span id=\"more\"></span>\n<ol>\n<li><code>Windows + R</code> 然后输入<code>regedit.exe</code> 后确定，如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20190426093524662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>来到目录<code>HKEY_CURRENT_USER\\Software\\Install Options</code> 下，删除图片中红线标出来的文件：<br><img src=\"https://img-blog.csdnimg.cn/20190426094144337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>操作完上面的步骤后，重新打开MathType，又可以试用30天啦~</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>如题</p>","more":"<ol>\n<li><code>Windows + R</code> 然后输入<code>regedit.exe</code> 后确定，如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20190426093524662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>来到目录<code>HKEY_CURRENT_USER\\Software\\Install Options</code> 下，删除图片中红线标出来的文件：<br><img src=\"https://img-blog.csdnimg.cn/20190426094144337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>操作完上面的步骤后，重新打开MathType，又可以试用30天啦~</li>\n</ol>"},{"title":"numpy","date":"2022-03-01T03:32:38.000Z","_content":"\nnumpy常用操作\n\n<!-- more -->\n\n\n# 增加行或列\n\n```python\n#增加列\na=np.random.randn(4,2)\nb=np.random.randn(4,1)\nc=np.column_stack((a,b))\n```\n\n![1564645476097](numpy.assets/1564645476097.png)\n\n```python\n#增加行\na=np.random.randn(4,2)\nb=np.random.randn(4,2)\nc=np.row_stack((a,b))\n```\n\n","source":"_posts/0_代码相关/numpy.md","raw":"---\ntitle: numpy\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nnumpy常用操作\n\n<!-- more -->\n\n\n# 增加行或列\n\n```python\n#增加列\na=np.random.randn(4,2)\nb=np.random.randn(4,1)\nc=np.column_stack((a,b))\n```\n\n![1564645476097](numpy.assets/1564645476097.png)\n\n```python\n#增加行\na=np.random.randn(4,2)\nb=np.random.randn(4,2)\nc=np.row_stack((a,b))\n```\n\n","slug":"0_代码相关/numpy","published":1,"updated":"2022-03-01T03:51:33.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4w003e8s328lquactd","content":"<p>numpy常用操作</p>\n<span id=\"more\"></span>\n<h1 id=\"增加行或列\"><a href=\"#增加行或列\" class=\"headerlink\" title=\"增加行或列\"></a>增加行或列</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加列</span></span><br><span class=\"line\">a=np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">b=np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">c=np.column_stack((a,b))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加行</span></span><br><span class=\"line\">a=np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">b=np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">c=np.row_stack((a,b))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>numpy常用操作</p>","more":"<h1 id=\"增加行或列\"><a href=\"#增加行或列\" class=\"headerlink\" title=\"增加行或列\"></a>增加行或列</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加列</span></span><br><span class=\"line\">a=np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">b=np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">c=np.column_stack((a,b))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#增加行</span></span><br><span class=\"line\">a=np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">b=np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">c=np.row_stack((a,b))</span><br></pre></td></tr></table></figure>"},{"title":"pandas","date":"2022-03-01T03:32:38.000Z","_content":"\npandas常用操作\n\n<!-- more -->\n\n\n[TOC]\n\n# python调用shell\n\n在python程序中调用shell命令，是件很酷且常用的事情……\n\nhttps://www.cnblogs.com/pengdonglin137/articles/8093409.html\n##  os.system(command)\n  此函数会启动子进程，在子进程中执行command，并返回command命令执行完毕后的退出状态，如果command有执行内容，会在标准输出显示。这实际上是使用C标准库函数system()实现的。\n >缺点：这个函数在执行command命令时需要重新打开一个终端，并且无法保存command命令的执行结果。\n实例：os.system('ls -l *')\n## os.popen(command,mode)\n\n打开一个与command进程之间的管道。这个函数的返回值是一个文件对象，可以读或者写(由mode决定，mode默认是’r')。如果mode为’r'，可以使用此函数的返回值调用read()来获取command命令的执行结果。\n\nos.system(cmd)或os.popen(cmd)，前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择。\n\n实例：tmp = os.popen('ls -l *').readlines()\n\n# 同时写入多个sheet\n\n```python\ndef write_excel_pd(file, sheet, data):\n    \"\"\"\n    excel title: name /  age\n        df1 = {\n        'name': [1, 2, 3],\n        'age': [1, 2, 3]\n    }\n    pandas DataFrame  write to excel\n    :param file:  file_path + file_name\n    :param sheet: type：list\n    :param data: type: list  DataFrame\n    :return:\n    \"\"\"\n    writer = pd.ExcelWriter(file)\n    for i in range(len(sheet)):\n        df = pd.DataFrame(data[i])\n        df.to_excel(excel_writer=writer, sheet_name=sheet[i])\n    writer.save()\n    writer.close()\n    log.info('写入数据完成！')\n\n```\n\n\n\n# 按条件过滤行\n\n```python\ndf[df[A] > 0] #选出A列>0的行\ndf[df[A]。isin([0,1])] #选出A列中是0或1的行\n```\n\n#读入\nimport pandas as pd\ndf=pd.read_table('dddd.txt',header=0,index_col=0,error_bad_lines=False,delimiter='\\t')\n\n#列名\ndf.columns\n\n# 删除列\n\n```python\ndf.drop(['k'], axis=1, inplace=True) #删除k列\n```\n\n#缺失值处理\nvalues={}\nwith open('fill_na.txt') as f:\n\tfor line in f:\n\t\tline = line.strip().split(':')\n\t\tvalues[line[0]] = int(line[1])\ndf = df.fillna(value=values)\ndf = df.dropna(axis=0,how='any') #删除含有NULL的行\n\n```python\n#删除指定列有空值的行\ndf_ios_tmp=df_ios.dropna(subset=[列名],how='all',inplace=False) #how=all 或者 any\n```\n\n# shuffle\n\n```python\ndf.sample(frac=1).reset_index(drop=True)\n```\n\n\n\n# 数据检查\n\n```python\n#datafram 每一列值unique数\ndata_idfa.info(verbose=True, null_counts=True)\n```\n\n![1565143077610](pandas.assets/1565143077610.png)\n\n```python\n#每一列均值 方差等\ndata_idfa.describe()\n```\n\n![1565143146339](pandas.assets/1565143146339.png)\n\n# group by\n\n```python\ndf_ios.groupby(['y_flag'], as_index=False)['dt'].count() #聚合函数除了count还有sum,min,max等\n```\n\n```python\ndf_ios.groupby(['dt_m','y_flag'], as_index=False)['pin'].count()\n```\n\n![1565172887387](pandas.assets/1565172887387.png)\n\n# 截取时间前几位\n\n```python\ndf_ios['dt_m']=df_ios['dt'].str[0:7]\n```\n\n![1565172989950](pandas.assets/1565172989950.png)","source":"_posts/0_代码相关/pandas.md","raw":"---\ntitle: pandas\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\npandas常用操作\n\n<!-- more -->\n\n\n[TOC]\n\n# python调用shell\n\n在python程序中调用shell命令，是件很酷且常用的事情……\n\nhttps://www.cnblogs.com/pengdonglin137/articles/8093409.html\n##  os.system(command)\n  此函数会启动子进程，在子进程中执行command，并返回command命令执行完毕后的退出状态，如果command有执行内容，会在标准输出显示。这实际上是使用C标准库函数system()实现的。\n >缺点：这个函数在执行command命令时需要重新打开一个终端，并且无法保存command命令的执行结果。\n实例：os.system('ls -l *')\n## os.popen(command,mode)\n\n打开一个与command进程之间的管道。这个函数的返回值是一个文件对象，可以读或者写(由mode决定，mode默认是’r')。如果mode为’r'，可以使用此函数的返回值调用read()来获取command命令的执行结果。\n\nos.system(cmd)或os.popen(cmd)，前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择。\n\n实例：tmp = os.popen('ls -l *').readlines()\n\n# 同时写入多个sheet\n\n```python\ndef write_excel_pd(file, sheet, data):\n    \"\"\"\n    excel title: name /  age\n        df1 = {\n        'name': [1, 2, 3],\n        'age': [1, 2, 3]\n    }\n    pandas DataFrame  write to excel\n    :param file:  file_path + file_name\n    :param sheet: type：list\n    :param data: type: list  DataFrame\n    :return:\n    \"\"\"\n    writer = pd.ExcelWriter(file)\n    for i in range(len(sheet)):\n        df = pd.DataFrame(data[i])\n        df.to_excel(excel_writer=writer, sheet_name=sheet[i])\n    writer.save()\n    writer.close()\n    log.info('写入数据完成！')\n\n```\n\n\n\n# 按条件过滤行\n\n```python\ndf[df[A] > 0] #选出A列>0的行\ndf[df[A]。isin([0,1])] #选出A列中是0或1的行\n```\n\n#读入\nimport pandas as pd\ndf=pd.read_table('dddd.txt',header=0,index_col=0,error_bad_lines=False,delimiter='\\t')\n\n#列名\ndf.columns\n\n# 删除列\n\n```python\ndf.drop(['k'], axis=1, inplace=True) #删除k列\n```\n\n#缺失值处理\nvalues={}\nwith open('fill_na.txt') as f:\n\tfor line in f:\n\t\tline = line.strip().split(':')\n\t\tvalues[line[0]] = int(line[1])\ndf = df.fillna(value=values)\ndf = df.dropna(axis=0,how='any') #删除含有NULL的行\n\n```python\n#删除指定列有空值的行\ndf_ios_tmp=df_ios.dropna(subset=[列名],how='all',inplace=False) #how=all 或者 any\n```\n\n# shuffle\n\n```python\ndf.sample(frac=1).reset_index(drop=True)\n```\n\n\n\n# 数据检查\n\n```python\n#datafram 每一列值unique数\ndata_idfa.info(verbose=True, null_counts=True)\n```\n\n![1565143077610](pandas.assets/1565143077610.png)\n\n```python\n#每一列均值 方差等\ndata_idfa.describe()\n```\n\n![1565143146339](pandas.assets/1565143146339.png)\n\n# group by\n\n```python\ndf_ios.groupby(['y_flag'], as_index=False)['dt'].count() #聚合函数除了count还有sum,min,max等\n```\n\n```python\ndf_ios.groupby(['dt_m','y_flag'], as_index=False)['pin'].count()\n```\n\n![1565172887387](pandas.assets/1565172887387.png)\n\n# 截取时间前几位\n\n```python\ndf_ios['dt_m']=df_ios['dt'].str[0:7]\n```\n\n![1565172989950](pandas.assets/1565172989950.png)","slug":"0_代码相关/pandas","published":1,"updated":"2022-03-01T03:51:45.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4x003h8s3215sa7djd","content":"<p>pandas常用操作</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"python调用shell\"><a href=\"#python调用shell\" class=\"headerlink\" title=\"python调用shell\"></a>python调用shell</h1><p>在python程序中调用shell命令，是件很酷且常用的事情……</p>\n<p><a href=\"https://www.cnblogs.com/pengdonglin137/articles/8093409.html\">https://www.cnblogs.com/pengdonglin137/articles/8093409.html</a></p>\n<h2 id=\"os-system-command\"><a href=\"#os-system-command\" class=\"headerlink\" title=\"os.system(command)\"></a>os.system(command)</h2><p>  此函数会启动子进程，在子进程中执行command，并返回command命令执行完毕后的退出状态，如果command有执行内容，会在标准输出显示。这实际上是使用C标准库函数system()实现的。</p>\n<blockquote>\n<p>缺点：这个函数在执行command命令时需要重新打开一个终端，并且无法保存command命令的执行结果。<br>实例：os.system(‘ls -l *’)</p>\n<h2 id=\"os-popen-command-mode\"><a href=\"#os-popen-command-mode\" class=\"headerlink\" title=\"os.popen(command,mode)\"></a>os.popen(command,mode)</h2></blockquote>\n<p>打开一个与command进程之间的管道。这个函数的返回值是一个文件对象，可以读或者写(由mode决定，mode默认是’r’)。如果mode为’r’，可以使用此函数的返回值调用read()来获取command命令的执行结果。</p>\n<p>os.system(cmd)或os.popen(cmd)，前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择。</p>\n<p>实例：tmp = os.popen(‘ls -l *’).readlines()</p>\n<h1 id=\"同时写入多个sheet\"><a href=\"#同时写入多个sheet\" class=\"headerlink\" title=\"同时写入多个sheet\"></a>同时写入多个sheet</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_excel_pd</span>(<span class=\"params\">file, sheet, data</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    excel title: name /  age</span></span><br><span class=\"line\"><span class=\"string\">        df1 = &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;name&#x27;: [1, 2, 3],</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;age&#x27;: [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    pandas DataFrame  write to excel</span></span><br><span class=\"line\"><span class=\"string\">    :param file:  file_path + file_name</span></span><br><span class=\"line\"><span class=\"string\">    :param sheet: type：list</span></span><br><span class=\"line\"><span class=\"string\">    :param data: type: list  DataFrame</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    writer = pd.ExcelWriter(file)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(sheet)):</span><br><span class=\"line\">        df = pd.DataFrame(data[i])</span><br><span class=\"line\">        df.to_excel(excel_writer=writer, sheet_name=sheet[i])</span><br><span class=\"line\">    writer.save()</span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\">    log.info(<span class=\"string\">&#x27;写入数据完成！&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"按条件过滤行\"><a href=\"#按条件过滤行\" class=\"headerlink\" title=\"按条件过滤行\"></a>按条件过滤行</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[df[A] &gt; <span class=\"number\">0</span>] <span class=\"comment\">#选出A列&gt;0的行</span></span><br><span class=\"line\">df[df[A]。isin([<span class=\"number\">0</span>,<span class=\"number\">1</span>])] <span class=\"comment\">#选出A列中是0或1的行</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"读入\"><a href=\"#读入\" class=\"headerlink\" title=\"读入\"></a>读入</h1><p>import pandas as pd<br>df=pd.read_table(‘dddd.txt’,header=0,index_col=0,error_bad_lines=False,delimiter=’\\t’)</p>\n<h1 id=\"列名\"><a href=\"#列名\" class=\"headerlink\" title=\"列名\"></a>列名</h1><p>df.columns</p>\n<h1 id=\"删除列\"><a href=\"#删除列\" class=\"headerlink\" title=\"删除列\"></a>删除列</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.drop([<span class=\"string\">&#x27;k&#x27;</span>], axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>) <span class=\"comment\">#删除k列</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"缺失值处理\"><a href=\"#缺失值处理\" class=\"headerlink\" title=\"缺失值处理\"></a>缺失值处理</h1><p>values={}<br>with open(‘fill_na.txt’) as f:<br>    for line in f:<br>        line = line.strip().split(‘:’)<br>        values[line[0]] = int(line[1])<br>df = df.fillna(value=values)<br>df = df.dropna(axis=0,how=’any’) #删除含有NULL的行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除指定列有空值的行</span></span><br><span class=\"line\">df_ios_tmp=df_ios.dropna(subset=[列名],how=<span class=\"string\">&#x27;all&#x27;</span>,inplace=<span class=\"literal\">False</span>) <span class=\"comment\">#how=all 或者 any</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle\"></a>shuffle</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.sample(frac=<span class=\"number\">1</span>).reset_index(drop=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据检查\"><a href=\"#数据检查\" class=\"headerlink\" title=\"数据检查\"></a>数据检查</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#datafram 每一列值unique数</span></span><br><span class=\"line\">data_idfa.info(verbose=<span class=\"literal\">True</span>, null_counts=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#每一列均值 方差等</span></span><br><span class=\"line\">data_idfa.describe()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"group-by\"><a href=\"#group-by\" class=\"headerlink\" title=\"group by\"></a>group by</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df_ios.groupby([<span class=\"string\">&#x27;y_flag&#x27;</span>], as_index=<span class=\"literal\">False</span>)[<span class=\"string\">&#x27;dt&#x27;</span>].count() <span class=\"comment\">#聚合函数除了count还有sum,min,max等</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df_ios.groupby([<span class=\"string\">&#x27;dt_m&#x27;</span>,<span class=\"string\">&#x27;y_flag&#x27;</span>], as_index=<span class=\"literal\">False</span>)[<span class=\"string\">&#x27;pin&#x27;</span>].count()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"截取时间前几位\"><a href=\"#截取时间前几位\" class=\"headerlink\" title=\"截取时间前几位\"></a>截取时间前几位</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df_ios[<span class=\"string\">&#x27;dt_m&#x27;</span>]=df_ios[<span class=\"string\">&#x27;dt&#x27;</span>].<span class=\"built_in\">str</span>[<span class=\"number\">0</span>:<span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>pandas常用操作</p>","more":"<p>[TOC]</p>\n<h1 id=\"python调用shell\"><a href=\"#python调用shell\" class=\"headerlink\" title=\"python调用shell\"></a>python调用shell</h1><p>在python程序中调用shell命令，是件很酷且常用的事情……</p>\n<p><a href=\"https://www.cnblogs.com/pengdonglin137/articles/8093409.html\">https://www.cnblogs.com/pengdonglin137/articles/8093409.html</a></p>\n<h2 id=\"os-system-command\"><a href=\"#os-system-command\" class=\"headerlink\" title=\"os.system(command)\"></a>os.system(command)</h2><p>  此函数会启动子进程，在子进程中执行command，并返回command命令执行完毕后的退出状态，如果command有执行内容，会在标准输出显示。这实际上是使用C标准库函数system()实现的。</p>\n<blockquote>\n<p>缺点：这个函数在执行command命令时需要重新打开一个终端，并且无法保存command命令的执行结果。<br>实例：os.system(‘ls -l *’)</p>\n<h2 id=\"os-popen-command-mode\"><a href=\"#os-popen-command-mode\" class=\"headerlink\" title=\"os.popen(command,mode)\"></a>os.popen(command,mode)</h2></blockquote>\n<p>打开一个与command进程之间的管道。这个函数的返回值是一个文件对象，可以读或者写(由mode决定，mode默认是’r’)。如果mode为’r’，可以使用此函数的返回值调用read()来获取command命令的执行结果。</p>\n<p>os.system(cmd)或os.popen(cmd)，前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择。</p>\n<p>实例：tmp = os.popen(‘ls -l *’).readlines()</p>\n<h1 id=\"同时写入多个sheet\"><a href=\"#同时写入多个sheet\" class=\"headerlink\" title=\"同时写入多个sheet\"></a>同时写入多个sheet</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_excel_pd</span>(<span class=\"params\">file, sheet, data</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    excel title: name /  age</span></span><br><span class=\"line\"><span class=\"string\">        df1 = &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;name&#x27;: [1, 2, 3],</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;age&#x27;: [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    pandas DataFrame  write to excel</span></span><br><span class=\"line\"><span class=\"string\">    :param file:  file_path + file_name</span></span><br><span class=\"line\"><span class=\"string\">    :param sheet: type：list</span></span><br><span class=\"line\"><span class=\"string\">    :param data: type: list  DataFrame</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    writer = pd.ExcelWriter(file)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(sheet)):</span><br><span class=\"line\">        df = pd.DataFrame(data[i])</span><br><span class=\"line\">        df.to_excel(excel_writer=writer, sheet_name=sheet[i])</span><br><span class=\"line\">    writer.save()</span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\">    log.info(<span class=\"string\">&#x27;写入数据完成！&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"按条件过滤行\"><a href=\"#按条件过滤行\" class=\"headerlink\" title=\"按条件过滤行\"></a>按条件过滤行</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[df[A] &gt; <span class=\"number\">0</span>] <span class=\"comment\">#选出A列&gt;0的行</span></span><br><span class=\"line\">df[df[A]。isin([<span class=\"number\">0</span>,<span class=\"number\">1</span>])] <span class=\"comment\">#选出A列中是0或1的行</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"读入\"><a href=\"#读入\" class=\"headerlink\" title=\"读入\"></a>读入</h1><p>import pandas as pd<br>df=pd.read_table(‘dddd.txt’,header=0,index_col=0,error_bad_lines=False,delimiter=’\\t’)</p>\n<h1 id=\"列名\"><a href=\"#列名\" class=\"headerlink\" title=\"列名\"></a>列名</h1><p>df.columns</p>\n<h1 id=\"删除列\"><a href=\"#删除列\" class=\"headerlink\" title=\"删除列\"></a>删除列</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.drop([<span class=\"string\">&#x27;k&#x27;</span>], axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>) <span class=\"comment\">#删除k列</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"缺失值处理\"><a href=\"#缺失值处理\" class=\"headerlink\" title=\"缺失值处理\"></a>缺失值处理</h1><p>values={}<br>with open(‘fill_na.txt’) as f:<br>    for line in f:<br>        line = line.strip().split(‘:’)<br>        values[line[0]] = int(line[1])<br>df = df.fillna(value=values)<br>df = df.dropna(axis=0,how=’any’) #删除含有NULL的行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除指定列有空值的行</span></span><br><span class=\"line\">df_ios_tmp=df_ios.dropna(subset=[列名],how=<span class=\"string\">&#x27;all&#x27;</span>,inplace=<span class=\"literal\">False</span>) <span class=\"comment\">#how=all 或者 any</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle\"></a>shuffle</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.sample(frac=<span class=\"number\">1</span>).reset_index(drop=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据检查\"><a href=\"#数据检查\" class=\"headerlink\" title=\"数据检查\"></a>数据检查</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#datafram 每一列值unique数</span></span><br><span class=\"line\">data_idfa.info(verbose=<span class=\"literal\">True</span>, null_counts=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#每一列均值 方差等</span></span><br><span class=\"line\">data_idfa.describe()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"group-by\"><a href=\"#group-by\" class=\"headerlink\" title=\"group by\"></a>group by</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df_ios.groupby([<span class=\"string\">&#x27;y_flag&#x27;</span>], as_index=<span class=\"literal\">False</span>)[<span class=\"string\">&#x27;dt&#x27;</span>].count() <span class=\"comment\">#聚合函数除了count还有sum,min,max等</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df_ios.groupby([<span class=\"string\">&#x27;dt_m&#x27;</span>,<span class=\"string\">&#x27;y_flag&#x27;</span>], as_index=<span class=\"literal\">False</span>)[<span class=\"string\">&#x27;pin&#x27;</span>].count()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"截取时间前几位\"><a href=\"#截取时间前几位\" class=\"headerlink\" title=\"截取时间前几位\"></a>截取时间前几位</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df_ios[<span class=\"string\">&#x27;dt_m&#x27;</span>]=df_ios[<span class=\"string\">&#x27;dt&#x27;</span>].<span class=\"built_in\">str</span>[<span class=\"number\">0</span>:<span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure>"},{"title":"pandas常用命令","date":"2022-03-01T03:32:38.000Z","_content":"\n10 minutes to pandas\n\n<!-- more -->\n\n\n[TOC]\n\n# 10 minutes to pandas\n\nThis is a short introduction to pandas, geared mainly for new users. You can see more complex recipes in the [Cookbook](https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html#cookbook).\n\nCustomarily, we import as follows:\n\n```\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd\n```\n\n## Object creation\n\nSee the [Data Structure Intro section](https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dsintro).\n\nCreating a [`Series`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series) by passing a list of values, letting pandas create a default integer index:\n\n```\nIn [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])\n\nIn [4]: s\nOut[4]: \n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64\n```\n\nCreating a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) by passing a NumPy array, with a datetime index and labeled columns:\n\n```\nIn [5]: dates = pd.date_range('20130101', periods=6)\n\nIn [6]: dates\nOut[6]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list('ABCD'))\n\nIn [8]: df\nOut[8]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n```\n\nCreating a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) by passing a dict of objects that can be converted to series-like.\n\n```\nIn [9]: df2 = pd.DataFrame({'A': 1.,\n   ...:                     'B': pd.Timestamp('20130102'),\n   ...:                     'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n   ...:                     'D': np.array([3] * 4, dtype='int32'),\n   ...:                     'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n   ...:                     'F': 'foo'})\n   ...: \n\nIn [10]: df2\nOut[10]: \n     A          B    C  D      E    F\n0  1.0 2013-01-02  1.0  3   test  foo\n1  1.0 2013-01-02  1.0  3  train  foo\n2  1.0 2013-01-02  1.0  3   test  foo\n3  1.0 2013-01-02  1.0  3  train  foo\n```\n\nThe columns of the resulting [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) have different [dtypes](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-dtypes).\n\n```\nIn [11]: df2.dtypes\nOut[11]: \nA           float64\nB    datetime64[ns]\nC           float32\nD             int32\nE          category\nF            object\ndtype: object\n```\n\nIf you’re using IPython, tab completion for column names (as well as public attributes) is automatically enabled. Here’s a subset of the attributes that will be completed:\n\n```\nIn [12]: df2.<TAB>  # noqa: E225, E999\ndf2.A                  df2.bool\ndf2.abs                df2.boxplot\ndf2.add                df2.C\ndf2.add_prefix         df2.clip\ndf2.add_suffix         df2.columns\ndf2.align              df2.copy\ndf2.all                df2.count\ndf2.any                df2.combine\ndf2.append             df2.D\ndf2.apply              df2.describe\ndf2.applymap           df2.diff\ndf2.B                  df2.duplicated\n```\n\nAs you can see, the columns `A`, `B`, `C`, and `D` are automatically tab completed. `E` and `F` are there as well; the rest of the attributes have been truncated for brevity.\n\n## Viewing data\n\nSee the [Basics section](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics).\n\nHere is how to view the top and bottom rows of the frame:\n\n```\nIn [13]: df.head()\nOut[13]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\nIn [14]: df.tail(3)\nOut[14]: \n                   A         B         C         D\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n```\n\nDisplay the index, columns:\n\n```\nIn [15]: df.index\nOut[15]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [16]: df.columns\nOut[16]: Index(['A', 'B', 'C', 'D'], dtype='object')\n```\n\n[`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy) gives a NumPy representation of the underlying data. Note that this can be an expensive operation when your [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) has columns with different data types, which comes down to a fundamental difference between pandas and NumPy: **NumPy arrays have one dtype for the entire array, while pandas DataFrames have one dtype per column**. When you call [`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy), pandas will find the NumPy dtype that can hold *all* of the dtypes in the DataFrame. This may end up being `object`, which requires casting every value to a Python object.\n\nFor `df`, our [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) of all floating-point values, [`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy) is fast and doesn’t require copying data.\n\n```\nIn [17]: df.to_numpy()\nOut[17]: \narray([[ 0.4691, -0.2829, -1.5091, -1.1356],\n       [ 1.2121, -0.1732,  0.1192, -1.0442],\n       [-0.8618, -2.1046, -0.4949,  1.0718],\n       [ 0.7216, -0.7068, -1.0396,  0.2719],\n       [-0.425 ,  0.567 ,  0.2762, -1.0874],\n       [-0.6737,  0.1136, -1.4784,  0.525 ]])\n```\n\nFor `df2`, the [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) with multiple dtypes, [`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy) is relatively expensive.\n\n```\nIn [18]: df2.to_numpy()\nOut[18]: \narray([[1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo'],\n       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo']],\n      dtype=object)\n```\n\nNote\n\n[`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy) does *not* include the index or column labels in the output.\n\n[`describe()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe) shows a quick statistic summary of your data:\n\n```\nIn [19]: df.describe()\nOut[19]: \n              A         B         C         D\ncount  6.000000  6.000000  6.000000  6.000000\nmean   0.073711 -0.431125 -0.687758 -0.233103\nstd    0.843157  0.922818  0.779887  0.973118\nmin   -0.861849 -2.104569 -1.509059 -1.135632\n25%   -0.611510 -0.600794 -1.368714 -1.076610\n50%    0.022070 -0.228039 -0.767252 -0.386188\n75%    0.658444  0.041933 -0.034326  0.461706\nmax    1.212112  0.567020  0.276232  1.071804\n```\n\nTransposing your data:\n\n```\nIn [20]: df.T\nOut[20]: \n   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06\nA    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690\nB   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648\nC   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427\nD   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988\n```\n\nSorting by an axis:\n\n```\nIn [21]: df.sort_index(axis=1, ascending=False)\nOut[21]: \n                   D         C         B         A\n2013-01-01 -1.135632 -1.509059 -0.282863  0.469112\n2013-01-02 -1.044236  0.119209 -0.173215  1.212112\n2013-01-03  1.071804 -0.494929 -2.104569 -0.861849\n2013-01-04  0.271860 -1.039575 -0.706771  0.721555\n2013-01-05 -1.087401  0.276232  0.567020 -0.424972\n2013-01-06  0.524988 -1.478427  0.113648 -0.673690\n```\n\nSorting by values:\n\n```\nIn [22]: df.sort_values(by='B')\nOut[22]: \n                   A         B         C         D\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n```\n\n## Selection\n\nNote\n\nWhile standard Python / Numpy expressions for selecting and setting are intuitive and come in handy for interactive work, for production code, we recommend the optimized pandas data access methods, `.at`, `.iat`, `.loc` and `.iloc`.\n\nSee the indexing documentation [Indexing and Selecting Data](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing) and [MultiIndex / Advanced Indexing](https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced).\n\n### Getting\n\nSelecting a single column, which yields a [`Series`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series), equivalent to `df.A`:\n\n```\nIn [23]: df['A']\nOut[23]: \n2013-01-01    0.469112\n2013-01-02    1.212112\n2013-01-03   -0.861849\n2013-01-04    0.721555\n2013-01-05   -0.424972\n2013-01-06   -0.673690\nFreq: D, Name: A, dtype: float64\n```\n\nSelecting via `[]`, which slices the rows.\n\n```\nIn [24]: df[0:3]\nOut[24]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n\nIn [25]: df['20130102':'20130104']\nOut[25]: \n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\n### Selection by label\n\nSee more in [Selection by Label](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-label).\n\nFor getting a cross section using a label:\n\n```\nIn [26]: df.loc[dates[0]]\nOut[26]: \nA    0.469112\nB   -0.282863\nC   -1.509059\nD   -1.135632\nName: 2013-01-01 00:00:00, dtype: float64\n```\n\nSelecting on a multi-axis by label:\n\n```\nIn [27]: df.loc[:, ['A', 'B']]\nOut[27]: \n                   A         B\n2013-01-01  0.469112 -0.282863\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n2013-01-06 -0.673690  0.113648\n```\n\nShowing label slicing, both endpoints are *included*:\n\n```\nIn [28]: df.loc['20130102':'20130104', ['A', 'B']]\nOut[28]: \n                   A         B\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n```\n\nReduction in the dimensions of the returned object:\n\n```\nIn [29]: df.loc['20130102', ['A', 'B']]\nOut[29]: \nA    1.212112\nB   -0.173215\nName: 2013-01-02 00:00:00, dtype: float64\n```\n\nFor getting a scalar value:\n\n```\nIn [30]: df.loc[dates[0], 'A']\nOut[30]: 0.4691122999071863\n```\n\nFor getting fast access to a scalar (equivalent to the prior method):\n\n```\nIn [31]: df.at[dates[0], 'A']\nOut[31]: 0.4691122999071863\n```\n\n### Selection by position\n\nSee more in [Selection by Position](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-integer).\n\nSelect via the position of the passed integers:\n\n```\nIn [32]: df.iloc[3]\nOut[32]: \nA    0.721555\nB   -0.706771\nC   -1.039575\nD    0.271860\nName: 2013-01-04 00:00:00, dtype: float64\n```\n\nBy integer slices, acting similar to numpy/python:\n\n```\nIn [33]: df.iloc[3:5, 0:2]\nOut[33]: \n                   A         B\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n```\n\nBy lists of integer position locations, similar to the numpy/python style:\n\n```\nIn [34]: df.iloc[[1, 2, 4], [0, 2]]\nOut[34]: \n                   A         C\n2013-01-02  1.212112  0.119209\n2013-01-03 -0.861849 -0.494929\n2013-01-05 -0.424972  0.276232\n```\n\nFor slicing rows explicitly:\n\n```\nIn [35]: df.iloc[1:3, :]\nOut[35]: \n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n```\n\nFor slicing columns explicitly:\n\n```\nIn [36]: df.iloc[:, 1:3]\nOut[36]: \n                   B         C\n2013-01-01 -0.282863 -1.509059\n2013-01-02 -0.173215  0.119209\n2013-01-03 -2.104569 -0.494929\n2013-01-04 -0.706771 -1.039575\n2013-01-05  0.567020  0.276232\n2013-01-06  0.113648 -1.478427\n```\n\nFor getting a value explicitly:\n\n```\nIn [37]: df.iloc[1, 1]\nOut[37]: -0.17321464905330858\n```\n\nFor getting fast access to a scalar (equivalent to the prior method):\n\n```\nIn [38]: df.iat[1, 1]\nOut[38]: -0.17321464905330858\n```\n\n### Boolean indexing\n\nUsing a single column’s values to select data.\n\n```\nIn [39]: df[df['A'] > 0]\nOut[39]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\nSelecting values from a DataFrame where a boolean condition is met.\n\n```\nIn [40]: df[df > 0]\nOut[40]: \n                   A         B         C         D\n2013-01-01  0.469112       NaN       NaN       NaN\n2013-01-02  1.212112       NaN  0.119209       NaN\n2013-01-03       NaN       NaN       NaN  1.071804\n2013-01-04  0.721555       NaN       NaN  0.271860\n2013-01-05       NaN  0.567020  0.276232       NaN\n2013-01-06       NaN  0.113648       NaN  0.524988\n```\n\nUsing the [`isin()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html#pandas.Series.isin) method for filtering:\n\n```\nIn [41]: df2 = df.copy()\n\nIn [42]: df2['E'] = ['one', 'one', 'two', 'three', 'four', 'three']\n\nIn [43]: df2\nOut[43]: \n                   A         B         C         D      E\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three\n\nIn [44]: df2[df2['E'].isin(['two', 'four'])]\nOut[44]: \n                   A         B         C         D     E\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four\n```\n\n### Setting\n\nSetting a new column automatically aligns the data by the indexes.\n\n```\nIn [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range('20130102', periods=6))\n\nIn [46]: s1\nOut[46]: \n2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64\n\nIn [47]: df['F'] = s1\n```\n\nSetting values by label:\n\n```\nIn [48]: df.at[dates[0], 'A'] = 0\n```\n\nSetting values by position:\n\n```\nIn [49]: df.iat[0, 1] = 0\n```\n\nSetting by assigning with a NumPy array:\n\n```\nIn [50]: df.loc[:, 'D'] = np.array([5] * len(df))\n```\n\nThe result of the prior setting operations.\n\n```\nIn [51]: df\nOut[51]: \n                   A         B         C  D    F\n2013-01-01  0.000000  0.000000 -1.509059  5  NaN\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0\n2013-01-05 -0.424972  0.567020  0.276232  5  4.0\n2013-01-06 -0.673690  0.113648 -1.478427  5  5.0\n```\n\nA `where` operation with setting.\n\n```\nIn [52]: df2 = df.copy()\n\nIn [53]: df2[df2 > 0] = -df2\n\nIn [54]: df2\nOut[54]: \n                   A         B         C  D    F\n2013-01-01  0.000000  0.000000 -1.509059 -5  NaN\n2013-01-02 -1.212112 -0.173215 -0.119209 -5 -1.0\n2013-01-03 -0.861849 -2.104569 -0.494929 -5 -2.0\n2013-01-04 -0.721555 -0.706771 -1.039575 -5 -3.0\n2013-01-05 -0.424972 -0.567020 -0.276232 -5 -4.0\n2013-01-06 -0.673690 -0.113648 -1.478427 -5 -5.0\n```\n\n## Missing data\n\npandas primarily uses the value `np.nan` to represent missing data. It is by default not included in computations. See the [Missing Data section](https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html#missing-data).\n\nReindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data.\n\n```\nIn [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])\n\nIn [56]: df1.loc[dates[0]:dates[1], 'E'] = 1\n\nIn [57]: df1\nOut[57]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  NaN  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  NaN\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  NaN\n```\n\nTo drop any rows that have missing data.\n\n```\nIn [58]: df1.dropna(how='any')\nOut[58]: \n                   A         B         C  D    F    E\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n```\n\nFilling missing data.\n\n```\nIn [59]: df1.fillna(value=5)\nOut[59]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  5.0  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  5.0\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  5.0\n```\n\nTo get the boolean mask where values are `nan`.\n\n```\nIn [60]: pd.isna(df1)\nOut[60]: \n                A      B      C      D      F      E\n2013-01-01  False  False  False  False   True  False\n2013-01-02  False  False  False  False  False  False\n2013-01-03  False  False  False  False  False   True\n2013-01-04  False  False  False  False  False   True\n```\n\n## Operations\n\nSee the [Basic section on Binary Ops](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-binop).\n\n### Stats\n\nOperations in general *exclude* missing data.\n\nPerforming a descriptive statistic:\n\n```\nIn [61]: df.mean()\nOut[61]: \nA   -0.004474\nB   -0.383981\nC   -0.687758\nD    5.000000\nF    3.000000\ndtype: float64\n```\n\nSame operation on the other axis:\n\n```\nIn [62]: df.mean(1)\nOut[62]: \n2013-01-01    0.872735\n2013-01-02    1.431621\n2013-01-03    0.707731\n2013-01-04    1.395042\n2013-01-05    1.883656\n2013-01-06    1.592306\nFreq: D, dtype: float64\n```\n\nOperating with objects that have different dimensionality and need alignment. In addition, pandas automatically broadcasts along the specified dimension.\n\n```\nIn [63]: s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)\n\nIn [64]: s\nOut[64]: \n2013-01-01    NaN\n2013-01-02    NaN\n2013-01-03    1.0\n2013-01-04    3.0\n2013-01-05    5.0\n2013-01-06    NaN\nFreq: D, dtype: float64\n\nIn [65]: df.sub(s, axis='index')\nOut[65]: \n                   A         B         C    D    F\n2013-01-01       NaN       NaN       NaN  NaN  NaN\n2013-01-02       NaN       NaN       NaN  NaN  NaN\n2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0\n2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0\n2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0\n2013-01-06       NaN       NaN       NaN  NaN  NaN\n```\n\n### Apply\n\nApplying functions to the data:\n\n```\nIn [66]: df.apply(np.cumsum)\nOut[66]: \n                   A         B         C   D     F\n2013-01-01  0.000000  0.000000 -1.509059   5   NaN\n2013-01-02  1.212112 -0.173215 -1.389850  10   1.0\n2013-01-03  0.350263 -2.277784 -1.884779  15   3.0\n2013-01-04  1.071818 -2.984555 -2.924354  20   6.0\n2013-01-05  0.646846 -2.417535 -2.648122  25  10.0\n2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0\n\nIn [67]: df.apply(lambda x: x.max() - x.min())\nOut[67]: \nA    2.073961\nB    2.671590\nC    1.785291\nD    0.000000\nF    4.000000\ndtype: float64\n```\n\n### Histogramming\n\nSee more at [Histogramming and Discretization](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-discretization).\n\n```\nIn [68]: s = pd.Series(np.random.randint(0, 7, size=10))\n\nIn [69]: s\nOut[69]: \n0    4\n1    2\n2    1\n3    2\n4    6\n5    4\n6    4\n7    6\n8    4\n9    4\ndtype: int64\n\nIn [70]: s.value_counts()\nOut[70]: \n4    5\n6    2\n2    2\n1    1\ndtype: int64\n```\n\n### String Methods\n\nSeries is equipped with a set of string processing methods in the str attribute that make it easy to operate on each element of the array, as in the code snippet below. Note that pattern-matching in str generally uses [regular expressions](https://docs.python.org/3/library/re.html) by default (and in some cases always uses them). See more at [Vectorized String Methods](https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html#text-string-methods).\n\n```\nIn [71]: s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])\n\nIn [72]: s.str.lower()\nOut[72]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object\n```\n\n## Merge\n\n### Concat\n\npandas provides various facilities for easily combining together Series and DataFrame objects with various kinds of set logic for the indexes and relational algebra functionality in the case of join / merge-type operations.\n\nSee the [Merging section](https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging).\n\nConcatenating pandas objects together with [`concat()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html#pandas.concat):\n\n```\nIn [73]: df = pd.DataFrame(np.random.randn(10, 4))\n\nIn [74]: df\nOut[74]: \n          0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n\n# break it into pieces\nIn [75]: pieces = [df[:3], df[3:7], df[7:]]\n\nIn [76]: pd.concat(pieces)\nOut[76]: \n          0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n```\n\nNote\n\nAdding a column to a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) is relatively fast. However, adding a row requires a copy, and may be expensive. We recommend passing a pre-built list of records to the [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) constructor instead of building a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) by iteratively appending records to it. See [Appending to dataframe](https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-concatenation) for more.\n\n### Join\n\nSQL style merges. See the [Database style joining](https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-join) section.\n\n```\nIn [77]: left = pd.DataFrame({'key': ['foo', 'foo'], 'lval': [1, 2]})\n\nIn [78]: right = pd.DataFrame({'key': ['foo', 'foo'], 'rval': [4, 5]})\n\nIn [79]: left\nOut[79]: \n   key  lval\n0  foo     1\n1  foo     2\n\nIn [80]: right\nOut[80]: \n   key  rval\n0  foo     4\n1  foo     5\n\nIn [81]: pd.merge(left, right, on='key')\nOut[81]: \n   key  lval  rval\n0  foo     1     4\n1  foo     1     5\n2  foo     2     4\n3  foo     2     5\n```\n\nAnother example that can be given is:\n\n```\nIn [82]: left = pd.DataFrame({'key': ['foo', 'bar'], 'lval': [1, 2]})\n\nIn [83]: right = pd.DataFrame({'key': ['foo', 'bar'], 'rval': [4, 5]})\n\nIn [84]: left\nOut[84]: \n   key  lval\n0  foo     1\n1  bar     2\n\nIn [85]: right\nOut[85]: \n   key  rval\n0  foo     4\n1  bar     5\n\nIn [86]: pd.merge(left, right, on='key')\nOut[86]: \n   key  lval  rval\n0  foo     1     4\n1  bar     2     5\n```\n\n## Grouping\n\nBy “group by” we are referring to a process involving one or more of the following steps:\n\n> - **Splitting** the data into groups based on some criteria\n> - **Applying** a function to each group independently\n> - **Combining** the results into a data structure\n\nSee the [Grouping section](https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#groupby).\n\n```\nIn [87]: df = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar',\n   ....:                          'foo', 'bar', 'foo', 'foo'],\n   ....:                    'B': ['one', 'one', 'two', 'three',\n   ....:                          'two', 'two', 'one', 'three'],\n   ....:                    'C': np.random.randn(8),\n   ....:                    'D': np.random.randn(8)})\n   ....: \n\nIn [88]: df\nOut[88]: \n     A      B         C         D\n0  foo    one  1.346061 -1.577585\n1  bar    one  1.511763  0.396823\n2  foo    two  1.627081 -0.105381\n3  bar  three -0.990582 -0.532532\n4  foo    two -0.441652  1.453749\n5  bar    two  1.211526  1.208843\n6  foo    one  0.268520 -0.080952\n7  foo  three  0.024580 -0.264610\n```\n\nGrouping and then applying the [`sum()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum) function to the resulting groups.\n\n```\nIn [89]: df.groupby('A').sum()\nOut[89]: \n            C         D\nA                      \nbar  1.732707  1.073134\nfoo  2.824590 -0.574779\n```\n\nGrouping by multiple columns forms a hierarchical index, and again we can apply the [`sum()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum) function.\n\n```\nIn [90]: df.groupby(['A', 'B']).sum()\nOut[90]: \n                  C         D\nA   B                        \nbar one    1.511763  0.396823\n    three -0.990582 -0.532532\n    two    1.211526  1.208843\nfoo one    1.614581 -1.658537\n    three  0.024580 -0.264610\n    two    1.185429  1.348368\n```\n\n## Reshaping\n\nSee the sections on [Hierarchical Indexing](https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced-hierarchical) and [Reshaping](https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-stacking).\n\n### Stack\n\n```\nIn [91]: tuples = list(zip(*[['bar', 'bar', 'baz', 'baz',\n   ....:                      'foo', 'foo', 'qux', 'qux'],\n   ....:                     ['one', 'two', 'one', 'two',\n   ....:                      'one', 'two', 'one', 'two']]))\n   ....: \n\nIn [92]: index = pd.MultiIndex.from_tuples(tuples, names=['first', 'second'])\n\nIn [93]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=['A', 'B'])\n\nIn [94]: df2 = df[:4]\n\nIn [95]: df2\nOut[95]: \n                     A         B\nfirst second                    \nbar   one    -0.727965 -0.589346\n      two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n      two     0.884345  1.591431\n```\n\nThe [`stack()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack) method “compresses” a level in the DataFrame’s columns.\n\n```\nIn [96]: stacked = df2.stack()\n\nIn [97]: stacked\nOut[97]: \nfirst  second   \nbar    one     A   -0.727965\n               B   -0.589346\n       two     A    0.339969\n               B   -0.693205\nbaz    one     A   -0.339355\n               B    0.593616\n       two     A    0.884345\n               B    1.591431\ndtype: float64\n```\n\nWith a “stacked” DataFrame or Series (having a `MultiIndex` as the `index`), the inverse operation of [`stack()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack) is [`unstack()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack), which by default unstacks the **last level**:\n\n```\nIn [98]: stacked.unstack()\nOut[98]: \n                     A         B\nfirst second                    \nbar   one    -0.727965 -0.589346\n      two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n      two     0.884345  1.591431\n\nIn [99]: stacked.unstack(1)\nOut[99]: \nsecond        one       two\nfirst                      \nbar   A -0.727965  0.339969\n      B -0.589346 -0.693205\nbaz   A -0.339355  0.884345\n      B  0.593616  1.591431\n\nIn [100]: stacked.unstack(0)\nOut[100]: \nfirst          bar       baz\nsecond                      \none    A -0.727965 -0.339355\n       B -0.589346  0.593616\ntwo    A  0.339969  0.884345\n       B -0.693205  1.591431\n```\n\n### Pivot tables\n\nSee the section on [Pivot Tables](https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-pivot).\n\n```\nIn [101]: df = pd.DataFrame({'A': ['one', 'one', 'two', 'three'] * 3,\n   .....:                    'B': ['A', 'B', 'C'] * 4,\n   .....:                    'C': ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2,\n   .....:                    'D': np.random.randn(12),\n   .....:                    'E': np.random.randn(12)})\n   .....: \n\nIn [102]: df\nOut[102]: \n        A  B    C         D         E\n0     one  A  foo -1.202872  0.047609\n1     one  B  foo -1.814470 -0.136473\n2     two  C  foo  1.018601 -0.561757\n3   three  A  bar -0.595447 -1.623033\n4     one  B  bar  1.395433  0.029399\n5     one  C  bar -0.392670 -0.542108\n6     two  A  foo  0.007207  0.282696\n7   three  B  foo  1.928123 -0.087302\n8     one  C  foo -0.055224 -1.575170\n9     one  A  bar  2.395985  1.771208\n10    two  B  bar  1.552825  0.816482\n11  three  C  bar  0.166599  1.100230\n```\n\nWe can produce pivot tables from this data very easily:\n\n```\nIn [103]: pd.pivot_table(df, values='D', index=['A', 'B'], columns=['C'])\nOut[103]: \nC             bar       foo\nA     B                    \none   A  2.395985 -1.202872\n      B  1.395433 -1.814470\n      C -0.392670 -0.055224\nthree A -0.595447       NaN\n      B       NaN  1.928123\n      C  0.166599       NaN\ntwo   A       NaN  0.007207\n      B  1.552825       NaN\n      C       NaN  1.018601\n```\n\n## Time series\n\npandas has simple, powerful, and efficient functionality for performing resampling operations during frequency conversion (e.g., converting secondly data into 5-minutely data). This is extremely common in, but not limited to, financial applications. See the [Time Series section](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries).\n\n```\nIn [104]: rng = pd.date_range('1/1/2012', periods=100, freq='S')\n\nIn [105]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)\n\nIn [106]: ts.resample('5Min').sum()\nOut[106]: \n2012-01-01    24182\nFreq: 5T, dtype: int64\n```\n\nTime zone representation:\n\n```\nIn [107]: rng = pd.date_range('3/6/2012 00:00', periods=5, freq='D')\n\nIn [108]: ts = pd.Series(np.random.randn(len(rng)), rng)\n\nIn [109]: ts\nOut[109]: \n2012-03-06    1.857704\n2012-03-07   -1.193545\n2012-03-08    0.677510\n2012-03-09   -0.153931\n2012-03-10    0.520091\nFreq: D, dtype: float64\n\nIn [110]: ts_utc = ts.tz_localize('UTC')\n\nIn [111]: ts_utc\nOut[111]: \n2012-03-06 00:00:00+00:00    1.857704\n2012-03-07 00:00:00+00:00   -1.193545\n2012-03-08 00:00:00+00:00    0.677510\n2012-03-09 00:00:00+00:00   -0.153931\n2012-03-10 00:00:00+00:00    0.520091\nFreq: D, dtype: float64\n```\n\nConverting to another time zone:\n\n```\nIn [112]: ts_utc.tz_convert('US/Eastern')\nOut[112]: \n2012-03-05 19:00:00-05:00    1.857704\n2012-03-06 19:00:00-05:00   -1.193545\n2012-03-07 19:00:00-05:00    0.677510\n2012-03-08 19:00:00-05:00   -0.153931\n2012-03-09 19:00:00-05:00    0.520091\nFreq: D, dtype: float64\n```\n\nConverting between time span representations:\n\n```\nIn [113]: rng = pd.date_range('1/1/2012', periods=5, freq='M')\n\nIn [114]: ts = pd.Series(np.random.randn(len(rng)), index=rng)\n\nIn [115]: ts\nOut[115]: \n2012-01-31   -1.475051\n2012-02-29    0.722570\n2012-03-31   -0.322646\n2012-04-30   -1.601631\n2012-05-31    0.778033\nFreq: M, dtype: float64\n\nIn [116]: ps = ts.to_period()\n\nIn [117]: ps\nOut[117]: \n2012-01   -1.475051\n2012-02    0.722570\n2012-03   -0.322646\n2012-04   -1.601631\n2012-05    0.778033\nFreq: M, dtype: float64\n\nIn [118]: ps.to_timestamp()\nOut[118]: \n2012-01-01   -1.475051\n2012-02-01    0.722570\n2012-03-01   -0.322646\n2012-04-01   -1.601631\n2012-05-01    0.778033\nFreq: MS, dtype: float64\n```\n\nConverting between period and timestamp enables some convenient arithmetic functions to be used. In the following example, we convert a quarterly frequency with year ending in November to 9am of the end of the month following the quarter end:\n\n```\nIn [119]: prng = pd.period_range('1990Q1', '2000Q4', freq='Q-NOV')\n\nIn [120]: ts = pd.Series(np.random.randn(len(prng)), prng)\n\nIn [121]: ts.index = (prng.asfreq('M', 'e') + 1).asfreq('H', 's') + 9\n\nIn [122]: ts.head()\nOut[122]: \n1990-03-01 09:00   -0.289342\n1990-06-01 09:00    0.233141\n1990-09-01 09:00   -0.223540\n1990-12-01 09:00    0.542054\n1991-03-01 09:00   -0.688585\nFreq: H, dtype: float64\n```\n\n## Categoricals\n\npandas can include categorical data in a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame). For full docs, see the [categorical introduction](https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#categorical) and the [API documentation](https://pandas.pydata.org/pandas-docs/stable/reference/arrays.html#api-arrays-categorical).\n\n```\nIn [123]: df = pd.DataFrame({\"id\": [1, 2, 3, 4, 5, 6],\n   .....:                    \"raw_grade\": ['a', 'b', 'b', 'a', 'a', 'e']})\n   .....: \n```\n\nConvert the raw grades to a categorical data type.\n\n```\nIn [124]: df[\"grade\"] = df[\"raw_grade\"].astype(\"category\")\n\nIn [125]: df[\"grade\"]\nOut[125]: \n0    a\n1    b\n2    b\n3    a\n4    a\n5    e\nName: grade, dtype: category\nCategories (3, object): ['a', 'b', 'e']\n```\n\nRename the categories to more meaningful names (assigning to [`Series.cat.categories()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.categories.html#pandas.Series.cat.categories) is in place!).\n\n```\nIn [126]: df[\"grade\"].cat.categories = [\"very good\", \"good\", \"very bad\"]\n```\n\nReorder the categories and simultaneously add the missing categories (methods under [`Series.cat()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.html#pandas.Series.cat) return a new [`Series`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series) by default).\n\n```\nIn [127]: df[\"grade\"] = df[\"grade\"].cat.set_categories([\"very bad\", \"bad\", \"medium\",\n   .....:                                               \"good\", \"very good\"])\n   .....: \n\nIn [128]: df[\"grade\"]\nOut[128]: \n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5     very bad\nName: grade, dtype: category\nCategories (5, object): ['very bad', 'bad', 'medium', 'good', 'very good']\n```\n\nSorting is per order in the categories, not lexical order.\n\n```\nIn [129]: df.sort_values(by=\"grade\")\nOut[129]: \n   id raw_grade      grade\n5   6         e   very bad\n1   2         b       good\n2   3         b       good\n0   1         a  very good\n3   4         a  very good\n4   5         a  very good\n```\n\nGrouping by a categorical column also shows empty categories.\n\n```\nIn [130]: df.groupby(\"grade\").size()\nOut[130]: \ngrade\nvery bad     1\nbad          0\nmedium       0\ngood         2\nvery good    3\ndtype: int64\n```\n\n## Plotting\n\nSee the [Plotting](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization) docs.\n\nWe use the standard convention for referencing the matplotlib API:\n\n```\nIn [131]: import matplotlib.pyplot as plt\n\nIn [132]: plt.close('all')\nIn [133]: ts = pd.Series(np.random.randn(1000),\n   .....:                index=pd.date_range('1/1/2000', periods=1000))\n   .....: \n\nIn [134]: ts = ts.cumsum()\n\nIn [135]: ts.plot()\nOut[135]: <AxesSubplot:>\n```\n\n![../_images/series_plot_basic.png](https://pandas.pydata.org/pandas-docs/stable/_images/series_plot_basic.png)\n\nOn a DataFrame, the [`plot()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot) method is a convenience to plot all of the columns with labels:\n\n```\nIn [136]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index,\n   .....:                   columns=['A', 'B', 'C', 'D'])\n   .....: \n\nIn [137]: df = df.cumsum()\n\nIn [138]: plt.figure()\nOut[138]: <Figure size 640x480 with 0 Axes>\n\nIn [139]: df.plot()\nOut[139]: <AxesSubplot:>\n\nIn [140]: plt.legend(loc='best')\nOut[140]: <matplotlib.legend.Legend at 0x7fbfb29f0670>\n```\n\n![../_images/frame_plot_basic.png](https://pandas.pydata.org/pandas-docs/stable/_images/frame_plot_basic.png)\n\n## Getting data in/out\n\n### CSV\n\n[Writing to a csv file.](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-store-in-csv)\n\n```\nIn [141]: df.to_csv('foo.csv')\n```\n\n[Reading from a csv file.](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-csv-table)\n\n```\nIn [142]: pd.read_csv('foo.csv')\nOut[142]: \n     Unnamed: 0          A          B          C          D\n0    2000-01-01   0.350262   0.843315   1.798556   0.782234\n1    2000-01-02  -0.586873   0.034907   1.923792  -0.562651\n2    2000-01-03  -1.245477  -0.963406   2.269575  -1.612566\n3    2000-01-04  -0.252830  -0.498066   3.176886  -1.275581\n4    2000-01-05  -1.044057   0.118042   2.768571   0.386039\n..          ...        ...        ...        ...        ...\n995  2002-09-22 -48.017654  31.474551  69.146374 -47.541670\n996  2002-09-23 -47.207912  32.627390  68.505254 -48.828331\n997  2002-09-24 -48.907133  31.990402  67.310924 -49.391051\n998  2002-09-25 -50.146062  33.716770  67.717434 -49.037577\n999  2002-09-26 -49.724318  33.479952  68.108014 -48.822030\n\n[1000 rows x 5 columns]\n```\n\n### HDF5\n\nReading and writing to [HDFStores](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5).\n\nWriting to a HDF5 Store.\n\n```\nIn [143]: df.to_hdf('foo.h5', 'df')\n```\n\nReading from a HDF5 Store.\n\n```\nIn [144]: pd.read_hdf('foo.h5', 'df')\nOut[144]: \n                    A          B          C          D\n2000-01-01   0.350262   0.843315   1.798556   0.782234\n2000-01-02  -0.586873   0.034907   1.923792  -0.562651\n2000-01-03  -1.245477  -0.963406   2.269575  -1.612566\n2000-01-04  -0.252830  -0.498066   3.176886  -1.275581\n2000-01-05  -1.044057   0.118042   2.768571   0.386039\n...               ...        ...        ...        ...\n2002-09-22 -48.017654  31.474551  69.146374 -47.541670\n2002-09-23 -47.207912  32.627390  68.505254 -48.828331\n2002-09-24 -48.907133  31.990402  67.310924 -49.391051\n2002-09-25 -50.146062  33.716770  67.717434 -49.037577\n2002-09-26 -49.724318  33.479952  68.108014 -48.822030\n\n[1000 rows x 4 columns]\n```\n\n### Excel\n\nReading and writing to [MS Excel](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel).\n\nWriting to an excel file.\n\n```\nIn [145]: df.to_excel('foo.xlsx', sheet_name='Sheet1')\n```\n\nReading from an excel file.\n\n```\nIn [146]: pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA'])\nOut[146]: \n    Unnamed: 0          A          B          C          D\n0   2000-01-01   0.350262   0.843315   1.798556   0.782234\n1   2000-01-02  -0.586873   0.034907   1.923792  -0.562651\n2   2000-01-03  -1.245477  -0.963406   2.269575  -1.612566\n3   2000-01-04  -0.252830  -0.498066   3.176886  -1.275581\n4   2000-01-05  -1.044057   0.118042   2.768571   0.386039\n..         ...        ...        ...        ...        ...\n995 2002-09-22 -48.017654  31.474551  69.146374 -47.541670\n996 2002-09-23 -47.207912  32.627390  68.505254 -48.828331\n997 2002-09-24 -48.907133  31.990402  67.310924 -49.391051\n998 2002-09-25 -50.146062  33.716770  67.717434 -49.037577\n999 2002-09-26 -49.724318  33.479952  68.108014 -48.822030\n\n[1000 rows x 5 columns]\n```\n\n## Gotchas\n\nIf you are attempting to perform an operation you might see an exception like:\n\n```\n>>> if pd.Series([False, True, False]):\n...     print(\"I was true\")\nTraceback\n    ...\nValueError: The truth value of an array is ambiguous. Use a.empty, a.any() or a.all().\n```","source":"_posts/0_代码相关/pandas常用命令.md","raw":"---\ntitle: pandas常用命令\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n10 minutes to pandas\n\n<!-- more -->\n\n\n[TOC]\n\n# 10 minutes to pandas\n\nThis is a short introduction to pandas, geared mainly for new users. You can see more complex recipes in the [Cookbook](https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html#cookbook).\n\nCustomarily, we import as follows:\n\n```\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd\n```\n\n## Object creation\n\nSee the [Data Structure Intro section](https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dsintro).\n\nCreating a [`Series`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series) by passing a list of values, letting pandas create a default integer index:\n\n```\nIn [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])\n\nIn [4]: s\nOut[4]: \n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64\n```\n\nCreating a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) by passing a NumPy array, with a datetime index and labeled columns:\n\n```\nIn [5]: dates = pd.date_range('20130101', periods=6)\n\nIn [6]: dates\nOut[6]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list('ABCD'))\n\nIn [8]: df\nOut[8]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n```\n\nCreating a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) by passing a dict of objects that can be converted to series-like.\n\n```\nIn [9]: df2 = pd.DataFrame({'A': 1.,\n   ...:                     'B': pd.Timestamp('20130102'),\n   ...:                     'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n   ...:                     'D': np.array([3] * 4, dtype='int32'),\n   ...:                     'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n   ...:                     'F': 'foo'})\n   ...: \n\nIn [10]: df2\nOut[10]: \n     A          B    C  D      E    F\n0  1.0 2013-01-02  1.0  3   test  foo\n1  1.0 2013-01-02  1.0  3  train  foo\n2  1.0 2013-01-02  1.0  3   test  foo\n3  1.0 2013-01-02  1.0  3  train  foo\n```\n\nThe columns of the resulting [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) have different [dtypes](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-dtypes).\n\n```\nIn [11]: df2.dtypes\nOut[11]: \nA           float64\nB    datetime64[ns]\nC           float32\nD             int32\nE          category\nF            object\ndtype: object\n```\n\nIf you’re using IPython, tab completion for column names (as well as public attributes) is automatically enabled. Here’s a subset of the attributes that will be completed:\n\n```\nIn [12]: df2.<TAB>  # noqa: E225, E999\ndf2.A                  df2.bool\ndf2.abs                df2.boxplot\ndf2.add                df2.C\ndf2.add_prefix         df2.clip\ndf2.add_suffix         df2.columns\ndf2.align              df2.copy\ndf2.all                df2.count\ndf2.any                df2.combine\ndf2.append             df2.D\ndf2.apply              df2.describe\ndf2.applymap           df2.diff\ndf2.B                  df2.duplicated\n```\n\nAs you can see, the columns `A`, `B`, `C`, and `D` are automatically tab completed. `E` and `F` are there as well; the rest of the attributes have been truncated for brevity.\n\n## Viewing data\n\nSee the [Basics section](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics).\n\nHere is how to view the top and bottom rows of the frame:\n\n```\nIn [13]: df.head()\nOut[13]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\nIn [14]: df.tail(3)\nOut[14]: \n                   A         B         C         D\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n```\n\nDisplay the index, columns:\n\n```\nIn [15]: df.index\nOut[15]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [16]: df.columns\nOut[16]: Index(['A', 'B', 'C', 'D'], dtype='object')\n```\n\n[`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy) gives a NumPy representation of the underlying data. Note that this can be an expensive operation when your [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) has columns with different data types, which comes down to a fundamental difference between pandas and NumPy: **NumPy arrays have one dtype for the entire array, while pandas DataFrames have one dtype per column**. When you call [`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy), pandas will find the NumPy dtype that can hold *all* of the dtypes in the DataFrame. This may end up being `object`, which requires casting every value to a Python object.\n\nFor `df`, our [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) of all floating-point values, [`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy) is fast and doesn’t require copying data.\n\n```\nIn [17]: df.to_numpy()\nOut[17]: \narray([[ 0.4691, -0.2829, -1.5091, -1.1356],\n       [ 1.2121, -0.1732,  0.1192, -1.0442],\n       [-0.8618, -2.1046, -0.4949,  1.0718],\n       [ 0.7216, -0.7068, -1.0396,  0.2719],\n       [-0.425 ,  0.567 ,  0.2762, -1.0874],\n       [-0.6737,  0.1136, -1.4784,  0.525 ]])\n```\n\nFor `df2`, the [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) with multiple dtypes, [`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy) is relatively expensive.\n\n```\nIn [18]: df2.to_numpy()\nOut[18]: \narray([[1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo'],\n       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo']],\n      dtype=object)\n```\n\nNote\n\n[`DataFrame.to_numpy()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy) does *not* include the index or column labels in the output.\n\n[`describe()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe) shows a quick statistic summary of your data:\n\n```\nIn [19]: df.describe()\nOut[19]: \n              A         B         C         D\ncount  6.000000  6.000000  6.000000  6.000000\nmean   0.073711 -0.431125 -0.687758 -0.233103\nstd    0.843157  0.922818  0.779887  0.973118\nmin   -0.861849 -2.104569 -1.509059 -1.135632\n25%   -0.611510 -0.600794 -1.368714 -1.076610\n50%    0.022070 -0.228039 -0.767252 -0.386188\n75%    0.658444  0.041933 -0.034326  0.461706\nmax    1.212112  0.567020  0.276232  1.071804\n```\n\nTransposing your data:\n\n```\nIn [20]: df.T\nOut[20]: \n   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06\nA    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690\nB   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648\nC   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427\nD   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988\n```\n\nSorting by an axis:\n\n```\nIn [21]: df.sort_index(axis=1, ascending=False)\nOut[21]: \n                   D         C         B         A\n2013-01-01 -1.135632 -1.509059 -0.282863  0.469112\n2013-01-02 -1.044236  0.119209 -0.173215  1.212112\n2013-01-03  1.071804 -0.494929 -2.104569 -0.861849\n2013-01-04  0.271860 -1.039575 -0.706771  0.721555\n2013-01-05 -1.087401  0.276232  0.567020 -0.424972\n2013-01-06  0.524988 -1.478427  0.113648 -0.673690\n```\n\nSorting by values:\n\n```\nIn [22]: df.sort_values(by='B')\nOut[22]: \n                   A         B         C         D\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n```\n\n## Selection\n\nNote\n\nWhile standard Python / Numpy expressions for selecting and setting are intuitive and come in handy for interactive work, for production code, we recommend the optimized pandas data access methods, `.at`, `.iat`, `.loc` and `.iloc`.\n\nSee the indexing documentation [Indexing and Selecting Data](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing) and [MultiIndex / Advanced Indexing](https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced).\n\n### Getting\n\nSelecting a single column, which yields a [`Series`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series), equivalent to `df.A`:\n\n```\nIn [23]: df['A']\nOut[23]: \n2013-01-01    0.469112\n2013-01-02    1.212112\n2013-01-03   -0.861849\n2013-01-04    0.721555\n2013-01-05   -0.424972\n2013-01-06   -0.673690\nFreq: D, Name: A, dtype: float64\n```\n\nSelecting via `[]`, which slices the rows.\n\n```\nIn [24]: df[0:3]\nOut[24]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n\nIn [25]: df['20130102':'20130104']\nOut[25]: \n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\n### Selection by label\n\nSee more in [Selection by Label](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-label).\n\nFor getting a cross section using a label:\n\n```\nIn [26]: df.loc[dates[0]]\nOut[26]: \nA    0.469112\nB   -0.282863\nC   -1.509059\nD   -1.135632\nName: 2013-01-01 00:00:00, dtype: float64\n```\n\nSelecting on a multi-axis by label:\n\n```\nIn [27]: df.loc[:, ['A', 'B']]\nOut[27]: \n                   A         B\n2013-01-01  0.469112 -0.282863\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n2013-01-06 -0.673690  0.113648\n```\n\nShowing label slicing, both endpoints are *included*:\n\n```\nIn [28]: df.loc['20130102':'20130104', ['A', 'B']]\nOut[28]: \n                   A         B\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n```\n\nReduction in the dimensions of the returned object:\n\n```\nIn [29]: df.loc['20130102', ['A', 'B']]\nOut[29]: \nA    1.212112\nB   -0.173215\nName: 2013-01-02 00:00:00, dtype: float64\n```\n\nFor getting a scalar value:\n\n```\nIn [30]: df.loc[dates[0], 'A']\nOut[30]: 0.4691122999071863\n```\n\nFor getting fast access to a scalar (equivalent to the prior method):\n\n```\nIn [31]: df.at[dates[0], 'A']\nOut[31]: 0.4691122999071863\n```\n\n### Selection by position\n\nSee more in [Selection by Position](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-integer).\n\nSelect via the position of the passed integers:\n\n```\nIn [32]: df.iloc[3]\nOut[32]: \nA    0.721555\nB   -0.706771\nC   -1.039575\nD    0.271860\nName: 2013-01-04 00:00:00, dtype: float64\n```\n\nBy integer slices, acting similar to numpy/python:\n\n```\nIn [33]: df.iloc[3:5, 0:2]\nOut[33]: \n                   A         B\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n```\n\nBy lists of integer position locations, similar to the numpy/python style:\n\n```\nIn [34]: df.iloc[[1, 2, 4], [0, 2]]\nOut[34]: \n                   A         C\n2013-01-02  1.212112  0.119209\n2013-01-03 -0.861849 -0.494929\n2013-01-05 -0.424972  0.276232\n```\n\nFor slicing rows explicitly:\n\n```\nIn [35]: df.iloc[1:3, :]\nOut[35]: \n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n```\n\nFor slicing columns explicitly:\n\n```\nIn [36]: df.iloc[:, 1:3]\nOut[36]: \n                   B         C\n2013-01-01 -0.282863 -1.509059\n2013-01-02 -0.173215  0.119209\n2013-01-03 -2.104569 -0.494929\n2013-01-04 -0.706771 -1.039575\n2013-01-05  0.567020  0.276232\n2013-01-06  0.113648 -1.478427\n```\n\nFor getting a value explicitly:\n\n```\nIn [37]: df.iloc[1, 1]\nOut[37]: -0.17321464905330858\n```\n\nFor getting fast access to a scalar (equivalent to the prior method):\n\n```\nIn [38]: df.iat[1, 1]\nOut[38]: -0.17321464905330858\n```\n\n### Boolean indexing\n\nUsing a single column’s values to select data.\n\n```\nIn [39]: df[df['A'] > 0]\nOut[39]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\nSelecting values from a DataFrame where a boolean condition is met.\n\n```\nIn [40]: df[df > 0]\nOut[40]: \n                   A         B         C         D\n2013-01-01  0.469112       NaN       NaN       NaN\n2013-01-02  1.212112       NaN  0.119209       NaN\n2013-01-03       NaN       NaN       NaN  1.071804\n2013-01-04  0.721555       NaN       NaN  0.271860\n2013-01-05       NaN  0.567020  0.276232       NaN\n2013-01-06       NaN  0.113648       NaN  0.524988\n```\n\nUsing the [`isin()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html#pandas.Series.isin) method for filtering:\n\n```\nIn [41]: df2 = df.copy()\n\nIn [42]: df2['E'] = ['one', 'one', 'two', 'three', 'four', 'three']\n\nIn [43]: df2\nOut[43]: \n                   A         B         C         D      E\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three\n\nIn [44]: df2[df2['E'].isin(['two', 'four'])]\nOut[44]: \n                   A         B         C         D     E\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four\n```\n\n### Setting\n\nSetting a new column automatically aligns the data by the indexes.\n\n```\nIn [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range('20130102', periods=6))\n\nIn [46]: s1\nOut[46]: \n2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64\n\nIn [47]: df['F'] = s1\n```\n\nSetting values by label:\n\n```\nIn [48]: df.at[dates[0], 'A'] = 0\n```\n\nSetting values by position:\n\n```\nIn [49]: df.iat[0, 1] = 0\n```\n\nSetting by assigning with a NumPy array:\n\n```\nIn [50]: df.loc[:, 'D'] = np.array([5] * len(df))\n```\n\nThe result of the prior setting operations.\n\n```\nIn [51]: df\nOut[51]: \n                   A         B         C  D    F\n2013-01-01  0.000000  0.000000 -1.509059  5  NaN\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0\n2013-01-05 -0.424972  0.567020  0.276232  5  4.0\n2013-01-06 -0.673690  0.113648 -1.478427  5  5.0\n```\n\nA `where` operation with setting.\n\n```\nIn [52]: df2 = df.copy()\n\nIn [53]: df2[df2 > 0] = -df2\n\nIn [54]: df2\nOut[54]: \n                   A         B         C  D    F\n2013-01-01  0.000000  0.000000 -1.509059 -5  NaN\n2013-01-02 -1.212112 -0.173215 -0.119209 -5 -1.0\n2013-01-03 -0.861849 -2.104569 -0.494929 -5 -2.0\n2013-01-04 -0.721555 -0.706771 -1.039575 -5 -3.0\n2013-01-05 -0.424972 -0.567020 -0.276232 -5 -4.0\n2013-01-06 -0.673690 -0.113648 -1.478427 -5 -5.0\n```\n\n## Missing data\n\npandas primarily uses the value `np.nan` to represent missing data. It is by default not included in computations. See the [Missing Data section](https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html#missing-data).\n\nReindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data.\n\n```\nIn [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])\n\nIn [56]: df1.loc[dates[0]:dates[1], 'E'] = 1\n\nIn [57]: df1\nOut[57]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  NaN  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  NaN\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  NaN\n```\n\nTo drop any rows that have missing data.\n\n```\nIn [58]: df1.dropna(how='any')\nOut[58]: \n                   A         B         C  D    F    E\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n```\n\nFilling missing data.\n\n```\nIn [59]: df1.fillna(value=5)\nOut[59]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  5.0  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  5.0\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  5.0\n```\n\nTo get the boolean mask where values are `nan`.\n\n```\nIn [60]: pd.isna(df1)\nOut[60]: \n                A      B      C      D      F      E\n2013-01-01  False  False  False  False   True  False\n2013-01-02  False  False  False  False  False  False\n2013-01-03  False  False  False  False  False   True\n2013-01-04  False  False  False  False  False   True\n```\n\n## Operations\n\nSee the [Basic section on Binary Ops](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-binop).\n\n### Stats\n\nOperations in general *exclude* missing data.\n\nPerforming a descriptive statistic:\n\n```\nIn [61]: df.mean()\nOut[61]: \nA   -0.004474\nB   -0.383981\nC   -0.687758\nD    5.000000\nF    3.000000\ndtype: float64\n```\n\nSame operation on the other axis:\n\n```\nIn [62]: df.mean(1)\nOut[62]: \n2013-01-01    0.872735\n2013-01-02    1.431621\n2013-01-03    0.707731\n2013-01-04    1.395042\n2013-01-05    1.883656\n2013-01-06    1.592306\nFreq: D, dtype: float64\n```\n\nOperating with objects that have different dimensionality and need alignment. In addition, pandas automatically broadcasts along the specified dimension.\n\n```\nIn [63]: s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)\n\nIn [64]: s\nOut[64]: \n2013-01-01    NaN\n2013-01-02    NaN\n2013-01-03    1.0\n2013-01-04    3.0\n2013-01-05    5.0\n2013-01-06    NaN\nFreq: D, dtype: float64\n\nIn [65]: df.sub(s, axis='index')\nOut[65]: \n                   A         B         C    D    F\n2013-01-01       NaN       NaN       NaN  NaN  NaN\n2013-01-02       NaN       NaN       NaN  NaN  NaN\n2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0\n2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0\n2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0\n2013-01-06       NaN       NaN       NaN  NaN  NaN\n```\n\n### Apply\n\nApplying functions to the data:\n\n```\nIn [66]: df.apply(np.cumsum)\nOut[66]: \n                   A         B         C   D     F\n2013-01-01  0.000000  0.000000 -1.509059   5   NaN\n2013-01-02  1.212112 -0.173215 -1.389850  10   1.0\n2013-01-03  0.350263 -2.277784 -1.884779  15   3.0\n2013-01-04  1.071818 -2.984555 -2.924354  20   6.0\n2013-01-05  0.646846 -2.417535 -2.648122  25  10.0\n2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0\n\nIn [67]: df.apply(lambda x: x.max() - x.min())\nOut[67]: \nA    2.073961\nB    2.671590\nC    1.785291\nD    0.000000\nF    4.000000\ndtype: float64\n```\n\n### Histogramming\n\nSee more at [Histogramming and Discretization](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-discretization).\n\n```\nIn [68]: s = pd.Series(np.random.randint(0, 7, size=10))\n\nIn [69]: s\nOut[69]: \n0    4\n1    2\n2    1\n3    2\n4    6\n5    4\n6    4\n7    6\n8    4\n9    4\ndtype: int64\n\nIn [70]: s.value_counts()\nOut[70]: \n4    5\n6    2\n2    2\n1    1\ndtype: int64\n```\n\n### String Methods\n\nSeries is equipped with a set of string processing methods in the str attribute that make it easy to operate on each element of the array, as in the code snippet below. Note that pattern-matching in str generally uses [regular expressions](https://docs.python.org/3/library/re.html) by default (and in some cases always uses them). See more at [Vectorized String Methods](https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html#text-string-methods).\n\n```\nIn [71]: s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])\n\nIn [72]: s.str.lower()\nOut[72]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object\n```\n\n## Merge\n\n### Concat\n\npandas provides various facilities for easily combining together Series and DataFrame objects with various kinds of set logic for the indexes and relational algebra functionality in the case of join / merge-type operations.\n\nSee the [Merging section](https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging).\n\nConcatenating pandas objects together with [`concat()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html#pandas.concat):\n\n```\nIn [73]: df = pd.DataFrame(np.random.randn(10, 4))\n\nIn [74]: df\nOut[74]: \n          0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n\n# break it into pieces\nIn [75]: pieces = [df[:3], df[3:7], df[7:]]\n\nIn [76]: pd.concat(pieces)\nOut[76]: \n          0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n```\n\nNote\n\nAdding a column to a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) is relatively fast. However, adding a row requires a copy, and may be expensive. We recommend passing a pre-built list of records to the [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) constructor instead of building a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame) by iteratively appending records to it. See [Appending to dataframe](https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-concatenation) for more.\n\n### Join\n\nSQL style merges. See the [Database style joining](https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-join) section.\n\n```\nIn [77]: left = pd.DataFrame({'key': ['foo', 'foo'], 'lval': [1, 2]})\n\nIn [78]: right = pd.DataFrame({'key': ['foo', 'foo'], 'rval': [4, 5]})\n\nIn [79]: left\nOut[79]: \n   key  lval\n0  foo     1\n1  foo     2\n\nIn [80]: right\nOut[80]: \n   key  rval\n0  foo     4\n1  foo     5\n\nIn [81]: pd.merge(left, right, on='key')\nOut[81]: \n   key  lval  rval\n0  foo     1     4\n1  foo     1     5\n2  foo     2     4\n3  foo     2     5\n```\n\nAnother example that can be given is:\n\n```\nIn [82]: left = pd.DataFrame({'key': ['foo', 'bar'], 'lval': [1, 2]})\n\nIn [83]: right = pd.DataFrame({'key': ['foo', 'bar'], 'rval': [4, 5]})\n\nIn [84]: left\nOut[84]: \n   key  lval\n0  foo     1\n1  bar     2\n\nIn [85]: right\nOut[85]: \n   key  rval\n0  foo     4\n1  bar     5\n\nIn [86]: pd.merge(left, right, on='key')\nOut[86]: \n   key  lval  rval\n0  foo     1     4\n1  bar     2     5\n```\n\n## Grouping\n\nBy “group by” we are referring to a process involving one or more of the following steps:\n\n> - **Splitting** the data into groups based on some criteria\n> - **Applying** a function to each group independently\n> - **Combining** the results into a data structure\n\nSee the [Grouping section](https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#groupby).\n\n```\nIn [87]: df = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar',\n   ....:                          'foo', 'bar', 'foo', 'foo'],\n   ....:                    'B': ['one', 'one', 'two', 'three',\n   ....:                          'two', 'two', 'one', 'three'],\n   ....:                    'C': np.random.randn(8),\n   ....:                    'D': np.random.randn(8)})\n   ....: \n\nIn [88]: df\nOut[88]: \n     A      B         C         D\n0  foo    one  1.346061 -1.577585\n1  bar    one  1.511763  0.396823\n2  foo    two  1.627081 -0.105381\n3  bar  three -0.990582 -0.532532\n4  foo    two -0.441652  1.453749\n5  bar    two  1.211526  1.208843\n6  foo    one  0.268520 -0.080952\n7  foo  three  0.024580 -0.264610\n```\n\nGrouping and then applying the [`sum()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum) function to the resulting groups.\n\n```\nIn [89]: df.groupby('A').sum()\nOut[89]: \n            C         D\nA                      \nbar  1.732707  1.073134\nfoo  2.824590 -0.574779\n```\n\nGrouping by multiple columns forms a hierarchical index, and again we can apply the [`sum()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum) function.\n\n```\nIn [90]: df.groupby(['A', 'B']).sum()\nOut[90]: \n                  C         D\nA   B                        \nbar one    1.511763  0.396823\n    three -0.990582 -0.532532\n    two    1.211526  1.208843\nfoo one    1.614581 -1.658537\n    three  0.024580 -0.264610\n    two    1.185429  1.348368\n```\n\n## Reshaping\n\nSee the sections on [Hierarchical Indexing](https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced-hierarchical) and [Reshaping](https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-stacking).\n\n### Stack\n\n```\nIn [91]: tuples = list(zip(*[['bar', 'bar', 'baz', 'baz',\n   ....:                      'foo', 'foo', 'qux', 'qux'],\n   ....:                     ['one', 'two', 'one', 'two',\n   ....:                      'one', 'two', 'one', 'two']]))\n   ....: \n\nIn [92]: index = pd.MultiIndex.from_tuples(tuples, names=['first', 'second'])\n\nIn [93]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=['A', 'B'])\n\nIn [94]: df2 = df[:4]\n\nIn [95]: df2\nOut[95]: \n                     A         B\nfirst second                    \nbar   one    -0.727965 -0.589346\n      two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n      two     0.884345  1.591431\n```\n\nThe [`stack()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack) method “compresses” a level in the DataFrame’s columns.\n\n```\nIn [96]: stacked = df2.stack()\n\nIn [97]: stacked\nOut[97]: \nfirst  second   \nbar    one     A   -0.727965\n               B   -0.589346\n       two     A    0.339969\n               B   -0.693205\nbaz    one     A   -0.339355\n               B    0.593616\n       two     A    0.884345\n               B    1.591431\ndtype: float64\n```\n\nWith a “stacked” DataFrame or Series (having a `MultiIndex` as the `index`), the inverse operation of [`stack()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack) is [`unstack()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack), which by default unstacks the **last level**:\n\n```\nIn [98]: stacked.unstack()\nOut[98]: \n                     A         B\nfirst second                    \nbar   one    -0.727965 -0.589346\n      two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n      two     0.884345  1.591431\n\nIn [99]: stacked.unstack(1)\nOut[99]: \nsecond        one       two\nfirst                      \nbar   A -0.727965  0.339969\n      B -0.589346 -0.693205\nbaz   A -0.339355  0.884345\n      B  0.593616  1.591431\n\nIn [100]: stacked.unstack(0)\nOut[100]: \nfirst          bar       baz\nsecond                      \none    A -0.727965 -0.339355\n       B -0.589346  0.593616\ntwo    A  0.339969  0.884345\n       B -0.693205  1.591431\n```\n\n### Pivot tables\n\nSee the section on [Pivot Tables](https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-pivot).\n\n```\nIn [101]: df = pd.DataFrame({'A': ['one', 'one', 'two', 'three'] * 3,\n   .....:                    'B': ['A', 'B', 'C'] * 4,\n   .....:                    'C': ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2,\n   .....:                    'D': np.random.randn(12),\n   .....:                    'E': np.random.randn(12)})\n   .....: \n\nIn [102]: df\nOut[102]: \n        A  B    C         D         E\n0     one  A  foo -1.202872  0.047609\n1     one  B  foo -1.814470 -0.136473\n2     two  C  foo  1.018601 -0.561757\n3   three  A  bar -0.595447 -1.623033\n4     one  B  bar  1.395433  0.029399\n5     one  C  bar -0.392670 -0.542108\n6     two  A  foo  0.007207  0.282696\n7   three  B  foo  1.928123 -0.087302\n8     one  C  foo -0.055224 -1.575170\n9     one  A  bar  2.395985  1.771208\n10    two  B  bar  1.552825  0.816482\n11  three  C  bar  0.166599  1.100230\n```\n\nWe can produce pivot tables from this data very easily:\n\n```\nIn [103]: pd.pivot_table(df, values='D', index=['A', 'B'], columns=['C'])\nOut[103]: \nC             bar       foo\nA     B                    \none   A  2.395985 -1.202872\n      B  1.395433 -1.814470\n      C -0.392670 -0.055224\nthree A -0.595447       NaN\n      B       NaN  1.928123\n      C  0.166599       NaN\ntwo   A       NaN  0.007207\n      B  1.552825       NaN\n      C       NaN  1.018601\n```\n\n## Time series\n\npandas has simple, powerful, and efficient functionality for performing resampling operations during frequency conversion (e.g., converting secondly data into 5-minutely data). This is extremely common in, but not limited to, financial applications. See the [Time Series section](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries).\n\n```\nIn [104]: rng = pd.date_range('1/1/2012', periods=100, freq='S')\n\nIn [105]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)\n\nIn [106]: ts.resample('5Min').sum()\nOut[106]: \n2012-01-01    24182\nFreq: 5T, dtype: int64\n```\n\nTime zone representation:\n\n```\nIn [107]: rng = pd.date_range('3/6/2012 00:00', periods=5, freq='D')\n\nIn [108]: ts = pd.Series(np.random.randn(len(rng)), rng)\n\nIn [109]: ts\nOut[109]: \n2012-03-06    1.857704\n2012-03-07   -1.193545\n2012-03-08    0.677510\n2012-03-09   -0.153931\n2012-03-10    0.520091\nFreq: D, dtype: float64\n\nIn [110]: ts_utc = ts.tz_localize('UTC')\n\nIn [111]: ts_utc\nOut[111]: \n2012-03-06 00:00:00+00:00    1.857704\n2012-03-07 00:00:00+00:00   -1.193545\n2012-03-08 00:00:00+00:00    0.677510\n2012-03-09 00:00:00+00:00   -0.153931\n2012-03-10 00:00:00+00:00    0.520091\nFreq: D, dtype: float64\n```\n\nConverting to another time zone:\n\n```\nIn [112]: ts_utc.tz_convert('US/Eastern')\nOut[112]: \n2012-03-05 19:00:00-05:00    1.857704\n2012-03-06 19:00:00-05:00   -1.193545\n2012-03-07 19:00:00-05:00    0.677510\n2012-03-08 19:00:00-05:00   -0.153931\n2012-03-09 19:00:00-05:00    0.520091\nFreq: D, dtype: float64\n```\n\nConverting between time span representations:\n\n```\nIn [113]: rng = pd.date_range('1/1/2012', periods=5, freq='M')\n\nIn [114]: ts = pd.Series(np.random.randn(len(rng)), index=rng)\n\nIn [115]: ts\nOut[115]: \n2012-01-31   -1.475051\n2012-02-29    0.722570\n2012-03-31   -0.322646\n2012-04-30   -1.601631\n2012-05-31    0.778033\nFreq: M, dtype: float64\n\nIn [116]: ps = ts.to_period()\n\nIn [117]: ps\nOut[117]: \n2012-01   -1.475051\n2012-02    0.722570\n2012-03   -0.322646\n2012-04   -1.601631\n2012-05    0.778033\nFreq: M, dtype: float64\n\nIn [118]: ps.to_timestamp()\nOut[118]: \n2012-01-01   -1.475051\n2012-02-01    0.722570\n2012-03-01   -0.322646\n2012-04-01   -1.601631\n2012-05-01    0.778033\nFreq: MS, dtype: float64\n```\n\nConverting between period and timestamp enables some convenient arithmetic functions to be used. In the following example, we convert a quarterly frequency with year ending in November to 9am of the end of the month following the quarter end:\n\n```\nIn [119]: prng = pd.period_range('1990Q1', '2000Q4', freq='Q-NOV')\n\nIn [120]: ts = pd.Series(np.random.randn(len(prng)), prng)\n\nIn [121]: ts.index = (prng.asfreq('M', 'e') + 1).asfreq('H', 's') + 9\n\nIn [122]: ts.head()\nOut[122]: \n1990-03-01 09:00   -0.289342\n1990-06-01 09:00    0.233141\n1990-09-01 09:00   -0.223540\n1990-12-01 09:00    0.542054\n1991-03-01 09:00   -0.688585\nFreq: H, dtype: float64\n```\n\n## Categoricals\n\npandas can include categorical data in a [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame). For full docs, see the [categorical introduction](https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#categorical) and the [API documentation](https://pandas.pydata.org/pandas-docs/stable/reference/arrays.html#api-arrays-categorical).\n\n```\nIn [123]: df = pd.DataFrame({\"id\": [1, 2, 3, 4, 5, 6],\n   .....:                    \"raw_grade\": ['a', 'b', 'b', 'a', 'a', 'e']})\n   .....: \n```\n\nConvert the raw grades to a categorical data type.\n\n```\nIn [124]: df[\"grade\"] = df[\"raw_grade\"].astype(\"category\")\n\nIn [125]: df[\"grade\"]\nOut[125]: \n0    a\n1    b\n2    b\n3    a\n4    a\n5    e\nName: grade, dtype: category\nCategories (3, object): ['a', 'b', 'e']\n```\n\nRename the categories to more meaningful names (assigning to [`Series.cat.categories()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.categories.html#pandas.Series.cat.categories) is in place!).\n\n```\nIn [126]: df[\"grade\"].cat.categories = [\"very good\", \"good\", \"very bad\"]\n```\n\nReorder the categories and simultaneously add the missing categories (methods under [`Series.cat()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.html#pandas.Series.cat) return a new [`Series`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series) by default).\n\n```\nIn [127]: df[\"grade\"] = df[\"grade\"].cat.set_categories([\"very bad\", \"bad\", \"medium\",\n   .....:                                               \"good\", \"very good\"])\n   .....: \n\nIn [128]: df[\"grade\"]\nOut[128]: \n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5     very bad\nName: grade, dtype: category\nCategories (5, object): ['very bad', 'bad', 'medium', 'good', 'very good']\n```\n\nSorting is per order in the categories, not lexical order.\n\n```\nIn [129]: df.sort_values(by=\"grade\")\nOut[129]: \n   id raw_grade      grade\n5   6         e   very bad\n1   2         b       good\n2   3         b       good\n0   1         a  very good\n3   4         a  very good\n4   5         a  very good\n```\n\nGrouping by a categorical column also shows empty categories.\n\n```\nIn [130]: df.groupby(\"grade\").size()\nOut[130]: \ngrade\nvery bad     1\nbad          0\nmedium       0\ngood         2\nvery good    3\ndtype: int64\n```\n\n## Plotting\n\nSee the [Plotting](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization) docs.\n\nWe use the standard convention for referencing the matplotlib API:\n\n```\nIn [131]: import matplotlib.pyplot as plt\n\nIn [132]: plt.close('all')\nIn [133]: ts = pd.Series(np.random.randn(1000),\n   .....:                index=pd.date_range('1/1/2000', periods=1000))\n   .....: \n\nIn [134]: ts = ts.cumsum()\n\nIn [135]: ts.plot()\nOut[135]: <AxesSubplot:>\n```\n\n![../_images/series_plot_basic.png](https://pandas.pydata.org/pandas-docs/stable/_images/series_plot_basic.png)\n\nOn a DataFrame, the [`plot()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot) method is a convenience to plot all of the columns with labels:\n\n```\nIn [136]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index,\n   .....:                   columns=['A', 'B', 'C', 'D'])\n   .....: \n\nIn [137]: df = df.cumsum()\n\nIn [138]: plt.figure()\nOut[138]: <Figure size 640x480 with 0 Axes>\n\nIn [139]: df.plot()\nOut[139]: <AxesSubplot:>\n\nIn [140]: plt.legend(loc='best')\nOut[140]: <matplotlib.legend.Legend at 0x7fbfb29f0670>\n```\n\n![../_images/frame_plot_basic.png](https://pandas.pydata.org/pandas-docs/stable/_images/frame_plot_basic.png)\n\n## Getting data in/out\n\n### CSV\n\n[Writing to a csv file.](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-store-in-csv)\n\n```\nIn [141]: df.to_csv('foo.csv')\n```\n\n[Reading from a csv file.](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-csv-table)\n\n```\nIn [142]: pd.read_csv('foo.csv')\nOut[142]: \n     Unnamed: 0          A          B          C          D\n0    2000-01-01   0.350262   0.843315   1.798556   0.782234\n1    2000-01-02  -0.586873   0.034907   1.923792  -0.562651\n2    2000-01-03  -1.245477  -0.963406   2.269575  -1.612566\n3    2000-01-04  -0.252830  -0.498066   3.176886  -1.275581\n4    2000-01-05  -1.044057   0.118042   2.768571   0.386039\n..          ...        ...        ...        ...        ...\n995  2002-09-22 -48.017654  31.474551  69.146374 -47.541670\n996  2002-09-23 -47.207912  32.627390  68.505254 -48.828331\n997  2002-09-24 -48.907133  31.990402  67.310924 -49.391051\n998  2002-09-25 -50.146062  33.716770  67.717434 -49.037577\n999  2002-09-26 -49.724318  33.479952  68.108014 -48.822030\n\n[1000 rows x 5 columns]\n```\n\n### HDF5\n\nReading and writing to [HDFStores](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5).\n\nWriting to a HDF5 Store.\n\n```\nIn [143]: df.to_hdf('foo.h5', 'df')\n```\n\nReading from a HDF5 Store.\n\n```\nIn [144]: pd.read_hdf('foo.h5', 'df')\nOut[144]: \n                    A          B          C          D\n2000-01-01   0.350262   0.843315   1.798556   0.782234\n2000-01-02  -0.586873   0.034907   1.923792  -0.562651\n2000-01-03  -1.245477  -0.963406   2.269575  -1.612566\n2000-01-04  -0.252830  -0.498066   3.176886  -1.275581\n2000-01-05  -1.044057   0.118042   2.768571   0.386039\n...               ...        ...        ...        ...\n2002-09-22 -48.017654  31.474551  69.146374 -47.541670\n2002-09-23 -47.207912  32.627390  68.505254 -48.828331\n2002-09-24 -48.907133  31.990402  67.310924 -49.391051\n2002-09-25 -50.146062  33.716770  67.717434 -49.037577\n2002-09-26 -49.724318  33.479952  68.108014 -48.822030\n\n[1000 rows x 4 columns]\n```\n\n### Excel\n\nReading and writing to [MS Excel](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel).\n\nWriting to an excel file.\n\n```\nIn [145]: df.to_excel('foo.xlsx', sheet_name='Sheet1')\n```\n\nReading from an excel file.\n\n```\nIn [146]: pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA'])\nOut[146]: \n    Unnamed: 0          A          B          C          D\n0   2000-01-01   0.350262   0.843315   1.798556   0.782234\n1   2000-01-02  -0.586873   0.034907   1.923792  -0.562651\n2   2000-01-03  -1.245477  -0.963406   2.269575  -1.612566\n3   2000-01-04  -0.252830  -0.498066   3.176886  -1.275581\n4   2000-01-05  -1.044057   0.118042   2.768571   0.386039\n..         ...        ...        ...        ...        ...\n995 2002-09-22 -48.017654  31.474551  69.146374 -47.541670\n996 2002-09-23 -47.207912  32.627390  68.505254 -48.828331\n997 2002-09-24 -48.907133  31.990402  67.310924 -49.391051\n998 2002-09-25 -50.146062  33.716770  67.717434 -49.037577\n999 2002-09-26 -49.724318  33.479952  68.108014 -48.822030\n\n[1000 rows x 5 columns]\n```\n\n## Gotchas\n\nIf you are attempting to perform an operation you might see an exception like:\n\n```\n>>> if pd.Series([False, True, False]):\n...     print(\"I was true\")\nTraceback\n    ...\nValueError: The truth value of an array is ambiguous. Use a.empty, a.any() or a.all().\n```","slug":"0_代码相关/pandas常用命令","published":1,"updated":"2022-03-01T03:51:59.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4x003k8s32hed3f7ie","content":"<p>10 minutes to pandas</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"10-minutes-to-pandas\"><a href=\"#10-minutes-to-pandas\" class=\"headerlink\" title=\"10 minutes to pandas\"></a>10 minutes to pandas</h1><p>This is a short introduction to pandas, geared mainly for new users. You can see more complex recipes in the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html#cookbook\">Cookbook</a>.</p>\n<p>Customarily, we import as follows:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]: import pandas as pd</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-creation\"><a href=\"#Object-creation\" class=\"headerlink\" title=\"Object creation\"></a>Object creation</h2><p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dsintro\">Data Structure Intro section</a>.</p>\n<p>Creating a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series\"><code>Series</code></a> by passing a list of values, letting pandas create a default integer index:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: s</span><br><span class=\"line\">Out[4]: </span><br><span class=\"line\">0    1.0</span><br><span class=\"line\">1    3.0</span><br><span class=\"line\">2    5.0</span><br><span class=\"line\">3    NaN</span><br><span class=\"line\">4    6.0</span><br><span class=\"line\">5    8.0</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Creating a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> by passing a NumPy array, with a datetime index and labeled columns:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [5]: dates = pd.date_range(&#x27;20130101&#x27;, periods=6)</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: dates</span><br><span class=\"line\">Out[6]: </span><br><span class=\"line\">DatetimeIndex([&#x27;2013-01-01&#x27;, &#x27;2013-01-02&#x27;, &#x27;2013-01-03&#x27;, &#x27;2013-01-04&#x27;,</span><br><span class=\"line\">               &#x27;2013-01-05&#x27;, &#x27;2013-01-06&#x27;],</span><br><span class=\"line\">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(&#x27;ABCD&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: df</span><br><span class=\"line\">Out[8]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br></pre></td></tr></table></figure>\n<p>Creating a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> by passing a dict of objects that can be converted to series-like.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [9]: df2 = pd.DataFrame(&#123;&#x27;A&#x27;: 1.,</span><br><span class=\"line\">   ...:                     &#x27;B&#x27;: pd.Timestamp(&#x27;20130102&#x27;),</span><br><span class=\"line\">   ...:                     &#x27;C&#x27;: pd.Series(1, index=list(range(4)), dtype=&#x27;float32&#x27;),</span><br><span class=\"line\">   ...:                     &#x27;D&#x27;: np.array([3] * 4, dtype=&#x27;int32&#x27;),</span><br><span class=\"line\">   ...:                     &#x27;E&#x27;: pd.Categorical([&quot;test&quot;, &quot;train&quot;, &quot;test&quot;, &quot;train&quot;]),</span><br><span class=\"line\">   ...:                     &#x27;F&#x27;: &#x27;foo&#x27;&#125;)</span><br><span class=\"line\">   ...: </span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: df2</span><br><span class=\"line\">Out[10]: </span><br><span class=\"line\">     A          B    C  D      E    F</span><br><span class=\"line\">0  1.0 2013-01-02  1.0  3   test  foo</span><br><span class=\"line\">1  1.0 2013-01-02  1.0  3  train  foo</span><br><span class=\"line\">2  1.0 2013-01-02  1.0  3   test  foo</span><br><span class=\"line\">3  1.0 2013-01-02  1.0  3  train  foo</span><br></pre></td></tr></table></figure>\n<p>The columns of the resulting <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> have different <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-dtypes\">dtypes</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [11]: df2.dtypes</span><br><span class=\"line\">Out[11]: </span><br><span class=\"line\">A           float64</span><br><span class=\"line\">B    datetime64[ns]</span><br><span class=\"line\">C           float32</span><br><span class=\"line\">D             int32</span><br><span class=\"line\">E          category</span><br><span class=\"line\">F            object</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure>\n<p>If you’re using IPython, tab completion for column names (as well as public attributes) is automatically enabled. Here’s a subset of the attributes that will be completed:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [12]: df2.&lt;TAB&gt;  # noqa: E225, E999</span><br><span class=\"line\">df2.A                  df2.bool</span><br><span class=\"line\">df2.abs                df2.boxplot</span><br><span class=\"line\">df2.add                df2.C</span><br><span class=\"line\">df2.add_prefix         df2.clip</span><br><span class=\"line\">df2.add_suffix         df2.columns</span><br><span class=\"line\">df2.align              df2.copy</span><br><span class=\"line\">df2.all                df2.count</span><br><span class=\"line\">df2.any                df2.combine</span><br><span class=\"line\">df2.append             df2.D</span><br><span class=\"line\">df2.apply              df2.describe</span><br><span class=\"line\">df2.applymap           df2.diff</span><br><span class=\"line\">df2.B                  df2.duplicated</span><br></pre></td></tr></table></figure>\n<p>As you can see, the columns <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code> are automatically tab completed. <code>E</code> and <code>F</code> are there as well; the rest of the attributes have been truncated for brevity.</p>\n<h2 id=\"Viewing-data\"><a href=\"#Viewing-data\" class=\"headerlink\" title=\"Viewing data\"></a>Viewing data</h2><p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics\">Basics section</a>.</p>\n<p>Here is how to view the top and bottom rows of the frame:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [13]: df.head()</span><br><span class=\"line\">Out[13]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class=\"line\"></span><br><span class=\"line\">In [14]: df.tail(3)</span><br><span class=\"line\">Out[14]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br></pre></td></tr></table></figure>\n<p>Display the index, columns:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [15]: df.index</span><br><span class=\"line\">Out[15]: </span><br><span class=\"line\">DatetimeIndex([&#x27;2013-01-01&#x27;, &#x27;2013-01-02&#x27;, &#x27;2013-01-03&#x27;, &#x27;2013-01-04&#x27;,</span><br><span class=\"line\">               &#x27;2013-01-05&#x27;, &#x27;2013-01-06&#x27;],</span><br><span class=\"line\">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: df.columns</span><br><span class=\"line\">Out[16]: Index([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;], dtype=&#x27;object&#x27;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a> gives a NumPy representation of the underlying data. Note that this can be an expensive operation when your <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> has columns with different data types, which comes down to a fundamental difference between pandas and NumPy: <strong>NumPy arrays have one dtype for the entire array, while pandas DataFrames have one dtype per column</strong>. When you call <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a>, pandas will find the NumPy dtype that can hold <em>all</em> of the dtypes in the DataFrame. This may end up being <code>object</code>, which requires casting every value to a Python object.</p>\n<p>For <code>df</code>, our <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> of all floating-point values, <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a> is fast and doesn’t require copying data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [17]: df.to_numpy()</span><br><span class=\"line\">Out[17]: </span><br><span class=\"line\">array([[ 0.4691, -0.2829, -1.5091, -1.1356],</span><br><span class=\"line\">       [ 1.2121, -0.1732,  0.1192, -1.0442],</span><br><span class=\"line\">       [-0.8618, -2.1046, -0.4949,  1.0718],</span><br><span class=\"line\">       [ 0.7216, -0.7068, -1.0396,  0.2719],</span><br><span class=\"line\">       [-0.425 ,  0.567 ,  0.2762, -1.0874],</span><br><span class=\"line\">       [-0.6737,  0.1136, -1.4784,  0.525 ]])</span><br></pre></td></tr></table></figure>\n<p>For <code>df2</code>, the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> with multiple dtypes, <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a> is relatively expensive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [18]: df2.to_numpy()</span><br><span class=\"line\">Out[18]: </span><br><span class=\"line\">array([[1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;test&#x27;, &#x27;foo&#x27;],</span><br><span class=\"line\">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;train&#x27;, &#x27;foo&#x27;],</span><br><span class=\"line\">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;test&#x27;, &#x27;foo&#x27;],</span><br><span class=\"line\">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;train&#x27;, &#x27;foo&#x27;]],</span><br><span class=\"line\">      dtype=object)</span><br></pre></td></tr></table></figure>\n<p>Note</p>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a> does <em>not</em> include the index or column labels in the output.</p>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe\"><code>describe()</code></a> shows a quick statistic summary of your data:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [19]: df.describe()</span><br><span class=\"line\">Out[19]: </span><br><span class=\"line\">              A         B         C         D</span><br><span class=\"line\">count  6.000000  6.000000  6.000000  6.000000</span><br><span class=\"line\">mean   0.073711 -0.431125 -0.687758 -0.233103</span><br><span class=\"line\">std    0.843157  0.922818  0.779887  0.973118</span><br><span class=\"line\">min   -0.861849 -2.104569 -1.509059 -1.135632</span><br><span class=\"line\">25%   -0.611510 -0.600794 -1.368714 -1.076610</span><br><span class=\"line\">50%    0.022070 -0.228039 -0.767252 -0.386188</span><br><span class=\"line\">75%    0.658444  0.041933 -0.034326  0.461706</span><br><span class=\"line\">max    1.212112  0.567020  0.276232  1.071804</span><br></pre></td></tr></table></figure>\n<p>Transposing your data:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [20]: df.T</span><br><span class=\"line\">Out[20]: </span><br><span class=\"line\">   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06</span><br><span class=\"line\">A    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690</span><br><span class=\"line\">B   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648</span><br><span class=\"line\">C   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427</span><br><span class=\"line\">D   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988</span><br></pre></td></tr></table></figure>\n<p>Sorting by an axis:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [21]: df.sort_index(axis=1, ascending=False)</span><br><span class=\"line\">Out[21]: </span><br><span class=\"line\">                   D         C         B         A</span><br><span class=\"line\">2013-01-01 -1.135632 -1.509059 -0.282863  0.469112</span><br><span class=\"line\">2013-01-02 -1.044236  0.119209 -0.173215  1.212112</span><br><span class=\"line\">2013-01-03  1.071804 -0.494929 -2.104569 -0.861849</span><br><span class=\"line\">2013-01-04  0.271860 -1.039575 -0.706771  0.721555</span><br><span class=\"line\">2013-01-05 -1.087401  0.276232  0.567020 -0.424972</span><br><span class=\"line\">2013-01-06  0.524988 -1.478427  0.113648 -0.673690</span><br></pre></td></tr></table></figure>\n<p>Sorting by values:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [22]: df.sort_values(by=&#x27;B&#x27;)</span><br><span class=\"line\">Out[22]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br></pre></td></tr></table></figure>\n<h2 id=\"Selection\"><a href=\"#Selection\" class=\"headerlink\" title=\"Selection\"></a>Selection</h2><p>Note</p>\n<p>While standard Python / Numpy expressions for selecting and setting are intuitive and come in handy for interactive work, for production code, we recommend the optimized pandas data access methods, <code>.at</code>, <code>.iat</code>, <code>.loc</code> and <code>.iloc</code>.</p>\n<p>See the indexing documentation <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing\">Indexing and Selecting Data</a> and <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced\">MultiIndex / Advanced Indexing</a>.</p>\n<h3 id=\"Getting\"><a href=\"#Getting\" class=\"headerlink\" title=\"Getting\"></a>Getting</h3><p>Selecting a single column, which yields a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series\"><code>Series</code></a>, equivalent to <code>df.A</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [23]: df[&#x27;A&#x27;]</span><br><span class=\"line\">Out[23]: </span><br><span class=\"line\">2013-01-01    0.469112</span><br><span class=\"line\">2013-01-02    1.212112</span><br><span class=\"line\">2013-01-03   -0.861849</span><br><span class=\"line\">2013-01-04    0.721555</span><br><span class=\"line\">2013-01-05   -0.424972</span><br><span class=\"line\">2013-01-06   -0.673690</span><br><span class=\"line\">Freq: D, Name: A, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Selecting via <code>[]</code>, which slices the rows.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [24]: df[0:3]</span><br><span class=\"line\">Out[24]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\"></span><br><span class=\"line\">In [25]: df[&#x27;20130102&#x27;:&#x27;20130104&#x27;]</span><br><span class=\"line\">Out[25]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br></pre></td></tr></table></figure>\n<h3 id=\"Selection-by-label\"><a href=\"#Selection-by-label\" class=\"headerlink\" title=\"Selection by label\"></a>Selection by label</h3><p>See more in <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-label\">Selection by Label</a>.</p>\n<p>For getting a cross section using a label:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [26]: df.loc[dates[0]]</span><br><span class=\"line\">Out[26]: </span><br><span class=\"line\">A    0.469112</span><br><span class=\"line\">B   -0.282863</span><br><span class=\"line\">C   -1.509059</span><br><span class=\"line\">D   -1.135632</span><br><span class=\"line\">Name: 2013-01-01 00:00:00, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Selecting on a multi-axis by label:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [27]: df.loc[:, [&#x27;A&#x27;, &#x27;B&#x27;]]</span><br><span class=\"line\">Out[27]: </span><br><span class=\"line\">                   A         B</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648</span><br></pre></td></tr></table></figure>\n<p>Showing label slicing, both endpoints are <em>included</em>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [28]: df.loc[&#x27;20130102&#x27;:&#x27;20130104&#x27;, [&#x27;A&#x27;, &#x27;B&#x27;]]</span><br><span class=\"line\">Out[28]: </span><br><span class=\"line\">                   A         B</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771</span><br></pre></td></tr></table></figure>\n<p>Reduction in the dimensions of the returned object:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [29]: df.loc[&#x27;20130102&#x27;, [&#x27;A&#x27;, &#x27;B&#x27;]]</span><br><span class=\"line\">Out[29]: </span><br><span class=\"line\">A    1.212112</span><br><span class=\"line\">B   -0.173215</span><br><span class=\"line\">Name: 2013-01-02 00:00:00, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>For getting a scalar value:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [30]: df.loc[dates[0], &#x27;A&#x27;]</span><br><span class=\"line\">Out[30]: 0.4691122999071863</span><br></pre></td></tr></table></figure>\n<p>For getting fast access to a scalar (equivalent to the prior method):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [31]: df.at[dates[0], &#x27;A&#x27;]</span><br><span class=\"line\">Out[31]: 0.4691122999071863</span><br></pre></td></tr></table></figure>\n<h3 id=\"Selection-by-position\"><a href=\"#Selection-by-position\" class=\"headerlink\" title=\"Selection by position\"></a>Selection by position</h3><p>See more in <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-integer\">Selection by Position</a>.</p>\n<p>Select via the position of the passed integers:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [32]: df.iloc[3]</span><br><span class=\"line\">Out[32]: </span><br><span class=\"line\">A    0.721555</span><br><span class=\"line\">B   -0.706771</span><br><span class=\"line\">C   -1.039575</span><br><span class=\"line\">D    0.271860</span><br><span class=\"line\">Name: 2013-01-04 00:00:00, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>By integer slices, acting similar to numpy/python:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [33]: df.iloc[3:5, 0:2]</span><br><span class=\"line\">Out[33]: </span><br><span class=\"line\">                   A         B</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020</span><br></pre></td></tr></table></figure>\n<p>By lists of integer position locations, similar to the numpy/python style:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [34]: df.iloc[[1, 2, 4], [0, 2]]</span><br><span class=\"line\">Out[34]: </span><br><span class=\"line\">                   A         C</span><br><span class=\"line\">2013-01-02  1.212112  0.119209</span><br><span class=\"line\">2013-01-03 -0.861849 -0.494929</span><br><span class=\"line\">2013-01-05 -0.424972  0.276232</span><br></pre></td></tr></table></figure>\n<p>For slicing rows explicitly:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [35]: df.iloc[1:3, :]</span><br><span class=\"line\">Out[35]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br></pre></td></tr></table></figure>\n<p>For slicing columns explicitly:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [36]: df.iloc[:, 1:3]</span><br><span class=\"line\">Out[36]: </span><br><span class=\"line\">                   B         C</span><br><span class=\"line\">2013-01-01 -0.282863 -1.509059</span><br><span class=\"line\">2013-01-02 -0.173215  0.119209</span><br><span class=\"line\">2013-01-03 -2.104569 -0.494929</span><br><span class=\"line\">2013-01-04 -0.706771 -1.039575</span><br><span class=\"line\">2013-01-05  0.567020  0.276232</span><br><span class=\"line\">2013-01-06  0.113648 -1.478427</span><br></pre></td></tr></table></figure>\n<p>For getting a value explicitly:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [37]: df.iloc[1, 1]</span><br><span class=\"line\">Out[37]: -0.17321464905330858</span><br></pre></td></tr></table></figure>\n<p>For getting fast access to a scalar (equivalent to the prior method):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [38]: df.iat[1, 1]</span><br><span class=\"line\">Out[38]: -0.17321464905330858</span><br></pre></td></tr></table></figure>\n<h3 id=\"Boolean-indexing\"><a href=\"#Boolean-indexing\" class=\"headerlink\" title=\"Boolean indexing\"></a>Boolean indexing</h3><p>Using a single column’s values to select data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [39]: df[df[&#x27;A&#x27;] &gt; 0]</span><br><span class=\"line\">Out[39]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br></pre></td></tr></table></figure>\n<p>Selecting values from a DataFrame where a boolean condition is met.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [40]: df[df &gt; 0]</span><br><span class=\"line\">Out[40]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112       NaN       NaN       NaN</span><br><span class=\"line\">2013-01-02  1.212112       NaN  0.119209       NaN</span><br><span class=\"line\">2013-01-03       NaN       NaN       NaN  1.071804</span><br><span class=\"line\">2013-01-04  0.721555       NaN       NaN  0.271860</span><br><span class=\"line\">2013-01-05       NaN  0.567020  0.276232       NaN</span><br><span class=\"line\">2013-01-06       NaN  0.113648       NaN  0.524988</span><br></pre></td></tr></table></figure>\n<p>Using the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html#pandas.Series.isin\"><code>isin()</code></a> method for filtering:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [41]: df2 = df.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">In [42]: df2[&#x27;E&#x27;] = [&#x27;one&#x27;, &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;, &#x27;three&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [43]: df2</span><br><span class=\"line\">Out[43]: </span><br><span class=\"line\">                   A         B         C         D      E</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three</span><br><span class=\"line\"></span><br><span class=\"line\">In [44]: df2[df2[&#x27;E&#x27;].isin([&#x27;two&#x27;, &#x27;four&#x27;])]</span><br><span class=\"line\">Out[44]: </span><br><span class=\"line\">                   A         B         C         D     E</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four</span><br></pre></td></tr></table></figure>\n<h3 id=\"Setting\"><a href=\"#Setting\" class=\"headerlink\" title=\"Setting\"></a>Setting</h3><p>Setting a new column automatically aligns the data by the indexes.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range(&#x27;20130102&#x27;, periods=6))</span><br><span class=\"line\"></span><br><span class=\"line\">In [46]: s1</span><br><span class=\"line\">Out[46]: </span><br><span class=\"line\">2013-01-02    1</span><br><span class=\"line\">2013-01-03    2</span><br><span class=\"line\">2013-01-04    3</span><br><span class=\"line\">2013-01-05    4</span><br><span class=\"line\">2013-01-06    5</span><br><span class=\"line\">2013-01-07    6</span><br><span class=\"line\">Freq: D, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [47]: df[&#x27;F&#x27;] = s1</span><br></pre></td></tr></table></figure>\n<p>Setting values by label:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [48]: df.at[dates[0], &#x27;A&#x27;] = 0</span><br></pre></td></tr></table></figure>\n<p>Setting values by position:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [49]: df.iat[0, 1] = 0</span><br></pre></td></tr></table></figure>\n<p>Setting by assigning with a NumPy array:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [50]: df.loc[:, &#x27;D&#x27;] = np.array([5] * len(df))</span><br></pre></td></tr></table></figure>\n<p>The result of the prior setting operations.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [51]: df</span><br><span class=\"line\">Out[51]: </span><br><span class=\"line\">                   A         B         C  D    F</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059  5  NaN</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209  5  1.0</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  5  3.0</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232  5  4.0</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  5  5.0</span><br></pre></td></tr></table></figure>\n<p>A <code>where</code> operation with setting.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [52]: df2 = df.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">In [53]: df2[df2 &gt; 0] = -df2</span><br><span class=\"line\"></span><br><span class=\"line\">In [54]: df2</span><br><span class=\"line\">Out[54]: </span><br><span class=\"line\">                   A         B         C  D    F</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059 -5  NaN</span><br><span class=\"line\">2013-01-02 -1.212112 -0.173215 -0.119209 -5 -1.0</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929 -5 -2.0</span><br><span class=\"line\">2013-01-04 -0.721555 -0.706771 -1.039575 -5 -3.0</span><br><span class=\"line\">2013-01-05 -0.424972 -0.567020 -0.276232 -5 -4.0</span><br><span class=\"line\">2013-01-06 -0.673690 -0.113648 -1.478427 -5 -5.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"Missing-data\"><a href=\"#Missing-data\" class=\"headerlink\" title=\"Missing data\"></a>Missing data</h2><p>pandas primarily uses the value <code>np.nan</code> to represent missing data. It is by default not included in computations. See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html#missing-data\">Missing Data section</a>.</p>\n<p>Reindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + [&#x27;E&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [56]: df1.loc[dates[0]:dates[1], &#x27;E&#x27;] = 1</span><br><span class=\"line\"></span><br><span class=\"line\">In [57]: df1</span><br><span class=\"line\">Out[57]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059  5  NaN  1.0</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  NaN</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  NaN</span><br></pre></td></tr></table></figure>\n<p>To drop any rows that have missing data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [58]: df1.dropna(how=&#x27;any&#x27;)</span><br><span class=\"line\">Out[58]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0</span><br></pre></td></tr></table></figure>\n<p>Filling missing data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [59]: df1.fillna(value=5)</span><br><span class=\"line\">Out[59]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059  5  5.0  1.0</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  5.0</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  5.0</span><br></pre></td></tr></table></figure>\n<p>To get the boolean mask where values are <code>nan</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [60]: pd.isna(df1)</span><br><span class=\"line\">Out[60]: </span><br><span class=\"line\">                A      B      C      D      F      E</span><br><span class=\"line\">2013-01-01  False  False  False  False   True  False</span><br><span class=\"line\">2013-01-02  False  False  False  False  False  False</span><br><span class=\"line\">2013-01-03  False  False  False  False  False   True</span><br><span class=\"line\">2013-01-04  False  False  False  False  False   True</span><br></pre></td></tr></table></figure>\n<h2 id=\"Operations\"><a href=\"#Operations\" class=\"headerlink\" title=\"Operations\"></a>Operations</h2><p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-binop\">Basic section on Binary Ops</a>.</p>\n<h3 id=\"Stats\"><a href=\"#Stats\" class=\"headerlink\" title=\"Stats\"></a>Stats</h3><p>Operations in general <em>exclude</em> missing data.</p>\n<p>Performing a descriptive statistic:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [61]: df.mean()</span><br><span class=\"line\">Out[61]: </span><br><span class=\"line\">A   -0.004474</span><br><span class=\"line\">B   -0.383981</span><br><span class=\"line\">C   -0.687758</span><br><span class=\"line\">D    5.000000</span><br><span class=\"line\">F    3.000000</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Same operation on the other axis:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [62]: df.mean(1)</span><br><span class=\"line\">Out[62]: </span><br><span class=\"line\">2013-01-01    0.872735</span><br><span class=\"line\">2013-01-02    1.431621</span><br><span class=\"line\">2013-01-03    0.707731</span><br><span class=\"line\">2013-01-04    1.395042</span><br><span class=\"line\">2013-01-05    1.883656</span><br><span class=\"line\">2013-01-06    1.592306</span><br><span class=\"line\">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Operating with objects that have different dimensionality and need alignment. In addition, pandas automatically broadcasts along the specified dimension.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [63]: s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)</span><br><span class=\"line\"></span><br><span class=\"line\">In [64]: s</span><br><span class=\"line\">Out[64]: </span><br><span class=\"line\">2013-01-01    NaN</span><br><span class=\"line\">2013-01-02    NaN</span><br><span class=\"line\">2013-01-03    1.0</span><br><span class=\"line\">2013-01-04    3.0</span><br><span class=\"line\">2013-01-05    5.0</span><br><span class=\"line\">2013-01-06    NaN</span><br><span class=\"line\">Freq: D, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [65]: df.sub(s, axis=&#x27;index&#x27;)</span><br><span class=\"line\">Out[65]: </span><br><span class=\"line\">                   A         B         C    D    F</span><br><span class=\"line\">2013-01-01       NaN       NaN       NaN  NaN  NaN</span><br><span class=\"line\">2013-01-02       NaN       NaN       NaN  NaN  NaN</span><br><span class=\"line\">2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0</span><br><span class=\"line\">2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0</span><br><span class=\"line\">2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0</span><br><span class=\"line\">2013-01-06       NaN       NaN       NaN  NaN  NaN</span><br></pre></td></tr></table></figure>\n<h3 id=\"Apply\"><a href=\"#Apply\" class=\"headerlink\" title=\"Apply\"></a>Apply</h3><p>Applying functions to the data:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [66]: df.apply(np.cumsum)</span><br><span class=\"line\">Out[66]: </span><br><span class=\"line\">                   A         B         C   D     F</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059   5   NaN</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215 -1.389850  10   1.0</span><br><span class=\"line\">2013-01-03  0.350263 -2.277784 -1.884779  15   3.0</span><br><span class=\"line\">2013-01-04  1.071818 -2.984555 -2.924354  20   6.0</span><br><span class=\"line\">2013-01-05  0.646846 -2.417535 -2.648122  25  10.0</span><br><span class=\"line\">2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [67]: df.apply(lambda x: x.max() - x.min())</span><br><span class=\"line\">Out[67]: </span><br><span class=\"line\">A    2.073961</span><br><span class=\"line\">B    2.671590</span><br><span class=\"line\">C    1.785291</span><br><span class=\"line\">D    0.000000</span><br><span class=\"line\">F    4.000000</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<h3 id=\"Histogramming\"><a href=\"#Histogramming\" class=\"headerlink\" title=\"Histogramming\"></a>Histogramming</h3><p>See more at <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-discretization\">Histogramming and Discretization</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [68]: s = pd.Series(np.random.randint(0, 7, size=10))</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: s</span><br><span class=\"line\">Out[69]: </span><br><span class=\"line\">0    4</span><br><span class=\"line\">1    2</span><br><span class=\"line\">2    1</span><br><span class=\"line\">3    2</span><br><span class=\"line\">4    6</span><br><span class=\"line\">5    4</span><br><span class=\"line\">6    4</span><br><span class=\"line\">7    6</span><br><span class=\"line\">8    4</span><br><span class=\"line\">9    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [70]: s.value_counts()</span><br><span class=\"line\">Out[70]: </span><br><span class=\"line\">4    5</span><br><span class=\"line\">6    2</span><br><span class=\"line\">2    2</span><br><span class=\"line\">1    1</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n<h3 id=\"String-Methods\"><a href=\"#String-Methods\" class=\"headerlink\" title=\"String Methods\"></a>String Methods</h3><p>Series is equipped with a set of string processing methods in the str attribute that make it easy to operate on each element of the array, as in the code snippet below. Note that pattern-matching in str generally uses <a href=\"https://docs.python.org/3/library/re.html\">regular expressions</a> by default (and in some cases always uses them). See more at <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html#text-string-methods\">Vectorized String Methods</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [71]: s = pd.Series([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;Aaba&#x27;, &#x27;Baca&#x27;, np.nan, &#x27;CABA&#x27;, &#x27;dog&#x27;, &#x27;cat&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [72]: s.str.lower()</span><br><span class=\"line\">Out[72]: </span><br><span class=\"line\">0       a</span><br><span class=\"line\">1       b</span><br><span class=\"line\">2       c</span><br><span class=\"line\">3    aaba</span><br><span class=\"line\">4    baca</span><br><span class=\"line\">5     NaN</span><br><span class=\"line\">6    caba</span><br><span class=\"line\">7     dog</span><br><span class=\"line\">8     cat</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure>\n<h2 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h2><h3 id=\"Concat\"><a href=\"#Concat\" class=\"headerlink\" title=\"Concat\"></a>Concat</h3><p>pandas provides various facilities for easily combining together Series and DataFrame objects with various kinds of set logic for the indexes and relational algebra functionality in the case of join / merge-type operations.</p>\n<p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging\">Merging section</a>.</p>\n<p>Concatenating pandas objects together with <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html#pandas.concat\"><code>concat()</code></a>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [73]: df = pd.DataFrame(np.random.randn(10, 4))</span><br><span class=\"line\"></span><br><span class=\"line\">In [74]: df</span><br><span class=\"line\">Out[74]: </span><br><span class=\"line\">          0         1         2         3</span><br><span class=\"line\">0 -0.548702  1.467327 -1.015962 -0.483075</span><br><span class=\"line\">1  1.637550 -1.217659 -0.291519 -1.745505</span><br><span class=\"line\">2 -0.263952  0.991460 -0.919069  0.266046</span><br><span class=\"line\">3 -0.709661  1.669052  1.037882 -1.705775</span><br><span class=\"line\">4 -0.919854 -0.042379  1.247642 -0.009920</span><br><span class=\"line\">5  0.290213  0.495767  0.362949  1.548106</span><br><span class=\"line\">6 -1.131345 -0.089329  0.337863 -0.945867</span><br><span class=\"line\">7 -0.932132  1.956030  0.017587 -0.016692</span><br><span class=\"line\">8 -0.575247  0.254161 -1.143704  0.215897</span><br><span class=\"line\">9  1.193555 -0.077118 -0.408530 -0.862495</span><br><span class=\"line\"></span><br><span class=\"line\"># break it into pieces</span><br><span class=\"line\">In [75]: pieces = [df[:3], df[3:7], df[7:]]</span><br><span class=\"line\"></span><br><span class=\"line\">In [76]: pd.concat(pieces)</span><br><span class=\"line\">Out[76]: </span><br><span class=\"line\">          0         1         2         3</span><br><span class=\"line\">0 -0.548702  1.467327 -1.015962 -0.483075</span><br><span class=\"line\">1  1.637550 -1.217659 -0.291519 -1.745505</span><br><span class=\"line\">2 -0.263952  0.991460 -0.919069  0.266046</span><br><span class=\"line\">3 -0.709661  1.669052  1.037882 -1.705775</span><br><span class=\"line\">4 -0.919854 -0.042379  1.247642 -0.009920</span><br><span class=\"line\">5  0.290213  0.495767  0.362949  1.548106</span><br><span class=\"line\">6 -1.131345 -0.089329  0.337863 -0.945867</span><br><span class=\"line\">7 -0.932132  1.956030  0.017587 -0.016692</span><br><span class=\"line\">8 -0.575247  0.254161 -1.143704  0.215897</span><br><span class=\"line\">9  1.193555 -0.077118 -0.408530 -0.862495</span><br></pre></td></tr></table></figure>\n<p>Note</p>\n<p>Adding a column to a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> is relatively fast. However, adding a row requires a copy, and may be expensive. We recommend passing a pre-built list of records to the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> constructor instead of building a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> by iteratively appending records to it. See <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-concatenation\">Appending to dataframe</a> for more.</p>\n<h3 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h3><p>SQL style merges. See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-join\">Database style joining</a> section.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [77]: left = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;], &#x27;lval&#x27;: [1, 2]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [78]: right = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;], &#x27;rval&#x27;: [4, 5]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [79]: left</span><br><span class=\"line\">Out[79]: </span><br><span class=\"line\">   key  lval</span><br><span class=\"line\">0  foo     1</span><br><span class=\"line\">1  foo     2</span><br><span class=\"line\"></span><br><span class=\"line\">In [80]: right</span><br><span class=\"line\">Out[80]: </span><br><span class=\"line\">   key  rval</span><br><span class=\"line\">0  foo     4</span><br><span class=\"line\">1  foo     5</span><br><span class=\"line\"></span><br><span class=\"line\">In [81]: pd.merge(left, right, on=&#x27;key&#x27;)</span><br><span class=\"line\">Out[81]: </span><br><span class=\"line\">   key  lval  rval</span><br><span class=\"line\">0  foo     1     4</span><br><span class=\"line\">1  foo     1     5</span><br><span class=\"line\">2  foo     2     4</span><br><span class=\"line\">3  foo     2     5</span><br></pre></td></tr></table></figure>\n<p>Another example that can be given is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [82]: left = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;], &#x27;lval&#x27;: [1, 2]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: right = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;], &#x27;rval&#x27;: [4, 5]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: left</span><br><span class=\"line\">Out[84]: </span><br><span class=\"line\">   key  lval</span><br><span class=\"line\">0  foo     1</span><br><span class=\"line\">1  bar     2</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: right</span><br><span class=\"line\">Out[85]: </span><br><span class=\"line\">   key  rval</span><br><span class=\"line\">0  foo     4</span><br><span class=\"line\">1  bar     5</span><br><span class=\"line\"></span><br><span class=\"line\">In [86]: pd.merge(left, right, on=&#x27;key&#x27;)</span><br><span class=\"line\">Out[86]: </span><br><span class=\"line\">   key  lval  rval</span><br><span class=\"line\">0  foo     1     4</span><br><span class=\"line\">1  bar     2     5</span><br></pre></td></tr></table></figure>\n<h2 id=\"Grouping\"><a href=\"#Grouping\" class=\"headerlink\" title=\"Grouping\"></a>Grouping</h2><p>By “group by” we are referring to a process involving one or more of the following steps:</p>\n<blockquote>\n<ul>\n<li><strong>Splitting</strong> the data into groups based on some criteria</li>\n<li><strong>Applying</strong> a function to each group independently</li>\n<li><strong>Combining</strong> the results into a data structure</li>\n</ul>\n</blockquote>\n<p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#groupby\">Grouping section</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [87]: df = pd.DataFrame(&#123;&#x27;A&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;foo&#x27;, &#x27;bar&#x27;,</span><br><span class=\"line\">   ....:                          &#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;foo&#x27;, &#x27;foo&#x27;],</span><br><span class=\"line\">   ....:                    &#x27;B&#x27;: [&#x27;one&#x27;, &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;,</span><br><span class=\"line\">   ....:                          &#x27;two&#x27;, &#x27;two&#x27;, &#x27;one&#x27;, &#x27;three&#x27;],</span><br><span class=\"line\">   ....:                    &#x27;C&#x27;: np.random.randn(8),</span><br><span class=\"line\">   ....:                    &#x27;D&#x27;: np.random.randn(8)&#125;)</span><br><span class=\"line\">   ....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [88]: df</span><br><span class=\"line\">Out[88]: </span><br><span class=\"line\">     A      B         C         D</span><br><span class=\"line\">0  foo    one  1.346061 -1.577585</span><br><span class=\"line\">1  bar    one  1.511763  0.396823</span><br><span class=\"line\">2  foo    two  1.627081 -0.105381</span><br><span class=\"line\">3  bar  three -0.990582 -0.532532</span><br><span class=\"line\">4  foo    two -0.441652  1.453749</span><br><span class=\"line\">5  bar    two  1.211526  1.208843</span><br><span class=\"line\">6  foo    one  0.268520 -0.080952</span><br><span class=\"line\">7  foo  three  0.024580 -0.264610</span><br></pre></td></tr></table></figure>\n<p>Grouping and then applying the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum\"><code>sum()</code></a> function to the resulting groups.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [89]: df.groupby(&#x27;A&#x27;).sum()</span><br><span class=\"line\">Out[89]: </span><br><span class=\"line\">            C         D</span><br><span class=\"line\">A                      </span><br><span class=\"line\">bar  1.732707  1.073134</span><br><span class=\"line\">foo  2.824590 -0.574779</span><br></pre></td></tr></table></figure>\n<p>Grouping by multiple columns forms a hierarchical index, and again we can apply the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum\"><code>sum()</code></a> function.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [90]: df.groupby([&#x27;A&#x27;, &#x27;B&#x27;]).sum()</span><br><span class=\"line\">Out[90]: </span><br><span class=\"line\">                  C         D</span><br><span class=\"line\">A   B                        </span><br><span class=\"line\">bar one    1.511763  0.396823</span><br><span class=\"line\">    three -0.990582 -0.532532</span><br><span class=\"line\">    two    1.211526  1.208843</span><br><span class=\"line\">foo one    1.614581 -1.658537</span><br><span class=\"line\">    three  0.024580 -0.264610</span><br><span class=\"line\">    two    1.185429  1.348368</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reshaping\"><a href=\"#Reshaping\" class=\"headerlink\" title=\"Reshaping\"></a>Reshaping</h2><p>See the sections on <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced-hierarchical\">Hierarchical Indexing</a> and <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-stacking\">Reshaping</a>.</p>\n<h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [91]: tuples = list(zip(*[[&#x27;bar&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;, &#x27;baz&#x27;,</span><br><span class=\"line\">   ....:                      &#x27;foo&#x27;, &#x27;foo&#x27;, &#x27;qux&#x27;, &#x27;qux&#x27;],</span><br><span class=\"line\">   ....:                     [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;one&#x27;, &#x27;two&#x27;,</span><br><span class=\"line\">   ....:                      &#x27;one&#x27;, &#x27;two&#x27;, &#x27;one&#x27;, &#x27;two&#x27;]]))</span><br><span class=\"line\">   ....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [92]: index = pd.MultiIndex.from_tuples(tuples, names=[&#x27;first&#x27;, &#x27;second&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [93]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[&#x27;A&#x27;, &#x27;B&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [94]: df2 = df[:4]</span><br><span class=\"line\"></span><br><span class=\"line\">In [95]: df2</span><br><span class=\"line\">Out[95]: </span><br><span class=\"line\">                     A         B</span><br><span class=\"line\">first second                    </span><br><span class=\"line\">bar   one    -0.727965 -0.589346</span><br><span class=\"line\">      two     0.339969 -0.693205</span><br><span class=\"line\">baz   one    -0.339355  0.593616</span><br><span class=\"line\">      two     0.884345  1.591431</span><br></pre></td></tr></table></figure>\n<p>The <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack\"><code>stack()</code></a> method “compresses” a level in the DataFrame’s columns.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [96]: stacked = df2.stack()</span><br><span class=\"line\"></span><br><span class=\"line\">In [97]: stacked</span><br><span class=\"line\">Out[97]: </span><br><span class=\"line\">first  second   </span><br><span class=\"line\">bar    one     A   -0.727965</span><br><span class=\"line\">               B   -0.589346</span><br><span class=\"line\">       two     A    0.339969</span><br><span class=\"line\">               B   -0.693205</span><br><span class=\"line\">baz    one     A   -0.339355</span><br><span class=\"line\">               B    0.593616</span><br><span class=\"line\">       two     A    0.884345</span><br><span class=\"line\">               B    1.591431</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>With a “stacked” DataFrame or Series (having a <code>MultiIndex</code> as the <code>index</code>), the inverse operation of <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack\"><code>stack()</code></a> is <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack\"><code>unstack()</code></a>, which by default unstacks the <strong>last level</strong>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [98]: stacked.unstack()</span><br><span class=\"line\">Out[98]: </span><br><span class=\"line\">                     A         B</span><br><span class=\"line\">first second                    </span><br><span class=\"line\">bar   one    -0.727965 -0.589346</span><br><span class=\"line\">      two     0.339969 -0.693205</span><br><span class=\"line\">baz   one    -0.339355  0.593616</span><br><span class=\"line\">      two     0.884345  1.591431</span><br><span class=\"line\"></span><br><span class=\"line\">In [99]: stacked.unstack(1)</span><br><span class=\"line\">Out[99]: </span><br><span class=\"line\">second        one       two</span><br><span class=\"line\">first                      </span><br><span class=\"line\">bar   A -0.727965  0.339969</span><br><span class=\"line\">      B -0.589346 -0.693205</span><br><span class=\"line\">baz   A -0.339355  0.884345</span><br><span class=\"line\">      B  0.593616  1.591431</span><br><span class=\"line\"></span><br><span class=\"line\">In [100]: stacked.unstack(0)</span><br><span class=\"line\">Out[100]: </span><br><span class=\"line\">first          bar       baz</span><br><span class=\"line\">second                      </span><br><span class=\"line\">one    A -0.727965 -0.339355</span><br><span class=\"line\">       B -0.589346  0.593616</span><br><span class=\"line\">two    A  0.339969  0.884345</span><br><span class=\"line\">       B -0.693205  1.591431</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pivot-tables\"><a href=\"#Pivot-tables\" class=\"headerlink\" title=\"Pivot tables\"></a>Pivot tables</h3><p>See the section on <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-pivot\">Pivot Tables</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [101]: df = pd.DataFrame(&#123;&#x27;A&#x27;: [&#x27;one&#x27;, &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;] * 3,</span><br><span class=\"line\">   .....:                    &#x27;B&#x27;: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;] * 4,</span><br><span class=\"line\">   .....:                    &#x27;C&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;, &#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;bar&#x27;, &#x27;bar&#x27;] * 2,</span><br><span class=\"line\">   .....:                    &#x27;D&#x27;: np.random.randn(12),</span><br><span class=\"line\">   .....:                    &#x27;E&#x27;: np.random.randn(12)&#125;)</span><br><span class=\"line\">   .....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [102]: df</span><br><span class=\"line\">Out[102]: </span><br><span class=\"line\">        A  B    C         D         E</span><br><span class=\"line\">0     one  A  foo -1.202872  0.047609</span><br><span class=\"line\">1     one  B  foo -1.814470 -0.136473</span><br><span class=\"line\">2     two  C  foo  1.018601 -0.561757</span><br><span class=\"line\">3   three  A  bar -0.595447 -1.623033</span><br><span class=\"line\">4     one  B  bar  1.395433  0.029399</span><br><span class=\"line\">5     one  C  bar -0.392670 -0.542108</span><br><span class=\"line\">6     two  A  foo  0.007207  0.282696</span><br><span class=\"line\">7   three  B  foo  1.928123 -0.087302</span><br><span class=\"line\">8     one  C  foo -0.055224 -1.575170</span><br><span class=\"line\">9     one  A  bar  2.395985  1.771208</span><br><span class=\"line\">10    two  B  bar  1.552825  0.816482</span><br><span class=\"line\">11  three  C  bar  0.166599  1.100230</span><br></pre></td></tr></table></figure>\n<p>We can produce pivot tables from this data very easily:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [103]: pd.pivot_table(df, values=&#x27;D&#x27;, index=[&#x27;A&#x27;, &#x27;B&#x27;], columns=[&#x27;C&#x27;])</span><br><span class=\"line\">Out[103]: </span><br><span class=\"line\">C             bar       foo</span><br><span class=\"line\">A     B                    </span><br><span class=\"line\">one   A  2.395985 -1.202872</span><br><span class=\"line\">      B  1.395433 -1.814470</span><br><span class=\"line\">      C -0.392670 -0.055224</span><br><span class=\"line\">three A -0.595447       NaN</span><br><span class=\"line\">      B       NaN  1.928123</span><br><span class=\"line\">      C  0.166599       NaN</span><br><span class=\"line\">two   A       NaN  0.007207</span><br><span class=\"line\">      B  1.552825       NaN</span><br><span class=\"line\">      C       NaN  1.018601</span><br></pre></td></tr></table></figure>\n<h2 id=\"Time-series\"><a href=\"#Time-series\" class=\"headerlink\" title=\"Time series\"></a>Time series</h2><p>pandas has simple, powerful, and efficient functionality for performing resampling operations during frequency conversion (e.g., converting secondly data into 5-minutely data). This is extremely common in, but not limited to, financial applications. See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries\">Time Series section</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [104]: rng = pd.date_range(&#x27;1/1/2012&#x27;, periods=100, freq=&#x27;S&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [105]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)</span><br><span class=\"line\"></span><br><span class=\"line\">In [106]: ts.resample(&#x27;5Min&#x27;).sum()</span><br><span class=\"line\">Out[106]: </span><br><span class=\"line\">2012-01-01    24182</span><br><span class=\"line\">Freq: 5T, dtype: int64</span><br></pre></td></tr></table></figure>\n<p>Time zone representation:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [107]: rng = pd.date_range(&#x27;3/6/2012 00:00&#x27;, periods=5, freq=&#x27;D&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [108]: ts = pd.Series(np.random.randn(len(rng)), rng)</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: ts</span><br><span class=\"line\">Out[109]: </span><br><span class=\"line\">2012-03-06    1.857704</span><br><span class=\"line\">2012-03-07   -1.193545</span><br><span class=\"line\">2012-03-08    0.677510</span><br><span class=\"line\">2012-03-09   -0.153931</span><br><span class=\"line\">2012-03-10    0.520091</span><br><span class=\"line\">Freq: D, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [110]: ts_utc = ts.tz_localize(&#x27;UTC&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [111]: ts_utc</span><br><span class=\"line\">Out[111]: </span><br><span class=\"line\">2012-03-06 00:00:00+00:00    1.857704</span><br><span class=\"line\">2012-03-07 00:00:00+00:00   -1.193545</span><br><span class=\"line\">2012-03-08 00:00:00+00:00    0.677510</span><br><span class=\"line\">2012-03-09 00:00:00+00:00   -0.153931</span><br><span class=\"line\">2012-03-10 00:00:00+00:00    0.520091</span><br><span class=\"line\">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Converting to another time zone:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [112]: ts_utc.tz_convert(&#x27;US/Eastern&#x27;)</span><br><span class=\"line\">Out[112]: </span><br><span class=\"line\">2012-03-05 19:00:00-05:00    1.857704</span><br><span class=\"line\">2012-03-06 19:00:00-05:00   -1.193545</span><br><span class=\"line\">2012-03-07 19:00:00-05:00    0.677510</span><br><span class=\"line\">2012-03-08 19:00:00-05:00   -0.153931</span><br><span class=\"line\">2012-03-09 19:00:00-05:00    0.520091</span><br><span class=\"line\">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Converting between time span representations:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [113]: rng = pd.date_range(&#x27;1/1/2012&#x27;, periods=5, freq=&#x27;M&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [114]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: ts</span><br><span class=\"line\">Out[115]: </span><br><span class=\"line\">2012-01-31   -1.475051</span><br><span class=\"line\">2012-02-29    0.722570</span><br><span class=\"line\">2012-03-31   -0.322646</span><br><span class=\"line\">2012-04-30   -1.601631</span><br><span class=\"line\">2012-05-31    0.778033</span><br><span class=\"line\">Freq: M, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [116]: ps = ts.to_period()</span><br><span class=\"line\"></span><br><span class=\"line\">In [117]: ps</span><br><span class=\"line\">Out[117]: </span><br><span class=\"line\">2012-01   -1.475051</span><br><span class=\"line\">2012-02    0.722570</span><br><span class=\"line\">2012-03   -0.322646</span><br><span class=\"line\">2012-04   -1.601631</span><br><span class=\"line\">2012-05    0.778033</span><br><span class=\"line\">Freq: M, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [118]: ps.to_timestamp()</span><br><span class=\"line\">Out[118]: </span><br><span class=\"line\">2012-01-01   -1.475051</span><br><span class=\"line\">2012-02-01    0.722570</span><br><span class=\"line\">2012-03-01   -0.322646</span><br><span class=\"line\">2012-04-01   -1.601631</span><br><span class=\"line\">2012-05-01    0.778033</span><br><span class=\"line\">Freq: MS, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Converting between period and timestamp enables some convenient arithmetic functions to be used. In the following example, we convert a quarterly frequency with year ending in November to 9am of the end of the month following the quarter end:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [119]: prng = pd.period_range(&#x27;1990Q1&#x27;, &#x27;2000Q4&#x27;, freq=&#x27;Q-NOV&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [120]: ts = pd.Series(np.random.randn(len(prng)), prng)</span><br><span class=\"line\"></span><br><span class=\"line\">In [121]: ts.index = (prng.asfreq(&#x27;M&#x27;, &#x27;e&#x27;) + 1).asfreq(&#x27;H&#x27;, &#x27;s&#x27;) + 9</span><br><span class=\"line\"></span><br><span class=\"line\">In [122]: ts.head()</span><br><span class=\"line\">Out[122]: </span><br><span class=\"line\">1990-03-01 09:00   -0.289342</span><br><span class=\"line\">1990-06-01 09:00    0.233141</span><br><span class=\"line\">1990-09-01 09:00   -0.223540</span><br><span class=\"line\">1990-12-01 09:00    0.542054</span><br><span class=\"line\">1991-03-01 09:00   -0.688585</span><br><span class=\"line\">Freq: H, dtype: float64</span><br></pre></td></tr></table></figure>\n<h2 id=\"Categoricals\"><a href=\"#Categoricals\" class=\"headerlink\" title=\"Categoricals\"></a>Categoricals</h2><p>pandas can include categorical data in a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a>. For full docs, see the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#categorical\">categorical introduction</a> and the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/arrays.html#api-arrays-categorical\">API documentation</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [123]: df = pd.DataFrame(&#123;&quot;id&quot;: [1, 2, 3, 4, 5, 6],</span><br><span class=\"line\">   .....:                    &quot;raw_grade&quot;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;e&#x27;]&#125;)</span><br><span class=\"line\">   .....: </span><br></pre></td></tr></table></figure>\n<p>Convert the raw grades to a categorical data type.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [124]: df[&quot;grade&quot;] = df[&quot;raw_grade&quot;].astype(&quot;category&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [125]: df[&quot;grade&quot;]</span><br><span class=\"line\">Out[125]: </span><br><span class=\"line\">0    a</span><br><span class=\"line\">1    b</span><br><span class=\"line\">2    b</span><br><span class=\"line\">3    a</span><br><span class=\"line\">4    a</span><br><span class=\"line\">5    e</span><br><span class=\"line\">Name: grade, dtype: category</span><br><span class=\"line\">Categories (3, object): [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;]</span><br></pre></td></tr></table></figure>\n<p>Rename the categories to more meaningful names (assigning to <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.categories.html#pandas.Series.cat.categories\"><code>Series.cat.categories()</code></a> is in place!).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [126]: df[&quot;grade&quot;].cat.categories = [&quot;very good&quot;, &quot;good&quot;, &quot;very bad&quot;]</span><br></pre></td></tr></table></figure>\n<p>Reorder the categories and simultaneously add the missing categories (methods under <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.html#pandas.Series.cat\"><code>Series.cat()</code></a> return a new <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series\"><code>Series</code></a> by default).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [127]: df[&quot;grade&quot;] = df[&quot;grade&quot;].cat.set_categories([&quot;very bad&quot;, &quot;bad&quot;, &quot;medium&quot;,</span><br><span class=\"line\">   .....:                                               &quot;good&quot;, &quot;very good&quot;])</span><br><span class=\"line\">   .....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [128]: df[&quot;grade&quot;]</span><br><span class=\"line\">Out[128]: </span><br><span class=\"line\">0    very good</span><br><span class=\"line\">1         good</span><br><span class=\"line\">2         good</span><br><span class=\"line\">3    very good</span><br><span class=\"line\">4    very good</span><br><span class=\"line\">5     very bad</span><br><span class=\"line\">Name: grade, dtype: category</span><br><span class=\"line\">Categories (5, object): [&#x27;very bad&#x27;, &#x27;bad&#x27;, &#x27;medium&#x27;, &#x27;good&#x27;, &#x27;very good&#x27;]</span><br></pre></td></tr></table></figure>\n<p>Sorting is per order in the categories, not lexical order.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [129]: df.sort_values(by=&quot;grade&quot;)</span><br><span class=\"line\">Out[129]: </span><br><span class=\"line\">   id raw_grade      grade</span><br><span class=\"line\">5   6         e   very bad</span><br><span class=\"line\">1   2         b       good</span><br><span class=\"line\">2   3         b       good</span><br><span class=\"line\">0   1         a  very good</span><br><span class=\"line\">3   4         a  very good</span><br><span class=\"line\">4   5         a  very good</span><br></pre></td></tr></table></figure>\n<p>Grouping by a categorical column also shows empty categories.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [130]: df.groupby(&quot;grade&quot;).size()</span><br><span class=\"line\">Out[130]: </span><br><span class=\"line\">grade</span><br><span class=\"line\">very bad     1</span><br><span class=\"line\">bad          0</span><br><span class=\"line\">medium       0</span><br><span class=\"line\">good         2</span><br><span class=\"line\">very good    3</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n<h2 id=\"Plotting\"><a href=\"#Plotting\" class=\"headerlink\" title=\"Plotting\"></a>Plotting</h2><p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization\">Plotting</a> docs.</p>\n<p>We use the standard convention for referencing the matplotlib API:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [131]: import matplotlib.pyplot as plt</span><br><span class=\"line\"></span><br><span class=\"line\">In [132]: plt.close(&#x27;all&#x27;)</span><br><span class=\"line\">In [133]: ts = pd.Series(np.random.randn(1000),</span><br><span class=\"line\">   .....:                index=pd.date_range(&#x27;1/1/2000&#x27;, periods=1000))</span><br><span class=\"line\">   .....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [134]: ts = ts.cumsum()</span><br><span class=\"line\"></span><br><span class=\"line\">In [135]: ts.plot()</span><br><span class=\"line\">Out[135]: &lt;AxesSubplot:&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pandas.pydata.org/pandas-docs/stable/_images/series_plot_basic.png\" alt=\"../_images/series_plot_basic.png\"></p>\n<p>On a DataFrame, the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot\"><code>plot()</code></a> method is a convenience to plot all of the columns with labels:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [136]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index,</span><br><span class=\"line\">   .....:                   columns=[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;])</span><br><span class=\"line\">   .....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [137]: df = df.cumsum()</span><br><span class=\"line\"></span><br><span class=\"line\">In [138]: plt.figure()</span><br><span class=\"line\">Out[138]: &lt;Figure size 640x480 with 0 Axes&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [139]: df.plot()</span><br><span class=\"line\">Out[139]: &lt;AxesSubplot:&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [140]: plt.legend(loc=&#x27;best&#x27;)</span><br><span class=\"line\">Out[140]: &lt;matplotlib.legend.Legend at 0x7fbfb29f0670&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pandas.pydata.org/pandas-docs/stable/_images/frame_plot_basic.png\" alt=\"../_images/frame_plot_basic.png\"></p>\n<h2 id=\"Getting-data-in-out\"><a href=\"#Getting-data-in-out\" class=\"headerlink\" title=\"Getting data in/out\"></a>Getting data in/out</h2><h3 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h3><p><a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-store-in-csv\">Writing to a csv file.</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [141]: df.to_csv(&#x27;foo.csv&#x27;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-csv-table\">Reading from a csv file.</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [142]: pd.read_csv(&#x27;foo.csv&#x27;)</span><br><span class=\"line\">Out[142]: </span><br><span class=\"line\">     Unnamed: 0          A          B          C          D</span><br><span class=\"line\">0    2000-01-01   0.350262   0.843315   1.798556   0.782234</span><br><span class=\"line\">1    2000-01-02  -0.586873   0.034907   1.923792  -0.562651</span><br><span class=\"line\">2    2000-01-03  -1.245477  -0.963406   2.269575  -1.612566</span><br><span class=\"line\">3    2000-01-04  -0.252830  -0.498066   3.176886  -1.275581</span><br><span class=\"line\">4    2000-01-05  -1.044057   0.118042   2.768571   0.386039</span><br><span class=\"line\">..          ...        ...        ...        ...        ...</span><br><span class=\"line\">995  2002-09-22 -48.017654  31.474551  69.146374 -47.541670</span><br><span class=\"line\">996  2002-09-23 -47.207912  32.627390  68.505254 -48.828331</span><br><span class=\"line\">997  2002-09-24 -48.907133  31.990402  67.310924 -49.391051</span><br><span class=\"line\">998  2002-09-25 -50.146062  33.716770  67.717434 -49.037577</span><br><span class=\"line\">999  2002-09-26 -49.724318  33.479952  68.108014 -48.822030</span><br><span class=\"line\"></span><br><span class=\"line\">[1000 rows x 5 columns]</span><br></pre></td></tr></table></figure>\n<h3 id=\"HDF5\"><a href=\"#HDF5\" class=\"headerlink\" title=\"HDF5\"></a>HDF5</h3><p>Reading and writing to <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5\">HDFStores</a>.</p>\n<p>Writing to a HDF5 Store.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [143]: df.to_hdf(&#x27;foo.h5&#x27;, &#x27;df&#x27;)</span><br></pre></td></tr></table></figure>\n<p>Reading from a HDF5 Store.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [144]: pd.read_hdf(&#x27;foo.h5&#x27;, &#x27;df&#x27;)</span><br><span class=\"line\">Out[144]: </span><br><span class=\"line\">                    A          B          C          D</span><br><span class=\"line\">2000-01-01   0.350262   0.843315   1.798556   0.782234</span><br><span class=\"line\">2000-01-02  -0.586873   0.034907   1.923792  -0.562651</span><br><span class=\"line\">2000-01-03  -1.245477  -0.963406   2.269575  -1.612566</span><br><span class=\"line\">2000-01-04  -0.252830  -0.498066   3.176886  -1.275581</span><br><span class=\"line\">2000-01-05  -1.044057   0.118042   2.768571   0.386039</span><br><span class=\"line\">...               ...        ...        ...        ...</span><br><span class=\"line\">2002-09-22 -48.017654  31.474551  69.146374 -47.541670</span><br><span class=\"line\">2002-09-23 -47.207912  32.627390  68.505254 -48.828331</span><br><span class=\"line\">2002-09-24 -48.907133  31.990402  67.310924 -49.391051</span><br><span class=\"line\">2002-09-25 -50.146062  33.716770  67.717434 -49.037577</span><br><span class=\"line\">2002-09-26 -49.724318  33.479952  68.108014 -48.822030</span><br><span class=\"line\"></span><br><span class=\"line\">[1000 rows x 4 columns]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Excel\"><a href=\"#Excel\" class=\"headerlink\" title=\"Excel\"></a>Excel</h3><p>Reading and writing to <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel\">MS Excel</a>.</p>\n<p>Writing to an excel file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [145]: df.to_excel(&#x27;foo.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;)</span><br></pre></td></tr></table></figure>\n<p>Reading from an excel file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [146]: pd.read_excel(&#x27;foo.xlsx&#x27;, &#x27;Sheet1&#x27;, index_col=None, na_values=[&#x27;NA&#x27;])</span><br><span class=\"line\">Out[146]: </span><br><span class=\"line\">    Unnamed: 0          A          B          C          D</span><br><span class=\"line\">0   2000-01-01   0.350262   0.843315   1.798556   0.782234</span><br><span class=\"line\">1   2000-01-02  -0.586873   0.034907   1.923792  -0.562651</span><br><span class=\"line\">2   2000-01-03  -1.245477  -0.963406   2.269575  -1.612566</span><br><span class=\"line\">3   2000-01-04  -0.252830  -0.498066   3.176886  -1.275581</span><br><span class=\"line\">4   2000-01-05  -1.044057   0.118042   2.768571   0.386039</span><br><span class=\"line\">..         ...        ...        ...        ...        ...</span><br><span class=\"line\">995 2002-09-22 -48.017654  31.474551  69.146374 -47.541670</span><br><span class=\"line\">996 2002-09-23 -47.207912  32.627390  68.505254 -48.828331</span><br><span class=\"line\">997 2002-09-24 -48.907133  31.990402  67.310924 -49.391051</span><br><span class=\"line\">998 2002-09-25 -50.146062  33.716770  67.717434 -49.037577</span><br><span class=\"line\">999 2002-09-26 -49.724318  33.479952  68.108014 -48.822030</span><br><span class=\"line\"></span><br><span class=\"line\">[1000 rows x 5 columns]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Gotchas\"><a href=\"#Gotchas\" class=\"headerlink\" title=\"Gotchas\"></a>Gotchas</h2><p>If you are attempting to perform an operation you might see an exception like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; if pd.Series([False, True, False]):</span><br><span class=\"line\">...     print(&quot;I was true&quot;)</span><br><span class=\"line\">Traceback</span><br><span class=\"line\">    ...</span><br><span class=\"line\">ValueError: The truth value of an array is ambiguous. Use a.empty, a.any() or a.all().</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>10 minutes to pandas</p>","more":"<p>[TOC]</p>\n<h1 id=\"10-minutes-to-pandas\"><a href=\"#10-minutes-to-pandas\" class=\"headerlink\" title=\"10 minutes to pandas\"></a>10 minutes to pandas</h1><p>This is a short introduction to pandas, geared mainly for new users. You can see more complex recipes in the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html#cookbook\">Cookbook</a>.</p>\n<p>Customarily, we import as follows:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]: import pandas as pd</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-creation\"><a href=\"#Object-creation\" class=\"headerlink\" title=\"Object creation\"></a>Object creation</h2><p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dsintro\">Data Structure Intro section</a>.</p>\n<p>Creating a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series\"><code>Series</code></a> by passing a list of values, letting pandas create a default integer index:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: s</span><br><span class=\"line\">Out[4]: </span><br><span class=\"line\">0    1.0</span><br><span class=\"line\">1    3.0</span><br><span class=\"line\">2    5.0</span><br><span class=\"line\">3    NaN</span><br><span class=\"line\">4    6.0</span><br><span class=\"line\">5    8.0</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Creating a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> by passing a NumPy array, with a datetime index and labeled columns:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [5]: dates = pd.date_range(&#x27;20130101&#x27;, periods=6)</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: dates</span><br><span class=\"line\">Out[6]: </span><br><span class=\"line\">DatetimeIndex([&#x27;2013-01-01&#x27;, &#x27;2013-01-02&#x27;, &#x27;2013-01-03&#x27;, &#x27;2013-01-04&#x27;,</span><br><span class=\"line\">               &#x27;2013-01-05&#x27;, &#x27;2013-01-06&#x27;],</span><br><span class=\"line\">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(&#x27;ABCD&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: df</span><br><span class=\"line\">Out[8]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br></pre></td></tr></table></figure>\n<p>Creating a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> by passing a dict of objects that can be converted to series-like.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [9]: df2 = pd.DataFrame(&#123;&#x27;A&#x27;: 1.,</span><br><span class=\"line\">   ...:                     &#x27;B&#x27;: pd.Timestamp(&#x27;20130102&#x27;),</span><br><span class=\"line\">   ...:                     &#x27;C&#x27;: pd.Series(1, index=list(range(4)), dtype=&#x27;float32&#x27;),</span><br><span class=\"line\">   ...:                     &#x27;D&#x27;: np.array([3] * 4, dtype=&#x27;int32&#x27;),</span><br><span class=\"line\">   ...:                     &#x27;E&#x27;: pd.Categorical([&quot;test&quot;, &quot;train&quot;, &quot;test&quot;, &quot;train&quot;]),</span><br><span class=\"line\">   ...:                     &#x27;F&#x27;: &#x27;foo&#x27;&#125;)</span><br><span class=\"line\">   ...: </span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: df2</span><br><span class=\"line\">Out[10]: </span><br><span class=\"line\">     A          B    C  D      E    F</span><br><span class=\"line\">0  1.0 2013-01-02  1.0  3   test  foo</span><br><span class=\"line\">1  1.0 2013-01-02  1.0  3  train  foo</span><br><span class=\"line\">2  1.0 2013-01-02  1.0  3   test  foo</span><br><span class=\"line\">3  1.0 2013-01-02  1.0  3  train  foo</span><br></pre></td></tr></table></figure>\n<p>The columns of the resulting <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> have different <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-dtypes\">dtypes</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [11]: df2.dtypes</span><br><span class=\"line\">Out[11]: </span><br><span class=\"line\">A           float64</span><br><span class=\"line\">B    datetime64[ns]</span><br><span class=\"line\">C           float32</span><br><span class=\"line\">D             int32</span><br><span class=\"line\">E          category</span><br><span class=\"line\">F            object</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure>\n<p>If you’re using IPython, tab completion for column names (as well as public attributes) is automatically enabled. Here’s a subset of the attributes that will be completed:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [12]: df2.&lt;TAB&gt;  # noqa: E225, E999</span><br><span class=\"line\">df2.A                  df2.bool</span><br><span class=\"line\">df2.abs                df2.boxplot</span><br><span class=\"line\">df2.add                df2.C</span><br><span class=\"line\">df2.add_prefix         df2.clip</span><br><span class=\"line\">df2.add_suffix         df2.columns</span><br><span class=\"line\">df2.align              df2.copy</span><br><span class=\"line\">df2.all                df2.count</span><br><span class=\"line\">df2.any                df2.combine</span><br><span class=\"line\">df2.append             df2.D</span><br><span class=\"line\">df2.apply              df2.describe</span><br><span class=\"line\">df2.applymap           df2.diff</span><br><span class=\"line\">df2.B                  df2.duplicated</span><br></pre></td></tr></table></figure>\n<p>As you can see, the columns <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code> are automatically tab completed. <code>E</code> and <code>F</code> are there as well; the rest of the attributes have been truncated for brevity.</p>\n<h2 id=\"Viewing-data\"><a href=\"#Viewing-data\" class=\"headerlink\" title=\"Viewing data\"></a>Viewing data</h2><p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics\">Basics section</a>.</p>\n<p>Here is how to view the top and bottom rows of the frame:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [13]: df.head()</span><br><span class=\"line\">Out[13]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class=\"line\"></span><br><span class=\"line\">In [14]: df.tail(3)</span><br><span class=\"line\">Out[14]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br></pre></td></tr></table></figure>\n<p>Display the index, columns:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [15]: df.index</span><br><span class=\"line\">Out[15]: </span><br><span class=\"line\">DatetimeIndex([&#x27;2013-01-01&#x27;, &#x27;2013-01-02&#x27;, &#x27;2013-01-03&#x27;, &#x27;2013-01-04&#x27;,</span><br><span class=\"line\">               &#x27;2013-01-05&#x27;, &#x27;2013-01-06&#x27;],</span><br><span class=\"line\">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: df.columns</span><br><span class=\"line\">Out[16]: Index([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;], dtype=&#x27;object&#x27;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a> gives a NumPy representation of the underlying data. Note that this can be an expensive operation when your <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> has columns with different data types, which comes down to a fundamental difference between pandas and NumPy: <strong>NumPy arrays have one dtype for the entire array, while pandas DataFrames have one dtype per column</strong>. When you call <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a>, pandas will find the NumPy dtype that can hold <em>all</em> of the dtypes in the DataFrame. This may end up being <code>object</code>, which requires casting every value to a Python object.</p>\n<p>For <code>df</code>, our <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> of all floating-point values, <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a> is fast and doesn’t require copying data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [17]: df.to_numpy()</span><br><span class=\"line\">Out[17]: </span><br><span class=\"line\">array([[ 0.4691, -0.2829, -1.5091, -1.1356],</span><br><span class=\"line\">       [ 1.2121, -0.1732,  0.1192, -1.0442],</span><br><span class=\"line\">       [-0.8618, -2.1046, -0.4949,  1.0718],</span><br><span class=\"line\">       [ 0.7216, -0.7068, -1.0396,  0.2719],</span><br><span class=\"line\">       [-0.425 ,  0.567 ,  0.2762, -1.0874],</span><br><span class=\"line\">       [-0.6737,  0.1136, -1.4784,  0.525 ]])</span><br></pre></td></tr></table></figure>\n<p>For <code>df2</code>, the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> with multiple dtypes, <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a> is relatively expensive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [18]: df2.to_numpy()</span><br><span class=\"line\">Out[18]: </span><br><span class=\"line\">array([[1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;test&#x27;, &#x27;foo&#x27;],</span><br><span class=\"line\">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;train&#x27;, &#x27;foo&#x27;],</span><br><span class=\"line\">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;test&#x27;, &#x27;foo&#x27;],</span><br><span class=\"line\">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;train&#x27;, &#x27;foo&#x27;]],</span><br><span class=\"line\">      dtype=object)</span><br></pre></td></tr></table></figure>\n<p>Note</p>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy\"><code>DataFrame.to_numpy()</code></a> does <em>not</em> include the index or column labels in the output.</p>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe\"><code>describe()</code></a> shows a quick statistic summary of your data:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [19]: df.describe()</span><br><span class=\"line\">Out[19]: </span><br><span class=\"line\">              A         B         C         D</span><br><span class=\"line\">count  6.000000  6.000000  6.000000  6.000000</span><br><span class=\"line\">mean   0.073711 -0.431125 -0.687758 -0.233103</span><br><span class=\"line\">std    0.843157  0.922818  0.779887  0.973118</span><br><span class=\"line\">min   -0.861849 -2.104569 -1.509059 -1.135632</span><br><span class=\"line\">25%   -0.611510 -0.600794 -1.368714 -1.076610</span><br><span class=\"line\">50%    0.022070 -0.228039 -0.767252 -0.386188</span><br><span class=\"line\">75%    0.658444  0.041933 -0.034326  0.461706</span><br><span class=\"line\">max    1.212112  0.567020  0.276232  1.071804</span><br></pre></td></tr></table></figure>\n<p>Transposing your data:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [20]: df.T</span><br><span class=\"line\">Out[20]: </span><br><span class=\"line\">   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06</span><br><span class=\"line\">A    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690</span><br><span class=\"line\">B   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648</span><br><span class=\"line\">C   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427</span><br><span class=\"line\">D   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988</span><br></pre></td></tr></table></figure>\n<p>Sorting by an axis:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [21]: df.sort_index(axis=1, ascending=False)</span><br><span class=\"line\">Out[21]: </span><br><span class=\"line\">                   D         C         B         A</span><br><span class=\"line\">2013-01-01 -1.135632 -1.509059 -0.282863  0.469112</span><br><span class=\"line\">2013-01-02 -1.044236  0.119209 -0.173215  1.212112</span><br><span class=\"line\">2013-01-03  1.071804 -0.494929 -2.104569 -0.861849</span><br><span class=\"line\">2013-01-04  0.271860 -1.039575 -0.706771  0.721555</span><br><span class=\"line\">2013-01-05 -1.087401  0.276232  0.567020 -0.424972</span><br><span class=\"line\">2013-01-06  0.524988 -1.478427  0.113648 -0.673690</span><br></pre></td></tr></table></figure>\n<p>Sorting by values:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [22]: df.sort_values(by=&#x27;B&#x27;)</span><br><span class=\"line\">Out[22]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br></pre></td></tr></table></figure>\n<h2 id=\"Selection\"><a href=\"#Selection\" class=\"headerlink\" title=\"Selection\"></a>Selection</h2><p>Note</p>\n<p>While standard Python / Numpy expressions for selecting and setting are intuitive and come in handy for interactive work, for production code, we recommend the optimized pandas data access methods, <code>.at</code>, <code>.iat</code>, <code>.loc</code> and <code>.iloc</code>.</p>\n<p>See the indexing documentation <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing\">Indexing and Selecting Data</a> and <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced\">MultiIndex / Advanced Indexing</a>.</p>\n<h3 id=\"Getting\"><a href=\"#Getting\" class=\"headerlink\" title=\"Getting\"></a>Getting</h3><p>Selecting a single column, which yields a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series\"><code>Series</code></a>, equivalent to <code>df.A</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [23]: df[&#x27;A&#x27;]</span><br><span class=\"line\">Out[23]: </span><br><span class=\"line\">2013-01-01    0.469112</span><br><span class=\"line\">2013-01-02    1.212112</span><br><span class=\"line\">2013-01-03   -0.861849</span><br><span class=\"line\">2013-01-04    0.721555</span><br><span class=\"line\">2013-01-05   -0.424972</span><br><span class=\"line\">2013-01-06   -0.673690</span><br><span class=\"line\">Freq: D, Name: A, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Selecting via <code>[]</code>, which slices the rows.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [24]: df[0:3]</span><br><span class=\"line\">Out[24]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\"></span><br><span class=\"line\">In [25]: df[&#x27;20130102&#x27;:&#x27;20130104&#x27;]</span><br><span class=\"line\">Out[25]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br></pre></td></tr></table></figure>\n<h3 id=\"Selection-by-label\"><a href=\"#Selection-by-label\" class=\"headerlink\" title=\"Selection by label\"></a>Selection by label</h3><p>See more in <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-label\">Selection by Label</a>.</p>\n<p>For getting a cross section using a label:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [26]: df.loc[dates[0]]</span><br><span class=\"line\">Out[26]: </span><br><span class=\"line\">A    0.469112</span><br><span class=\"line\">B   -0.282863</span><br><span class=\"line\">C   -1.509059</span><br><span class=\"line\">D   -1.135632</span><br><span class=\"line\">Name: 2013-01-01 00:00:00, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Selecting on a multi-axis by label:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [27]: df.loc[:, [&#x27;A&#x27;, &#x27;B&#x27;]]</span><br><span class=\"line\">Out[27]: </span><br><span class=\"line\">                   A         B</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648</span><br></pre></td></tr></table></figure>\n<p>Showing label slicing, both endpoints are <em>included</em>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [28]: df.loc[&#x27;20130102&#x27;:&#x27;20130104&#x27;, [&#x27;A&#x27;, &#x27;B&#x27;]]</span><br><span class=\"line\">Out[28]: </span><br><span class=\"line\">                   A         B</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771</span><br></pre></td></tr></table></figure>\n<p>Reduction in the dimensions of the returned object:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [29]: df.loc[&#x27;20130102&#x27;, [&#x27;A&#x27;, &#x27;B&#x27;]]</span><br><span class=\"line\">Out[29]: </span><br><span class=\"line\">A    1.212112</span><br><span class=\"line\">B   -0.173215</span><br><span class=\"line\">Name: 2013-01-02 00:00:00, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>For getting a scalar value:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [30]: df.loc[dates[0], &#x27;A&#x27;]</span><br><span class=\"line\">Out[30]: 0.4691122999071863</span><br></pre></td></tr></table></figure>\n<p>For getting fast access to a scalar (equivalent to the prior method):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [31]: df.at[dates[0], &#x27;A&#x27;]</span><br><span class=\"line\">Out[31]: 0.4691122999071863</span><br></pre></td></tr></table></figure>\n<h3 id=\"Selection-by-position\"><a href=\"#Selection-by-position\" class=\"headerlink\" title=\"Selection by position\"></a>Selection by position</h3><p>See more in <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-integer\">Selection by Position</a>.</p>\n<p>Select via the position of the passed integers:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [32]: df.iloc[3]</span><br><span class=\"line\">Out[32]: </span><br><span class=\"line\">A    0.721555</span><br><span class=\"line\">B   -0.706771</span><br><span class=\"line\">C   -1.039575</span><br><span class=\"line\">D    0.271860</span><br><span class=\"line\">Name: 2013-01-04 00:00:00, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>By integer slices, acting similar to numpy/python:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [33]: df.iloc[3:5, 0:2]</span><br><span class=\"line\">Out[33]: </span><br><span class=\"line\">                   A         B</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020</span><br></pre></td></tr></table></figure>\n<p>By lists of integer position locations, similar to the numpy/python style:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [34]: df.iloc[[1, 2, 4], [0, 2]]</span><br><span class=\"line\">Out[34]: </span><br><span class=\"line\">                   A         C</span><br><span class=\"line\">2013-01-02  1.212112  0.119209</span><br><span class=\"line\">2013-01-03 -0.861849 -0.494929</span><br><span class=\"line\">2013-01-05 -0.424972  0.276232</span><br></pre></td></tr></table></figure>\n<p>For slicing rows explicitly:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [35]: df.iloc[1:3, :]</span><br><span class=\"line\">Out[35]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br></pre></td></tr></table></figure>\n<p>For slicing columns explicitly:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [36]: df.iloc[:, 1:3]</span><br><span class=\"line\">Out[36]: </span><br><span class=\"line\">                   B         C</span><br><span class=\"line\">2013-01-01 -0.282863 -1.509059</span><br><span class=\"line\">2013-01-02 -0.173215  0.119209</span><br><span class=\"line\">2013-01-03 -2.104569 -0.494929</span><br><span class=\"line\">2013-01-04 -0.706771 -1.039575</span><br><span class=\"line\">2013-01-05  0.567020  0.276232</span><br><span class=\"line\">2013-01-06  0.113648 -1.478427</span><br></pre></td></tr></table></figure>\n<p>For getting a value explicitly:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [37]: df.iloc[1, 1]</span><br><span class=\"line\">Out[37]: -0.17321464905330858</span><br></pre></td></tr></table></figure>\n<p>For getting fast access to a scalar (equivalent to the prior method):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [38]: df.iat[1, 1]</span><br><span class=\"line\">Out[38]: -0.17321464905330858</span><br></pre></td></tr></table></figure>\n<h3 id=\"Boolean-indexing\"><a href=\"#Boolean-indexing\" class=\"headerlink\" title=\"Boolean indexing\"></a>Boolean indexing</h3><p>Using a single column’s values to select data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [39]: df[df[&#x27;A&#x27;] &gt; 0]</span><br><span class=\"line\">Out[39]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br></pre></td></tr></table></figure>\n<p>Selecting values from a DataFrame where a boolean condition is met.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [40]: df[df &gt; 0]</span><br><span class=\"line\">Out[40]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\">2013-01-01  0.469112       NaN       NaN       NaN</span><br><span class=\"line\">2013-01-02  1.212112       NaN  0.119209       NaN</span><br><span class=\"line\">2013-01-03       NaN       NaN       NaN  1.071804</span><br><span class=\"line\">2013-01-04  0.721555       NaN       NaN  0.271860</span><br><span class=\"line\">2013-01-05       NaN  0.567020  0.276232       NaN</span><br><span class=\"line\">2013-01-06       NaN  0.113648       NaN  0.524988</span><br></pre></td></tr></table></figure>\n<p>Using the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html#pandas.Series.isin\"><code>isin()</code></a> method for filtering:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [41]: df2 = df.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">In [42]: df2[&#x27;E&#x27;] = [&#x27;one&#x27;, &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;, &#x27;three&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [43]: df2</span><br><span class=\"line\">Out[43]: </span><br><span class=\"line\">                   A         B         C         D      E</span><br><span class=\"line\">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three</span><br><span class=\"line\"></span><br><span class=\"line\">In [44]: df2[df2[&#x27;E&#x27;].isin([&#x27;two&#x27;, &#x27;four&#x27;])]</span><br><span class=\"line\">Out[44]: </span><br><span class=\"line\">                   A         B         C         D     E</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four</span><br></pre></td></tr></table></figure>\n<h3 id=\"Setting\"><a href=\"#Setting\" class=\"headerlink\" title=\"Setting\"></a>Setting</h3><p>Setting a new column automatically aligns the data by the indexes.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range(&#x27;20130102&#x27;, periods=6))</span><br><span class=\"line\"></span><br><span class=\"line\">In [46]: s1</span><br><span class=\"line\">Out[46]: </span><br><span class=\"line\">2013-01-02    1</span><br><span class=\"line\">2013-01-03    2</span><br><span class=\"line\">2013-01-04    3</span><br><span class=\"line\">2013-01-05    4</span><br><span class=\"line\">2013-01-06    5</span><br><span class=\"line\">2013-01-07    6</span><br><span class=\"line\">Freq: D, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [47]: df[&#x27;F&#x27;] = s1</span><br></pre></td></tr></table></figure>\n<p>Setting values by label:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [48]: df.at[dates[0], &#x27;A&#x27;] = 0</span><br></pre></td></tr></table></figure>\n<p>Setting values by position:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [49]: df.iat[0, 1] = 0</span><br></pre></td></tr></table></figure>\n<p>Setting by assigning with a NumPy array:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [50]: df.loc[:, &#x27;D&#x27;] = np.array([5] * len(df))</span><br></pre></td></tr></table></figure>\n<p>The result of the prior setting operations.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [51]: df</span><br><span class=\"line\">Out[51]: </span><br><span class=\"line\">                   A         B         C  D    F</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059  5  NaN</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209  5  1.0</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  5  3.0</span><br><span class=\"line\">2013-01-05 -0.424972  0.567020  0.276232  5  4.0</span><br><span class=\"line\">2013-01-06 -0.673690  0.113648 -1.478427  5  5.0</span><br></pre></td></tr></table></figure>\n<p>A <code>where</code> operation with setting.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [52]: df2 = df.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">In [53]: df2[df2 &gt; 0] = -df2</span><br><span class=\"line\"></span><br><span class=\"line\">In [54]: df2</span><br><span class=\"line\">Out[54]: </span><br><span class=\"line\">                   A         B         C  D    F</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059 -5  NaN</span><br><span class=\"line\">2013-01-02 -1.212112 -0.173215 -0.119209 -5 -1.0</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929 -5 -2.0</span><br><span class=\"line\">2013-01-04 -0.721555 -0.706771 -1.039575 -5 -3.0</span><br><span class=\"line\">2013-01-05 -0.424972 -0.567020 -0.276232 -5 -4.0</span><br><span class=\"line\">2013-01-06 -0.673690 -0.113648 -1.478427 -5 -5.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"Missing-data\"><a href=\"#Missing-data\" class=\"headerlink\" title=\"Missing data\"></a>Missing data</h2><p>pandas primarily uses the value <code>np.nan</code> to represent missing data. It is by default not included in computations. See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html#missing-data\">Missing Data section</a>.</p>\n<p>Reindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + [&#x27;E&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [56]: df1.loc[dates[0]:dates[1], &#x27;E&#x27;] = 1</span><br><span class=\"line\"></span><br><span class=\"line\">In [57]: df1</span><br><span class=\"line\">Out[57]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059  5  NaN  1.0</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  NaN</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  NaN</span><br></pre></td></tr></table></figure>\n<p>To drop any rows that have missing data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [58]: df1.dropna(how=&#x27;any&#x27;)</span><br><span class=\"line\">Out[58]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0</span><br></pre></td></tr></table></figure>\n<p>Filling missing data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [59]: df1.fillna(value=5)</span><br><span class=\"line\">Out[59]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059  5  5.0  1.0</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0</span><br><span class=\"line\">2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  5.0</span><br><span class=\"line\">2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  5.0</span><br></pre></td></tr></table></figure>\n<p>To get the boolean mask where values are <code>nan</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [60]: pd.isna(df1)</span><br><span class=\"line\">Out[60]: </span><br><span class=\"line\">                A      B      C      D      F      E</span><br><span class=\"line\">2013-01-01  False  False  False  False   True  False</span><br><span class=\"line\">2013-01-02  False  False  False  False  False  False</span><br><span class=\"line\">2013-01-03  False  False  False  False  False   True</span><br><span class=\"line\">2013-01-04  False  False  False  False  False   True</span><br></pre></td></tr></table></figure>\n<h2 id=\"Operations\"><a href=\"#Operations\" class=\"headerlink\" title=\"Operations\"></a>Operations</h2><p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-binop\">Basic section on Binary Ops</a>.</p>\n<h3 id=\"Stats\"><a href=\"#Stats\" class=\"headerlink\" title=\"Stats\"></a>Stats</h3><p>Operations in general <em>exclude</em> missing data.</p>\n<p>Performing a descriptive statistic:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [61]: df.mean()</span><br><span class=\"line\">Out[61]: </span><br><span class=\"line\">A   -0.004474</span><br><span class=\"line\">B   -0.383981</span><br><span class=\"line\">C   -0.687758</span><br><span class=\"line\">D    5.000000</span><br><span class=\"line\">F    3.000000</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Same operation on the other axis:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [62]: df.mean(1)</span><br><span class=\"line\">Out[62]: </span><br><span class=\"line\">2013-01-01    0.872735</span><br><span class=\"line\">2013-01-02    1.431621</span><br><span class=\"line\">2013-01-03    0.707731</span><br><span class=\"line\">2013-01-04    1.395042</span><br><span class=\"line\">2013-01-05    1.883656</span><br><span class=\"line\">2013-01-06    1.592306</span><br><span class=\"line\">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Operating with objects that have different dimensionality and need alignment. In addition, pandas automatically broadcasts along the specified dimension.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [63]: s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)</span><br><span class=\"line\"></span><br><span class=\"line\">In [64]: s</span><br><span class=\"line\">Out[64]: </span><br><span class=\"line\">2013-01-01    NaN</span><br><span class=\"line\">2013-01-02    NaN</span><br><span class=\"line\">2013-01-03    1.0</span><br><span class=\"line\">2013-01-04    3.0</span><br><span class=\"line\">2013-01-05    5.0</span><br><span class=\"line\">2013-01-06    NaN</span><br><span class=\"line\">Freq: D, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [65]: df.sub(s, axis=&#x27;index&#x27;)</span><br><span class=\"line\">Out[65]: </span><br><span class=\"line\">                   A         B         C    D    F</span><br><span class=\"line\">2013-01-01       NaN       NaN       NaN  NaN  NaN</span><br><span class=\"line\">2013-01-02       NaN       NaN       NaN  NaN  NaN</span><br><span class=\"line\">2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0</span><br><span class=\"line\">2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0</span><br><span class=\"line\">2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0</span><br><span class=\"line\">2013-01-06       NaN       NaN       NaN  NaN  NaN</span><br></pre></td></tr></table></figure>\n<h3 id=\"Apply\"><a href=\"#Apply\" class=\"headerlink\" title=\"Apply\"></a>Apply</h3><p>Applying functions to the data:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [66]: df.apply(np.cumsum)</span><br><span class=\"line\">Out[66]: </span><br><span class=\"line\">                   A         B         C   D     F</span><br><span class=\"line\">2013-01-01  0.000000  0.000000 -1.509059   5   NaN</span><br><span class=\"line\">2013-01-02  1.212112 -0.173215 -1.389850  10   1.0</span><br><span class=\"line\">2013-01-03  0.350263 -2.277784 -1.884779  15   3.0</span><br><span class=\"line\">2013-01-04  1.071818 -2.984555 -2.924354  20   6.0</span><br><span class=\"line\">2013-01-05  0.646846 -2.417535 -2.648122  25  10.0</span><br><span class=\"line\">2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [67]: df.apply(lambda x: x.max() - x.min())</span><br><span class=\"line\">Out[67]: </span><br><span class=\"line\">A    2.073961</span><br><span class=\"line\">B    2.671590</span><br><span class=\"line\">C    1.785291</span><br><span class=\"line\">D    0.000000</span><br><span class=\"line\">F    4.000000</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<h3 id=\"Histogramming\"><a href=\"#Histogramming\" class=\"headerlink\" title=\"Histogramming\"></a>Histogramming</h3><p>See more at <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-discretization\">Histogramming and Discretization</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [68]: s = pd.Series(np.random.randint(0, 7, size=10))</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: s</span><br><span class=\"line\">Out[69]: </span><br><span class=\"line\">0    4</span><br><span class=\"line\">1    2</span><br><span class=\"line\">2    1</span><br><span class=\"line\">3    2</span><br><span class=\"line\">4    6</span><br><span class=\"line\">5    4</span><br><span class=\"line\">6    4</span><br><span class=\"line\">7    6</span><br><span class=\"line\">8    4</span><br><span class=\"line\">9    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [70]: s.value_counts()</span><br><span class=\"line\">Out[70]: </span><br><span class=\"line\">4    5</span><br><span class=\"line\">6    2</span><br><span class=\"line\">2    2</span><br><span class=\"line\">1    1</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n<h3 id=\"String-Methods\"><a href=\"#String-Methods\" class=\"headerlink\" title=\"String Methods\"></a>String Methods</h3><p>Series is equipped with a set of string processing methods in the str attribute that make it easy to operate on each element of the array, as in the code snippet below. Note that pattern-matching in str generally uses <a href=\"https://docs.python.org/3/library/re.html\">regular expressions</a> by default (and in some cases always uses them). See more at <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html#text-string-methods\">Vectorized String Methods</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [71]: s = pd.Series([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;Aaba&#x27;, &#x27;Baca&#x27;, np.nan, &#x27;CABA&#x27;, &#x27;dog&#x27;, &#x27;cat&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [72]: s.str.lower()</span><br><span class=\"line\">Out[72]: </span><br><span class=\"line\">0       a</span><br><span class=\"line\">1       b</span><br><span class=\"line\">2       c</span><br><span class=\"line\">3    aaba</span><br><span class=\"line\">4    baca</span><br><span class=\"line\">5     NaN</span><br><span class=\"line\">6    caba</span><br><span class=\"line\">7     dog</span><br><span class=\"line\">8     cat</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure>\n<h2 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h2><h3 id=\"Concat\"><a href=\"#Concat\" class=\"headerlink\" title=\"Concat\"></a>Concat</h3><p>pandas provides various facilities for easily combining together Series and DataFrame objects with various kinds of set logic for the indexes and relational algebra functionality in the case of join / merge-type operations.</p>\n<p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging\">Merging section</a>.</p>\n<p>Concatenating pandas objects together with <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html#pandas.concat\"><code>concat()</code></a>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [73]: df = pd.DataFrame(np.random.randn(10, 4))</span><br><span class=\"line\"></span><br><span class=\"line\">In [74]: df</span><br><span class=\"line\">Out[74]: </span><br><span class=\"line\">          0         1         2         3</span><br><span class=\"line\">0 -0.548702  1.467327 -1.015962 -0.483075</span><br><span class=\"line\">1  1.637550 -1.217659 -0.291519 -1.745505</span><br><span class=\"line\">2 -0.263952  0.991460 -0.919069  0.266046</span><br><span class=\"line\">3 -0.709661  1.669052  1.037882 -1.705775</span><br><span class=\"line\">4 -0.919854 -0.042379  1.247642 -0.009920</span><br><span class=\"line\">5  0.290213  0.495767  0.362949  1.548106</span><br><span class=\"line\">6 -1.131345 -0.089329  0.337863 -0.945867</span><br><span class=\"line\">7 -0.932132  1.956030  0.017587 -0.016692</span><br><span class=\"line\">8 -0.575247  0.254161 -1.143704  0.215897</span><br><span class=\"line\">9  1.193555 -0.077118 -0.408530 -0.862495</span><br><span class=\"line\"></span><br><span class=\"line\"># break it into pieces</span><br><span class=\"line\">In [75]: pieces = [df[:3], df[3:7], df[7:]]</span><br><span class=\"line\"></span><br><span class=\"line\">In [76]: pd.concat(pieces)</span><br><span class=\"line\">Out[76]: </span><br><span class=\"line\">          0         1         2         3</span><br><span class=\"line\">0 -0.548702  1.467327 -1.015962 -0.483075</span><br><span class=\"line\">1  1.637550 -1.217659 -0.291519 -1.745505</span><br><span class=\"line\">2 -0.263952  0.991460 -0.919069  0.266046</span><br><span class=\"line\">3 -0.709661  1.669052  1.037882 -1.705775</span><br><span class=\"line\">4 -0.919854 -0.042379  1.247642 -0.009920</span><br><span class=\"line\">5  0.290213  0.495767  0.362949  1.548106</span><br><span class=\"line\">6 -1.131345 -0.089329  0.337863 -0.945867</span><br><span class=\"line\">7 -0.932132  1.956030  0.017587 -0.016692</span><br><span class=\"line\">8 -0.575247  0.254161 -1.143704  0.215897</span><br><span class=\"line\">9  1.193555 -0.077118 -0.408530 -0.862495</span><br></pre></td></tr></table></figure>\n<p>Note</p>\n<p>Adding a column to a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> is relatively fast. However, adding a row requires a copy, and may be expensive. We recommend passing a pre-built list of records to the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> constructor instead of building a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a> by iteratively appending records to it. See <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-concatenation\">Appending to dataframe</a> for more.</p>\n<h3 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h3><p>SQL style merges. See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-join\">Database style joining</a> section.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [77]: left = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;], &#x27;lval&#x27;: [1, 2]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [78]: right = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;], &#x27;rval&#x27;: [4, 5]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [79]: left</span><br><span class=\"line\">Out[79]: </span><br><span class=\"line\">   key  lval</span><br><span class=\"line\">0  foo     1</span><br><span class=\"line\">1  foo     2</span><br><span class=\"line\"></span><br><span class=\"line\">In [80]: right</span><br><span class=\"line\">Out[80]: </span><br><span class=\"line\">   key  rval</span><br><span class=\"line\">0  foo     4</span><br><span class=\"line\">1  foo     5</span><br><span class=\"line\"></span><br><span class=\"line\">In [81]: pd.merge(left, right, on=&#x27;key&#x27;)</span><br><span class=\"line\">Out[81]: </span><br><span class=\"line\">   key  lval  rval</span><br><span class=\"line\">0  foo     1     4</span><br><span class=\"line\">1  foo     1     5</span><br><span class=\"line\">2  foo     2     4</span><br><span class=\"line\">3  foo     2     5</span><br></pre></td></tr></table></figure>\n<p>Another example that can be given is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [82]: left = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;], &#x27;lval&#x27;: [1, 2]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: right = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;], &#x27;rval&#x27;: [4, 5]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: left</span><br><span class=\"line\">Out[84]: </span><br><span class=\"line\">   key  lval</span><br><span class=\"line\">0  foo     1</span><br><span class=\"line\">1  bar     2</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: right</span><br><span class=\"line\">Out[85]: </span><br><span class=\"line\">   key  rval</span><br><span class=\"line\">0  foo     4</span><br><span class=\"line\">1  bar     5</span><br><span class=\"line\"></span><br><span class=\"line\">In [86]: pd.merge(left, right, on=&#x27;key&#x27;)</span><br><span class=\"line\">Out[86]: </span><br><span class=\"line\">   key  lval  rval</span><br><span class=\"line\">0  foo     1     4</span><br><span class=\"line\">1  bar     2     5</span><br></pre></td></tr></table></figure>\n<h2 id=\"Grouping\"><a href=\"#Grouping\" class=\"headerlink\" title=\"Grouping\"></a>Grouping</h2><p>By “group by” we are referring to a process involving one or more of the following steps:</p>\n<blockquote>\n<ul>\n<li><strong>Splitting</strong> the data into groups based on some criteria</li>\n<li><strong>Applying</strong> a function to each group independently</li>\n<li><strong>Combining</strong> the results into a data structure</li>\n</ul>\n</blockquote>\n<p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#groupby\">Grouping section</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [87]: df = pd.DataFrame(&#123;&#x27;A&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;foo&#x27;, &#x27;bar&#x27;,</span><br><span class=\"line\">   ....:                          &#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;foo&#x27;, &#x27;foo&#x27;],</span><br><span class=\"line\">   ....:                    &#x27;B&#x27;: [&#x27;one&#x27;, &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;,</span><br><span class=\"line\">   ....:                          &#x27;two&#x27;, &#x27;two&#x27;, &#x27;one&#x27;, &#x27;three&#x27;],</span><br><span class=\"line\">   ....:                    &#x27;C&#x27;: np.random.randn(8),</span><br><span class=\"line\">   ....:                    &#x27;D&#x27;: np.random.randn(8)&#125;)</span><br><span class=\"line\">   ....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [88]: df</span><br><span class=\"line\">Out[88]: </span><br><span class=\"line\">     A      B         C         D</span><br><span class=\"line\">0  foo    one  1.346061 -1.577585</span><br><span class=\"line\">1  bar    one  1.511763  0.396823</span><br><span class=\"line\">2  foo    two  1.627081 -0.105381</span><br><span class=\"line\">3  bar  three -0.990582 -0.532532</span><br><span class=\"line\">4  foo    two -0.441652  1.453749</span><br><span class=\"line\">5  bar    two  1.211526  1.208843</span><br><span class=\"line\">6  foo    one  0.268520 -0.080952</span><br><span class=\"line\">7  foo  three  0.024580 -0.264610</span><br></pre></td></tr></table></figure>\n<p>Grouping and then applying the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum\"><code>sum()</code></a> function to the resulting groups.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [89]: df.groupby(&#x27;A&#x27;).sum()</span><br><span class=\"line\">Out[89]: </span><br><span class=\"line\">            C         D</span><br><span class=\"line\">A                      </span><br><span class=\"line\">bar  1.732707  1.073134</span><br><span class=\"line\">foo  2.824590 -0.574779</span><br></pre></td></tr></table></figure>\n<p>Grouping by multiple columns forms a hierarchical index, and again we can apply the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum\"><code>sum()</code></a> function.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [90]: df.groupby([&#x27;A&#x27;, &#x27;B&#x27;]).sum()</span><br><span class=\"line\">Out[90]: </span><br><span class=\"line\">                  C         D</span><br><span class=\"line\">A   B                        </span><br><span class=\"line\">bar one    1.511763  0.396823</span><br><span class=\"line\">    three -0.990582 -0.532532</span><br><span class=\"line\">    two    1.211526  1.208843</span><br><span class=\"line\">foo one    1.614581 -1.658537</span><br><span class=\"line\">    three  0.024580 -0.264610</span><br><span class=\"line\">    two    1.185429  1.348368</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reshaping\"><a href=\"#Reshaping\" class=\"headerlink\" title=\"Reshaping\"></a>Reshaping</h2><p>See the sections on <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced-hierarchical\">Hierarchical Indexing</a> and <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-stacking\">Reshaping</a>.</p>\n<h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [91]: tuples = list(zip(*[[&#x27;bar&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;, &#x27;baz&#x27;,</span><br><span class=\"line\">   ....:                      &#x27;foo&#x27;, &#x27;foo&#x27;, &#x27;qux&#x27;, &#x27;qux&#x27;],</span><br><span class=\"line\">   ....:                     [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;one&#x27;, &#x27;two&#x27;,</span><br><span class=\"line\">   ....:                      &#x27;one&#x27;, &#x27;two&#x27;, &#x27;one&#x27;, &#x27;two&#x27;]]))</span><br><span class=\"line\">   ....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [92]: index = pd.MultiIndex.from_tuples(tuples, names=[&#x27;first&#x27;, &#x27;second&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [93]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[&#x27;A&#x27;, &#x27;B&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [94]: df2 = df[:4]</span><br><span class=\"line\"></span><br><span class=\"line\">In [95]: df2</span><br><span class=\"line\">Out[95]: </span><br><span class=\"line\">                     A         B</span><br><span class=\"line\">first second                    </span><br><span class=\"line\">bar   one    -0.727965 -0.589346</span><br><span class=\"line\">      two     0.339969 -0.693205</span><br><span class=\"line\">baz   one    -0.339355  0.593616</span><br><span class=\"line\">      two     0.884345  1.591431</span><br></pre></td></tr></table></figure>\n<p>The <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack\"><code>stack()</code></a> method “compresses” a level in the DataFrame’s columns.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [96]: stacked = df2.stack()</span><br><span class=\"line\"></span><br><span class=\"line\">In [97]: stacked</span><br><span class=\"line\">Out[97]: </span><br><span class=\"line\">first  second   </span><br><span class=\"line\">bar    one     A   -0.727965</span><br><span class=\"line\">               B   -0.589346</span><br><span class=\"line\">       two     A    0.339969</span><br><span class=\"line\">               B   -0.693205</span><br><span class=\"line\">baz    one     A   -0.339355</span><br><span class=\"line\">               B    0.593616</span><br><span class=\"line\">       two     A    0.884345</span><br><span class=\"line\">               B    1.591431</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>With a “stacked” DataFrame or Series (having a <code>MultiIndex</code> as the <code>index</code>), the inverse operation of <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack\"><code>stack()</code></a> is <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack\"><code>unstack()</code></a>, which by default unstacks the <strong>last level</strong>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [98]: stacked.unstack()</span><br><span class=\"line\">Out[98]: </span><br><span class=\"line\">                     A         B</span><br><span class=\"line\">first second                    </span><br><span class=\"line\">bar   one    -0.727965 -0.589346</span><br><span class=\"line\">      two     0.339969 -0.693205</span><br><span class=\"line\">baz   one    -0.339355  0.593616</span><br><span class=\"line\">      two     0.884345  1.591431</span><br><span class=\"line\"></span><br><span class=\"line\">In [99]: stacked.unstack(1)</span><br><span class=\"line\">Out[99]: </span><br><span class=\"line\">second        one       two</span><br><span class=\"line\">first                      </span><br><span class=\"line\">bar   A -0.727965  0.339969</span><br><span class=\"line\">      B -0.589346 -0.693205</span><br><span class=\"line\">baz   A -0.339355  0.884345</span><br><span class=\"line\">      B  0.593616  1.591431</span><br><span class=\"line\"></span><br><span class=\"line\">In [100]: stacked.unstack(0)</span><br><span class=\"line\">Out[100]: </span><br><span class=\"line\">first          bar       baz</span><br><span class=\"line\">second                      </span><br><span class=\"line\">one    A -0.727965 -0.339355</span><br><span class=\"line\">       B -0.589346  0.593616</span><br><span class=\"line\">two    A  0.339969  0.884345</span><br><span class=\"line\">       B -0.693205  1.591431</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pivot-tables\"><a href=\"#Pivot-tables\" class=\"headerlink\" title=\"Pivot tables\"></a>Pivot tables</h3><p>See the section on <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-pivot\">Pivot Tables</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [101]: df = pd.DataFrame(&#123;&#x27;A&#x27;: [&#x27;one&#x27;, &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;] * 3,</span><br><span class=\"line\">   .....:                    &#x27;B&#x27;: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;] * 4,</span><br><span class=\"line\">   .....:                    &#x27;C&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;, &#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;bar&#x27;, &#x27;bar&#x27;] * 2,</span><br><span class=\"line\">   .....:                    &#x27;D&#x27;: np.random.randn(12),</span><br><span class=\"line\">   .....:                    &#x27;E&#x27;: np.random.randn(12)&#125;)</span><br><span class=\"line\">   .....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [102]: df</span><br><span class=\"line\">Out[102]: </span><br><span class=\"line\">        A  B    C         D         E</span><br><span class=\"line\">0     one  A  foo -1.202872  0.047609</span><br><span class=\"line\">1     one  B  foo -1.814470 -0.136473</span><br><span class=\"line\">2     two  C  foo  1.018601 -0.561757</span><br><span class=\"line\">3   three  A  bar -0.595447 -1.623033</span><br><span class=\"line\">4     one  B  bar  1.395433  0.029399</span><br><span class=\"line\">5     one  C  bar -0.392670 -0.542108</span><br><span class=\"line\">6     two  A  foo  0.007207  0.282696</span><br><span class=\"line\">7   three  B  foo  1.928123 -0.087302</span><br><span class=\"line\">8     one  C  foo -0.055224 -1.575170</span><br><span class=\"line\">9     one  A  bar  2.395985  1.771208</span><br><span class=\"line\">10    two  B  bar  1.552825  0.816482</span><br><span class=\"line\">11  three  C  bar  0.166599  1.100230</span><br></pre></td></tr></table></figure>\n<p>We can produce pivot tables from this data very easily:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [103]: pd.pivot_table(df, values=&#x27;D&#x27;, index=[&#x27;A&#x27;, &#x27;B&#x27;], columns=[&#x27;C&#x27;])</span><br><span class=\"line\">Out[103]: </span><br><span class=\"line\">C             bar       foo</span><br><span class=\"line\">A     B                    </span><br><span class=\"line\">one   A  2.395985 -1.202872</span><br><span class=\"line\">      B  1.395433 -1.814470</span><br><span class=\"line\">      C -0.392670 -0.055224</span><br><span class=\"line\">three A -0.595447       NaN</span><br><span class=\"line\">      B       NaN  1.928123</span><br><span class=\"line\">      C  0.166599       NaN</span><br><span class=\"line\">two   A       NaN  0.007207</span><br><span class=\"line\">      B  1.552825       NaN</span><br><span class=\"line\">      C       NaN  1.018601</span><br></pre></td></tr></table></figure>\n<h2 id=\"Time-series\"><a href=\"#Time-series\" class=\"headerlink\" title=\"Time series\"></a>Time series</h2><p>pandas has simple, powerful, and efficient functionality for performing resampling operations during frequency conversion (e.g., converting secondly data into 5-minutely data). This is extremely common in, but not limited to, financial applications. See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries\">Time Series section</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [104]: rng = pd.date_range(&#x27;1/1/2012&#x27;, periods=100, freq=&#x27;S&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [105]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)</span><br><span class=\"line\"></span><br><span class=\"line\">In [106]: ts.resample(&#x27;5Min&#x27;).sum()</span><br><span class=\"line\">Out[106]: </span><br><span class=\"line\">2012-01-01    24182</span><br><span class=\"line\">Freq: 5T, dtype: int64</span><br></pre></td></tr></table></figure>\n<p>Time zone representation:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [107]: rng = pd.date_range(&#x27;3/6/2012 00:00&#x27;, periods=5, freq=&#x27;D&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [108]: ts = pd.Series(np.random.randn(len(rng)), rng)</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: ts</span><br><span class=\"line\">Out[109]: </span><br><span class=\"line\">2012-03-06    1.857704</span><br><span class=\"line\">2012-03-07   -1.193545</span><br><span class=\"line\">2012-03-08    0.677510</span><br><span class=\"line\">2012-03-09   -0.153931</span><br><span class=\"line\">2012-03-10    0.520091</span><br><span class=\"line\">Freq: D, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [110]: ts_utc = ts.tz_localize(&#x27;UTC&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [111]: ts_utc</span><br><span class=\"line\">Out[111]: </span><br><span class=\"line\">2012-03-06 00:00:00+00:00    1.857704</span><br><span class=\"line\">2012-03-07 00:00:00+00:00   -1.193545</span><br><span class=\"line\">2012-03-08 00:00:00+00:00    0.677510</span><br><span class=\"line\">2012-03-09 00:00:00+00:00   -0.153931</span><br><span class=\"line\">2012-03-10 00:00:00+00:00    0.520091</span><br><span class=\"line\">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Converting to another time zone:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [112]: ts_utc.tz_convert(&#x27;US/Eastern&#x27;)</span><br><span class=\"line\">Out[112]: </span><br><span class=\"line\">2012-03-05 19:00:00-05:00    1.857704</span><br><span class=\"line\">2012-03-06 19:00:00-05:00   -1.193545</span><br><span class=\"line\">2012-03-07 19:00:00-05:00    0.677510</span><br><span class=\"line\">2012-03-08 19:00:00-05:00   -0.153931</span><br><span class=\"line\">2012-03-09 19:00:00-05:00    0.520091</span><br><span class=\"line\">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Converting between time span representations:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [113]: rng = pd.date_range(&#x27;1/1/2012&#x27;, periods=5, freq=&#x27;M&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [114]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: ts</span><br><span class=\"line\">Out[115]: </span><br><span class=\"line\">2012-01-31   -1.475051</span><br><span class=\"line\">2012-02-29    0.722570</span><br><span class=\"line\">2012-03-31   -0.322646</span><br><span class=\"line\">2012-04-30   -1.601631</span><br><span class=\"line\">2012-05-31    0.778033</span><br><span class=\"line\">Freq: M, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [116]: ps = ts.to_period()</span><br><span class=\"line\"></span><br><span class=\"line\">In [117]: ps</span><br><span class=\"line\">Out[117]: </span><br><span class=\"line\">2012-01   -1.475051</span><br><span class=\"line\">2012-02    0.722570</span><br><span class=\"line\">2012-03   -0.322646</span><br><span class=\"line\">2012-04   -1.601631</span><br><span class=\"line\">2012-05    0.778033</span><br><span class=\"line\">Freq: M, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [118]: ps.to_timestamp()</span><br><span class=\"line\">Out[118]: </span><br><span class=\"line\">2012-01-01   -1.475051</span><br><span class=\"line\">2012-02-01    0.722570</span><br><span class=\"line\">2012-03-01   -0.322646</span><br><span class=\"line\">2012-04-01   -1.601631</span><br><span class=\"line\">2012-05-01    0.778033</span><br><span class=\"line\">Freq: MS, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Converting between period and timestamp enables some convenient arithmetic functions to be used. In the following example, we convert a quarterly frequency with year ending in November to 9am of the end of the month following the quarter end:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [119]: prng = pd.period_range(&#x27;1990Q1&#x27;, &#x27;2000Q4&#x27;, freq=&#x27;Q-NOV&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [120]: ts = pd.Series(np.random.randn(len(prng)), prng)</span><br><span class=\"line\"></span><br><span class=\"line\">In [121]: ts.index = (prng.asfreq(&#x27;M&#x27;, &#x27;e&#x27;) + 1).asfreq(&#x27;H&#x27;, &#x27;s&#x27;) + 9</span><br><span class=\"line\"></span><br><span class=\"line\">In [122]: ts.head()</span><br><span class=\"line\">Out[122]: </span><br><span class=\"line\">1990-03-01 09:00   -0.289342</span><br><span class=\"line\">1990-06-01 09:00    0.233141</span><br><span class=\"line\">1990-09-01 09:00   -0.223540</span><br><span class=\"line\">1990-12-01 09:00    0.542054</span><br><span class=\"line\">1991-03-01 09:00   -0.688585</span><br><span class=\"line\">Freq: H, dtype: float64</span><br></pre></td></tr></table></figure>\n<h2 id=\"Categoricals\"><a href=\"#Categoricals\" class=\"headerlink\" title=\"Categoricals\"></a>Categoricals</h2><p>pandas can include categorical data in a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame\"><code>DataFrame</code></a>. For full docs, see the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#categorical\">categorical introduction</a> and the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/arrays.html#api-arrays-categorical\">API documentation</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [123]: df = pd.DataFrame(&#123;&quot;id&quot;: [1, 2, 3, 4, 5, 6],</span><br><span class=\"line\">   .....:                    &quot;raw_grade&quot;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;e&#x27;]&#125;)</span><br><span class=\"line\">   .....: </span><br></pre></td></tr></table></figure>\n<p>Convert the raw grades to a categorical data type.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [124]: df[&quot;grade&quot;] = df[&quot;raw_grade&quot;].astype(&quot;category&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [125]: df[&quot;grade&quot;]</span><br><span class=\"line\">Out[125]: </span><br><span class=\"line\">0    a</span><br><span class=\"line\">1    b</span><br><span class=\"line\">2    b</span><br><span class=\"line\">3    a</span><br><span class=\"line\">4    a</span><br><span class=\"line\">5    e</span><br><span class=\"line\">Name: grade, dtype: category</span><br><span class=\"line\">Categories (3, object): [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;]</span><br></pre></td></tr></table></figure>\n<p>Rename the categories to more meaningful names (assigning to <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.categories.html#pandas.Series.cat.categories\"><code>Series.cat.categories()</code></a> is in place!).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [126]: df[&quot;grade&quot;].cat.categories = [&quot;very good&quot;, &quot;good&quot;, &quot;very bad&quot;]</span><br></pre></td></tr></table></figure>\n<p>Reorder the categories and simultaneously add the missing categories (methods under <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.html#pandas.Series.cat\"><code>Series.cat()</code></a> return a new <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series\"><code>Series</code></a> by default).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [127]: df[&quot;grade&quot;] = df[&quot;grade&quot;].cat.set_categories([&quot;very bad&quot;, &quot;bad&quot;, &quot;medium&quot;,</span><br><span class=\"line\">   .....:                                               &quot;good&quot;, &quot;very good&quot;])</span><br><span class=\"line\">   .....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [128]: df[&quot;grade&quot;]</span><br><span class=\"line\">Out[128]: </span><br><span class=\"line\">0    very good</span><br><span class=\"line\">1         good</span><br><span class=\"line\">2         good</span><br><span class=\"line\">3    very good</span><br><span class=\"line\">4    very good</span><br><span class=\"line\">5     very bad</span><br><span class=\"line\">Name: grade, dtype: category</span><br><span class=\"line\">Categories (5, object): [&#x27;very bad&#x27;, &#x27;bad&#x27;, &#x27;medium&#x27;, &#x27;good&#x27;, &#x27;very good&#x27;]</span><br></pre></td></tr></table></figure>\n<p>Sorting is per order in the categories, not lexical order.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [129]: df.sort_values(by=&quot;grade&quot;)</span><br><span class=\"line\">Out[129]: </span><br><span class=\"line\">   id raw_grade      grade</span><br><span class=\"line\">5   6         e   very bad</span><br><span class=\"line\">1   2         b       good</span><br><span class=\"line\">2   3         b       good</span><br><span class=\"line\">0   1         a  very good</span><br><span class=\"line\">3   4         a  very good</span><br><span class=\"line\">4   5         a  very good</span><br></pre></td></tr></table></figure>\n<p>Grouping by a categorical column also shows empty categories.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [130]: df.groupby(&quot;grade&quot;).size()</span><br><span class=\"line\">Out[130]: </span><br><span class=\"line\">grade</span><br><span class=\"line\">very bad     1</span><br><span class=\"line\">bad          0</span><br><span class=\"line\">medium       0</span><br><span class=\"line\">good         2</span><br><span class=\"line\">very good    3</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n<h2 id=\"Plotting\"><a href=\"#Plotting\" class=\"headerlink\" title=\"Plotting\"></a>Plotting</h2><p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization\">Plotting</a> docs.</p>\n<p>We use the standard convention for referencing the matplotlib API:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [131]: import matplotlib.pyplot as plt</span><br><span class=\"line\"></span><br><span class=\"line\">In [132]: plt.close(&#x27;all&#x27;)</span><br><span class=\"line\">In [133]: ts = pd.Series(np.random.randn(1000),</span><br><span class=\"line\">   .....:                index=pd.date_range(&#x27;1/1/2000&#x27;, periods=1000))</span><br><span class=\"line\">   .....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [134]: ts = ts.cumsum()</span><br><span class=\"line\"></span><br><span class=\"line\">In [135]: ts.plot()</span><br><span class=\"line\">Out[135]: &lt;AxesSubplot:&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pandas.pydata.org/pandas-docs/stable/_images/series_plot_basic.png\" alt=\"../_images/series_plot_basic.png\"></p>\n<p>On a DataFrame, the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot\"><code>plot()</code></a> method is a convenience to plot all of the columns with labels:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [136]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index,</span><br><span class=\"line\">   .....:                   columns=[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;])</span><br><span class=\"line\">   .....: </span><br><span class=\"line\"></span><br><span class=\"line\">In [137]: df = df.cumsum()</span><br><span class=\"line\"></span><br><span class=\"line\">In [138]: plt.figure()</span><br><span class=\"line\">Out[138]: &lt;Figure size 640x480 with 0 Axes&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [139]: df.plot()</span><br><span class=\"line\">Out[139]: &lt;AxesSubplot:&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [140]: plt.legend(loc=&#x27;best&#x27;)</span><br><span class=\"line\">Out[140]: &lt;matplotlib.legend.Legend at 0x7fbfb29f0670&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pandas.pydata.org/pandas-docs/stable/_images/frame_plot_basic.png\" alt=\"../_images/frame_plot_basic.png\"></p>\n<h2 id=\"Getting-data-in-out\"><a href=\"#Getting-data-in-out\" class=\"headerlink\" title=\"Getting data in/out\"></a>Getting data in/out</h2><h3 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h3><p><a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-store-in-csv\">Writing to a csv file.</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [141]: df.to_csv(&#x27;foo.csv&#x27;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-csv-table\">Reading from a csv file.</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [142]: pd.read_csv(&#x27;foo.csv&#x27;)</span><br><span class=\"line\">Out[142]: </span><br><span class=\"line\">     Unnamed: 0          A          B          C          D</span><br><span class=\"line\">0    2000-01-01   0.350262   0.843315   1.798556   0.782234</span><br><span class=\"line\">1    2000-01-02  -0.586873   0.034907   1.923792  -0.562651</span><br><span class=\"line\">2    2000-01-03  -1.245477  -0.963406   2.269575  -1.612566</span><br><span class=\"line\">3    2000-01-04  -0.252830  -0.498066   3.176886  -1.275581</span><br><span class=\"line\">4    2000-01-05  -1.044057   0.118042   2.768571   0.386039</span><br><span class=\"line\">..          ...        ...        ...        ...        ...</span><br><span class=\"line\">995  2002-09-22 -48.017654  31.474551  69.146374 -47.541670</span><br><span class=\"line\">996  2002-09-23 -47.207912  32.627390  68.505254 -48.828331</span><br><span class=\"line\">997  2002-09-24 -48.907133  31.990402  67.310924 -49.391051</span><br><span class=\"line\">998  2002-09-25 -50.146062  33.716770  67.717434 -49.037577</span><br><span class=\"line\">999  2002-09-26 -49.724318  33.479952  68.108014 -48.822030</span><br><span class=\"line\"></span><br><span class=\"line\">[1000 rows x 5 columns]</span><br></pre></td></tr></table></figure>\n<h3 id=\"HDF5\"><a href=\"#HDF5\" class=\"headerlink\" title=\"HDF5\"></a>HDF5</h3><p>Reading and writing to <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5\">HDFStores</a>.</p>\n<p>Writing to a HDF5 Store.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [143]: df.to_hdf(&#x27;foo.h5&#x27;, &#x27;df&#x27;)</span><br></pre></td></tr></table></figure>\n<p>Reading from a HDF5 Store.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [144]: pd.read_hdf(&#x27;foo.h5&#x27;, &#x27;df&#x27;)</span><br><span class=\"line\">Out[144]: </span><br><span class=\"line\">                    A          B          C          D</span><br><span class=\"line\">2000-01-01   0.350262   0.843315   1.798556   0.782234</span><br><span class=\"line\">2000-01-02  -0.586873   0.034907   1.923792  -0.562651</span><br><span class=\"line\">2000-01-03  -1.245477  -0.963406   2.269575  -1.612566</span><br><span class=\"line\">2000-01-04  -0.252830  -0.498066   3.176886  -1.275581</span><br><span class=\"line\">2000-01-05  -1.044057   0.118042   2.768571   0.386039</span><br><span class=\"line\">...               ...        ...        ...        ...</span><br><span class=\"line\">2002-09-22 -48.017654  31.474551  69.146374 -47.541670</span><br><span class=\"line\">2002-09-23 -47.207912  32.627390  68.505254 -48.828331</span><br><span class=\"line\">2002-09-24 -48.907133  31.990402  67.310924 -49.391051</span><br><span class=\"line\">2002-09-25 -50.146062  33.716770  67.717434 -49.037577</span><br><span class=\"line\">2002-09-26 -49.724318  33.479952  68.108014 -48.822030</span><br><span class=\"line\"></span><br><span class=\"line\">[1000 rows x 4 columns]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Excel\"><a href=\"#Excel\" class=\"headerlink\" title=\"Excel\"></a>Excel</h3><p>Reading and writing to <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel\">MS Excel</a>.</p>\n<p>Writing to an excel file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [145]: df.to_excel(&#x27;foo.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;)</span><br></pre></td></tr></table></figure>\n<p>Reading from an excel file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [146]: pd.read_excel(&#x27;foo.xlsx&#x27;, &#x27;Sheet1&#x27;, index_col=None, na_values=[&#x27;NA&#x27;])</span><br><span class=\"line\">Out[146]: </span><br><span class=\"line\">    Unnamed: 0          A          B          C          D</span><br><span class=\"line\">0   2000-01-01   0.350262   0.843315   1.798556   0.782234</span><br><span class=\"line\">1   2000-01-02  -0.586873   0.034907   1.923792  -0.562651</span><br><span class=\"line\">2   2000-01-03  -1.245477  -0.963406   2.269575  -1.612566</span><br><span class=\"line\">3   2000-01-04  -0.252830  -0.498066   3.176886  -1.275581</span><br><span class=\"line\">4   2000-01-05  -1.044057   0.118042   2.768571   0.386039</span><br><span class=\"line\">..         ...        ...        ...        ...        ...</span><br><span class=\"line\">995 2002-09-22 -48.017654  31.474551  69.146374 -47.541670</span><br><span class=\"line\">996 2002-09-23 -47.207912  32.627390  68.505254 -48.828331</span><br><span class=\"line\">997 2002-09-24 -48.907133  31.990402  67.310924 -49.391051</span><br><span class=\"line\">998 2002-09-25 -50.146062  33.716770  67.717434 -49.037577</span><br><span class=\"line\">999 2002-09-26 -49.724318  33.479952  68.108014 -48.822030</span><br><span class=\"line\"></span><br><span class=\"line\">[1000 rows x 5 columns]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Gotchas\"><a href=\"#Gotchas\" class=\"headerlink\" title=\"Gotchas\"></a>Gotchas</h2><p>If you are attempting to perform an operation you might see an exception like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; if pd.Series([False, True, False]):</span><br><span class=\"line\">...     print(&quot;I was true&quot;)</span><br><span class=\"line\">Traceback</span><br><span class=\"line\">    ...</span><br><span class=\"line\">ValueError: The truth value of an array is ambiguous. Use a.empty, a.any() or a.all().</span><br></pre></td></tr></table></figure>"},{"title":"pyplot","date":"2022-03-01T03:32:38.000Z","_content":"\n5 minute to pyplot\n\n<!-- more -->\n\n\n[TOC]\n\n#中文显示\n```\nimport matplotlib\nfrom matplotlib import pyplot as plt\nloss1=[1,2,3]\nloss2=[1,2,1]\nloss3=[2,3,1]\n\nmatplotlib.rcParams['font.family']='STSong'#显示中文 修改了全局变量\nmatplotlib.rcParams['font.size']=10\nplt.title('主成分分析')\nplt.xlabel('主成分数量')\nplt.ylabel('loss')\nplt.plot(loss1,label='loss1')\nplt.plot(loss2,label='loss2')\nplt.plot(loss3,label='loss3')\nplt.legend()#图例\nplt.show()\n```\n效果图\n![1563429869265](pics/1563429869265.png)\n\n#多个子图\n\n```\nimport matplotlib\nfrom matplotlib import pyplot as plt\nloss1=[1,2,3]\nloss2=[1,2,1]\nloss3=[2,3,1]\n\nplt.subplot(2,1,1) #两行一列图中的第一幅图\nplt.plot(loss1)\nplt.plot(loss2)\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(labels=['train_loss', 'test_loss'])\n\nplt.subplot(2,1,2) #两行一列图中的第一幅图\nplt.plot(loss2)\nplt.plot(loss3)\nplt.xlabel('epoch')\nplt.ylabel('auc')\nplt.legend(labels=['train_auc', 'test_auc'])\n\nplt.show()\n```\n\n效果图\n\n![1563430110118](pics/1563430110118.png)\n\n#散点图\n\n## 2D三点图\n\n```\nimport matplotlib\nimport numpy as np\nfrom matplotlib import pyplot as plt\nx=np.random.rand(2,20)\nlabel=np.random.randint(2, size=20)\n\nplt.scatter(x[0,:],x[1,:],c=label)#同一个label的点是同一个颜色\nplt.show()\n```\n\n效果图\n\n![1563430474219](./pics/1563430474219.png)\n\n## 3d 三点图\n\n```python\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter(X_new[:,0].reshape(-1),X_new[:,1].reshape(-1), X_new[:,2].reshape(-1))\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()\n```\n\n效果：\n\n![1566376082129](pyplot.assets/1566376082129.png)\n\n# 实时画图\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.axis([0,50,60,80])\nfor i in np.arange(1,5):\n    z = 68 + 4 * np.random.randn(50)\n    zm = np.cumsum(z) / range(1,len(z)+1)\n    plt.plot(zm)    \n\nn = np.arange(1,51)\nsu = 68 + 4 / np.sqrt(n)\nsl = 68 - 4 / np.sqrt(n)\n\nplt.plot(n,su,n,sl) \nplt.show()#阻塞函数\n\n```\n\n","source":"_posts/0_代码相关/pyplot.md","raw":"---\ntitle: pyplot\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n5 minute to pyplot\n\n<!-- more -->\n\n\n[TOC]\n\n#中文显示\n```\nimport matplotlib\nfrom matplotlib import pyplot as plt\nloss1=[1,2,3]\nloss2=[1,2,1]\nloss3=[2,3,1]\n\nmatplotlib.rcParams['font.family']='STSong'#显示中文 修改了全局变量\nmatplotlib.rcParams['font.size']=10\nplt.title('主成分分析')\nplt.xlabel('主成分数量')\nplt.ylabel('loss')\nplt.plot(loss1,label='loss1')\nplt.plot(loss2,label='loss2')\nplt.plot(loss3,label='loss3')\nplt.legend()#图例\nplt.show()\n```\n效果图\n![1563429869265](pics/1563429869265.png)\n\n#多个子图\n\n```\nimport matplotlib\nfrom matplotlib import pyplot as plt\nloss1=[1,2,3]\nloss2=[1,2,1]\nloss3=[2,3,1]\n\nplt.subplot(2,1,1) #两行一列图中的第一幅图\nplt.plot(loss1)\nplt.plot(loss2)\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(labels=['train_loss', 'test_loss'])\n\nplt.subplot(2,1,2) #两行一列图中的第一幅图\nplt.plot(loss2)\nplt.plot(loss3)\nplt.xlabel('epoch')\nplt.ylabel('auc')\nplt.legend(labels=['train_auc', 'test_auc'])\n\nplt.show()\n```\n\n效果图\n\n![1563430110118](pics/1563430110118.png)\n\n#散点图\n\n## 2D三点图\n\n```\nimport matplotlib\nimport numpy as np\nfrom matplotlib import pyplot as plt\nx=np.random.rand(2,20)\nlabel=np.random.randint(2, size=20)\n\nplt.scatter(x[0,:],x[1,:],c=label)#同一个label的点是同一个颜色\nplt.show()\n```\n\n效果图\n\n![1563430474219](./pics/1563430474219.png)\n\n## 3d 三点图\n\n```python\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter(X_new[:,0].reshape(-1),X_new[:,1].reshape(-1), X_new[:,2].reshape(-1))\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()\n```\n\n效果：\n\n![1566376082129](pyplot.assets/1566376082129.png)\n\n# 实时画图\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.axis([0,50,60,80])\nfor i in np.arange(1,5):\n    z = 68 + 4 * np.random.randn(50)\n    zm = np.cumsum(z) / range(1,len(z)+1)\n    plt.plot(zm)    \n\nn = np.arange(1,51)\nsu = 68 + 4 / np.sqrt(n)\nsl = 68 - 4 / np.sqrt(n)\n\nplt.plot(n,su,n,sl) \nplt.show()#阻塞函数\n\n```\n\n","slug":"0_代码相关/pyplot","published":1,"updated":"2022-03-01T03:52:11.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4y003n8s328qnydfnv","content":"<p>5 minute to pyplot</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"中文显示\"><a href=\"#中文显示\" class=\"headerlink\" title=\"中文显示\"></a>中文显示</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import matplotlib</span><br><span class=\"line\">from matplotlib import pyplot as plt</span><br><span class=\"line\">loss1=[1,2,3]</span><br><span class=\"line\">loss2=[1,2,1]</span><br><span class=\"line\">loss3=[2,3,1]</span><br><span class=\"line\"></span><br><span class=\"line\">matplotlib.rcParams[&#x27;font.family&#x27;]=&#x27;STSong&#x27;#显示中文 修改了全局变量</span><br><span class=\"line\">matplotlib.rcParams[&#x27;font.size&#x27;]=10</span><br><span class=\"line\">plt.title(&#x27;主成分分析&#x27;)</span><br><span class=\"line\">plt.xlabel(&#x27;主成分数量&#x27;)</span><br><span class=\"line\">plt.ylabel(&#x27;loss&#x27;)</span><br><span class=\"line\">plt.plot(loss1,label=&#x27;loss1&#x27;)</span><br><span class=\"line\">plt.plot(loss2,label=&#x27;loss2&#x27;)</span><br><span class=\"line\">plt.plot(loss3,label=&#x27;loss3&#x27;)</span><br><span class=\"line\">plt.legend()#图例</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>效果图<br></p>\n<h1 id=\"多个子图\"><a href=\"#多个子图\" class=\"headerlink\" title=\"多个子图\"></a>多个子图</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import matplotlib</span><br><span class=\"line\">from matplotlib import pyplot as plt</span><br><span class=\"line\">loss1=[1,2,3]</span><br><span class=\"line\">loss2=[1,2,1]</span><br><span class=\"line\">loss3=[2,3,1]</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(2,1,1) #两行一列图中的第一幅图</span><br><span class=\"line\">plt.plot(loss1)</span><br><span class=\"line\">plt.plot(loss2)</span><br><span class=\"line\">plt.xlabel(&#x27;epoch&#x27;)</span><br><span class=\"line\">plt.ylabel(&#x27;loss&#x27;)</span><br><span class=\"line\">plt.legend(labels=[&#x27;train_loss&#x27;, &#x27;test_loss&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(2,1,2) #两行一列图中的第一幅图</span><br><span class=\"line\">plt.plot(loss2)</span><br><span class=\"line\">plt.plot(loss3)</span><br><span class=\"line\">plt.xlabel(&#x27;epoch&#x27;)</span><br><span class=\"line\">plt.ylabel(&#x27;auc&#x27;)</span><br><span class=\"line\">plt.legend(labels=[&#x27;train_auc&#x27;, &#x27;test_auc&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>效果图</p>\n\n<h1 id=\"散点图\"><a href=\"#散点图\" class=\"headerlink\" title=\"散点图\"></a>散点图</h1><h2 id=\"2D三点图\"><a href=\"#2D三点图\" class=\"headerlink\" title=\"2D三点图\"></a>2D三点图</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import matplotlib</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">from matplotlib import pyplot as plt</span><br><span class=\"line\">x=np.random.rand(2,20)</span><br><span class=\"line\">label=np.random.randint(2, size=20)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter(x[0,:],x[1,:],c=label)#同一个label的点是同一个颜色</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>效果图</p>\n<p><img src=\"./pics/1563430474219.png\" alt=\"1563430474219\"></p>\n<h2 id=\"3d-三点图\"><a href=\"#3d-三点图\" class=\"headerlink\" title=\"3d 三点图\"></a>3d 三点图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\">ax = fig.add_subplot(<span class=\"number\">111</span>, projection=<span class=\"string\">&#x27;3d&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.scatter(X_new[:,<span class=\"number\">0</span>].reshape(-<span class=\"number\">1</span>),X_new[:,<span class=\"number\">1</span>].reshape(-<span class=\"number\">1</span>), X_new[:,<span class=\"number\">2</span>].reshape(-<span class=\"number\">1</span>))</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">&#x27;X Label&#x27;</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">&#x27;Y Label&#x27;</span>)</span><br><span class=\"line\">ax.set_zlabel(<span class=\"string\">&#x27;Z Label&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n\n<h1 id=\"实时画图\"><a href=\"#实时画图\" class=\"headerlink\" title=\"实时画图\"></a>实时画图</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">plt.axis([<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">60</span>,<span class=\"number\">80</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">    z = <span class=\"number\">68</span> + <span class=\"number\">4</span> * np.random.randn(<span class=\"number\">50</span>)</span><br><span class=\"line\">    zm = np.cumsum(z) / <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(z)+<span class=\"number\">1</span>)</span><br><span class=\"line\">    plt.plot(zm)    </span><br><span class=\"line\"></span><br><span class=\"line\">n = np.arange(<span class=\"number\">1</span>,<span class=\"number\">51</span>)</span><br><span class=\"line\">su = <span class=\"number\">68</span> + <span class=\"number\">4</span> / np.sqrt(n)</span><br><span class=\"line\">sl = <span class=\"number\">68</span> - <span class=\"number\">4</span> / np.sqrt(n)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(n,su,n,sl) </span><br><span class=\"line\">plt.show()<span class=\"comment\">#阻塞函数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>5 minute to pyplot</p>","more":"<p>[TOC]</p>\n<h1 id=\"中文显示\"><a href=\"#中文显示\" class=\"headerlink\" title=\"中文显示\"></a>中文显示</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import matplotlib</span><br><span class=\"line\">from matplotlib import pyplot as plt</span><br><span class=\"line\">loss1=[1,2,3]</span><br><span class=\"line\">loss2=[1,2,1]</span><br><span class=\"line\">loss3=[2,3,1]</span><br><span class=\"line\"></span><br><span class=\"line\">matplotlib.rcParams[&#x27;font.family&#x27;]=&#x27;STSong&#x27;#显示中文 修改了全局变量</span><br><span class=\"line\">matplotlib.rcParams[&#x27;font.size&#x27;]=10</span><br><span class=\"line\">plt.title(&#x27;主成分分析&#x27;)</span><br><span class=\"line\">plt.xlabel(&#x27;主成分数量&#x27;)</span><br><span class=\"line\">plt.ylabel(&#x27;loss&#x27;)</span><br><span class=\"line\">plt.plot(loss1,label=&#x27;loss1&#x27;)</span><br><span class=\"line\">plt.plot(loss2,label=&#x27;loss2&#x27;)</span><br><span class=\"line\">plt.plot(loss3,label=&#x27;loss3&#x27;)</span><br><span class=\"line\">plt.legend()#图例</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>效果图<br></p>\n<h1 id=\"多个子图\"><a href=\"#多个子图\" class=\"headerlink\" title=\"多个子图\"></a>多个子图</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import matplotlib</span><br><span class=\"line\">from matplotlib import pyplot as plt</span><br><span class=\"line\">loss1=[1,2,3]</span><br><span class=\"line\">loss2=[1,2,1]</span><br><span class=\"line\">loss3=[2,3,1]</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(2,1,1) #两行一列图中的第一幅图</span><br><span class=\"line\">plt.plot(loss1)</span><br><span class=\"line\">plt.plot(loss2)</span><br><span class=\"line\">plt.xlabel(&#x27;epoch&#x27;)</span><br><span class=\"line\">plt.ylabel(&#x27;loss&#x27;)</span><br><span class=\"line\">plt.legend(labels=[&#x27;train_loss&#x27;, &#x27;test_loss&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(2,1,2) #两行一列图中的第一幅图</span><br><span class=\"line\">plt.plot(loss2)</span><br><span class=\"line\">plt.plot(loss3)</span><br><span class=\"line\">plt.xlabel(&#x27;epoch&#x27;)</span><br><span class=\"line\">plt.ylabel(&#x27;auc&#x27;)</span><br><span class=\"line\">plt.legend(labels=[&#x27;train_auc&#x27;, &#x27;test_auc&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>效果图</p>\n\n<h1 id=\"散点图\"><a href=\"#散点图\" class=\"headerlink\" title=\"散点图\"></a>散点图</h1><h2 id=\"2D三点图\"><a href=\"#2D三点图\" class=\"headerlink\" title=\"2D三点图\"></a>2D三点图</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import matplotlib</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">from matplotlib import pyplot as plt</span><br><span class=\"line\">x=np.random.rand(2,20)</span><br><span class=\"line\">label=np.random.randint(2, size=20)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter(x[0,:],x[1,:],c=label)#同一个label的点是同一个颜色</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>效果图</p>\n<p><img src=\"./pics/1563430474219.png\" alt=\"1563430474219\"></p>\n<h2 id=\"3d-三点图\"><a href=\"#3d-三点图\" class=\"headerlink\" title=\"3d 三点图\"></a>3d 三点图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\">ax = fig.add_subplot(<span class=\"number\">111</span>, projection=<span class=\"string\">&#x27;3d&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.scatter(X_new[:,<span class=\"number\">0</span>].reshape(-<span class=\"number\">1</span>),X_new[:,<span class=\"number\">1</span>].reshape(-<span class=\"number\">1</span>), X_new[:,<span class=\"number\">2</span>].reshape(-<span class=\"number\">1</span>))</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">&#x27;X Label&#x27;</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">&#x27;Y Label&#x27;</span>)</span><br><span class=\"line\">ax.set_zlabel(<span class=\"string\">&#x27;Z Label&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n\n<h1 id=\"实时画图\"><a href=\"#实时画图\" class=\"headerlink\" title=\"实时画图\"></a>实时画图</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">plt.axis([<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">60</span>,<span class=\"number\">80</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">    z = <span class=\"number\">68</span> + <span class=\"number\">4</span> * np.random.randn(<span class=\"number\">50</span>)</span><br><span class=\"line\">    zm = np.cumsum(z) / <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(z)+<span class=\"number\">1</span>)</span><br><span class=\"line\">    plt.plot(zm)    </span><br><span class=\"line\"></span><br><span class=\"line\">n = np.arange(<span class=\"number\">1</span>,<span class=\"number\">51</span>)</span><br><span class=\"line\">su = <span class=\"number\">68</span> + <span class=\"number\">4</span> / np.sqrt(n)</span><br><span class=\"line\">sl = <span class=\"number\">68</span> - <span class=\"number\">4</span> / np.sqrt(n)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(n,su,n,sl) </span><br><span class=\"line\">plt.show()<span class=\"comment\">#阻塞函数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"pyspark","date":"2022-03-01T03:32:38.000Z","_content":"\nPyspark 入门\n\n<!-- more -->\n\n\n[TOC]\n\n\n\n# spark context 和spark session的关系\n\n<img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/pyspark.assets/image-20200702140518336.png\" alt=\"image-20200702140518336\" style=\"zoom:50%;\" />\n\n可以由上节图中看出，Application、SparkSession、SparkContext、RDD之间具有包含关系，并且前三者是1对1的关系。\n\nSparkSession 是 Spark 2.0 版本引入的新入口，在这之前，创建一个 Application 对应的上下文是这样的(创建spark context，创建sqlcontext或者streamingContext或者别的context)：\n\n```scala\n//set up the spark configuration and create contexts\nval sparkConf = new SparkConf().setAppName(\"SparkSessionZipsExample\").setMaster(\"local\")\n// your handle to SparkContext to access other context like SQLContext\nval sc = new SparkContext(sparkConf).set(\"spark.some.config.option\", \"some-value\")\nval sqlContext = new org.apache.spark.sql.SQLContext(sc)\n```\n\n\n现在 SparkConf、SparkContext 和 SQLContext 都已经被封装在 SparkSession 当中，并且可以通过 builder 的方式创建（创建sparkSession，可直接调用sqlContext方法）：\n\n```\n// Create a SparkSession. No need to create SparkContext\n// You automatically get it as part of the SparkSession\nval warehouseLocation = \"file:${system:user.dir}/spark-warehouse\"\nval spark = SparkSession\n   .builder()\n   .appName(\"SparkSessionZipsExample\")\n   .config(\"spark.sql.warehouse.dir\", warehouseLocation)\n   .enableHiveSupport()\n   .getOrCreate()\n```\n\n# dataframe dataset  rdd\n\n参考 https://www.e-learn.cn/content/qita/784122\n\n简单来说，RDD是一种非结构化分部式数据集，每个元素都可以是不同的类型的数，通过sc.parallelize生成RDD。RDD中比较特殊的一种是key-value Pair RDD，即规定RDD的每个元素都是一个二元数组，其中第一个值是key，第二个值是value。\n\n这种特性就会给Pair RDD赋予一些特殊的操作，例如`groupByKey()`可以将具有相同key进行分组，其结果仍然得到Pair RDD，然后利用`mapValues()`对相同key的value进行函数计算；`reduceByKey()`、`countByKey()`和`sortByKey()`等一系列“ByKey()”操作同理。\n另外，两个Pair RDD具有像SQL一样的连接操作，例如两个Pair RDD进行`join()`后，具有相同key的元素的value会被放在一个元组里，key不相同的元素会被舍弃。`leftOuterJoin()`、`rightOuterJoin()`、`fullOuterJoin()`等操作同理。\n\nPair RDD已经被一定程度的格式化了，它的每个元素会具有key，但是value仍然具有很大的灵活性。DataFrame是一种完全格式化的数据集合，和数据库中的*表*的概念比较接近，它每列数据必须具有相同的数据类型。也正是由于DataFrame知道数据集合所有的类型信息，DataFrame可以进行列处理优化而获得比RDD更优的性能。\n在内部实现上，DataFrame是由`Row`对象为元素组成的集合，每个`Row`对象存储DataFrame的一行\n\n## RDD和dataframe使用上的的区别\n\n- RDD：没有列名称，只能使用数字来索引；具有`map()`、`reduce()`等方法并可指定任意函数进行计算;\n- DataFrame：一定有列名称（即使是默认生成的），可以通过`.col_name`或者`['col_name']`来索引列；具有表的相关操作（例如`select()`、`filter()`、`where()`、`join`），但是没有`map()`、`reduce()`等方法。\n- 有时候DataFrame的*表*相关操作不能处理一些问题，例如需要对一些数据利用指定的函数进行计算时，就需要将DataFrame转换为RDD。DataFrame可以直接利用`.rdd`获取对应的RDD对象，此RDD对象的每个元素使用`Row`对象来表示，每列值会成为`Row`对象的一个`域=>值`映射\n\n## RDD转化为dataframe\n\n就像之前的例子一样，可以利用\n\n```\ndataframe = spark.createDataFrame(rdd, schema=None, samplingRatio=None)\n```\n\n来将RDD转换为DataFrame，其中的参数设置需要注意：\n**schema**：DataFrame各列类型信息，在提前知道RDD所有类型信息时设定。例如\n\n```\nschema = StructType([StructField('col1', StringType()),          StructField('col2', IntegerType())])\n```\n\n**samplingRatio**：推测各列类型信息的采样比例，在未知RDD所有类型信息时，spark需要根据一定的数据量进行类型推测；默认情况下，spark会抽取前100的RDD进行推测，之后在真正将RDD转换为DataFrame时如果遇到类型信息不符会报错 *Some of types cannot be determined by the first 100 rows, please try again with sampling* 。同理采样比例较低，推测类型信息也可能错误。\n\n# PySpark - SparkContext\n\nSparkContext是任何spark功能的入口点。当我们运行任何Spark应用程序时，会启动一个驱动程序，它具有main函数，并且此处启动了SparkContext。此类的具体定义如下：\n\n```rust\nclass pyspark.SparkContext (\n   master = None,\n   appName = None, \n   sparkHome = None, \n   pyFiles = None, \n   environment = None, \n   batchSize = 0, \n   serializer = PickleSerializer(), \n   conf = None, \n   gateway = None, \n   jsc = None, \n   profiler_cls = <class 'pyspark.profiler.BasicProfiler'>\n)\n```\n\n以下是SparkContext的参数具体含义：\n\n- `Master`- 它是连接到的集群的URL。\n- `appName`- 您的工作名称。\n- `sparkHome` - Spark安装目录。\n- `pyFiles` - 要发送到集群并添加到PYTHONPATH的.zip或.py文件。\n- `environment` - 工作节点环境变量。\n- `batchSize` - 表示为单个Java对象的Python对象的数量。设置1以禁用批处理，设置0以根据对象大小自动选择批处理大小，或设置为-1以使用无限批处理大小。\n- `serializer`- RDD序列化器。\n- `Conf` - L {SparkConf}的一个对象，用于设置所有Spark属性。\n- `gateway`  - 使用现有网关和JVM，否则初始化新JVM。\n- `JSC` - JavaSparkContext实例。\n- `profiler_cls` - 用于进行性能分析的一类自定义Profiler（默认为pyspark.profiler.BasicProfiler）。\n   在上述参数中，主要使用master和appname。任何PySpark程序的会使用以下两行:`控制台启动pyspark的时候本质上也是启动了一个spark context,如果您尝试创建另一个SparkContext对象，您将收到以下错误 - “ValueError：无法一次运行多个SparkContexts”`：\n\n```python \nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"First App\")\n```\n\n## 读取本地文件\n\n- 新建demo.py文件\n\n```python\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"first app\") #本地模式\nlogFile = \"file:////opt/modules/hadoop-2.8.5/README.txt\"\nlogData = sc.textFile(logFile).cache() #对于需要重复用到的且占用内存小的RDD对象，可以通过rdd.cache()存储起来，之后再次使用的时候，直接读取内存中的RDD对象，节省时间\nnumAs = logData.filter(lambda s: 'a' in s).count()\nnumBs = logData.filter(lambda s: 'b' in s).count()\nprint(\"Line with a:%i,lines with b :%i\" % (numAs, numBs))\n```\n\n- 执行文件\n\n```shell\nspark-submit demo.py\n```\n\n## RDD（Resilient Distributed Dataset）\n\nRDD是在多个节点上运行和操作以在集群上进行并行处理的元素\n\n要对这些RDD进行操作，有两种方法 :\n\n- Transformation：这些操作应用于RDD以创建新的RDD。Filter，groupBy和map是转换的示例。\n- Action：这些是应用于RDD的操作，它指示Spark执行计算并将结果发送回驱动程序。如count()，collect(), foreach(func)\n\nRDD定义如下：\n\n```python\nclass pyspark.RDD (\n   jrdd, \n   ctx, \n   jrdd_deserializer = AutoBatchedSerializer(PickleSerializer())\n)\n```\n\n# RDD基础操作\n\n## count()\n\n```python\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"count app\")\nwords = sc.parallelize(\n    [\"scala\",\n     \"java\",\n     \"hadoop\",\n     \"spark\",\n     \"akka\",\n     \"spark vs hadoop\",\n     \"pyspark\",\n     \"pyspark and spark\"\n     ])\ncounts = words.count()\nprint(\"Number of elements in RDD -> %i\" % counts)\n```\n\n## collect()\n\n返回RDD中的所有元素\n\n```python\n----------------------------------------collect.py - --------------------------------------\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"collect app\")\nwords = sc.parallelize(\n    [\"scala\",\n     \"java\",\n     \"hadoop\",\n     \"spark\",\n     \"akka\",\n     \"spark vs hadoop\",\n     \"pyspark\",\n     \"pyspark and spark\"\n     ])\ncoll = words.collect()\nprint(\"Elements in RDD -> %s\" % coll)\n```\n\n执行spark-submit collect.py 输出以下结果\n\n```rust\nElements in RDD -> ['scala', 'java', 'hadoop', 'spark', 'akka', 'spark vs hadoop', 'pyspark', 'pyspark and spark']\n```\n\n## foreach(func)\n\n仅返回满足foreach内函数条件的元素。在下面的示例中，我们在foreach中调用print函数，该函数打印RDD中的所有元素。\n\n```python\n# foreach.py\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"ForEach app\")\nwords = sc.parallelize (\n   [\"scala\", \n   \"java\", \n   \"hadoop\", \n   \"spark\", \n   \"akka\",\n   \"spark vs hadoop\", \n   \"pyspark\",\n   \"pyspark and spark\"]\n)\ndef f(x): print(x)\nfore = words.foreach(f)\n```\n\n执行`spark-submit foreach.py`，然后输出：\n\n```undefined\nscala\njava\nhadoop\nspark\nakka\nspark vs hadoop\npyspark\npyspark and spark\n```\n\n## filter(f)\n\n返回一个包含元素的新RDD，它满足过滤器内部的功能。在下面的示例中，我们过滤掉包含''spark'的字符串。\n\n```python\n# filter.py\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"Filter app\")\nwords = sc.parallelize(\n    [\"scala\",\n     \"java\",\n     \"hadoop\",\n     \"spark\",\n     \"akka\",\n     \"spark vs hadoop\",\n     \"pyspark\",\n     \"pyspark and spark\"]\n)\nwords_filter = words.filter(lambda x: 'spark' in x)\nfiltered = words_filter.collect()\nprint(\"Fitered RDD -> %s\" % (filtered))\n```\n\n执行`spark-submit filter.py`:\n\n```rust\nFitered RDD -> ['spark', 'spark vs hadoop', 'pyspark', 'pyspark and spark']\n```\n\n## map(f, preservesPartitioning = False)\n\n通过将该函数应用于RDD中的每个元素来返回新的RDD。在下面的示例中，我们形成一个键值对，并将每个字符串映射为值1\n\n```python\n# map.py\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"Map app\")\nwords = sc.parallelize(\n    [\"scala\",\n     \"java\",\n     \"hadoop\",\n     \"spark\",\n     \"akka\",\n     \"spark vs hadoop\",\n     \"pyspark\",\n     \"pyspark and spark\"]\n)\nwords_map = words.map(lambda x: (x, 1))\nmapping = words_map.collect()\nprint(\"Key value pair -> %s\" % (mapping))\n```\n\n执行spark-submit map.py\n\n```csharp\nKey value pair -> [('scala', 1), ('java', 1), ('hadoop', 1), ('spark', 1), ('akka', 1), ('spark vs hadoop', 1), ('pyspark', 1), ('pyspark and spark', 1)]\n```\n\n## reduce(f)\n\n执行指定的可交换和关联二元操作后，将返回RDD中的元素。在下面的示例中，我们从运算符导入add包并将其应用于'num'以执行简单的加法运算。说白了和Python的reduce一样：假如有一组整数[x1,x2,x3]，利用reduce执行加法操作add，对第一个元素执行add后，结果为sum=x1,然后再将sum和x2执行add，sum=x1+x2，最后再将x2和sum执行add，此时sum=x1+x2+x3。\n\n```swift\n# reduce.py\nfrom pyspark import SparkContext\nfrom operator import add\nsc = SparkContext(\"local\", \"Reduce app\")\nnums = sc.parallelize([1, 2, 3, 4, 5])\nadding = nums.reduce(add)\nprint(\"Adding all the elements -> %i\" % (adding))\n```\n\n执行`spark-submit reduce.py`:\n\n```rust\nAdding all the elements -> 15\n```\n\n##  join(other, numPartitions = None)\n\n它返回RDD，其中包含一对带有匹配键的元素以及该特定键的所有值。\n\n```swift\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"Join app\")\nx = sc.parallelize([(\"spark\", 1), (\"hadoop\", 4)])\ny = sc.parallelize([(\"spark\", 2), (\"hadoop\", 5)])\njoined = x.join(y)\nfinal = joined.collect()\nprint( \"Join RDD -> %s\" % (final))\n```\n\n执行`spark-submit join.py`:\n\n```rust\nJoin RDD -> [\n   ('spark', (1, 2)),  \n   ('hadoop', (4, 5))\n]\n```\n\n# RDD转成pandas.dataframe\n\n```python\nfrom pyspark import SparkContext\nfrom pyspark.sql import HiveContext,SparkSession\nsc = SparkContext(\"local\", \"Map app\")\nhiveContext = HiveContext(sc)\nsql=\"select pin,cpp_base_sex from dmr_c.dmrc_model_t03_market_bt_profile_s_d where dt>'2020-01-01' limit 100\"\nread_df=hiveContext.sql(sql) # spark的dataframe\ndf = read_df.toPandas() #pandas的dataframe\n\n```\n\n## 优化\n\n### 内存不足\n\n\n\n```python\n# 方式一：\nspark.conf.set(\"spark.sql.execution.arrow.enabled\", \"true\")\n\n\n# 方式二：设置多个conf\nfrom pyspark.conf import SparkConf\nsparkConf = SparkConf()\nsparkConf.set('spark.driver.maxResultSize', '3G')\nsc = SparkSession.builder.config(conf=sparkConf).enableHiveSupport().getOrCreate()\n\n```\n\n### 运行太慢\n\n\n\n","source":"_posts/0_代码相关/pyspark.md","raw":"---\ntitle: pyspark\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nPyspark 入门\n\n<!-- more -->\n\n\n[TOC]\n\n\n\n# spark context 和spark session的关系\n\n<img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/pyspark.assets/image-20200702140518336.png\" alt=\"image-20200702140518336\" style=\"zoom:50%;\" />\n\n可以由上节图中看出，Application、SparkSession、SparkContext、RDD之间具有包含关系，并且前三者是1对1的关系。\n\nSparkSession 是 Spark 2.0 版本引入的新入口，在这之前，创建一个 Application 对应的上下文是这样的(创建spark context，创建sqlcontext或者streamingContext或者别的context)：\n\n```scala\n//set up the spark configuration and create contexts\nval sparkConf = new SparkConf().setAppName(\"SparkSessionZipsExample\").setMaster(\"local\")\n// your handle to SparkContext to access other context like SQLContext\nval sc = new SparkContext(sparkConf).set(\"spark.some.config.option\", \"some-value\")\nval sqlContext = new org.apache.spark.sql.SQLContext(sc)\n```\n\n\n现在 SparkConf、SparkContext 和 SQLContext 都已经被封装在 SparkSession 当中，并且可以通过 builder 的方式创建（创建sparkSession，可直接调用sqlContext方法）：\n\n```\n// Create a SparkSession. No need to create SparkContext\n// You automatically get it as part of the SparkSession\nval warehouseLocation = \"file:${system:user.dir}/spark-warehouse\"\nval spark = SparkSession\n   .builder()\n   .appName(\"SparkSessionZipsExample\")\n   .config(\"spark.sql.warehouse.dir\", warehouseLocation)\n   .enableHiveSupport()\n   .getOrCreate()\n```\n\n# dataframe dataset  rdd\n\n参考 https://www.e-learn.cn/content/qita/784122\n\n简单来说，RDD是一种非结构化分部式数据集，每个元素都可以是不同的类型的数，通过sc.parallelize生成RDD。RDD中比较特殊的一种是key-value Pair RDD，即规定RDD的每个元素都是一个二元数组，其中第一个值是key，第二个值是value。\n\n这种特性就会给Pair RDD赋予一些特殊的操作，例如`groupByKey()`可以将具有相同key进行分组，其结果仍然得到Pair RDD，然后利用`mapValues()`对相同key的value进行函数计算；`reduceByKey()`、`countByKey()`和`sortByKey()`等一系列“ByKey()”操作同理。\n另外，两个Pair RDD具有像SQL一样的连接操作，例如两个Pair RDD进行`join()`后，具有相同key的元素的value会被放在一个元组里，key不相同的元素会被舍弃。`leftOuterJoin()`、`rightOuterJoin()`、`fullOuterJoin()`等操作同理。\n\nPair RDD已经被一定程度的格式化了，它的每个元素会具有key，但是value仍然具有很大的灵活性。DataFrame是一种完全格式化的数据集合，和数据库中的*表*的概念比较接近，它每列数据必须具有相同的数据类型。也正是由于DataFrame知道数据集合所有的类型信息，DataFrame可以进行列处理优化而获得比RDD更优的性能。\n在内部实现上，DataFrame是由`Row`对象为元素组成的集合，每个`Row`对象存储DataFrame的一行\n\n## RDD和dataframe使用上的的区别\n\n- RDD：没有列名称，只能使用数字来索引；具有`map()`、`reduce()`等方法并可指定任意函数进行计算;\n- DataFrame：一定有列名称（即使是默认生成的），可以通过`.col_name`或者`['col_name']`来索引列；具有表的相关操作（例如`select()`、`filter()`、`where()`、`join`），但是没有`map()`、`reduce()`等方法。\n- 有时候DataFrame的*表*相关操作不能处理一些问题，例如需要对一些数据利用指定的函数进行计算时，就需要将DataFrame转换为RDD。DataFrame可以直接利用`.rdd`获取对应的RDD对象，此RDD对象的每个元素使用`Row`对象来表示，每列值会成为`Row`对象的一个`域=>值`映射\n\n## RDD转化为dataframe\n\n就像之前的例子一样，可以利用\n\n```\ndataframe = spark.createDataFrame(rdd, schema=None, samplingRatio=None)\n```\n\n来将RDD转换为DataFrame，其中的参数设置需要注意：\n**schema**：DataFrame各列类型信息，在提前知道RDD所有类型信息时设定。例如\n\n```\nschema = StructType([StructField('col1', StringType()),          StructField('col2', IntegerType())])\n```\n\n**samplingRatio**：推测各列类型信息的采样比例，在未知RDD所有类型信息时，spark需要根据一定的数据量进行类型推测；默认情况下，spark会抽取前100的RDD进行推测，之后在真正将RDD转换为DataFrame时如果遇到类型信息不符会报错 *Some of types cannot be determined by the first 100 rows, please try again with sampling* 。同理采样比例较低，推测类型信息也可能错误。\n\n# PySpark - SparkContext\n\nSparkContext是任何spark功能的入口点。当我们运行任何Spark应用程序时，会启动一个驱动程序，它具有main函数，并且此处启动了SparkContext。此类的具体定义如下：\n\n```rust\nclass pyspark.SparkContext (\n   master = None,\n   appName = None, \n   sparkHome = None, \n   pyFiles = None, \n   environment = None, \n   batchSize = 0, \n   serializer = PickleSerializer(), \n   conf = None, \n   gateway = None, \n   jsc = None, \n   profiler_cls = <class 'pyspark.profiler.BasicProfiler'>\n)\n```\n\n以下是SparkContext的参数具体含义：\n\n- `Master`- 它是连接到的集群的URL。\n- `appName`- 您的工作名称。\n- `sparkHome` - Spark安装目录。\n- `pyFiles` - 要发送到集群并添加到PYTHONPATH的.zip或.py文件。\n- `environment` - 工作节点环境变量。\n- `batchSize` - 表示为单个Java对象的Python对象的数量。设置1以禁用批处理，设置0以根据对象大小自动选择批处理大小，或设置为-1以使用无限批处理大小。\n- `serializer`- RDD序列化器。\n- `Conf` - L {SparkConf}的一个对象，用于设置所有Spark属性。\n- `gateway`  - 使用现有网关和JVM，否则初始化新JVM。\n- `JSC` - JavaSparkContext实例。\n- `profiler_cls` - 用于进行性能分析的一类自定义Profiler（默认为pyspark.profiler.BasicProfiler）。\n   在上述参数中，主要使用master和appname。任何PySpark程序的会使用以下两行:`控制台启动pyspark的时候本质上也是启动了一个spark context,如果您尝试创建另一个SparkContext对象，您将收到以下错误 - “ValueError：无法一次运行多个SparkContexts”`：\n\n```python \nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"First App\")\n```\n\n## 读取本地文件\n\n- 新建demo.py文件\n\n```python\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"first app\") #本地模式\nlogFile = \"file:////opt/modules/hadoop-2.8.5/README.txt\"\nlogData = sc.textFile(logFile).cache() #对于需要重复用到的且占用内存小的RDD对象，可以通过rdd.cache()存储起来，之后再次使用的时候，直接读取内存中的RDD对象，节省时间\nnumAs = logData.filter(lambda s: 'a' in s).count()\nnumBs = logData.filter(lambda s: 'b' in s).count()\nprint(\"Line with a:%i,lines with b :%i\" % (numAs, numBs))\n```\n\n- 执行文件\n\n```shell\nspark-submit demo.py\n```\n\n## RDD（Resilient Distributed Dataset）\n\nRDD是在多个节点上运行和操作以在集群上进行并行处理的元素\n\n要对这些RDD进行操作，有两种方法 :\n\n- Transformation：这些操作应用于RDD以创建新的RDD。Filter，groupBy和map是转换的示例。\n- Action：这些是应用于RDD的操作，它指示Spark执行计算并将结果发送回驱动程序。如count()，collect(), foreach(func)\n\nRDD定义如下：\n\n```python\nclass pyspark.RDD (\n   jrdd, \n   ctx, \n   jrdd_deserializer = AutoBatchedSerializer(PickleSerializer())\n)\n```\n\n# RDD基础操作\n\n## count()\n\n```python\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"count app\")\nwords = sc.parallelize(\n    [\"scala\",\n     \"java\",\n     \"hadoop\",\n     \"spark\",\n     \"akka\",\n     \"spark vs hadoop\",\n     \"pyspark\",\n     \"pyspark and spark\"\n     ])\ncounts = words.count()\nprint(\"Number of elements in RDD -> %i\" % counts)\n```\n\n## collect()\n\n返回RDD中的所有元素\n\n```python\n----------------------------------------collect.py - --------------------------------------\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"collect app\")\nwords = sc.parallelize(\n    [\"scala\",\n     \"java\",\n     \"hadoop\",\n     \"spark\",\n     \"akka\",\n     \"spark vs hadoop\",\n     \"pyspark\",\n     \"pyspark and spark\"\n     ])\ncoll = words.collect()\nprint(\"Elements in RDD -> %s\" % coll)\n```\n\n执行spark-submit collect.py 输出以下结果\n\n```rust\nElements in RDD -> ['scala', 'java', 'hadoop', 'spark', 'akka', 'spark vs hadoop', 'pyspark', 'pyspark and spark']\n```\n\n## foreach(func)\n\n仅返回满足foreach内函数条件的元素。在下面的示例中，我们在foreach中调用print函数，该函数打印RDD中的所有元素。\n\n```python\n# foreach.py\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"ForEach app\")\nwords = sc.parallelize (\n   [\"scala\", \n   \"java\", \n   \"hadoop\", \n   \"spark\", \n   \"akka\",\n   \"spark vs hadoop\", \n   \"pyspark\",\n   \"pyspark and spark\"]\n)\ndef f(x): print(x)\nfore = words.foreach(f)\n```\n\n执行`spark-submit foreach.py`，然后输出：\n\n```undefined\nscala\njava\nhadoop\nspark\nakka\nspark vs hadoop\npyspark\npyspark and spark\n```\n\n## filter(f)\n\n返回一个包含元素的新RDD，它满足过滤器内部的功能。在下面的示例中，我们过滤掉包含''spark'的字符串。\n\n```python\n# filter.py\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"Filter app\")\nwords = sc.parallelize(\n    [\"scala\",\n     \"java\",\n     \"hadoop\",\n     \"spark\",\n     \"akka\",\n     \"spark vs hadoop\",\n     \"pyspark\",\n     \"pyspark and spark\"]\n)\nwords_filter = words.filter(lambda x: 'spark' in x)\nfiltered = words_filter.collect()\nprint(\"Fitered RDD -> %s\" % (filtered))\n```\n\n执行`spark-submit filter.py`:\n\n```rust\nFitered RDD -> ['spark', 'spark vs hadoop', 'pyspark', 'pyspark and spark']\n```\n\n## map(f, preservesPartitioning = False)\n\n通过将该函数应用于RDD中的每个元素来返回新的RDD。在下面的示例中，我们形成一个键值对，并将每个字符串映射为值1\n\n```python\n# map.py\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"Map app\")\nwords = sc.parallelize(\n    [\"scala\",\n     \"java\",\n     \"hadoop\",\n     \"spark\",\n     \"akka\",\n     \"spark vs hadoop\",\n     \"pyspark\",\n     \"pyspark and spark\"]\n)\nwords_map = words.map(lambda x: (x, 1))\nmapping = words_map.collect()\nprint(\"Key value pair -> %s\" % (mapping))\n```\n\n执行spark-submit map.py\n\n```csharp\nKey value pair -> [('scala', 1), ('java', 1), ('hadoop', 1), ('spark', 1), ('akka', 1), ('spark vs hadoop', 1), ('pyspark', 1), ('pyspark and spark', 1)]\n```\n\n## reduce(f)\n\n执行指定的可交换和关联二元操作后，将返回RDD中的元素。在下面的示例中，我们从运算符导入add包并将其应用于'num'以执行简单的加法运算。说白了和Python的reduce一样：假如有一组整数[x1,x2,x3]，利用reduce执行加法操作add，对第一个元素执行add后，结果为sum=x1,然后再将sum和x2执行add，sum=x1+x2，最后再将x2和sum执行add，此时sum=x1+x2+x3。\n\n```swift\n# reduce.py\nfrom pyspark import SparkContext\nfrom operator import add\nsc = SparkContext(\"local\", \"Reduce app\")\nnums = sc.parallelize([1, 2, 3, 4, 5])\nadding = nums.reduce(add)\nprint(\"Adding all the elements -> %i\" % (adding))\n```\n\n执行`spark-submit reduce.py`:\n\n```rust\nAdding all the elements -> 15\n```\n\n##  join(other, numPartitions = None)\n\n它返回RDD，其中包含一对带有匹配键的元素以及该特定键的所有值。\n\n```swift\nfrom pyspark import SparkContext\nsc = SparkContext(\"local\", \"Join app\")\nx = sc.parallelize([(\"spark\", 1), (\"hadoop\", 4)])\ny = sc.parallelize([(\"spark\", 2), (\"hadoop\", 5)])\njoined = x.join(y)\nfinal = joined.collect()\nprint( \"Join RDD -> %s\" % (final))\n```\n\n执行`spark-submit join.py`:\n\n```rust\nJoin RDD -> [\n   ('spark', (1, 2)),  \n   ('hadoop', (4, 5))\n]\n```\n\n# RDD转成pandas.dataframe\n\n```python\nfrom pyspark import SparkContext\nfrom pyspark.sql import HiveContext,SparkSession\nsc = SparkContext(\"local\", \"Map app\")\nhiveContext = HiveContext(sc)\nsql=\"select pin,cpp_base_sex from dmr_c.dmrc_model_t03_market_bt_profile_s_d where dt>'2020-01-01' limit 100\"\nread_df=hiveContext.sql(sql) # spark的dataframe\ndf = read_df.toPandas() #pandas的dataframe\n\n```\n\n## 优化\n\n### 内存不足\n\n\n\n```python\n# 方式一：\nspark.conf.set(\"spark.sql.execution.arrow.enabled\", \"true\")\n\n\n# 方式二：设置多个conf\nfrom pyspark.conf import SparkConf\nsparkConf = SparkConf()\nsparkConf.set('spark.driver.maxResultSize', '3G')\nsc = SparkSession.builder.config(conf=sparkConf).enableHiveSupport().getOrCreate()\n\n```\n\n### 运行太慢\n\n\n\n","slug":"0_代码相关/pyspark","published":1,"updated":"2022-03-01T03:52:25.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4z003q8s32362gcadd","content":"<p>Pyspark 入门</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"spark-context-和spark-session的关系\"><a href=\"#spark-context-和spark-session的关系\" class=\"headerlink\" title=\"spark context 和spark session的关系\"></a>spark context 和spark session的关系</h1><p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/pyspark.assets/image-20200702140518336.png\" alt=\"image-20200702140518336\" style=\"zoom:50%;\" /></p>\n<p>可以由上节图中看出，Application、SparkSession、SparkContext、RDD之间具有包含关系，并且前三者是1对1的关系。</p>\n<p>SparkSession 是 Spark 2.0 版本引入的新入口，在这之前，创建一个 Application 对应的上下文是这样的(创建spark context，创建sqlcontext或者streamingContext或者别的context)：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//set up the spark configuration and create contexts</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf = <span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setAppName(<span class=\"string\">&quot;SparkSessionZipsExample&quot;</span>).setMaster(<span class=\"string\">&quot;local&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// your handle to SparkContext to access other context like SQLContext</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sc = <span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf).set(<span class=\"string\">&quot;spark.some.config.option&quot;</span>, <span class=\"string\">&quot;some-value&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sqlContext = <span class=\"keyword\">new</span> org.apache.spark.sql.<span class=\"type\">SQLContext</span>(sc)</span><br></pre></td></tr></table></figure>\n<p>现在 SparkConf、SparkContext 和 SQLContext 都已经被封装在 SparkSession 当中，并且可以通过 builder 的方式创建（创建sparkSession，可直接调用sqlContext方法）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Create a SparkSession. No need to create SparkContext</span><br><span class=\"line\">// You automatically get it as part of the SparkSession</span><br><span class=\"line\">val warehouseLocation = &quot;file:$&#123;system:user.dir&#125;/spark-warehouse&quot;</span><br><span class=\"line\">val spark = SparkSession</span><br><span class=\"line\">   .builder()</span><br><span class=\"line\">   .appName(&quot;SparkSessionZipsExample&quot;)</span><br><span class=\"line\">   .config(&quot;spark.sql.warehouse.dir&quot;, warehouseLocation)</span><br><span class=\"line\">   .enableHiveSupport()</span><br><span class=\"line\">   .getOrCreate()</span><br></pre></td></tr></table></figure>\n<h1 id=\"dataframe-dataset-rdd\"><a href=\"#dataframe-dataset-rdd\" class=\"headerlink\" title=\"dataframe dataset  rdd\"></a>dataframe dataset  rdd</h1><p>参考 <a href=\"https://www.e-learn.cn/content/qita/784122\">https://www.e-learn.cn/content/qita/784122</a></p>\n<p>简单来说，RDD是一种非结构化分部式数据集，每个元素都可以是不同的类型的数，通过sc.parallelize生成RDD。RDD中比较特殊的一种是key-value Pair RDD，即规定RDD的每个元素都是一个二元数组，其中第一个值是key，第二个值是value。</p>\n<p>这种特性就会给Pair RDD赋予一些特殊的操作，例如<code>groupByKey()</code>可以将具有相同key进行分组，其结果仍然得到Pair RDD，然后利用<code>mapValues()</code>对相同key的value进行函数计算；<code>reduceByKey()</code>、<code>countByKey()</code>和<code>sortByKey()</code>等一系列“ByKey()”操作同理。<br>另外，两个Pair RDD具有像SQL一样的连接操作，例如两个Pair RDD进行<code>join()</code>后，具有相同key的元素的value会被放在一个元组里，key不相同的元素会被舍弃。<code>leftOuterJoin()</code>、<code>rightOuterJoin()</code>、<code>fullOuterJoin()</code>等操作同理。</p>\n<p>Pair RDD已经被一定程度的格式化了，它的每个元素会具有key，但是value仍然具有很大的灵活性。DataFrame是一种完全格式化的数据集合，和数据库中的<em>表</em>的概念比较接近，它每列数据必须具有相同的数据类型。也正是由于DataFrame知道数据集合所有的类型信息，DataFrame可以进行列处理优化而获得比RDD更优的性能。<br>在内部实现上，DataFrame是由<code>Row</code>对象为元素组成的集合，每个<code>Row</code>对象存储DataFrame的一行</p>\n<h2 id=\"RDD和dataframe使用上的的区别\"><a href=\"#RDD和dataframe使用上的的区别\" class=\"headerlink\" title=\"RDD和dataframe使用上的的区别\"></a>RDD和dataframe使用上的的区别</h2><ul>\n<li>RDD：没有列名称，只能使用数字来索引；具有<code>map()</code>、<code>reduce()</code>等方法并可指定任意函数进行计算;</li>\n<li>DataFrame：一定有列名称（即使是默认生成的），可以通过<code>.col_name</code>或者<code>[&#39;col_name&#39;]</code>来索引列；具有表的相关操作（例如<code>select()</code>、<code>filter()</code>、<code>where()</code>、<code>join</code>），但是没有<code>map()</code>、<code>reduce()</code>等方法。</li>\n<li>有时候DataFrame的<em>表</em>相关操作不能处理一些问题，例如需要对一些数据利用指定的函数进行计算时，就需要将DataFrame转换为RDD。DataFrame可以直接利用<code>.rdd</code>获取对应的RDD对象，此RDD对象的每个元素使用<code>Row</code>对象来表示，每列值会成为<code>Row</code>对象的一个<code>域=&gt;值</code>映射</li>\n</ul>\n<h2 id=\"RDD转化为dataframe\"><a href=\"#RDD转化为dataframe\" class=\"headerlink\" title=\"RDD转化为dataframe\"></a>RDD转化为dataframe</h2><p>就像之前的例子一样，可以利用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataframe = spark.createDataFrame(rdd, schema=None, samplingRatio=None)</span><br></pre></td></tr></table></figure>\n<p>来将RDD转换为DataFrame，其中的参数设置需要注意：<br><strong>schema</strong>：DataFrame各列类型信息，在提前知道RDD所有类型信息时设定。例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema = StructType([StructField(&#x27;col1&#x27;, StringType()),          StructField(&#x27;col2&#x27;, IntegerType())])</span><br></pre></td></tr></table></figure>\n<p><strong>samplingRatio</strong>：推测各列类型信息的采样比例，在未知RDD所有类型信息时，spark需要根据一定的数据量进行类型推测；默认情况下，spark会抽取前100的RDD进行推测，之后在真正将RDD转换为DataFrame时如果遇到类型信息不符会报错 <em>Some of types cannot be determined by the first 100 rows, please try again with sampling</em> 。同理采样比例较低，推测类型信息也可能错误。</p>\n<h1 id=\"PySpark-SparkContext\"><a href=\"#PySpark-SparkContext\" class=\"headerlink\" title=\"PySpark - SparkContext\"></a>PySpark - SparkContext</h1><p>SparkContext是任何spark功能的入口点。当我们运行任何Spark应用程序时，会启动一个驱动程序，它具有main函数，并且此处启动了SparkContext。此类的具体定义如下：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class pyspark.SparkContext (</span><br><span class=\"line\">   master = <span class=\"literal\">None</span>,</span><br><span class=\"line\">   appName = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   sparkHome = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   pyFiles = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   environment = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   batchSize = <span class=\"number\">0</span>, </span><br><span class=\"line\">   serializer = PickleSerializer(), </span><br><span class=\"line\">   conf = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   gateway = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   jsc = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   profiler_cls = &lt;class <span class=\"symbol\">&#x27;pyspark</span>.profiler.BasicProfiler&#x27;&gt;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>以下是SparkContext的参数具体含义：</p>\n<ul>\n<li><code>Master</code>- 它是连接到的集群的URL。</li>\n<li><code>appName</code>- 您的工作名称。</li>\n<li><code>sparkHome</code> - Spark安装目录。</li>\n<li><code>pyFiles</code> - 要发送到集群并添加到PYTHONPATH的.zip或.py文件。</li>\n<li><code>environment</code> - 工作节点环境变量。</li>\n<li><code>batchSize</code> - 表示为单个Java对象的Python对象的数量。设置1以禁用批处理，设置0以根据对象大小自动选择批处理大小，或设置为-1以使用无限批处理大小。</li>\n<li><code>serializer</code>- RDD序列化器。</li>\n<li><code>Conf</code> - L {SparkConf}的一个对象，用于设置所有Spark属性。</li>\n<li><code>gateway</code>  - 使用现有网关和JVM，否则初始化新JVM。</li>\n<li><code>JSC</code> - JavaSparkContext实例。</li>\n<li><code>profiler_cls</code> - 用于进行性能分析的一类自定义Profiler（默认为pyspark.profiler.BasicProfiler）。<br> 在上述参数中，主要使用master和appname。任何PySpark程序的会使用以下两行:<code>控制台启动pyspark的时候本质上也是启动了一个spark context,如果您尝试创建另一个SparkContext对象，您将收到以下错误 - “ValueError：无法一次运行多个SparkContexts”</code>：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;First App&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取本地文件\"><a href=\"#读取本地文件\" class=\"headerlink\" title=\"读取本地文件\"></a>读取本地文件</h2><ul>\n<li>新建demo.py文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;first app&quot;</span>) <span class=\"comment\">#本地模式</span></span><br><span class=\"line\">logFile = <span class=\"string\">&quot;file:////opt/modules/hadoop-2.8.5/README.txt&quot;</span></span><br><span class=\"line\">logData = sc.textFile(logFile).cache() <span class=\"comment\">#对于需要重复用到的且占用内存小的RDD对象，可以通过rdd.cache()存储起来，之后再次使用的时候，直接读取内存中的RDD对象，节省时间</span></span><br><span class=\"line\">numAs = logData.<span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> s: <span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> s).count()</span><br><span class=\"line\">numBs = logData.<span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> s: <span class=\"string\">&#x27;b&#x27;</span> <span class=\"keyword\">in</span> s).count()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Line with a:%i,lines with b :%i&quot;</span> % (numAs, numBs))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark-submit demo.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"RDD（Resilient-Distributed-Dataset）\"><a href=\"#RDD（Resilient-Distributed-Dataset）\" class=\"headerlink\" title=\"RDD（Resilient Distributed Dataset）\"></a>RDD（Resilient Distributed Dataset）</h2><p>RDD是在多个节点上运行和操作以在集群上进行并行处理的元素</p>\n<p>要对这些RDD进行操作，有两种方法 :</p>\n<ul>\n<li>Transformation：这些操作应用于RDD以创建新的RDD。Filter，groupBy和map是转换的示例。</li>\n<li>Action：这些是应用于RDD的操作，它指示Spark执行计算并将结果发送回驱动程序。如count()，collect(), foreach(func)</li>\n</ul>\n<p>RDD定义如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">pyspark</span>.<span class=\"title\">RDD</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"class\">   jrdd, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"class\">   ctx, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"class\">   jrdd_deserializer = AutoBatchedSerializer(<span class=\"params\">PickleSerializer(<span class=\"params\"></span>)</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"class\"></span>)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"RDD基础操作\"><a href=\"#RDD基础操作\" class=\"headerlink\" title=\"RDD基础操作\"></a>RDD基础操作</h1><h2 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\"count()\"></a>count()</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;count app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize(</span><br><span class=\"line\">    [<span class=\"string\">&quot;scala&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark vs hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark and spark&quot;</span></span><br><span class=\"line\">     ])</span><br><span class=\"line\">counts = words.count()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Number of elements in RDD -&gt; %i&quot;</span> % counts)</span><br></pre></td></tr></table></figure>\n<h2 id=\"collect\"><a href=\"#collect\" class=\"headerlink\" title=\"collect()\"></a>collect()</h2><p>返回RDD中的所有元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----------------------------------------collect.py - --------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;collect app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize(</span><br><span class=\"line\">    [<span class=\"string\">&quot;scala&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark vs hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark and spark&quot;</span></span><br><span class=\"line\">     ])</span><br><span class=\"line\">coll = words.collect()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Elements in RDD -&gt; %s&quot;</span> % coll)</span><br></pre></td></tr></table></figure>\n<p>执行spark-submit collect.py 输出以下结果</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elements <span class=\"keyword\">in</span> RDD -&gt; [<span class=\"symbol\">&#x27;scala</span>&#x27;, <span class=\"symbol\">&#x27;java</span>&#x27;, <span class=\"symbol\">&#x27;hadoop</span>&#x27;, <span class=\"symbol\">&#x27;spark</span>&#x27;, <span class=\"symbol\">&#x27;akka</span>&#x27;, <span class=\"symbol\">&#x27;spark</span> vs hadoop&#x27;, <span class=\"symbol\">&#x27;pyspark</span>&#x27;, <span class=\"symbol\">&#x27;pyspark</span> and spark&#x27;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"foreach-func\"><a href=\"#foreach-func\" class=\"headerlink\" title=\"foreach(func)\"></a>foreach(func)</h2><p>仅返回满足foreach内函数条件的元素。在下面的示例中，我们在foreach中调用print函数，该函数打印RDD中的所有元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># foreach.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;ForEach app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize (</span><br><span class=\"line\">   [<span class=\"string\">&quot;scala&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;java&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;hadoop&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;spark&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;spark vs hadoop&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;pyspark and spark&quot;</span>]</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>):</span> <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">fore = words.foreach(f)</span><br></pre></td></tr></table></figure>\n<p>执行<code>spark-submit foreach.py</code>，然后输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala</span><br><span class=\"line\">java</span><br><span class=\"line\">hadoop</span><br><span class=\"line\">spark</span><br><span class=\"line\">akka</span><br><span class=\"line\">spark vs hadoop</span><br><span class=\"line\">pyspark</span><br><span class=\"line\">pyspark and spark</span><br></pre></td></tr></table></figure>\n<h2 id=\"filter-f\"><a href=\"#filter-f\" class=\"headerlink\" title=\"filter(f)\"></a>filter(f)</h2><p>返回一个包含元素的新RDD，它满足过滤器内部的功能。在下面的示例中，我们过滤掉包含’’spark’的字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filter.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Filter app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize(</span><br><span class=\"line\">    [<span class=\"string\">&quot;scala&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark vs hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark and spark&quot;</span>]</span><br><span class=\"line\">)</span><br><span class=\"line\">words_filter = words.<span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> x: <span class=\"string\">&#x27;spark&#x27;</span> <span class=\"keyword\">in</span> x)</span><br><span class=\"line\">filtered = words_filter.collect()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Fitered RDD -&gt; %s&quot;</span> % (filtered))</span><br></pre></td></tr></table></figure>\n<p>执行<code>spark-submit filter.py</code>:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fitered RDD -&gt; [<span class=\"symbol\">&#x27;spark</span>&#x27;, <span class=\"symbol\">&#x27;spark</span> vs hadoop&#x27;, <span class=\"symbol\">&#x27;pyspark</span>&#x27;, <span class=\"symbol\">&#x27;pyspark</span> and spark&#x27;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"map-f-preservesPartitioning-False\"><a href=\"#map-f-preservesPartitioning-False\" class=\"headerlink\" title=\"map(f, preservesPartitioning = False)\"></a>map(f, preservesPartitioning = False)</h2><p>通过将该函数应用于RDD中的每个元素来返回新的RDD。在下面的示例中，我们形成一个键值对，并将每个字符串映射为值1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># map.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Map app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize(</span><br><span class=\"line\">    [<span class=\"string\">&quot;scala&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark vs hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark and spark&quot;</span>]</span><br><span class=\"line\">)</span><br><span class=\"line\">words_map = words.<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: (x, <span class=\"number\">1</span>))</span><br><span class=\"line\">mapping = words_map.collect()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Key value pair -&gt; %s&quot;</span> % (mapping))</span><br></pre></td></tr></table></figure>\n<p>执行spark-submit map.py</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Key <span class=\"keyword\">value</span> pair -&gt; [(<span class=\"string\">&#x27;scala&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;java&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;hadoop&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;spark&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;akka&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;spark vs hadoop&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;pyspark&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;pyspark and spark&#x27;</span>, <span class=\"number\">1</span>)]</span><br></pre></td></tr></table></figure>\n<h2 id=\"reduce-f\"><a href=\"#reduce-f\" class=\"headerlink\" title=\"reduce(f)\"></a>reduce(f)</h2><p>执行指定的可交换和关联二元操作后，将返回RDD中的元素。在下面的示例中，我们从运算符导入add包并将其应用于’num’以执行简单的加法运算。说白了和Python的reduce一样：假如有一组整数[x1,x2,x3]，利用reduce执行加法操作add，对第一个元素执行add后，结果为sum=x1,然后再将sum和x2执行add，sum=x1+x2，最后再将x2和sum执行add，此时sum=x1+x2+x3。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># reduce.py</span><br><span class=\"line\">from pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">from <span class=\"keyword\">operator</span> import add</span><br><span class=\"line\">sc <span class=\"title\">=</span> <span class=\"type\">SparkContext</span>(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Reduce app&quot;</span>)</span><br><span class=\"line\">nums <span class=\"operator\">=</span> sc.parallelize([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">adding <span class=\"operator\">=</span> nums.reduce(add)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Adding all the elements -&gt; %i&quot;</span> <span class=\"operator\">%</span> (adding))</span><br></pre></td></tr></table></figure>\n<p>执行<code>spark-submit reduce.py</code>:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Adding all the elements -&gt; <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"join-other-numPartitions-None\"><a href=\"#join-other-numPartitions-None\" class=\"headerlink\" title=\"join(other, numPartitions = None)\"></a>join(other, numPartitions = None)</h2><p>它返回RDD，其中包含一对带有匹配键的元素以及该特定键的所有值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc <span class=\"operator\">=</span> <span class=\"type\">SparkContext</span>(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Join app&quot;</span>)</span><br><span class=\"line\">x <span class=\"operator\">=</span> sc.parallelize([(<span class=\"string\">&quot;spark&quot;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&quot;hadoop&quot;</span>, <span class=\"number\">4</span>)])</span><br><span class=\"line\">y <span class=\"operator\">=</span> sc.parallelize([(<span class=\"string\">&quot;spark&quot;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&quot;hadoop&quot;</span>, <span class=\"number\">5</span>)])</span><br><span class=\"line\">joined <span class=\"operator\">=</span> x.join(y)</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"operator\">=</span> joined.collect()</span><br><span class=\"line\"><span class=\"built_in\">print</span>( <span class=\"string\">&quot;Join RDD -&gt; %s&quot;</span> <span class=\"operator\">%</span> (<span class=\"keyword\">final</span>))</span><br></pre></td></tr></table></figure>\n<p>执行<code>spark-submit join.py</code>:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Join RDD -&gt; [</span><br><span class=\"line\">   (<span class=\"symbol\">&#x27;spark</span>&#x27;, (<span class=\"number\">1</span>, <span class=\"number\">2</span>)),  </span><br><span class=\"line\">   (<span class=\"symbol\">&#x27;hadoop</span>&#x27;, (<span class=\"number\">4</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h1 id=\"RDD转成pandas-dataframe\"><a href=\"#RDD转成pandas-dataframe\" class=\"headerlink\" title=\"RDD转成pandas.dataframe\"></a>RDD转成pandas.dataframe</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> HiveContext,SparkSession</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Map app&quot;</span>)</span><br><span class=\"line\">hiveContext = HiveContext(sc)</span><br><span class=\"line\">sql=<span class=\"string\">&quot;select pin,cpp_base_sex from dmr_c.dmrc_model_t03_market_bt_profile_s_d where dt&gt;&#x27;2020-01-01&#x27; limit 100&quot;</span></span><br><span class=\"line\">read_df=hiveContext.sql(sql) <span class=\"comment\"># spark的dataframe</span></span><br><span class=\"line\">df = read_df.toPandas() <span class=\"comment\">#pandas的dataframe</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h3 id=\"内存不足\"><a href=\"#内存不足\" class=\"headerlink\" title=\"内存不足\"></a>内存不足</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：</span></span><br><span class=\"line\">spark.conf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.sql.execution.arrow.enabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二：设置多个conf</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.conf <span class=\"keyword\">import</span> SparkConf</span><br><span class=\"line\">sparkConf = SparkConf()</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;spark.driver.maxResultSize&#x27;</span>, <span class=\"string\">&#x27;3G&#x27;</span>)</span><br><span class=\"line\">sc = SparkSession.builder.config(conf=sparkConf).enableHiveSupport().getOrCreate()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行太慢\"><a href=\"#运行太慢\" class=\"headerlink\" title=\"运行太慢\"></a>运行太慢</h3>","site":{"data":{}},"excerpt":"<p>Pyspark 入门</p>","more":"<p>[TOC]</p>\n<h1 id=\"spark-context-和spark-session的关系\"><a href=\"#spark-context-和spark-session的关系\" class=\"headerlink\" title=\"spark context 和spark session的关系\"></a>spark context 和spark session的关系</h1><p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/pyspark.assets/image-20200702140518336.png\" alt=\"image-20200702140518336\" style=\"zoom:50%;\" /></p>\n<p>可以由上节图中看出，Application、SparkSession、SparkContext、RDD之间具有包含关系，并且前三者是1对1的关系。</p>\n<p>SparkSession 是 Spark 2.0 版本引入的新入口，在这之前，创建一个 Application 对应的上下文是这样的(创建spark context，创建sqlcontext或者streamingContext或者别的context)：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//set up the spark configuration and create contexts</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf = <span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setAppName(<span class=\"string\">&quot;SparkSessionZipsExample&quot;</span>).setMaster(<span class=\"string\">&quot;local&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// your handle to SparkContext to access other context like SQLContext</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sc = <span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf).set(<span class=\"string\">&quot;spark.some.config.option&quot;</span>, <span class=\"string\">&quot;some-value&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sqlContext = <span class=\"keyword\">new</span> org.apache.spark.sql.<span class=\"type\">SQLContext</span>(sc)</span><br></pre></td></tr></table></figure>\n<p>现在 SparkConf、SparkContext 和 SQLContext 都已经被封装在 SparkSession 当中，并且可以通过 builder 的方式创建（创建sparkSession，可直接调用sqlContext方法）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Create a SparkSession. No need to create SparkContext</span><br><span class=\"line\">// You automatically get it as part of the SparkSession</span><br><span class=\"line\">val warehouseLocation = &quot;file:$&#123;system:user.dir&#125;/spark-warehouse&quot;</span><br><span class=\"line\">val spark = SparkSession</span><br><span class=\"line\">   .builder()</span><br><span class=\"line\">   .appName(&quot;SparkSessionZipsExample&quot;)</span><br><span class=\"line\">   .config(&quot;spark.sql.warehouse.dir&quot;, warehouseLocation)</span><br><span class=\"line\">   .enableHiveSupport()</span><br><span class=\"line\">   .getOrCreate()</span><br></pre></td></tr></table></figure>\n<h1 id=\"dataframe-dataset-rdd\"><a href=\"#dataframe-dataset-rdd\" class=\"headerlink\" title=\"dataframe dataset  rdd\"></a>dataframe dataset  rdd</h1><p>参考 <a href=\"https://www.e-learn.cn/content/qita/784122\">https://www.e-learn.cn/content/qita/784122</a></p>\n<p>简单来说，RDD是一种非结构化分部式数据集，每个元素都可以是不同的类型的数，通过sc.parallelize生成RDD。RDD中比较特殊的一种是key-value Pair RDD，即规定RDD的每个元素都是一个二元数组，其中第一个值是key，第二个值是value。</p>\n<p>这种特性就会给Pair RDD赋予一些特殊的操作，例如<code>groupByKey()</code>可以将具有相同key进行分组，其结果仍然得到Pair RDD，然后利用<code>mapValues()</code>对相同key的value进行函数计算；<code>reduceByKey()</code>、<code>countByKey()</code>和<code>sortByKey()</code>等一系列“ByKey()”操作同理。<br>另外，两个Pair RDD具有像SQL一样的连接操作，例如两个Pair RDD进行<code>join()</code>后，具有相同key的元素的value会被放在一个元组里，key不相同的元素会被舍弃。<code>leftOuterJoin()</code>、<code>rightOuterJoin()</code>、<code>fullOuterJoin()</code>等操作同理。</p>\n<p>Pair RDD已经被一定程度的格式化了，它的每个元素会具有key，但是value仍然具有很大的灵活性。DataFrame是一种完全格式化的数据集合，和数据库中的<em>表</em>的概念比较接近，它每列数据必须具有相同的数据类型。也正是由于DataFrame知道数据集合所有的类型信息，DataFrame可以进行列处理优化而获得比RDD更优的性能。<br>在内部实现上，DataFrame是由<code>Row</code>对象为元素组成的集合，每个<code>Row</code>对象存储DataFrame的一行</p>\n<h2 id=\"RDD和dataframe使用上的的区别\"><a href=\"#RDD和dataframe使用上的的区别\" class=\"headerlink\" title=\"RDD和dataframe使用上的的区别\"></a>RDD和dataframe使用上的的区别</h2><ul>\n<li>RDD：没有列名称，只能使用数字来索引；具有<code>map()</code>、<code>reduce()</code>等方法并可指定任意函数进行计算;</li>\n<li>DataFrame：一定有列名称（即使是默认生成的），可以通过<code>.col_name</code>或者<code>[&#39;col_name&#39;]</code>来索引列；具有表的相关操作（例如<code>select()</code>、<code>filter()</code>、<code>where()</code>、<code>join</code>），但是没有<code>map()</code>、<code>reduce()</code>等方法。</li>\n<li>有时候DataFrame的<em>表</em>相关操作不能处理一些问题，例如需要对一些数据利用指定的函数进行计算时，就需要将DataFrame转换为RDD。DataFrame可以直接利用<code>.rdd</code>获取对应的RDD对象，此RDD对象的每个元素使用<code>Row</code>对象来表示，每列值会成为<code>Row</code>对象的一个<code>域=&gt;值</code>映射</li>\n</ul>\n<h2 id=\"RDD转化为dataframe\"><a href=\"#RDD转化为dataframe\" class=\"headerlink\" title=\"RDD转化为dataframe\"></a>RDD转化为dataframe</h2><p>就像之前的例子一样，可以利用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataframe = spark.createDataFrame(rdd, schema=None, samplingRatio=None)</span><br></pre></td></tr></table></figure>\n<p>来将RDD转换为DataFrame，其中的参数设置需要注意：<br><strong>schema</strong>：DataFrame各列类型信息，在提前知道RDD所有类型信息时设定。例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema = StructType([StructField(&#x27;col1&#x27;, StringType()),          StructField(&#x27;col2&#x27;, IntegerType())])</span><br></pre></td></tr></table></figure>\n<p><strong>samplingRatio</strong>：推测各列类型信息的采样比例，在未知RDD所有类型信息时，spark需要根据一定的数据量进行类型推测；默认情况下，spark会抽取前100的RDD进行推测，之后在真正将RDD转换为DataFrame时如果遇到类型信息不符会报错 <em>Some of types cannot be determined by the first 100 rows, please try again with sampling</em> 。同理采样比例较低，推测类型信息也可能错误。</p>\n<h1 id=\"PySpark-SparkContext\"><a href=\"#PySpark-SparkContext\" class=\"headerlink\" title=\"PySpark - SparkContext\"></a>PySpark - SparkContext</h1><p>SparkContext是任何spark功能的入口点。当我们运行任何Spark应用程序时，会启动一个驱动程序，它具有main函数，并且此处启动了SparkContext。此类的具体定义如下：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class pyspark.SparkContext (</span><br><span class=\"line\">   master = <span class=\"literal\">None</span>,</span><br><span class=\"line\">   appName = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   sparkHome = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   pyFiles = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   environment = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   batchSize = <span class=\"number\">0</span>, </span><br><span class=\"line\">   serializer = PickleSerializer(), </span><br><span class=\"line\">   conf = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   gateway = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   jsc = <span class=\"literal\">None</span>, </span><br><span class=\"line\">   profiler_cls = &lt;class <span class=\"symbol\">&#x27;pyspark</span>.profiler.BasicProfiler&#x27;&gt;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>以下是SparkContext的参数具体含义：</p>\n<ul>\n<li><code>Master</code>- 它是连接到的集群的URL。</li>\n<li><code>appName</code>- 您的工作名称。</li>\n<li><code>sparkHome</code> - Spark安装目录。</li>\n<li><code>pyFiles</code> - 要发送到集群并添加到PYTHONPATH的.zip或.py文件。</li>\n<li><code>environment</code> - 工作节点环境变量。</li>\n<li><code>batchSize</code> - 表示为单个Java对象的Python对象的数量。设置1以禁用批处理，设置0以根据对象大小自动选择批处理大小，或设置为-1以使用无限批处理大小。</li>\n<li><code>serializer</code>- RDD序列化器。</li>\n<li><code>Conf</code> - L {SparkConf}的一个对象，用于设置所有Spark属性。</li>\n<li><code>gateway</code>  - 使用现有网关和JVM，否则初始化新JVM。</li>\n<li><code>JSC</code> - JavaSparkContext实例。</li>\n<li><code>profiler_cls</code> - 用于进行性能分析的一类自定义Profiler（默认为pyspark.profiler.BasicProfiler）。<br> 在上述参数中，主要使用master和appname。任何PySpark程序的会使用以下两行:<code>控制台启动pyspark的时候本质上也是启动了一个spark context,如果您尝试创建另一个SparkContext对象，您将收到以下错误 - “ValueError：无法一次运行多个SparkContexts”</code>：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;First App&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取本地文件\"><a href=\"#读取本地文件\" class=\"headerlink\" title=\"读取本地文件\"></a>读取本地文件</h2><ul>\n<li>新建demo.py文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;first app&quot;</span>) <span class=\"comment\">#本地模式</span></span><br><span class=\"line\">logFile = <span class=\"string\">&quot;file:////opt/modules/hadoop-2.8.5/README.txt&quot;</span></span><br><span class=\"line\">logData = sc.textFile(logFile).cache() <span class=\"comment\">#对于需要重复用到的且占用内存小的RDD对象，可以通过rdd.cache()存储起来，之后再次使用的时候，直接读取内存中的RDD对象，节省时间</span></span><br><span class=\"line\">numAs = logData.<span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> s: <span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> s).count()</span><br><span class=\"line\">numBs = logData.<span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> s: <span class=\"string\">&#x27;b&#x27;</span> <span class=\"keyword\">in</span> s).count()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Line with a:%i,lines with b :%i&quot;</span> % (numAs, numBs))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark-submit demo.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"RDD（Resilient-Distributed-Dataset）\"><a href=\"#RDD（Resilient-Distributed-Dataset）\" class=\"headerlink\" title=\"RDD（Resilient Distributed Dataset）\"></a>RDD（Resilient Distributed Dataset）</h2><p>RDD是在多个节点上运行和操作以在集群上进行并行处理的元素</p>\n<p>要对这些RDD进行操作，有两种方法 :</p>\n<ul>\n<li>Transformation：这些操作应用于RDD以创建新的RDD。Filter，groupBy和map是转换的示例。</li>\n<li>Action：这些是应用于RDD的操作，它指示Spark执行计算并将结果发送回驱动程序。如count()，collect(), foreach(func)</li>\n</ul>\n<p>RDD定义如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">pyspark</span>.<span class=\"title\">RDD</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"class\">   jrdd, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"class\">   ctx, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"class\">   jrdd_deserializer = AutoBatchedSerializer(<span class=\"params\">PickleSerializer(<span class=\"params\"></span>)</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"class\"></span>)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"RDD基础操作\"><a href=\"#RDD基础操作\" class=\"headerlink\" title=\"RDD基础操作\"></a>RDD基础操作</h1><h2 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\"count()\"></a>count()</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;count app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize(</span><br><span class=\"line\">    [<span class=\"string\">&quot;scala&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark vs hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark and spark&quot;</span></span><br><span class=\"line\">     ])</span><br><span class=\"line\">counts = words.count()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Number of elements in RDD -&gt; %i&quot;</span> % counts)</span><br></pre></td></tr></table></figure>\n<h2 id=\"collect\"><a href=\"#collect\" class=\"headerlink\" title=\"collect()\"></a>collect()</h2><p>返回RDD中的所有元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----------------------------------------collect.py - --------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;collect app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize(</span><br><span class=\"line\">    [<span class=\"string\">&quot;scala&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark vs hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark and spark&quot;</span></span><br><span class=\"line\">     ])</span><br><span class=\"line\">coll = words.collect()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Elements in RDD -&gt; %s&quot;</span> % coll)</span><br></pre></td></tr></table></figure>\n<p>执行spark-submit collect.py 输出以下结果</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elements <span class=\"keyword\">in</span> RDD -&gt; [<span class=\"symbol\">&#x27;scala</span>&#x27;, <span class=\"symbol\">&#x27;java</span>&#x27;, <span class=\"symbol\">&#x27;hadoop</span>&#x27;, <span class=\"symbol\">&#x27;spark</span>&#x27;, <span class=\"symbol\">&#x27;akka</span>&#x27;, <span class=\"symbol\">&#x27;spark</span> vs hadoop&#x27;, <span class=\"symbol\">&#x27;pyspark</span>&#x27;, <span class=\"symbol\">&#x27;pyspark</span> and spark&#x27;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"foreach-func\"><a href=\"#foreach-func\" class=\"headerlink\" title=\"foreach(func)\"></a>foreach(func)</h2><p>仅返回满足foreach内函数条件的元素。在下面的示例中，我们在foreach中调用print函数，该函数打印RDD中的所有元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># foreach.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;ForEach app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize (</span><br><span class=\"line\">   [<span class=\"string\">&quot;scala&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;java&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;hadoop&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;spark&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;spark vs hadoop&quot;</span>, </span><br><span class=\"line\">   <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;pyspark and spark&quot;</span>]</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>):</span> <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">fore = words.foreach(f)</span><br></pre></td></tr></table></figure>\n<p>执行<code>spark-submit foreach.py</code>，然后输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala</span><br><span class=\"line\">java</span><br><span class=\"line\">hadoop</span><br><span class=\"line\">spark</span><br><span class=\"line\">akka</span><br><span class=\"line\">spark vs hadoop</span><br><span class=\"line\">pyspark</span><br><span class=\"line\">pyspark and spark</span><br></pre></td></tr></table></figure>\n<h2 id=\"filter-f\"><a href=\"#filter-f\" class=\"headerlink\" title=\"filter(f)\"></a>filter(f)</h2><p>返回一个包含元素的新RDD，它满足过滤器内部的功能。在下面的示例中，我们过滤掉包含’’spark’的字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filter.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Filter app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize(</span><br><span class=\"line\">    [<span class=\"string\">&quot;scala&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark vs hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark and spark&quot;</span>]</span><br><span class=\"line\">)</span><br><span class=\"line\">words_filter = words.<span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> x: <span class=\"string\">&#x27;spark&#x27;</span> <span class=\"keyword\">in</span> x)</span><br><span class=\"line\">filtered = words_filter.collect()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Fitered RDD -&gt; %s&quot;</span> % (filtered))</span><br></pre></td></tr></table></figure>\n<p>执行<code>spark-submit filter.py</code>:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fitered RDD -&gt; [<span class=\"symbol\">&#x27;spark</span>&#x27;, <span class=\"symbol\">&#x27;spark</span> vs hadoop&#x27;, <span class=\"symbol\">&#x27;pyspark</span>&#x27;, <span class=\"symbol\">&#x27;pyspark</span> and spark&#x27;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"map-f-preservesPartitioning-False\"><a href=\"#map-f-preservesPartitioning-False\" class=\"headerlink\" title=\"map(f, preservesPartitioning = False)\"></a>map(f, preservesPartitioning = False)</h2><p>通过将该函数应用于RDD中的每个元素来返回新的RDD。在下面的示例中，我们形成一个键值对，并将每个字符串映射为值1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># map.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Map app&quot;</span>)</span><br><span class=\"line\">words = sc.parallelize(</span><br><span class=\"line\">    [<span class=\"string\">&quot;scala&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;akka&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;spark vs hadoop&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark&quot;</span>,</span><br><span class=\"line\">     <span class=\"string\">&quot;pyspark and spark&quot;</span>]</span><br><span class=\"line\">)</span><br><span class=\"line\">words_map = words.<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: (x, <span class=\"number\">1</span>))</span><br><span class=\"line\">mapping = words_map.collect()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Key value pair -&gt; %s&quot;</span> % (mapping))</span><br></pre></td></tr></table></figure>\n<p>执行spark-submit map.py</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Key <span class=\"keyword\">value</span> pair -&gt; [(<span class=\"string\">&#x27;scala&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;java&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;hadoop&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;spark&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;akka&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;spark vs hadoop&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;pyspark&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;pyspark and spark&#x27;</span>, <span class=\"number\">1</span>)]</span><br></pre></td></tr></table></figure>\n<h2 id=\"reduce-f\"><a href=\"#reduce-f\" class=\"headerlink\" title=\"reduce(f)\"></a>reduce(f)</h2><p>执行指定的可交换和关联二元操作后，将返回RDD中的元素。在下面的示例中，我们从运算符导入add包并将其应用于’num’以执行简单的加法运算。说白了和Python的reduce一样：假如有一组整数[x1,x2,x3]，利用reduce执行加法操作add，对第一个元素执行add后，结果为sum=x1,然后再将sum和x2执行add，sum=x1+x2，最后再将x2和sum执行add，此时sum=x1+x2+x3。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># reduce.py</span><br><span class=\"line\">from pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">from <span class=\"keyword\">operator</span> import add</span><br><span class=\"line\">sc <span class=\"title\">=</span> <span class=\"type\">SparkContext</span>(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Reduce app&quot;</span>)</span><br><span class=\"line\">nums <span class=\"operator\">=</span> sc.parallelize([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">adding <span class=\"operator\">=</span> nums.reduce(add)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Adding all the elements -&gt; %i&quot;</span> <span class=\"operator\">%</span> (adding))</span><br></pre></td></tr></table></figure>\n<p>执行<code>spark-submit reduce.py</code>:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Adding all the elements -&gt; <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"join-other-numPartitions-None\"><a href=\"#join-other-numPartitions-None\" class=\"headerlink\" title=\"join(other, numPartitions = None)\"></a>join(other, numPartitions = None)</h2><p>它返回RDD，其中包含一对带有匹配键的元素以及该特定键的所有值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\">sc <span class=\"operator\">=</span> <span class=\"type\">SparkContext</span>(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Join app&quot;</span>)</span><br><span class=\"line\">x <span class=\"operator\">=</span> sc.parallelize([(<span class=\"string\">&quot;spark&quot;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&quot;hadoop&quot;</span>, <span class=\"number\">4</span>)])</span><br><span class=\"line\">y <span class=\"operator\">=</span> sc.parallelize([(<span class=\"string\">&quot;spark&quot;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&quot;hadoop&quot;</span>, <span class=\"number\">5</span>)])</span><br><span class=\"line\">joined <span class=\"operator\">=</span> x.join(y)</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"operator\">=</span> joined.collect()</span><br><span class=\"line\"><span class=\"built_in\">print</span>( <span class=\"string\">&quot;Join RDD -&gt; %s&quot;</span> <span class=\"operator\">%</span> (<span class=\"keyword\">final</span>))</span><br></pre></td></tr></table></figure>\n<p>执行<code>spark-submit join.py</code>:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Join RDD -&gt; [</span><br><span class=\"line\">   (<span class=\"symbol\">&#x27;spark</span>&#x27;, (<span class=\"number\">1</span>, <span class=\"number\">2</span>)),  </span><br><span class=\"line\">   (<span class=\"symbol\">&#x27;hadoop</span>&#x27;, (<span class=\"number\">4</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h1 id=\"RDD转成pandas-dataframe\"><a href=\"#RDD转成pandas-dataframe\" class=\"headerlink\" title=\"RDD转成pandas.dataframe\"></a>RDD转成pandas.dataframe</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> HiveContext,SparkSession</span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">&quot;local&quot;</span>, <span class=\"string\">&quot;Map app&quot;</span>)</span><br><span class=\"line\">hiveContext = HiveContext(sc)</span><br><span class=\"line\">sql=<span class=\"string\">&quot;select pin,cpp_base_sex from dmr_c.dmrc_model_t03_market_bt_profile_s_d where dt&gt;&#x27;2020-01-01&#x27; limit 100&quot;</span></span><br><span class=\"line\">read_df=hiveContext.sql(sql) <span class=\"comment\"># spark的dataframe</span></span><br><span class=\"line\">df = read_df.toPandas() <span class=\"comment\">#pandas的dataframe</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h3 id=\"内存不足\"><a href=\"#内存不足\" class=\"headerlink\" title=\"内存不足\"></a>内存不足</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：</span></span><br><span class=\"line\">spark.conf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.sql.execution.arrow.enabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二：设置多个conf</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.conf <span class=\"keyword\">import</span> SparkConf</span><br><span class=\"line\">sparkConf = SparkConf()</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;spark.driver.maxResultSize&#x27;</span>, <span class=\"string\">&#x27;3G&#x27;</span>)</span><br><span class=\"line\">sc = SparkSession.builder.config(conf=sparkConf).enableHiveSupport().getOrCreate()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行太慢\"><a href=\"#运行太慢\" class=\"headerlink\" title=\"运行太慢\"></a>运行太慢</h3>"},{"title":"python","date":"2022-03-01T03:32:38.000Z","_content":"\npython常用操作\n\n<!-- more -->\n\n\n[TOC]\n\n# 快速安装python依赖包\n\n```shell\npip install -r requirements.txt\n```\n\n```text\n# requirements.txt\ncertifi==2020.4.5.1\nchardet==3.0.4\nidna==2.9\nlxml==4.5.1\nrequests==2.23.0\nurllib3==1.25.9\n\n```\n\n\n\n# importlib 动态导入包\n\n```python\n# 导入指定类或方法\nfrom model_fn import dmtTrainer\nmodule = importlib.import_module(FLAGS.model_fn)\n\n\ndmtTrainer = module.dmtTrainer\n```\n\n\n\n# argparse\n\n```python\n# 1引入模块\nimport argparse\n\n# 2建立解析对象\nparser = argparse.ArgumentParser()\n\n# 3增加属性：给xx实例增加一个aa属性 # xx.add_argument(\"aa\")\nparser.add_argument('role', type=str,\n                        help=\"Role of this trainer in {'local', \"\n                             \"'leader', 'follower'}\")\n\n# 4属性给与args实例： 把parser中设置的所有\"add_argument\"给返回到args子类实例当中， 那么parser中增加的属性内容都会在args实例中，使用即可。\nargs = parser.parse_args()\nparser.parse_args()\n```\n\n运行时使用\n\n```shell\npython main.py --role='leader'\n```\n\n\n\n# 命名规则\n\n类： 大驼峰\n方法：小驼峰\n变量：小写字母+下划线\n常量：大写字母+下划线\n\n# 闭包\n> 内部函数调用外部变量的行为叫做闭包\n\n```python\ndef func1(name): \n  def func2():\n    print(name)\n   return func2()\n```\n\n\n\n\n# dict排序\n\n```python\nd = {'d1':2, 'd2':4, 'd4':1,'d3':3,}\nres = sorted(d.items(),key=lambda d:d[1],reverse=True)\nprint(res)\n```\n\n# python的u,r,b分别什么意思\n\n u: 表示unicode字符串，默认模式，里边的特殊字符会被识别。\n\n```\nprint(u'hi\\thi\\thi')\n```\n\n执行之后：\n**hi hi hi**\n\n b: 表示二进制字符串，括号内的内容原样输出。\n\n```\nprint(b'hi\\thi\\thi')\n```\n\n执行之后：\n**b'hi\\thi\\thi'**\n\n r：不转义字符串，要输出的内容原样输出。\n\n```\nprint(r'hi\\thi\\thi')\n```\n\n执行之后：\n**hi\\thi\\thi**\n\n\n# dic快速保存和读取\n\n>        #保存\n>        dict_name = {1:{1:2,3:4},2:{3:4,4:5}}\n>        f = open('temp.txt','w')\n>        f.write(str(dict_name))\n>        f.close()\n>        \n>        #读取\n>        f = open('temp.txt','r')\n>        a = f.read()\n>        dict_name = eval(a)\n>\n>\n\n# 如果不存在则创建文件\n\n```python\nimport os\nif not os.path.exists(filename):\n    os.system(r\"touch {}\".format(path))#调用系统命令行来创建文件\n```\n\n# 获取当前路径\n\n```\nsys.path.append(os.getcwd()) #添加当前文件夹路径\n```\n\n```python\nimport sys\nimport os\nprint (sys.argv[0])\nprint(os.getcwd())\n```\n\n# utf-8编码\n\n```python\nif sys.getdefaultencoding() != 'utf-8':\n    reload(sys)\n    sys.setdefaultencoding('utf-8')\n```\n\n# 文件读取\n\n```python\ndata = pandas.read_table(filename,sep='\\t') #dataframe\ndata.to_csv(filename,sep=',')\n\ndata=np.loadtxt(filename,delimiter='\\t') #narray\nnp.save(filename,narray)\n\nwith open(filename,'r'.encoding='utf-8') as f: #list\n\tlines=f.readlines()\n```\n\n# 产生随机矩阵\n\n```python\ndf=pd.DataFrame(np.random.randn(4,4),columns=['A','B','C','D'])\n```\n\n\n# 提取年月日\n\n```python\na=['2019-01-01 12:00:00','2019-02-01 12:00:00']\na.apply(lambda x:x[0,7])\n```\n\n# 百分位数\n\n```python\n#dataframe\nfeat_res['f_p75'] = X[X[feat] is not None][feat].quantile(0.75)\n```\n\n# 计时\n\n```python\nimport time\n\ntime_start=time.time()\ntime.sleep(2)\ntime_end=time.time()\nprint('totally cost {:.3f} s'.format(time_end-time_start))\n```\n\n# python调用shell\n\n> os.system(command) \n\n  此函数会启动子进程，在子进程中执行command，并返回command命令执行完毕后的退出状态，如果command有执行内容，会在标准输出显示。这实际上是使用C标准库函数system()实现的。\n\n​    缺点：这个函数在执行command命令时需要重新打开一个终端，并且无法保存command命令的执行结果。\n\n> os.popen(command,mode)\n\n打开一个与command进程之间的管道。这个函数的返回值是一个文件对象，可以读或者写(由mode决定，mode默认是’r')。如果mode为’r'，可以使用此函数的返回值调用read()来获取command命令的执行结果。\n\nos.system(cmd)或os.popen(cmd)，前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择。\n\n# XGB 相关\n\n## xgboost.sklearn.XGBClassifier\n\n```python\nfrom xgboost.sklearn import XGBClassifier\n# 训练模型\nwatchlist = [(x_train, y_train), (x_test, y_test)]  # [(test[res_train],y_test)]\nmodel = XGBClassifier(**params)\nmodel.fit(x_train, y_train, eval_set=watchlist)  \n    \n# feature importance\nimportance = model.get_booster().get_fscore()\n\n# 模型预测\n y_test_pro = model.predict_proba(x_test)[:,1]\n    \n# 模型保存\n#法一\nmodel.get_booster().dump_model('xgb.dump') #该方法储存的是raw text文件，不能用于load_model，用于直观解释模型\n\n#法二\nmodel.save_model('xgb.dump') #该同法一\n\n#法三 推荐方法\nimport pickle\npickle.dump(model, open(\"pima.pickle.dat\", \"wb\")) #该方法储存的是二进制文件，可以load_model\n\n#load model\n#法一\nclf = XGBClassifier()\nbooster = Booster()\nbooster.load_model('./model.xgb')\nclf._Booster = booster\n\n#法二\nclf.predict(...)\nloaded_model = pickle.load(open(\"pima.pickle.dat\", \"rb\"))\n```\n\n## 哈哈\n\n# dataframe 转为 DMATRIX\n\n```\ndtrain = xgb.DMatrix(df_train[col_feat], label=df_train['y'])\n```\n\n# 获取叶子节点\n\n```python\nloaded_model = pickle.load(open(f_xgb_model+'.pickle', \"rb\"))\ndtrain = xgb.DMatrix(df_train[col_feat], label=df_train['y'])\ny=loaded_model.get_booster().predict(dtrain,pred_leaf=True)\n```\n\n\n\n# 装饰器(decorator)\n\nhttps://www.cnblogs.com/wolf-yasen/p/11240500.html\n\n> 本质上，decorator就是一个返回函数的高阶函数\n\n```python\n@a\n@b\n@c\ndef f():\n  pass\n#相当于执行了  f = a(b(c(f)))\n#调用f的时候，实际上调用的是a(b(c(f)))\n```\n\n\n\n装饰器（decorator）可以给函数动态加上功能\n\n```python\nimport time\ndef test(func):\n    def wrapper():\n        start = time.clock()\n        print(\"this is a order test, if you need not it, delete it\") # 用于测试执行顺序,可以跟着走一遍\n        end = time.clock()\n        print(\"start:\", start, \" end:\", end)\n        return func # 这种获得返回值的方法可能在多层修饰器的时候有矛盾,我先用!!!标记, 等理顺后再回来修改,如果我发布之后这里依然存在...说明我忘记了...\n    return wrapper\n\n@test\ndef foo():\n    print(\"this is a test\")\n    return \"this is a return value\"\n\n #相当于执行了 foo = log(foo)\n\nprint(foo())\n# 输出\n# this is a test wrapper, if you need not it, delete it\n# this is a test\n# start: 4.44444839506524e-07  end: 1.8222238419767486e-05\n# this is a return value\n```\n\n![image-20200409175624696](/Users/hetianqi/Documents/charging/notes_of_the_world/python.assets/image-20200409175624696.png)\n\n\n\n## @property修饰器\n\n把一个getter方法变成属性，只需要加上`@property`就可以了，此时，`@property`本身又创建了另一个装饰器`@score.setter`，负责把一个setter方法变成属性赋值\n\n```python\nclass Screen(object):  \n    @property\n    def width(self):\n        return self.W\n    \n    @width.setter\n    def width(self, value):\n        self.W = value \n  # 测试:\ns = Screen()\ns.width=10 \ns.width\n```\n\n代码也可改为\n\n```python\nclass Screen(object):  \n    @property\n    def width(self):\n        return self._width\n    \n    @width.setter\n    def width(self, value):\n        self._width = value \n  # 测试:\ns = Screen()\ns.width=10 \ns.width\n```\n# python变量中的下划线\n\n- xx: 公有变量\n- _x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问\n- __xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)\n- __xx__:双前后下划线,用户名字空间的魔法对象或属性。例如:__init__ , __ 不要自己发明这样的名字\n- xx_:单后置下划线,用于避免与Python关键词的冲突\n\n# 生成器（generator）\n\n如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。\n\n>实例：生成斐波那契数列\n>\n>```pychon\n># 一般写法\n>def fib1(max):\n>\t\tn, a, b = 0,0,1\n>\t\twhile n<max:\n>\t\t\t\tprint(b)\n>\t\t    a,b = b,a+b\n>\t\t    n+=1\n>\t\treturn 'done'\n># 调用\n>fib1(6)\n>```\n>\n>```python\n># 生成器写法\n>def fib2(max):\n>    n, a, b = 0,0,1\n>    while n<max:\n>        yield b\n>        a,b = b,a+b\n>        n+=1\n>     return 'done'\n> # 调用\n>for i in fib2(6):\n>      print(i)\n>```\n\n# 迭代器（iterable）\n\n我们已经知道，可以直接作用于`for`循环的数据类型有以下几种：\n\n一类是集合数据类型，如`list`、`tuple`、`dict`、`set`、`str`等；\n\n一类是`generator`，包括生成器和带`yield`的generator function。\n\n这些可以直接作用于`for`循环的对象统称为可迭代对象：`Iterable`。\n\n可以使用`isinstance()`判断一个对象是否是`Iterable`对象\n\n```\nfrom collections.abc import Iterable\n>>> isinstance([], Iterable)\nTrue\n```\n\n可以被`next()`函数调用并不断返回下一个值的对象称为迭代器：`Iterator`。可以使用`isinstance()`判断一个对象是否是`Iterator`对象：\n\n```\nfrom collections.abc import Iterator\n>>> isinstance((x for x in range(10)), Iterator)\nTrue\n```\n\n生成器都是`Iterator`对象，但`list`、`dict`、`str`虽然是`Iterable`，却不是`Iterator`。\n\n把`list`、`dict`、`str`等`Iterable`变成`Iterator`可以使用`iter()`函数：\n\n```\nisinstance(iter([]), Iterator)\nTrue\n```\n\n## 小结\n\n凡是可作用于`for`循环的对象都是`Iterable`类型；\n\n凡是可作用于`next()`函数的对象都是`Iterator`类型，它们表示一个惰性计算的序列；\n\n集合数据类型如`list`、`dict`、`str`等是`Iterable`但不是`Iterator`，不过可以通过`iter()`函数获得一个`Iterator`对象。\n\nPython的`for`循环本质上就是通过不断调用`next()`函数实现的，例如：\n\n```\nfor x in [1, 2, 3, 4, 5]:\n    pass\n```\n\n实际上完全等价于：\n\n```\n# 首先获得Iterator对象:\nit = iter([1, 2, 3, 4, 5])\n# 循环:\nwhile True:\n    try:\n        # 获得下一个值:\n        x = next(it)\n    except StopIteration:\n        # 遇到StopIteration就退出循环\n        break\n```","source":"_posts/0_代码相关/python.md","raw":"---\ntitle: python\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\npython常用操作\n\n<!-- more -->\n\n\n[TOC]\n\n# 快速安装python依赖包\n\n```shell\npip install -r requirements.txt\n```\n\n```text\n# requirements.txt\ncertifi==2020.4.5.1\nchardet==3.0.4\nidna==2.9\nlxml==4.5.1\nrequests==2.23.0\nurllib3==1.25.9\n\n```\n\n\n\n# importlib 动态导入包\n\n```python\n# 导入指定类或方法\nfrom model_fn import dmtTrainer\nmodule = importlib.import_module(FLAGS.model_fn)\n\n\ndmtTrainer = module.dmtTrainer\n```\n\n\n\n# argparse\n\n```python\n# 1引入模块\nimport argparse\n\n# 2建立解析对象\nparser = argparse.ArgumentParser()\n\n# 3增加属性：给xx实例增加一个aa属性 # xx.add_argument(\"aa\")\nparser.add_argument('role', type=str,\n                        help=\"Role of this trainer in {'local', \"\n                             \"'leader', 'follower'}\")\n\n# 4属性给与args实例： 把parser中设置的所有\"add_argument\"给返回到args子类实例当中， 那么parser中增加的属性内容都会在args实例中，使用即可。\nargs = parser.parse_args()\nparser.parse_args()\n```\n\n运行时使用\n\n```shell\npython main.py --role='leader'\n```\n\n\n\n# 命名规则\n\n类： 大驼峰\n方法：小驼峰\n变量：小写字母+下划线\n常量：大写字母+下划线\n\n# 闭包\n> 内部函数调用外部变量的行为叫做闭包\n\n```python\ndef func1(name): \n  def func2():\n    print(name)\n   return func2()\n```\n\n\n\n\n# dict排序\n\n```python\nd = {'d1':2, 'd2':4, 'd4':1,'d3':3,}\nres = sorted(d.items(),key=lambda d:d[1],reverse=True)\nprint(res)\n```\n\n# python的u,r,b分别什么意思\n\n u: 表示unicode字符串，默认模式，里边的特殊字符会被识别。\n\n```\nprint(u'hi\\thi\\thi')\n```\n\n执行之后：\n**hi hi hi**\n\n b: 表示二进制字符串，括号内的内容原样输出。\n\n```\nprint(b'hi\\thi\\thi')\n```\n\n执行之后：\n**b'hi\\thi\\thi'**\n\n r：不转义字符串，要输出的内容原样输出。\n\n```\nprint(r'hi\\thi\\thi')\n```\n\n执行之后：\n**hi\\thi\\thi**\n\n\n# dic快速保存和读取\n\n>        #保存\n>        dict_name = {1:{1:2,3:4},2:{3:4,4:5}}\n>        f = open('temp.txt','w')\n>        f.write(str(dict_name))\n>        f.close()\n>        \n>        #读取\n>        f = open('temp.txt','r')\n>        a = f.read()\n>        dict_name = eval(a)\n>\n>\n\n# 如果不存在则创建文件\n\n```python\nimport os\nif not os.path.exists(filename):\n    os.system(r\"touch {}\".format(path))#调用系统命令行来创建文件\n```\n\n# 获取当前路径\n\n```\nsys.path.append(os.getcwd()) #添加当前文件夹路径\n```\n\n```python\nimport sys\nimport os\nprint (sys.argv[0])\nprint(os.getcwd())\n```\n\n# utf-8编码\n\n```python\nif sys.getdefaultencoding() != 'utf-8':\n    reload(sys)\n    sys.setdefaultencoding('utf-8')\n```\n\n# 文件读取\n\n```python\ndata = pandas.read_table(filename,sep='\\t') #dataframe\ndata.to_csv(filename,sep=',')\n\ndata=np.loadtxt(filename,delimiter='\\t') #narray\nnp.save(filename,narray)\n\nwith open(filename,'r'.encoding='utf-8') as f: #list\n\tlines=f.readlines()\n```\n\n# 产生随机矩阵\n\n```python\ndf=pd.DataFrame(np.random.randn(4,4),columns=['A','B','C','D'])\n```\n\n\n# 提取年月日\n\n```python\na=['2019-01-01 12:00:00','2019-02-01 12:00:00']\na.apply(lambda x:x[0,7])\n```\n\n# 百分位数\n\n```python\n#dataframe\nfeat_res['f_p75'] = X[X[feat] is not None][feat].quantile(0.75)\n```\n\n# 计时\n\n```python\nimport time\n\ntime_start=time.time()\ntime.sleep(2)\ntime_end=time.time()\nprint('totally cost {:.3f} s'.format(time_end-time_start))\n```\n\n# python调用shell\n\n> os.system(command) \n\n  此函数会启动子进程，在子进程中执行command，并返回command命令执行完毕后的退出状态，如果command有执行内容，会在标准输出显示。这实际上是使用C标准库函数system()实现的。\n\n​    缺点：这个函数在执行command命令时需要重新打开一个终端，并且无法保存command命令的执行结果。\n\n> os.popen(command,mode)\n\n打开一个与command进程之间的管道。这个函数的返回值是一个文件对象，可以读或者写(由mode决定，mode默认是’r')。如果mode为’r'，可以使用此函数的返回值调用read()来获取command命令的执行结果。\n\nos.system(cmd)或os.popen(cmd)，前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择。\n\n# XGB 相关\n\n## xgboost.sklearn.XGBClassifier\n\n```python\nfrom xgboost.sklearn import XGBClassifier\n# 训练模型\nwatchlist = [(x_train, y_train), (x_test, y_test)]  # [(test[res_train],y_test)]\nmodel = XGBClassifier(**params)\nmodel.fit(x_train, y_train, eval_set=watchlist)  \n    \n# feature importance\nimportance = model.get_booster().get_fscore()\n\n# 模型预测\n y_test_pro = model.predict_proba(x_test)[:,1]\n    \n# 模型保存\n#法一\nmodel.get_booster().dump_model('xgb.dump') #该方法储存的是raw text文件，不能用于load_model，用于直观解释模型\n\n#法二\nmodel.save_model('xgb.dump') #该同法一\n\n#法三 推荐方法\nimport pickle\npickle.dump(model, open(\"pima.pickle.dat\", \"wb\")) #该方法储存的是二进制文件，可以load_model\n\n#load model\n#法一\nclf = XGBClassifier()\nbooster = Booster()\nbooster.load_model('./model.xgb')\nclf._Booster = booster\n\n#法二\nclf.predict(...)\nloaded_model = pickle.load(open(\"pima.pickle.dat\", \"rb\"))\n```\n\n## 哈哈\n\n# dataframe 转为 DMATRIX\n\n```\ndtrain = xgb.DMatrix(df_train[col_feat], label=df_train['y'])\n```\n\n# 获取叶子节点\n\n```python\nloaded_model = pickle.load(open(f_xgb_model+'.pickle', \"rb\"))\ndtrain = xgb.DMatrix(df_train[col_feat], label=df_train['y'])\ny=loaded_model.get_booster().predict(dtrain,pred_leaf=True)\n```\n\n\n\n# 装饰器(decorator)\n\nhttps://www.cnblogs.com/wolf-yasen/p/11240500.html\n\n> 本质上，decorator就是一个返回函数的高阶函数\n\n```python\n@a\n@b\n@c\ndef f():\n  pass\n#相当于执行了  f = a(b(c(f)))\n#调用f的时候，实际上调用的是a(b(c(f)))\n```\n\n\n\n装饰器（decorator）可以给函数动态加上功能\n\n```python\nimport time\ndef test(func):\n    def wrapper():\n        start = time.clock()\n        print(\"this is a order test, if you need not it, delete it\") # 用于测试执行顺序,可以跟着走一遍\n        end = time.clock()\n        print(\"start:\", start, \" end:\", end)\n        return func # 这种获得返回值的方法可能在多层修饰器的时候有矛盾,我先用!!!标记, 等理顺后再回来修改,如果我发布之后这里依然存在...说明我忘记了...\n    return wrapper\n\n@test\ndef foo():\n    print(\"this is a test\")\n    return \"this is a return value\"\n\n #相当于执行了 foo = log(foo)\n\nprint(foo())\n# 输出\n# this is a test wrapper, if you need not it, delete it\n# this is a test\n# start: 4.44444839506524e-07  end: 1.8222238419767486e-05\n# this is a return value\n```\n\n![image-20200409175624696](/Users/hetianqi/Documents/charging/notes_of_the_world/python.assets/image-20200409175624696.png)\n\n\n\n## @property修饰器\n\n把一个getter方法变成属性，只需要加上`@property`就可以了，此时，`@property`本身又创建了另一个装饰器`@score.setter`，负责把一个setter方法变成属性赋值\n\n```python\nclass Screen(object):  \n    @property\n    def width(self):\n        return self.W\n    \n    @width.setter\n    def width(self, value):\n        self.W = value \n  # 测试:\ns = Screen()\ns.width=10 \ns.width\n```\n\n代码也可改为\n\n```python\nclass Screen(object):  \n    @property\n    def width(self):\n        return self._width\n    \n    @width.setter\n    def width(self, value):\n        self._width = value \n  # 测试:\ns = Screen()\ns.width=10 \ns.width\n```\n# python变量中的下划线\n\n- xx: 公有变量\n- _x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问\n- __xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)\n- __xx__:双前后下划线,用户名字空间的魔法对象或属性。例如:__init__ , __ 不要自己发明这样的名字\n- xx_:单后置下划线,用于避免与Python关键词的冲突\n\n# 生成器（generator）\n\n如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。\n\n>实例：生成斐波那契数列\n>\n>```pychon\n># 一般写法\n>def fib1(max):\n>\t\tn, a, b = 0,0,1\n>\t\twhile n<max:\n>\t\t\t\tprint(b)\n>\t\t    a,b = b,a+b\n>\t\t    n+=1\n>\t\treturn 'done'\n># 调用\n>fib1(6)\n>```\n>\n>```python\n># 生成器写法\n>def fib2(max):\n>    n, a, b = 0,0,1\n>    while n<max:\n>        yield b\n>        a,b = b,a+b\n>        n+=1\n>     return 'done'\n> # 调用\n>for i in fib2(6):\n>      print(i)\n>```\n\n# 迭代器（iterable）\n\n我们已经知道，可以直接作用于`for`循环的数据类型有以下几种：\n\n一类是集合数据类型，如`list`、`tuple`、`dict`、`set`、`str`等；\n\n一类是`generator`，包括生成器和带`yield`的generator function。\n\n这些可以直接作用于`for`循环的对象统称为可迭代对象：`Iterable`。\n\n可以使用`isinstance()`判断一个对象是否是`Iterable`对象\n\n```\nfrom collections.abc import Iterable\n>>> isinstance([], Iterable)\nTrue\n```\n\n可以被`next()`函数调用并不断返回下一个值的对象称为迭代器：`Iterator`。可以使用`isinstance()`判断一个对象是否是`Iterator`对象：\n\n```\nfrom collections.abc import Iterator\n>>> isinstance((x for x in range(10)), Iterator)\nTrue\n```\n\n生成器都是`Iterator`对象，但`list`、`dict`、`str`虽然是`Iterable`，却不是`Iterator`。\n\n把`list`、`dict`、`str`等`Iterable`变成`Iterator`可以使用`iter()`函数：\n\n```\nisinstance(iter([]), Iterator)\nTrue\n```\n\n## 小结\n\n凡是可作用于`for`循环的对象都是`Iterable`类型；\n\n凡是可作用于`next()`函数的对象都是`Iterator`类型，它们表示一个惰性计算的序列；\n\n集合数据类型如`list`、`dict`、`str`等是`Iterable`但不是`Iterator`，不过可以通过`iter()`函数获得一个`Iterator`对象。\n\nPython的`for`循环本质上就是通过不断调用`next()`函数实现的，例如：\n\n```\nfor x in [1, 2, 3, 4, 5]:\n    pass\n```\n\n实际上完全等价于：\n\n```\n# 首先获得Iterator对象:\nit = iter([1, 2, 3, 4, 5])\n# 循环:\nwhile True:\n    try:\n        # 获得下一个值:\n        x = next(it)\n    except StopIteration:\n        # 遇到StopIteration就退出循环\n        break\n```","slug":"0_代码相关/python","published":1,"updated":"2022-03-01T03:52:41.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly4z003t8s32cf6l3p7n","content":"<p>python常用操作</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"快速安装python依赖包\"><a href=\"#快速安装python依赖包\" class=\"headerlink\" title=\"快速安装python依赖包\"></a>快速安装python依赖包</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># requirements.txt</span><br><span class=\"line\">certifi==2020.4.5.1</span><br><span class=\"line\">chardet==3.0.4</span><br><span class=\"line\">idna==2.9</span><br><span class=\"line\">lxml==4.5.1</span><br><span class=\"line\">requests==2.23.0</span><br><span class=\"line\">urllib3==1.25.9</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"importlib-动态导入包\"><a href=\"#importlib-动态导入包\" class=\"headerlink\" title=\"importlib 动态导入包\"></a>importlib 动态导入包</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入指定类或方法</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> model_fn <span class=\"keyword\">import</span> dmtTrainer</span><br><span class=\"line\">module = importlib.import_module(FLAGS.model_fn)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dmtTrainer = module.dmtTrainer</span><br></pre></td></tr></table></figure>\n<h1 id=\"argparse\"><a href=\"#argparse\" class=\"headerlink\" title=\"argparse\"></a>argparse</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1引入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2建立解析对象</span></span><br><span class=\"line\">parser = argparse.ArgumentParser()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3增加属性：给xx实例增加一个aa属性 # xx.add_argument(&quot;aa&quot;)</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;role&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>,</span><br><span class=\"line\">                        <span class=\"built_in\">help</span>=<span class=\"string\">&quot;Role of this trainer in &#123;&#x27;local&#x27;, &quot;</span></span><br><span class=\"line\">                             <span class=\"string\">&quot;&#x27;leader&#x27;, &#x27;follower&#x27;&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4属性给与args实例： 把parser中设置的所有&quot;add_argument&quot;给返回到args子类实例当中， 那么parser中增加的属性内容都会在args实例中，使用即可。</span></span><br><span class=\"line\">args = parser.parse_args()</span><br><span class=\"line\">parser.parse_args()</span><br></pre></td></tr></table></figure>\n<p>运行时使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python main.py --role=&#x27;leader&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h1><p>类： 大驼峰<br>方法：小驼峰<br>变量：小写字母+下划线<br>常量：大写字母+下划线</p>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><blockquote>\n<p>内部函数调用外部变量的行为叫做闭包</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>(<span class=\"params\">name</span>):</span> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> func2()</span><br></pre></td></tr></table></figure>\n<h1 id=\"dict排序\"><a href=\"#dict排序\" class=\"headerlink\" title=\"dict排序\"></a>dict排序</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;<span class=\"string\">&#x27;d1&#x27;</span>:<span class=\"number\">2</span>, <span class=\"string\">&#x27;d2&#x27;</span>:<span class=\"number\">4</span>, <span class=\"string\">&#x27;d4&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;d3&#x27;</span>:<span class=\"number\">3</span>,&#125;</span><br><span class=\"line\">res = <span class=\"built_in\">sorted</span>(d.items(),key=<span class=\"keyword\">lambda</span> d:d[<span class=\"number\">1</span>],reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n<h1 id=\"python的u-r-b分别什么意思\"><a href=\"#python的u-r-b分别什么意思\" class=\"headerlink\" title=\"python的u,r,b分别什么意思\"></a>python的u,r,b分别什么意思</h1><p> u: 表示unicode字符串，默认模式，里边的特殊字符会被识别。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(u&#x27;hi\\thi\\thi&#x27;)</span><br></pre></td></tr></table></figure>\n<p>执行之后：<br><strong>hi hi hi</strong></p>\n<p> b: 表示二进制字符串，括号内的内容原样输出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(b&#x27;hi\\thi\\thi&#x27;)</span><br></pre></td></tr></table></figure>\n<p>执行之后：<br><strong>b’hi\\thi\\thi’</strong></p>\n<p> r：不转义字符串，要输出的内容原样输出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(r&#x27;hi\\thi\\thi&#x27;)</span><br></pre></td></tr></table></figure>\n<p>执行之后：<br><strong>hi\\thi\\thi</strong></p>\n<h1 id=\"dic快速保存和读取\"><a href=\"#dic快速保存和读取\" class=\"headerlink\" title=\"dic快速保存和读取\"></a>dic快速保存和读取</h1><blockquote>\n<pre><code>   #保存\n   dict_name = &#123;1:&#123;1:2,3:4&#125;,2:&#123;3:4,4:5&#125;&#125;\n   f = open(&#39;temp.txt&#39;,&#39;w&#39;)\n   f.write(str(dict_name))\n   f.close()\n\n   #读取\n   f = open(&#39;temp.txt&#39;,&#39;r&#39;)\n   a = f.read()\n   dict_name = eval(a)\n</code></pre></blockquote>\n<h1 id=\"如果不存在则创建文件\"><a href=\"#如果不存在则创建文件\" class=\"headerlink\" title=\"如果不存在则创建文件\"></a>如果不存在则创建文件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(filename):</span><br><span class=\"line\">    os.system(<span class=\"string\">r&quot;touch &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(path))<span class=\"comment\">#调用系统命令行来创建文件</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"获取当前路径\"><a href=\"#获取当前路径\" class=\"headerlink\" title=\"获取当前路径\"></a>获取当前路径</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys.path.append(os.getcwd()) #添加当前文件夹路径</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"built_in\">print</span> (sys.argv[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n<h1 id=\"utf-8编码\"><a href=\"#utf-8编码\" class=\"headerlink\" title=\"utf-8编码\"></a>utf-8编码</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> sys.getdefaultencoding() != <span class=\"string\">&#x27;utf-8&#x27;</span>:</span><br><span class=\"line\">    reload(sys)</span><br><span class=\"line\">    sys.setdefaultencoding(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pandas.read_table(filename,sep=<span class=\"string\">&#x27;\\t&#x27;</span>) <span class=\"comment\">#dataframe</span></span><br><span class=\"line\">data.to_csv(filename,sep=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data=np.loadtxt(filename,delimiter=<span class=\"string\">&#x27;\\t&#x27;</span>) <span class=\"comment\">#narray</span></span><br><span class=\"line\">np.save(filename,narray)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename,<span class=\"string\">&#x27;r&#x27;</span>.encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f: <span class=\"comment\">#list</span></span><br><span class=\"line\">\tlines=f.readlines()</span><br></pre></td></tr></table></figure>\n<h1 id=\"产生随机矩阵\"><a href=\"#产生随机矩阵\" class=\"headerlink\" title=\"产生随机矩阵\"></a>产生随机矩阵</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df=pd.DataFrame(np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">4</span>),columns=[<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;D&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"提取年月日\"><a href=\"#提取年月日\" class=\"headerlink\" title=\"提取年月日\"></a>提取年月日</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[<span class=\"string\">&#x27;2019-01-01 12:00:00&#x27;</span>,<span class=\"string\">&#x27;2019-02-01 12:00:00&#x27;</span>]</span><br><span class=\"line\">a.apply(<span class=\"keyword\">lambda</span> x:x[<span class=\"number\">0</span>,<span class=\"number\">7</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"百分位数\"><a href=\"#百分位数\" class=\"headerlink\" title=\"百分位数\"></a>百分位数</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#dataframe</span></span><br><span class=\"line\">feat_res[<span class=\"string\">&#x27;f_p75&#x27;</span>] = X[X[feat] <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>][feat].quantile(<span class=\"number\">0.75</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"计时\"><a href=\"#计时\" class=\"headerlink\" title=\"计时\"></a>计时</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">time_start=time.time()</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">time_end=time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;totally cost &#123;:.3f&#125; s&#x27;</span>.<span class=\"built_in\">format</span>(time_end-time_start))</span><br></pre></td></tr></table></figure>\n<h1 id=\"python调用shell\"><a href=\"#python调用shell\" class=\"headerlink\" title=\"python调用shell\"></a>python调用shell</h1><blockquote>\n<p>os.system(command) </p>\n</blockquote>\n<p>  此函数会启动子进程，在子进程中执行command，并返回command命令执行完毕后的退出状态，如果command有执行内容，会在标准输出显示。这实际上是使用C标准库函数system()实现的。</p>\n<p>​    缺点：这个函数在执行command命令时需要重新打开一个终端，并且无法保存command命令的执行结果。</p>\n<blockquote>\n<p>os.popen(command,mode)</p>\n</blockquote>\n<p>打开一个与command进程之间的管道。这个函数的返回值是一个文件对象，可以读或者写(由mode决定，mode默认是’r’)。如果mode为’r’，可以使用此函数的返回值调用read()来获取command命令的执行结果。</p>\n<p>os.system(cmd)或os.popen(cmd)，前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择。</p>\n<h1 id=\"XGB-相关\"><a href=\"#XGB-相关\" class=\"headerlink\" title=\"XGB 相关\"></a>XGB 相关</h1><h2 id=\"xgboost-sklearn-XGBClassifier\"><a href=\"#xgboost-sklearn-XGBClassifier\" class=\"headerlink\" title=\"xgboost.sklearn.XGBClassifier\"></a>xgboost.sklearn.XGBClassifier</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> xgboost.sklearn <span class=\"keyword\">import</span> XGBClassifier</span><br><span class=\"line\"><span class=\"comment\"># 训练模型</span></span><br><span class=\"line\">watchlist = [(x_train, y_train), (x_test, y_test)]  <span class=\"comment\"># [(test[res_train],y_test)]</span></span><br><span class=\"line\">model = XGBClassifier(**params)</span><br><span class=\"line\">model.fit(x_train, y_train, eval_set=watchlist)  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># feature importance</span></span><br><span class=\"line\">importance = model.get_booster().get_fscore()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模型预测</span></span><br><span class=\"line\"> y_test_pro = model.predict_proba(x_test)[:,<span class=\"number\">1</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 模型保存</span></span><br><span class=\"line\"><span class=\"comment\">#法一</span></span><br><span class=\"line\">model.get_booster().dump_model(<span class=\"string\">&#x27;xgb.dump&#x27;</span>) <span class=\"comment\">#该方法储存的是raw text文件，不能用于load_model，用于直观解释模型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#法二</span></span><br><span class=\"line\">model.save_model(<span class=\"string\">&#x27;xgb.dump&#x27;</span>) <span class=\"comment\">#该同法一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#法三 推荐方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">pickle.dump(model, <span class=\"built_in\">open</span>(<span class=\"string\">&quot;pima.pickle.dat&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)) <span class=\"comment\">#该方法储存的是二进制文件，可以load_model</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load model</span></span><br><span class=\"line\"><span class=\"comment\">#法一</span></span><br><span class=\"line\">clf = XGBClassifier()</span><br><span class=\"line\">booster = Booster()</span><br><span class=\"line\">booster.load_model(<span class=\"string\">&#x27;./model.xgb&#x27;</span>)</span><br><span class=\"line\">clf._Booster = booster</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#法二</span></span><br><span class=\"line\">clf.predict(...)</span><br><span class=\"line\">loaded_model = pickle.load(<span class=\"built_in\">open</span>(<span class=\"string\">&quot;pima.pickle.dat&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"哈哈\"><a href=\"#哈哈\" class=\"headerlink\" title=\"哈哈\"></a>哈哈</h2><h1 id=\"dataframe-转为-DMATRIX\"><a href=\"#dataframe-转为-DMATRIX\" class=\"headerlink\" title=\"dataframe 转为 DMATRIX\"></a>dataframe 转为 DMATRIX</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dtrain = xgb.DMatrix(df_train[col_feat], label=df_train[&#x27;y&#x27;])</span><br></pre></td></tr></table></figure>\n<h1 id=\"获取叶子节点\"><a href=\"#获取叶子节点\" class=\"headerlink\" title=\"获取叶子节点\"></a>获取叶子节点</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loaded_model = pickle.load(<span class=\"built_in\">open</span>(f_xgb_model+<span class=\"string\">&#x27;.pickle&#x27;</span>, <span class=\"string\">&quot;rb&quot;</span>))</span><br><span class=\"line\">dtrain = xgb.DMatrix(df_train[col_feat], label=df_train[<span class=\"string\">&#x27;y&#x27;</span>])</span><br><span class=\"line\">y=loaded_model.get_booster().predict(dtrain,pred_leaf=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"装饰器-decorator\"><a href=\"#装饰器-decorator\" class=\"headerlink\" title=\"装饰器(decorator)\"></a>装饰器(decorator)</h1><p><a href=\"https://www.cnblogs.com/wolf-yasen/p/11240500.html\">https://www.cnblogs.com/wolf-yasen/p/11240500.html</a></p>\n<blockquote>\n<p>本质上，decorator就是一个返回函数的高阶函数</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@a</span></span><br><span class=\"line\"><span class=\"meta\">@b</span></span><br><span class=\"line\"><span class=\"meta\">@c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>():</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\">#相当于执行了  f = a(b(c(f)))</span></span><br><span class=\"line\"><span class=\"comment\">#调用f的时候，实际上调用的是a(b(c(f)))</span></span><br></pre></td></tr></table></figure>\n<p>装饰器（decorator）可以给函数动态加上功能</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span>():</span></span><br><span class=\"line\">        start = time.clock()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;this is a order test, if you need not it, delete it&quot;</span>) <span class=\"comment\"># 用于测试执行顺序,可以跟着走一遍</span></span><br><span class=\"line\">        end = time.clock()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start:&quot;</span>, start, <span class=\"string\">&quot; end:&quot;</span>, end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func <span class=\"comment\"># 这种获得返回值的方法可能在多层修饰器的时候有矛盾,我先用!!!标记, 等理顺后再回来修改,如果我发布之后这里依然存在...说明我忘记了...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;this is a test&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;this is a return value&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#相当于执行了 foo = log(foo)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(foo())</span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># this is a test wrapper, if you need not it, delete it</span></span><br><span class=\"line\"><span class=\"comment\"># this is a test</span></span><br><span class=\"line\"><span class=\"comment\"># start: 4.44444839506524e-07  end: 1.8222238419767486e-05</span></span><br><span class=\"line\"><span class=\"comment\"># this is a return value</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/python.assets/image-20200409175624696.png\" alt=\"image-20200409175624696\"></p>\n<h2 id=\"property修饰器\"><a href=\"#property修饰器\" class=\"headerlink\" title=\"@property修饰器\"></a>@property修饰器</h2><p>把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个setter方法变成属性赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Screen</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span>  </span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.W</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @width.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.W = value </span><br><span class=\"line\">  <span class=\"comment\"># 测试:</span></span><br><span class=\"line\">s = Screen()</span><br><span class=\"line\">s.width=<span class=\"number\">10</span> </span><br><span class=\"line\">s.width</span><br></pre></td></tr></table></figure>\n<p>代码也可改为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Screen</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span>  </span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._width</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @width.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self._width = value </span><br><span class=\"line\">  <span class=\"comment\"># 测试:</span></span><br><span class=\"line\">s = Screen()</span><br><span class=\"line\">s.width=<span class=\"number\">10</span> </span><br><span class=\"line\">s.width</span><br></pre></td></tr></table></figure>\n<h1 id=\"python变量中的下划线\"><a href=\"#python变量中的下划线\" class=\"headerlink\" title=\"python变量中的下划线\"></a>python变量中的下划线</h1><ul>\n<li>xx: 公有变量</li>\n<li>_x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问</li>\n<li>__xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)</li>\n<li><strong>xx</strong>:双前后下划线,用户名字空间的魔法对象或属性。例如:<strong>init</strong> , __ 不要自己发明这样的名字</li>\n<li>xx_:单后置下划线,用于避免与Python关键词的冲突</li>\n</ul>\n<h1 id=\"生成器（generator）\"><a href=\"#生成器（generator）\" class=\"headerlink\" title=\"生成器（generator）\"></a>生成器（generator）</h1><p>如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p>\n<blockquote>\n<p>实例：生成斐波那契数列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;# 一般写法</span><br><span class=\"line\">&gt;def fib1(max):</span><br><span class=\"line\">\tn, a, b = 0,0,1</span><br><span class=\"line\">\twhile n&lt;max:</span><br><span class=\"line\">\t\t\tprint(b)</span><br><span class=\"line\">\t    a,b = b,a+b</span><br><span class=\"line\">\t    n+=1</span><br><span class=\"line\">\treturn &#x27;done&#x27;</span><br><span class=\"line\">&gt;# 调用</span><br><span class=\"line\">&gt;fib1(6)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"comment\"># 生成器写法</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib2</span>(<span class=\"params\"><span class=\"built_in\">max</span></span>):</span></span><br><span class=\"line\">   n, a, b = <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span> n&lt;<span class=\"built_in\">max</span>:</span><br><span class=\"line\">       <span class=\"keyword\">yield</span> b</span><br><span class=\"line\">       a,b = b,a+b</span><br><span class=\"line\">       n+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;done&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\">&gt;<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> fib2(<span class=\"number\">6</span>):</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"迭代器（iterable）\"><a href=\"#迭代器（iterable）\" class=\"headerlink\" title=\"迭代器（iterable）\"></a>迭代器（iterable）</h1><p>我们已经知道，可以直接作用于<code>for</code>循环的数据类型有以下几种：</p>\n<p>一类是集合数据类型，如<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；</p>\n<p>一类是<code>generator</code>，包括生成器和带<code>yield</code>的generator function。</p>\n<p>这些可以直接作用于<code>for</code>循环的对象统称为可迭代对象：<code>Iterable</code>。</p>\n<p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterable</code>对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections.abc import Iterable</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterator</code>对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections.abc import Iterator</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。</p>\n<p>把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isinstance(iter([]), Iterator)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p>\n<p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p>\n<p>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</p>\n<p>Python的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in [1, 2, 3, 4, 5]:</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>实际上完全等价于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先获得Iterator对象:</span><br><span class=\"line\">it = iter([1, 2, 3, 4, 5])</span><br><span class=\"line\"># 循环:</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # 获得下一个值:</span><br><span class=\"line\">        x = next(it)</span><br><span class=\"line\">    except StopIteration:</span><br><span class=\"line\">        # 遇到StopIteration就退出循环</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>python常用操作</p>","more":"<p>[TOC]</p>\n<h1 id=\"快速安装python依赖包\"><a href=\"#快速安装python依赖包\" class=\"headerlink\" title=\"快速安装python依赖包\"></a>快速安装python依赖包</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># requirements.txt</span><br><span class=\"line\">certifi==2020.4.5.1</span><br><span class=\"line\">chardet==3.0.4</span><br><span class=\"line\">idna==2.9</span><br><span class=\"line\">lxml==4.5.1</span><br><span class=\"line\">requests==2.23.0</span><br><span class=\"line\">urllib3==1.25.9</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"importlib-动态导入包\"><a href=\"#importlib-动态导入包\" class=\"headerlink\" title=\"importlib 动态导入包\"></a>importlib 动态导入包</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入指定类或方法</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> model_fn <span class=\"keyword\">import</span> dmtTrainer</span><br><span class=\"line\">module = importlib.import_module(FLAGS.model_fn)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dmtTrainer = module.dmtTrainer</span><br></pre></td></tr></table></figure>\n<h1 id=\"argparse\"><a href=\"#argparse\" class=\"headerlink\" title=\"argparse\"></a>argparse</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1引入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2建立解析对象</span></span><br><span class=\"line\">parser = argparse.ArgumentParser()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3增加属性：给xx实例增加一个aa属性 # xx.add_argument(&quot;aa&quot;)</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;role&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>,</span><br><span class=\"line\">                        <span class=\"built_in\">help</span>=<span class=\"string\">&quot;Role of this trainer in &#123;&#x27;local&#x27;, &quot;</span></span><br><span class=\"line\">                             <span class=\"string\">&quot;&#x27;leader&#x27;, &#x27;follower&#x27;&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4属性给与args实例： 把parser中设置的所有&quot;add_argument&quot;给返回到args子类实例当中， 那么parser中增加的属性内容都会在args实例中，使用即可。</span></span><br><span class=\"line\">args = parser.parse_args()</span><br><span class=\"line\">parser.parse_args()</span><br></pre></td></tr></table></figure>\n<p>运行时使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python main.py --role=&#x27;leader&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h1><p>类： 大驼峰<br>方法：小驼峰<br>变量：小写字母+下划线<br>常量：大写字母+下划线</p>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><blockquote>\n<p>内部函数调用外部变量的行为叫做闭包</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>(<span class=\"params\">name</span>):</span> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> func2()</span><br></pre></td></tr></table></figure>\n<h1 id=\"dict排序\"><a href=\"#dict排序\" class=\"headerlink\" title=\"dict排序\"></a>dict排序</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;<span class=\"string\">&#x27;d1&#x27;</span>:<span class=\"number\">2</span>, <span class=\"string\">&#x27;d2&#x27;</span>:<span class=\"number\">4</span>, <span class=\"string\">&#x27;d4&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;d3&#x27;</span>:<span class=\"number\">3</span>,&#125;</span><br><span class=\"line\">res = <span class=\"built_in\">sorted</span>(d.items(),key=<span class=\"keyword\">lambda</span> d:d[<span class=\"number\">1</span>],reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n<h1 id=\"python的u-r-b分别什么意思\"><a href=\"#python的u-r-b分别什么意思\" class=\"headerlink\" title=\"python的u,r,b分别什么意思\"></a>python的u,r,b分别什么意思</h1><p> u: 表示unicode字符串，默认模式，里边的特殊字符会被识别。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(u&#x27;hi\\thi\\thi&#x27;)</span><br></pre></td></tr></table></figure>\n<p>执行之后：<br><strong>hi hi hi</strong></p>\n<p> b: 表示二进制字符串，括号内的内容原样输出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(b&#x27;hi\\thi\\thi&#x27;)</span><br></pre></td></tr></table></figure>\n<p>执行之后：<br><strong>b’hi\\thi\\thi’</strong></p>\n<p> r：不转义字符串，要输出的内容原样输出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(r&#x27;hi\\thi\\thi&#x27;)</span><br></pre></td></tr></table></figure>\n<p>执行之后：<br><strong>hi\\thi\\thi</strong></p>\n<h1 id=\"dic快速保存和读取\"><a href=\"#dic快速保存和读取\" class=\"headerlink\" title=\"dic快速保存和读取\"></a>dic快速保存和读取</h1><blockquote>\n<pre><code>   #保存\n   dict_name = &#123;1:&#123;1:2,3:4&#125;,2:&#123;3:4,4:5&#125;&#125;\n   f = open(&#39;temp.txt&#39;,&#39;w&#39;)\n   f.write(str(dict_name))\n   f.close()\n\n   #读取\n   f = open(&#39;temp.txt&#39;,&#39;r&#39;)\n   a = f.read()\n   dict_name = eval(a)\n</code></pre></blockquote>\n<h1 id=\"如果不存在则创建文件\"><a href=\"#如果不存在则创建文件\" class=\"headerlink\" title=\"如果不存在则创建文件\"></a>如果不存在则创建文件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(filename):</span><br><span class=\"line\">    os.system(<span class=\"string\">r&quot;touch &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(path))<span class=\"comment\">#调用系统命令行来创建文件</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"获取当前路径\"><a href=\"#获取当前路径\" class=\"headerlink\" title=\"获取当前路径\"></a>获取当前路径</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys.path.append(os.getcwd()) #添加当前文件夹路径</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"built_in\">print</span> (sys.argv[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n<h1 id=\"utf-8编码\"><a href=\"#utf-8编码\" class=\"headerlink\" title=\"utf-8编码\"></a>utf-8编码</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> sys.getdefaultencoding() != <span class=\"string\">&#x27;utf-8&#x27;</span>:</span><br><span class=\"line\">    reload(sys)</span><br><span class=\"line\">    sys.setdefaultencoding(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pandas.read_table(filename,sep=<span class=\"string\">&#x27;\\t&#x27;</span>) <span class=\"comment\">#dataframe</span></span><br><span class=\"line\">data.to_csv(filename,sep=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data=np.loadtxt(filename,delimiter=<span class=\"string\">&#x27;\\t&#x27;</span>) <span class=\"comment\">#narray</span></span><br><span class=\"line\">np.save(filename,narray)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename,<span class=\"string\">&#x27;r&#x27;</span>.encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f: <span class=\"comment\">#list</span></span><br><span class=\"line\">\tlines=f.readlines()</span><br></pre></td></tr></table></figure>\n<h1 id=\"产生随机矩阵\"><a href=\"#产生随机矩阵\" class=\"headerlink\" title=\"产生随机矩阵\"></a>产生随机矩阵</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df=pd.DataFrame(np.random.randn(<span class=\"number\">4</span>,<span class=\"number\">4</span>),columns=[<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;D&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"提取年月日\"><a href=\"#提取年月日\" class=\"headerlink\" title=\"提取年月日\"></a>提取年月日</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[<span class=\"string\">&#x27;2019-01-01 12:00:00&#x27;</span>,<span class=\"string\">&#x27;2019-02-01 12:00:00&#x27;</span>]</span><br><span class=\"line\">a.apply(<span class=\"keyword\">lambda</span> x:x[<span class=\"number\">0</span>,<span class=\"number\">7</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"百分位数\"><a href=\"#百分位数\" class=\"headerlink\" title=\"百分位数\"></a>百分位数</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#dataframe</span></span><br><span class=\"line\">feat_res[<span class=\"string\">&#x27;f_p75&#x27;</span>] = X[X[feat] <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>][feat].quantile(<span class=\"number\">0.75</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"计时\"><a href=\"#计时\" class=\"headerlink\" title=\"计时\"></a>计时</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">time_start=time.time()</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">time_end=time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;totally cost &#123;:.3f&#125; s&#x27;</span>.<span class=\"built_in\">format</span>(time_end-time_start))</span><br></pre></td></tr></table></figure>\n<h1 id=\"python调用shell\"><a href=\"#python调用shell\" class=\"headerlink\" title=\"python调用shell\"></a>python调用shell</h1><blockquote>\n<p>os.system(command) </p>\n</blockquote>\n<p>  此函数会启动子进程，在子进程中执行command，并返回command命令执行完毕后的退出状态，如果command有执行内容，会在标准输出显示。这实际上是使用C标准库函数system()实现的。</p>\n<p>​    缺点：这个函数在执行command命令时需要重新打开一个终端，并且无法保存command命令的执行结果。</p>\n<blockquote>\n<p>os.popen(command,mode)</p>\n</blockquote>\n<p>打开一个与command进程之间的管道。这个函数的返回值是一个文件对象，可以读或者写(由mode决定，mode默认是’r’)。如果mode为’r’，可以使用此函数的返回值调用read()来获取command命令的执行结果。</p>\n<p>os.system(cmd)或os.popen(cmd)，前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择。</p>\n<h1 id=\"XGB-相关\"><a href=\"#XGB-相关\" class=\"headerlink\" title=\"XGB 相关\"></a>XGB 相关</h1><h2 id=\"xgboost-sklearn-XGBClassifier\"><a href=\"#xgboost-sklearn-XGBClassifier\" class=\"headerlink\" title=\"xgboost.sklearn.XGBClassifier\"></a>xgboost.sklearn.XGBClassifier</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> xgboost.sklearn <span class=\"keyword\">import</span> XGBClassifier</span><br><span class=\"line\"><span class=\"comment\"># 训练模型</span></span><br><span class=\"line\">watchlist = [(x_train, y_train), (x_test, y_test)]  <span class=\"comment\"># [(test[res_train],y_test)]</span></span><br><span class=\"line\">model = XGBClassifier(**params)</span><br><span class=\"line\">model.fit(x_train, y_train, eval_set=watchlist)  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># feature importance</span></span><br><span class=\"line\">importance = model.get_booster().get_fscore()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模型预测</span></span><br><span class=\"line\"> y_test_pro = model.predict_proba(x_test)[:,<span class=\"number\">1</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 模型保存</span></span><br><span class=\"line\"><span class=\"comment\">#法一</span></span><br><span class=\"line\">model.get_booster().dump_model(<span class=\"string\">&#x27;xgb.dump&#x27;</span>) <span class=\"comment\">#该方法储存的是raw text文件，不能用于load_model，用于直观解释模型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#法二</span></span><br><span class=\"line\">model.save_model(<span class=\"string\">&#x27;xgb.dump&#x27;</span>) <span class=\"comment\">#该同法一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#法三 推荐方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">pickle.dump(model, <span class=\"built_in\">open</span>(<span class=\"string\">&quot;pima.pickle.dat&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)) <span class=\"comment\">#该方法储存的是二进制文件，可以load_model</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load model</span></span><br><span class=\"line\"><span class=\"comment\">#法一</span></span><br><span class=\"line\">clf = XGBClassifier()</span><br><span class=\"line\">booster = Booster()</span><br><span class=\"line\">booster.load_model(<span class=\"string\">&#x27;./model.xgb&#x27;</span>)</span><br><span class=\"line\">clf._Booster = booster</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#法二</span></span><br><span class=\"line\">clf.predict(...)</span><br><span class=\"line\">loaded_model = pickle.load(<span class=\"built_in\">open</span>(<span class=\"string\">&quot;pima.pickle.dat&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"哈哈\"><a href=\"#哈哈\" class=\"headerlink\" title=\"哈哈\"></a>哈哈</h2><h1 id=\"dataframe-转为-DMATRIX\"><a href=\"#dataframe-转为-DMATRIX\" class=\"headerlink\" title=\"dataframe 转为 DMATRIX\"></a>dataframe 转为 DMATRIX</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dtrain = xgb.DMatrix(df_train[col_feat], label=df_train[&#x27;y&#x27;])</span><br></pre></td></tr></table></figure>\n<h1 id=\"获取叶子节点\"><a href=\"#获取叶子节点\" class=\"headerlink\" title=\"获取叶子节点\"></a>获取叶子节点</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loaded_model = pickle.load(<span class=\"built_in\">open</span>(f_xgb_model+<span class=\"string\">&#x27;.pickle&#x27;</span>, <span class=\"string\">&quot;rb&quot;</span>))</span><br><span class=\"line\">dtrain = xgb.DMatrix(df_train[col_feat], label=df_train[<span class=\"string\">&#x27;y&#x27;</span>])</span><br><span class=\"line\">y=loaded_model.get_booster().predict(dtrain,pred_leaf=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"装饰器-decorator\"><a href=\"#装饰器-decorator\" class=\"headerlink\" title=\"装饰器(decorator)\"></a>装饰器(decorator)</h1><p><a href=\"https://www.cnblogs.com/wolf-yasen/p/11240500.html\">https://www.cnblogs.com/wolf-yasen/p/11240500.html</a></p>\n<blockquote>\n<p>本质上，decorator就是一个返回函数的高阶函数</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@a</span></span><br><span class=\"line\"><span class=\"meta\">@b</span></span><br><span class=\"line\"><span class=\"meta\">@c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>():</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\">#相当于执行了  f = a(b(c(f)))</span></span><br><span class=\"line\"><span class=\"comment\">#调用f的时候，实际上调用的是a(b(c(f)))</span></span><br></pre></td></tr></table></figure>\n<p>装饰器（decorator）可以给函数动态加上功能</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span>():</span></span><br><span class=\"line\">        start = time.clock()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;this is a order test, if you need not it, delete it&quot;</span>) <span class=\"comment\"># 用于测试执行顺序,可以跟着走一遍</span></span><br><span class=\"line\">        end = time.clock()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start:&quot;</span>, start, <span class=\"string\">&quot; end:&quot;</span>, end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func <span class=\"comment\"># 这种获得返回值的方法可能在多层修饰器的时候有矛盾,我先用!!!标记, 等理顺后再回来修改,如果我发布之后这里依然存在...说明我忘记了...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;this is a test&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;this is a return value&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">#相当于执行了 foo = log(foo)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(foo())</span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># this is a test wrapper, if you need not it, delete it</span></span><br><span class=\"line\"><span class=\"comment\"># this is a test</span></span><br><span class=\"line\"><span class=\"comment\"># start: 4.44444839506524e-07  end: 1.8222238419767486e-05</span></span><br><span class=\"line\"><span class=\"comment\"># this is a return value</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/python.assets/image-20200409175624696.png\" alt=\"image-20200409175624696\"></p>\n<h2 id=\"property修饰器\"><a href=\"#property修饰器\" class=\"headerlink\" title=\"@property修饰器\"></a>@property修饰器</h2><p>把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个setter方法变成属性赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Screen</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span>  </span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.W</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @width.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.W = value </span><br><span class=\"line\">  <span class=\"comment\"># 测试:</span></span><br><span class=\"line\">s = Screen()</span><br><span class=\"line\">s.width=<span class=\"number\">10</span> </span><br><span class=\"line\">s.width</span><br></pre></td></tr></table></figure>\n<p>代码也可改为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Screen</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span>  </span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._width</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @width.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self._width = value </span><br><span class=\"line\">  <span class=\"comment\"># 测试:</span></span><br><span class=\"line\">s = Screen()</span><br><span class=\"line\">s.width=<span class=\"number\">10</span> </span><br><span class=\"line\">s.width</span><br></pre></td></tr></table></figure>\n<h1 id=\"python变量中的下划线\"><a href=\"#python变量中的下划线\" class=\"headerlink\" title=\"python变量中的下划线\"></a>python变量中的下划线</h1><ul>\n<li>xx: 公有变量</li>\n<li>_x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问</li>\n<li>__xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)</li>\n<li><strong>xx</strong>:双前后下划线,用户名字空间的魔法对象或属性。例如:<strong>init</strong> , __ 不要自己发明这样的名字</li>\n<li>xx_:单后置下划线,用于避免与Python关键词的冲突</li>\n</ul>\n<h1 id=\"生成器（generator）\"><a href=\"#生成器（generator）\" class=\"headerlink\" title=\"生成器（generator）\"></a>生成器（generator）</h1><p>如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p>\n<blockquote>\n<p>实例：生成斐波那契数列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;# 一般写法</span><br><span class=\"line\">&gt;def fib1(max):</span><br><span class=\"line\">\tn, a, b = 0,0,1</span><br><span class=\"line\">\twhile n&lt;max:</span><br><span class=\"line\">\t\t\tprint(b)</span><br><span class=\"line\">\t    a,b = b,a+b</span><br><span class=\"line\">\t    n+=1</span><br><span class=\"line\">\treturn &#x27;done&#x27;</span><br><span class=\"line\">&gt;# 调用</span><br><span class=\"line\">&gt;fib1(6)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"comment\"># 生成器写法</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib2</span>(<span class=\"params\"><span class=\"built_in\">max</span></span>):</span></span><br><span class=\"line\">   n, a, b = <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span> n&lt;<span class=\"built_in\">max</span>:</span><br><span class=\"line\">       <span class=\"keyword\">yield</span> b</span><br><span class=\"line\">       a,b = b,a+b</span><br><span class=\"line\">       n+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;done&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\">&gt;<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> fib2(<span class=\"number\">6</span>):</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"迭代器（iterable）\"><a href=\"#迭代器（iterable）\" class=\"headerlink\" title=\"迭代器（iterable）\"></a>迭代器（iterable）</h1><p>我们已经知道，可以直接作用于<code>for</code>循环的数据类型有以下几种：</p>\n<p>一类是集合数据类型，如<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；</p>\n<p>一类是<code>generator</code>，包括生成器和带<code>yield</code>的generator function。</p>\n<p>这些可以直接作用于<code>for</code>循环的对象统称为可迭代对象：<code>Iterable</code>。</p>\n<p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterable</code>对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections.abc import Iterable</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterator</code>对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections.abc import Iterator</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。</p>\n<p>把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isinstance(iter([]), Iterator)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p>\n<p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p>\n<p>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</p>\n<p>Python的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in [1, 2, 3, 4, 5]:</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>实际上完全等价于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先获得Iterator对象:</span><br><span class=\"line\">it = iter([1, 2, 3, 4, 5])</span><br><span class=\"line\"># 循环:</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # 获得下一个值:</span><br><span class=\"line\">        x = next(it)</span><br><span class=\"line\">    except StopIteration:</span><br><span class=\"line\">        # 遇到StopIteration就退出循环</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>"},{"title":"scala","date":"2022-03-01T03:32:38.000Z","_content":"\n5 minutes to scala\n\n<!-- more -->\n\n\n[TOC]\n\n# 变量声明\n\n```scala\nval a='hello' //不能通过a='hello2'赋值\nvar a='hello' //可以通过a='hello2'赋值\n```\n\n\n\n# 基础数据类型\n\n## unit，int，string\n\nunit: 不返回任何有实际意义的结果\n\n\n\n## array\n\n```scala\n//申明\nvar z = new Array[String](3) //长度为3\nval age=Array(1,2)\nval name=Array('a','b')\nname zip age //res0: Array[(Char, Int)] = Array((a,1), (b,2))\n\n```\n\n\n\n## tuple\n\n## list\n\n## map\n\n# 定义函数\n\n```scala\ndef max(x:int,y:int):int={\n    if (x>y) x else y\n}\ndef max(x:int,y:int)=if (x>y) x else y \n```\n\n# for\n\n```scala\nval args=\n```\n\n\n\n\n\n# if\n\n","source":"_posts/0_代码相关/scala.md","raw":"---\ntitle: scala\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n5 minutes to scala\n\n<!-- more -->\n\n\n[TOC]\n\n# 变量声明\n\n```scala\nval a='hello' //不能通过a='hello2'赋值\nvar a='hello' //可以通过a='hello2'赋值\n```\n\n\n\n# 基础数据类型\n\n## unit，int，string\n\nunit: 不返回任何有实际意义的结果\n\n\n\n## array\n\n```scala\n//申明\nvar z = new Array[String](3) //长度为3\nval age=Array(1,2)\nval name=Array('a','b')\nname zip age //res0: Array[(Char, Int)] = Array((a,1), (b,2))\n\n```\n\n\n\n## tuple\n\n## list\n\n## map\n\n# 定义函数\n\n```scala\ndef max(x:int,y:int):int={\n    if (x>y) x else y\n}\ndef max(x:int,y:int)=if (x>y) x else y \n```\n\n# for\n\n```scala\nval args=\n```\n\n\n\n\n\n# if\n\n","slug":"0_代码相关/scala","published":1,"updated":"2022-03-01T03:53:03.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly50003w8s327v7f6tw1","content":"<p>5 minutes to scala</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a=<span class=\"symbol\">&#x27;hell</span>o&#x27; <span class=\"comment\">//不能通过a=&#x27;hello2&#x27;赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"symbol\">&#x27;hell</span>o&#x27; <span class=\"comment\">//可以通过a=&#x27;hello2&#x27;赋值</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h1><h2 id=\"unit，int，string\"><a href=\"#unit，int，string\" class=\"headerlink\" title=\"unit，int，string\"></a>unit，int，string</h2><p>unit: 不返回任何有实际意义的结果</p>\n<h2 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//申明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> z = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">String</span>](<span class=\"number\">3</span>) <span class=\"comment\">//长度为3</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> age=<span class=\"type\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> name=<span class=\"type\">Array</span>(&#x27;a&#x27;,&#x27;b&#x27;)</span><br><span class=\"line\">name zip age <span class=\"comment\">//res0: Array[(Char, Int)] = Array((a,1), (b,2))</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h2><h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><h1 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max</span></span>(x:int,y:int):int=&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&gt;y) x <span class=\"keyword\">else</span> y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max</span></span>(x:int,y:int)=<span class=\"keyword\">if</span> (x&gt;y) x <span class=\"keyword\">else</span> y </span><br></pre></td></tr></table></figure>\n<h1 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> args=</span><br></pre></td></tr></table></figure>\n<h1 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h1>","site":{"data":{}},"excerpt":"<p>5 minutes to scala</p>","more":"<p>[TOC]</p>\n<h1 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a=<span class=\"symbol\">&#x27;hell</span>o&#x27; <span class=\"comment\">//不能通过a=&#x27;hello2&#x27;赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"symbol\">&#x27;hell</span>o&#x27; <span class=\"comment\">//可以通过a=&#x27;hello2&#x27;赋值</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h1><h2 id=\"unit，int，string\"><a href=\"#unit，int，string\" class=\"headerlink\" title=\"unit，int，string\"></a>unit，int，string</h2><p>unit: 不返回任何有实际意义的结果</p>\n<h2 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//申明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> z = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">String</span>](<span class=\"number\">3</span>) <span class=\"comment\">//长度为3</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> age=<span class=\"type\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> name=<span class=\"type\">Array</span>(&#x27;a&#x27;,&#x27;b&#x27;)</span><br><span class=\"line\">name zip age <span class=\"comment\">//res0: Array[(Char, Int)] = Array((a,1), (b,2))</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h2><h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><h1 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max</span></span>(x:int,y:int):int=&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&gt;y) x <span class=\"keyword\">else</span> y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max</span></span>(x:int,y:int)=<span class=\"keyword\">if</span> (x&gt;y) x <span class=\"keyword\">else</span> y </span><br></pre></td></tr></table></figure>\n<h1 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> args=</span><br></pre></td></tr></table></figure>\n<h1 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h1>"},{"title":"python面向对象编程","date":"2022-03-01T03:32:38.000Z","_content":"\npython 面向对象\n\n<!-- more -->\n\n\n\n\n[TOC]\n\n类(Class):** 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。\n\n\n\n# 自定义类的引用\n\n![image-20200710093905513](/Users/hetianqi/Documents/charging/notes_of_the_world/python面向对象编程.assets/image-20200710093905513.png)\n\n- __init__.py 可以是空文件，指明models是一个package，models下面的子文件或文件夹可通过 import bao'ming\n\n# 面向对象技术简介\n\n- **类(Class):** 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。\n- **类变量：**类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。\n- **数据成员：**类变量或者实例变量, 用于处理类及其实例对象的相关的数据。\n- **方法重写：**如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。\n- **局部变量：**定义在方法中的变量，只作用于当前实例的类。\n- **实例变量：**在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。\n- **继承：**即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟\"是一个（is-a）\"关系（例图，Dog是一个Animal）。\n- **实例化：**创建一个类的实例，类的具体对象。\n- **方法：**类中定义的函数。\n- **对象：**通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。\n\n------\n\n# 创建类\n\n使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:\n\n```\nclass ClassName:\n   '类的帮助信息'   #类文档字符串\n   class_suite  #类体\n```\n\n类的帮助信息可以通过ClassName.__doc__查看。\n\nclass_suite 由类成员，方法，数据属性组成。\n\n### 实例\n\n以下是一个简单的 Python 类的例子:\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Employee:\n   '所有员工的基类'\n   empCount = 0\n \n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n \n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n```\n\n- empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。\n- 第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法\n- self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。\n\n### self代表类的实例，而非类\n\n类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的**第一个参数名称**, 按照惯例它的名称是 self。\n\n```python\nclass Test:\n    def prt(self):\n        print(self)\n        print(self.__class__)\n \nt = Test()\nt.prt()\n```\n\n以上实例执行结果为：\n\n```python\n<__main__.Test instance at 0x10d066878>\n__main__.Test\n```\n\n从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 **self.__class__** 则指向类。\n\nself 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:\n\n------\n\n# 创建实例对象\n\n实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。\n\n以下使用类的名称 Employee 来实例化，并通过 __init__ 方法接收参数。\n\n```python\n\"创建 Employee 类的第一个对象\"\nemp1 = Employee(\"Zara\", 2000)\n\"创建 Employee 类的第二个对象\"\nemp2 = Employee(\"Manni\", 5000)\n```\n\n# 访问属性\n\n您可以使用点号 **.** 来访问对象的属性。使用如下类的名称访问类变量:\n\n```python\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n```\n\n## 实例属性 & 类属性\n\n```python\nclass Student(object):\n\t\tcountry='CHINA' #类变量，作用域是类\n    def __init__(self, name):\n        self.name = name #实例属性，在创建类时指定，作用域是实例\n\ns = Student('Bob') #创建实例s的实例属性name\ns.score = 90\n```\n\n### 实例\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Employee:\n   '所有员工的基类'\n   empCount = 0\n \n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n \n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n \n\"创建 Employee 类的第一个对象\"\nemp1 = Employee(\"Zara\", 2000)\n\"创建 Employee 类的第二个对象\"\nemp2 = Employee(\"Manni\", 5000)\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n```\n\n执行以上代码输出结果如下：\n\n```python\nName :  Zara ,Salary:  2000\nName :  Manni ,Salary:  5000\nTotal Employee 2\n```\n\n你可以添加，删除，修改类的属性，如下所示：\n\n```python\nemp1.age = 7  # 添加一个 'age' 属性\nemp1.age = 8  # 修改 'age' 属性\ndel emp1.age  # 删除 'age' 属性\n```\n\n你也可以使用以下函数的方式来访问属性：\n\n- getattr(obj, name[, default]) : 访问对象的属性。\n- hasattr(obj,name) : 检查是否存在一个属性。\n- setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。\n- delattr(obj, name) : 删除属性。\n\nhasattr(emp1, 'age')    # 如果存在 'age' 属性返回 True。 getattr(emp1, 'age')    # 返回 'age' 属性的值 setattr(emp1, 'age', 8) # 添加属性 'age' 值为 8 delattr(emp1, 'age')    # 删除属性 'age'\n\n------\n\n### Python内置类属性实例\n\n- __dict__ : 类的属性（包含一个字典，由类的数据属性组成）\n- __doc__ :类的文档字符串\n- __name__: 类名\n- __module__: 类定义所在的模块（类的全名是'__main__.className'，如果类位于一个导入模块mymod中，那么className.__module__ 等于 mymod）\n- __bases__ : 类的所有父类构成元素（包含了一个由所有父类组成的元组）\n\nPython内置类属性调用实例如下：\n\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Employee:\n   '所有员工的基类'\n   empCount = 0\n \n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n \n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n \nprint \"Employee.__doc__:\", Employee.__doc__\nprint \"Employee.__name__:\", Employee.__name__\nprint \"Employee.__module__:\", Employee.__module__\nprint \"Employee.__bases__:\", Employee.__bases__\nprint \"Employee.__dict__:\", Employee.__dict__\n```\n\n执行以上代码输出结果如下：\n\n```python\nEmployee.__doc__: 所有员工的基类\nEmployee.__name__: Employee\nEmployee.__module__: __main__\nEmployee.__bases__: ()\nEmployee.__dict__: {'__module__': '__main__', 'displayCount': <function displayCount at 0x10a939c80>, 'empCount': 0, 'displayEmployee': <function displayEmployee at 0x10a93caa0>, '__doc__': '\\xe6\\x89\\x80\\xe6\\x9c\\x89\\xe5\\x91\\x98\\xe5\\xb7\\xa5\\xe7\\x9a\\x84\\xe5\\x9f\\xba\\xe7\\xb1\\xbb', '__init__': <function __init__ at 0x10a939578>}\n```\n\n------\n\n# python对象销毁(垃圾回收)\n\nPython 使用了引用计数这一简单技术来跟踪和回收垃圾。\n\n在 Python 内部记录着所有使用中的对象各有多少引用。\n\n一个内部跟踪变量，称为一个引用计数器。\n\n当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是\"立即\"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。\n\n```python\na = 40      # 创建对象  <40>\nb = a       # 增加引用， <40> 的计数\nc = [b]     # 增加引用.  <40> 的计数\n\ndel a       # 减少引用 <40> 的计数\nb = 100     # 减少引用 <40> 的计数\nc[0] = -1   # 减少引用 <40> 的计数\n```\n\n垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。\n\n### 实例\n\n析构函数 __del__ ，__del__在对象销毁的时候被调用，当对象不再被使用时，__del__方法运行：\n\n```python\n!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Point:\n   def __init__( self, x=0, y=0):\n      self.x = x\n      self.y = y\n   def __del__(self):\n      class_name = self.__class__.__name__\n      print class_name, \"销毁\"\n \npt1 = Point()\npt2 = pt1\npt3 = pt1\nprint id(pt1), id(pt2), id(pt3) # 打印对象的id\ndel pt1\ndel pt2\ndel pt3\n```\n\n以上实例运行结果如下：\n\n```\n3083401324 3083401324 3083401324\nPoint 销毁\n```\n\n**注意：**通常你需要在单独的文件中定义一个类，\n\n# 类的继承\n\n面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。\n\n通过继承创建的新类称为**子类**或**派生类**，被继承的类称为**基类**、**父类**或**超类**。\n\n**继承语法**\n\n```\nclass 派生类名(基类名)\n    ...\n```\n\n在python中继承中的一些特点：\n\n- 1、如果在子类中需要父类的构造方法就需要显示的调用父类的构造方法，或者不重写父类的构造方法。详细说明可查看：[python 子类继承父类构造函数说明](https://www.runoob.com/w3cnote/python-extends-init.html)。\n- 2、在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数\n- 3、Python 总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。\n\n如果在继承元组中列了一个以上的类，那么它就被称作\"多重继承\" 。\n\n**语法：**\n\n派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：\n\n```\nclass SubClassName (ParentClass1[, ParentClass2, ...]):\n    ...\n```\n\n### 实例\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Parent:        # 定义父类\n   parentAttr = 100\n   def __init__(self):\n      print \"调用父类构造函数\"\n \n   def parentMethod(self):\n      print '调用父类方法'\n \n   def setAttr(self, attr):\n      Parent.parentAttr = attr\n \n   def getAttr(self):\n      print \"父类属性 :\", Parent.parentAttr\n \nclass Child(Parent): # 定义子类\n   def __init__(self):\n      print \"调用子类构造方法\"\n \n   def childMethod(self):\n      print '调用子类方法'\n \nc = Child()          # 实例化子类\nc.childMethod()      # 调用子类的方法\nc.parentMethod()     # 调用父类方法\nc.setAttr(200)       # 再次调用父类的方法 - 设置属性值\nc.getAttr()          # 再次调用父类的方法 - 获取属性值\n```\n\n以上代码执行结果如下：\n\n```\n调用子类构造方法\n调用子类方法\n调用父类方法\n父类属性 : 200\n```\n\n你可以继承多个类\n\n```\nclass A:        # 定义类 A\n.....\n\nclass B:         # 定义类 B\n.....\n\nclass C(A, B):   # 继承类 A 和 B\n.....\n```\n\n你可以使用issubclass()或者isinstance()方法来检测。\n\n- issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)\n- isinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。\n\n------\n\n# 方法重写\n\n如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：\n\n实例：\n\n### 实例\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Parent:        # 定义父类\n   def myMethod(self):\n      print '调用父类方法'\n \nclass Child(Parent): # 定义子类\n   def myMethod(self):\n      print '调用子类方法'\n \nc = Child()          # 子类实例\nc.myMethod()         # 子类调用重写方法\n```\n\n执行以上代码输出结果如下：\n\n```\n调用子类方法\n```\n\n------\n\n## 基础重载方法\n\n下表列出了一些通用的功能，你可以在自己的类重写：\n\n| 序号 | 方法, 描述 & 简单的调用                                      |\n| :--- | :----------------------------------------------------------- |\n| 1    | **__init__ ( self [,args...] )** 构造函数 简单的调用方法: *obj = className(args)* |\n| 2    | **__del__( self )** 析构方法, 删除一个对象 简单的调用方法 : *del obj* |\n| 3    | **__repr__( self )** 转化为供解释器读取的形式 简单的调用方法 : *repr(obj)* |\n| 4    | **__str__( self )** 用于将值转化为适于人阅读的形式 简单的调用方法 : *str(obj)* |\n| 5    | **__cmp__ ( self, x )** 对象比较 简单的调用方法 : *cmp(obj, x)* |\n\n------\n\n### 运算符重载\n\nPython同样支持运算符重载，实例如下：\n\n### 实例\n\n```python\n#!/usr/bin/python\n \nclass Vector:\n   def __init__(self, a, b):\n      self.a = a\n      self.b = b\n \n   def __str__(self):\n      return 'Vector (%d, %d)' % (self.a, self.b)\n   \n   def __add__(self,other):\n      return Vector(self.a + other.a, self.b + other.b)\n \nv1 = Vector(2,10)\nv2 = Vector(5,-2)\nprint v1 + v2\n```\n\n以上代码执行结果如下所示:\n\n```\nVector(7,8)\n```\n\n------\n\n## 类属性与方法\n\n### 类的私有属性\n\n**__private_attrs**：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 **self.__private_attrs**。\n\n### 类的方法\n\n在类的内部，使用 **def** 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数\n\n### 类的私有方法\n\n**__private_method**：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 **self.__private_methods**\n\n### 实例\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass JustCounter:\n    __secretCount = 0  # 私有变量\n    publicCount = 0    # 公开变量\n \n    def count(self):\n        self.__secretCount += 1\n        self.publicCount += 1\n        print self.__secretCount\n \ncounter = JustCounter()\ncounter.count()\ncounter.count()\nprint counter.publicCount\nprint counter.__secretCount  # 报错，实例不能访问私有变量\n```\n\nPython 通过改变名称来包含类名:\n\n```\n1\n2\n2\nTraceback (most recent call last):\n  File \"test.py\", line 17, in <module>\n    print counter.__secretCount  # 报错，实例不能访问私有变量\nAttributeError: JustCounter instance has no attribute '__secretCount'\n```\n\nPython不允许实例化的类访问私有数据，但你可以使用 **object._className__attrName**（ **对象名._类名__私有属性名** ）访问属性，参考以下实例：\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nclass Runoob:\n    __site = \"www.runoob.com\"\n\nrunoob = Runoob()\nprint runoob._Runoob__site\n```\n\n执行以上代码，执行结果如下：\n\n```\nwww.runoob.com\n```\n\n### 单下划线、双下划线、头尾双下划线说明：\n\n- **__foo__**: 定义的是特殊方法，一般是系统定义名字 ，类似 **__init__()** 之类的。\n- **_foo**: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 **from module import \\***\n- **__foo**: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。\n\n# 创建对象\n\n```python\nclass SuperParams:\n    batch_num=50\n    iter=100\n# 调用\nfrom utils import SuperParams\nbatch_num=SuperParams.batch_num\n```\n\n```python\nclass Args(SuperParams):\n    def __init__(self,is_training=True):\n        self.dnn_depth=3\n# 调用\nprint(Args().dnn_depth)\nprint(Args().batch_num)\n\n```\n\n\\_\\_init\\__ 函数中的变量是\n\n# 对象调用","source":"_posts/0_代码相关/python面向对象编程.md","raw":"---\ntitle: python面向对象编程\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\npython 面向对象\n\n<!-- more -->\n\n\n\n\n[TOC]\n\n类(Class):** 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。\n\n\n\n# 自定义类的引用\n\n![image-20200710093905513](/Users/hetianqi/Documents/charging/notes_of_the_world/python面向对象编程.assets/image-20200710093905513.png)\n\n- __init__.py 可以是空文件，指明models是一个package，models下面的子文件或文件夹可通过 import bao'ming\n\n# 面向对象技术简介\n\n- **类(Class):** 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。\n- **类变量：**类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。\n- **数据成员：**类变量或者实例变量, 用于处理类及其实例对象的相关的数据。\n- **方法重写：**如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。\n- **局部变量：**定义在方法中的变量，只作用于当前实例的类。\n- **实例变量：**在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。\n- **继承：**即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟\"是一个（is-a）\"关系（例图，Dog是一个Animal）。\n- **实例化：**创建一个类的实例，类的具体对象。\n- **方法：**类中定义的函数。\n- **对象：**通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。\n\n------\n\n# 创建类\n\n使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:\n\n```\nclass ClassName:\n   '类的帮助信息'   #类文档字符串\n   class_suite  #类体\n```\n\n类的帮助信息可以通过ClassName.__doc__查看。\n\nclass_suite 由类成员，方法，数据属性组成。\n\n### 实例\n\n以下是一个简单的 Python 类的例子:\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Employee:\n   '所有员工的基类'\n   empCount = 0\n \n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n \n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n```\n\n- empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。\n- 第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法\n- self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。\n\n### self代表类的实例，而非类\n\n类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的**第一个参数名称**, 按照惯例它的名称是 self。\n\n```python\nclass Test:\n    def prt(self):\n        print(self)\n        print(self.__class__)\n \nt = Test()\nt.prt()\n```\n\n以上实例执行结果为：\n\n```python\n<__main__.Test instance at 0x10d066878>\n__main__.Test\n```\n\n从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 **self.__class__** 则指向类。\n\nself 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:\n\n------\n\n# 创建实例对象\n\n实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。\n\n以下使用类的名称 Employee 来实例化，并通过 __init__ 方法接收参数。\n\n```python\n\"创建 Employee 类的第一个对象\"\nemp1 = Employee(\"Zara\", 2000)\n\"创建 Employee 类的第二个对象\"\nemp2 = Employee(\"Manni\", 5000)\n```\n\n# 访问属性\n\n您可以使用点号 **.** 来访问对象的属性。使用如下类的名称访问类变量:\n\n```python\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n```\n\n## 实例属性 & 类属性\n\n```python\nclass Student(object):\n\t\tcountry='CHINA' #类变量，作用域是类\n    def __init__(self, name):\n        self.name = name #实例属性，在创建类时指定，作用域是实例\n\ns = Student('Bob') #创建实例s的实例属性name\ns.score = 90\n```\n\n### 实例\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Employee:\n   '所有员工的基类'\n   empCount = 0\n \n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n \n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n \n\"创建 Employee 类的第一个对象\"\nemp1 = Employee(\"Zara\", 2000)\n\"创建 Employee 类的第二个对象\"\nemp2 = Employee(\"Manni\", 5000)\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n```\n\n执行以上代码输出结果如下：\n\n```python\nName :  Zara ,Salary:  2000\nName :  Manni ,Salary:  5000\nTotal Employee 2\n```\n\n你可以添加，删除，修改类的属性，如下所示：\n\n```python\nemp1.age = 7  # 添加一个 'age' 属性\nemp1.age = 8  # 修改 'age' 属性\ndel emp1.age  # 删除 'age' 属性\n```\n\n你也可以使用以下函数的方式来访问属性：\n\n- getattr(obj, name[, default]) : 访问对象的属性。\n- hasattr(obj,name) : 检查是否存在一个属性。\n- setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。\n- delattr(obj, name) : 删除属性。\n\nhasattr(emp1, 'age')    # 如果存在 'age' 属性返回 True。 getattr(emp1, 'age')    # 返回 'age' 属性的值 setattr(emp1, 'age', 8) # 添加属性 'age' 值为 8 delattr(emp1, 'age')    # 删除属性 'age'\n\n------\n\n### Python内置类属性实例\n\n- __dict__ : 类的属性（包含一个字典，由类的数据属性组成）\n- __doc__ :类的文档字符串\n- __name__: 类名\n- __module__: 类定义所在的模块（类的全名是'__main__.className'，如果类位于一个导入模块mymod中，那么className.__module__ 等于 mymod）\n- __bases__ : 类的所有父类构成元素（包含了一个由所有父类组成的元组）\n\nPython内置类属性调用实例如下：\n\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Employee:\n   '所有员工的基类'\n   empCount = 0\n \n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n \n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n \nprint \"Employee.__doc__:\", Employee.__doc__\nprint \"Employee.__name__:\", Employee.__name__\nprint \"Employee.__module__:\", Employee.__module__\nprint \"Employee.__bases__:\", Employee.__bases__\nprint \"Employee.__dict__:\", Employee.__dict__\n```\n\n执行以上代码输出结果如下：\n\n```python\nEmployee.__doc__: 所有员工的基类\nEmployee.__name__: Employee\nEmployee.__module__: __main__\nEmployee.__bases__: ()\nEmployee.__dict__: {'__module__': '__main__', 'displayCount': <function displayCount at 0x10a939c80>, 'empCount': 0, 'displayEmployee': <function displayEmployee at 0x10a93caa0>, '__doc__': '\\xe6\\x89\\x80\\xe6\\x9c\\x89\\xe5\\x91\\x98\\xe5\\xb7\\xa5\\xe7\\x9a\\x84\\xe5\\x9f\\xba\\xe7\\xb1\\xbb', '__init__': <function __init__ at 0x10a939578>}\n```\n\n------\n\n# python对象销毁(垃圾回收)\n\nPython 使用了引用计数这一简单技术来跟踪和回收垃圾。\n\n在 Python 内部记录着所有使用中的对象各有多少引用。\n\n一个内部跟踪变量，称为一个引用计数器。\n\n当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是\"立即\"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。\n\n```python\na = 40      # 创建对象  <40>\nb = a       # 增加引用， <40> 的计数\nc = [b]     # 增加引用.  <40> 的计数\n\ndel a       # 减少引用 <40> 的计数\nb = 100     # 减少引用 <40> 的计数\nc[0] = -1   # 减少引用 <40> 的计数\n```\n\n垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。\n\n### 实例\n\n析构函数 __del__ ，__del__在对象销毁的时候被调用，当对象不再被使用时，__del__方法运行：\n\n```python\n!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Point:\n   def __init__( self, x=0, y=0):\n      self.x = x\n      self.y = y\n   def __del__(self):\n      class_name = self.__class__.__name__\n      print class_name, \"销毁\"\n \npt1 = Point()\npt2 = pt1\npt3 = pt1\nprint id(pt1), id(pt2), id(pt3) # 打印对象的id\ndel pt1\ndel pt2\ndel pt3\n```\n\n以上实例运行结果如下：\n\n```\n3083401324 3083401324 3083401324\nPoint 销毁\n```\n\n**注意：**通常你需要在单独的文件中定义一个类，\n\n# 类的继承\n\n面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。\n\n通过继承创建的新类称为**子类**或**派生类**，被继承的类称为**基类**、**父类**或**超类**。\n\n**继承语法**\n\n```\nclass 派生类名(基类名)\n    ...\n```\n\n在python中继承中的一些特点：\n\n- 1、如果在子类中需要父类的构造方法就需要显示的调用父类的构造方法，或者不重写父类的构造方法。详细说明可查看：[python 子类继承父类构造函数说明](https://www.runoob.com/w3cnote/python-extends-init.html)。\n- 2、在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数\n- 3、Python 总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。\n\n如果在继承元组中列了一个以上的类，那么它就被称作\"多重继承\" 。\n\n**语法：**\n\n派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：\n\n```\nclass SubClassName (ParentClass1[, ParentClass2, ...]):\n    ...\n```\n\n### 实例\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Parent:        # 定义父类\n   parentAttr = 100\n   def __init__(self):\n      print \"调用父类构造函数\"\n \n   def parentMethod(self):\n      print '调用父类方法'\n \n   def setAttr(self, attr):\n      Parent.parentAttr = attr\n \n   def getAttr(self):\n      print \"父类属性 :\", Parent.parentAttr\n \nclass Child(Parent): # 定义子类\n   def __init__(self):\n      print \"调用子类构造方法\"\n \n   def childMethod(self):\n      print '调用子类方法'\n \nc = Child()          # 实例化子类\nc.childMethod()      # 调用子类的方法\nc.parentMethod()     # 调用父类方法\nc.setAttr(200)       # 再次调用父类的方法 - 设置属性值\nc.getAttr()          # 再次调用父类的方法 - 获取属性值\n```\n\n以上代码执行结果如下：\n\n```\n调用子类构造方法\n调用子类方法\n调用父类方法\n父类属性 : 200\n```\n\n你可以继承多个类\n\n```\nclass A:        # 定义类 A\n.....\n\nclass B:         # 定义类 B\n.....\n\nclass C(A, B):   # 继承类 A 和 B\n.....\n```\n\n你可以使用issubclass()或者isinstance()方法来检测。\n\n- issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)\n- isinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。\n\n------\n\n# 方法重写\n\n如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：\n\n实例：\n\n### 实例\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass Parent:        # 定义父类\n   def myMethod(self):\n      print '调用父类方法'\n \nclass Child(Parent): # 定义子类\n   def myMethod(self):\n      print '调用子类方法'\n \nc = Child()          # 子类实例\nc.myMethod()         # 子类调用重写方法\n```\n\n执行以上代码输出结果如下：\n\n```\n调用子类方法\n```\n\n------\n\n## 基础重载方法\n\n下表列出了一些通用的功能，你可以在自己的类重写：\n\n| 序号 | 方法, 描述 & 简单的调用                                      |\n| :--- | :----------------------------------------------------------- |\n| 1    | **__init__ ( self [,args...] )** 构造函数 简单的调用方法: *obj = className(args)* |\n| 2    | **__del__( self )** 析构方法, 删除一个对象 简单的调用方法 : *del obj* |\n| 3    | **__repr__( self )** 转化为供解释器读取的形式 简单的调用方法 : *repr(obj)* |\n| 4    | **__str__( self )** 用于将值转化为适于人阅读的形式 简单的调用方法 : *str(obj)* |\n| 5    | **__cmp__ ( self, x )** 对象比较 简单的调用方法 : *cmp(obj, x)* |\n\n------\n\n### 运算符重载\n\nPython同样支持运算符重载，实例如下：\n\n### 实例\n\n```python\n#!/usr/bin/python\n \nclass Vector:\n   def __init__(self, a, b):\n      self.a = a\n      self.b = b\n \n   def __str__(self):\n      return 'Vector (%d, %d)' % (self.a, self.b)\n   \n   def __add__(self,other):\n      return Vector(self.a + other.a, self.b + other.b)\n \nv1 = Vector(2,10)\nv2 = Vector(5,-2)\nprint v1 + v2\n```\n\n以上代码执行结果如下所示:\n\n```\nVector(7,8)\n```\n\n------\n\n## 类属性与方法\n\n### 类的私有属性\n\n**__private_attrs**：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 **self.__private_attrs**。\n\n### 类的方法\n\n在类的内部，使用 **def** 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数\n\n### 类的私有方法\n\n**__private_method**：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 **self.__private_methods**\n\n### 实例\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nclass JustCounter:\n    __secretCount = 0  # 私有变量\n    publicCount = 0    # 公开变量\n \n    def count(self):\n        self.__secretCount += 1\n        self.publicCount += 1\n        print self.__secretCount\n \ncounter = JustCounter()\ncounter.count()\ncounter.count()\nprint counter.publicCount\nprint counter.__secretCount  # 报错，实例不能访问私有变量\n```\n\nPython 通过改变名称来包含类名:\n\n```\n1\n2\n2\nTraceback (most recent call last):\n  File \"test.py\", line 17, in <module>\n    print counter.__secretCount  # 报错，实例不能访问私有变量\nAttributeError: JustCounter instance has no attribute '__secretCount'\n```\n\nPython不允许实例化的类访问私有数据，但你可以使用 **object._className__attrName**（ **对象名._类名__私有属性名** ）访问属性，参考以下实例：\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nclass Runoob:\n    __site = \"www.runoob.com\"\n\nrunoob = Runoob()\nprint runoob._Runoob__site\n```\n\n执行以上代码，执行结果如下：\n\n```\nwww.runoob.com\n```\n\n### 单下划线、双下划线、头尾双下划线说明：\n\n- **__foo__**: 定义的是特殊方法，一般是系统定义名字 ，类似 **__init__()** 之类的。\n- **_foo**: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 **from module import \\***\n- **__foo**: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。\n\n# 创建对象\n\n```python\nclass SuperParams:\n    batch_num=50\n    iter=100\n# 调用\nfrom utils import SuperParams\nbatch_num=SuperParams.batch_num\n```\n\n```python\nclass Args(SuperParams):\n    def __init__(self,is_training=True):\n        self.dnn_depth=3\n# 调用\nprint(Args().dnn_depth)\nprint(Args().batch_num)\n\n```\n\n\\_\\_init\\__ 函数中的变量是\n\n# 对象调用","slug":"0_代码相关/python面向对象编程","published":1,"updated":"2022-03-01T03:52:51.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly50003z8s32b0h3f2yf","content":"<p>python 面向对象</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<p>类(Class):** 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p>\n<h1 id=\"自定义类的引用\"><a href=\"#自定义类的引用\" class=\"headerlink\" title=\"自定义类的引用\"></a>自定义类的引用</h1><p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/python面向对象编程.assets/image-20200710093905513.png\" alt=\"image-20200710093905513\"></p>\n<ul>\n<li><strong>init</strong>.py 可以是空文件，指明models是一个package，models下面的子文件或文件夹可通过 import bao’ming</li>\n</ul>\n<h1 id=\"面向对象技术简介\"><a href=\"#面向对象技术简介\" class=\"headerlink\" title=\"面向对象技术简介\"></a>面向对象技术简介</h1><ul>\n<li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li>\n<li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li>\n<li><strong>数据成员：</strong>类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li>\n<li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li>\n<li><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li>\n<li><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。</li>\n<li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li>\n<li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li>\n<li><strong>方法：</strong>类中定义的函数。</li>\n<li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li>\n</ul>\n<hr>\n<h1 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h1><p>使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ClassName:</span><br><span class=\"line\">   &#x27;类的帮助信息&#x27;   #类文档字符串</span><br><span class=\"line\">   class_suite  #类体</span><br></pre></td></tr></table></figure>\n<p>类的帮助信息可以通过ClassName.<strong>doc</strong>查看。</p>\n<p>class_suite 由类成员，方法，数据属性组成。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>以下是一个简单的 Python 类的例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;所有员工的基类&#x27;</span></span><br><span class=\"line\">   empCount = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, salary</span>):</span></span><br><span class=\"line\">      self.name = name</span><br><span class=\"line\">      self.salary = salary</span><br><span class=\"line\">      Employee.empCount += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;Name : &quot;</span>, self.name,  <span class=\"string\">&quot;, Salary: &quot;</span>, self.salary</span><br></pre></td></tr></table></figure>\n<ul>\n<li>empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。</li>\n<li>第一种方法<strong>init</strong>()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</li>\n<li>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</li>\n</ul>\n<h3 id=\"self代表类的实例，而非类\"><a href=\"#self代表类的实例，而非类\" class=\"headerlink\" title=\"self代表类的实例，而非类\"></a>self代表类的实例，而非类</h3><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prt</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.__class__)</span><br><span class=\"line\"> </span><br><span class=\"line\">t = Test()</span><br><span class=\"line\">t.prt()</span><br></pre></td></tr></table></figure>\n<p>以上实例执行结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Test instance at <span class=\"number\">0x10d066878</span>&gt;</span><br><span class=\"line\">__main__.Test</span><br></pre></td></tr></table></figure>\n<p>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 <strong>self.<strong>class</strong></strong> 则指向类。</p>\n<p>self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:</p>\n<hr>\n<h1 id=\"创建实例对象\"><a href=\"#创建实例对象\" class=\"headerlink\" title=\"创建实例对象\"></a>创建实例对象</h1><p>实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。</p>\n<p>以下使用类的名称 Employee 来实例化，并通过 <strong>init</strong> 方法接收参数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;创建 Employee 类的第一个对象&quot;</span></span><br><span class=\"line\">emp1 = Employee(<span class=\"string\">&quot;Zara&quot;</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;创建 Employee 类的第二个对象&quot;</span></span><br><span class=\"line\">emp2 = Employee(<span class=\"string\">&quot;Manni&quot;</span>, <span class=\"number\">5000</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"访问属性\"><a href=\"#访问属性\" class=\"headerlink\" title=\"访问属性\"></a>访问属性</h1><p>您可以使用点号 <strong>.</strong> 来访问对象的属性。使用如下类的名称访问类变量:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emp1.displayEmployee()</span><br><span class=\"line\">emp2.displayEmployee()</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例属性-amp-类属性\"><a href=\"#实例属性-amp-类属性\" class=\"headerlink\" title=\"实例属性 &amp; 类属性\"></a>实例属性 &amp; 类属性</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">\t\tcountry=<span class=\"string\">&#x27;CHINA&#x27;</span> <span class=\"comment\">#类变量，作用域是类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        self.name = name <span class=\"comment\">#实例属性，在创建类时指定，作用域是实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = Student(<span class=\"string\">&#x27;Bob&#x27;</span>) <span class=\"comment\">#创建实例s的实例属性name</span></span><br><span class=\"line\">s.score = <span class=\"number\">90</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;所有员工的基类&#x27;</span></span><br><span class=\"line\">   empCount = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, salary</span>):</span></span><br><span class=\"line\">      self.name = name</span><br><span class=\"line\">      self.salary = salary</span><br><span class=\"line\">      Employee.empCount += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;Name : &quot;</span>, self.name,  <span class=\"string\">&quot;, Salary: &quot;</span>, self.salary</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">&quot;创建 Employee 类的第一个对象&quot;</span></span><br><span class=\"line\">emp1 = Employee(<span class=\"string\">&quot;Zara&quot;</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;创建 Employee 类的第二个对象&quot;</span></span><br><span class=\"line\">emp2 = Employee(<span class=\"string\">&quot;Manni&quot;</span>, <span class=\"number\">5000</span>)</span><br><span class=\"line\">emp1.displayEmployee()</span><br><span class=\"line\">emp2.displayEmployee()</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br></pre></td></tr></table></figure>\n<p>执行以上代码输出结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name :  Zara ,Salary:  <span class=\"number\">2000</span></span><br><span class=\"line\">Name :  Manni ,Salary:  <span class=\"number\">5000</span></span><br><span class=\"line\">Total Employee <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>你可以添加，删除，修改类的属性，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emp1.age = <span class=\"number\">7</span>  <span class=\"comment\"># 添加一个 &#x27;age&#x27; 属性</span></span><br><span class=\"line\">emp1.age = <span class=\"number\">8</span>  <span class=\"comment\"># 修改 &#x27;age&#x27; 属性</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> emp1.age  <span class=\"comment\"># 删除 &#x27;age&#x27; 属性</span></span><br></pre></td></tr></table></figure>\n<p>你也可以使用以下函数的方式来访问属性：</p>\n<ul>\n<li>getattr(obj, name[, default]) : 访问对象的属性。</li>\n<li>hasattr(obj,name) : 检查是否存在一个属性。</li>\n<li>setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。</li>\n<li>delattr(obj, name) : 删除属性。</li>\n</ul>\n<p>hasattr(emp1, ‘age’)    # 如果存在 ‘age’ 属性返回 True。 getattr(emp1, ‘age’)    # 返回 ‘age’ 属性的值 setattr(emp1, ‘age’, 8) # 添加属性 ‘age’ 值为 8 delattr(emp1, ‘age’)    # 删除属性 ‘age’</p>\n<hr>\n<h3 id=\"Python内置类属性实例\"><a href=\"#Python内置类属性实例\" class=\"headerlink\" title=\"Python内置类属性实例\"></a>Python内置类属性实例</h3><ul>\n<li><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）</li>\n<li><strong>doc</strong> :类的文档字符串</li>\n<li><strong>name</strong>: 类名</li>\n<li><strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）</li>\n<li><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</li>\n</ul>\n<p>Python内置类属性调用实例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;所有员工的基类&#x27;</span></span><br><span class=\"line\">   empCount = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, salary</span>):</span></span><br><span class=\"line\">      self.name = name</span><br><span class=\"line\">      self.salary = salary</span><br><span class=\"line\">      Employee.empCount += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;Name : &quot;</span>, self.name,  <span class=\"string\">&quot;, Salary: &quot;</span>, self.salary</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__doc__:&quot;</span>, Employee.__doc__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__name__:&quot;</span>, Employee.__name__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__module__:&quot;</span>, Employee.__module__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__bases__:&quot;</span>, Employee.__bases__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__dict__:&quot;</span>, Employee.__dict__</span><br></pre></td></tr></table></figure>\n<p>执行以上代码输出结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee.__doc__: 所有员工的基类</span><br><span class=\"line\">Employee.__name__: Employee</span><br><span class=\"line\">Employee.__module__: __main__</span><br><span class=\"line\">Employee.__bases__: ()</span><br><span class=\"line\">Employee.__dict__: &#123;<span class=\"string\">&#x27;__module__&#x27;</span>: <span class=\"string\">&#x27;__main__&#x27;</span>, <span class=\"string\">&#x27;displayCount&#x27;</span>: &lt;function displayCount at <span class=\"number\">0x10a939c80</span>&gt;, <span class=\"string\">&#x27;empCount&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;displayEmployee&#x27;</span>: &lt;function displayEmployee at <span class=\"number\">0x10a93caa0</span>&gt;, <span class=\"string\">&#x27;__doc__&#x27;</span>: <span class=\"string\">&#x27;\\xe6\\x89\\x80\\xe6\\x9c\\x89\\xe5\\x91\\x98\\xe5\\xb7\\xa5\\xe7\\x9a\\x84\\xe5\\x9f\\xba\\xe7\\xb1\\xbb&#x27;</span>, <span class=\"string\">&#x27;__init__&#x27;</span>: &lt;function __init__ at <span class=\"number\">0x10a939578</span>&gt;&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"python对象销毁-垃圾回收\"><a href=\"#python对象销毁-垃圾回收\" class=\"headerlink\" title=\"python对象销毁(垃圾回收)\"></a>python对象销毁(垃圾回收)</h1><p>Python 使用了引用计数这一简单技术来跟踪和回收垃圾。</p>\n<p>在 Python 内部记录着所有使用中的对象各有多少引用。</p>\n<p>一个内部跟踪变量，称为一个引用计数器。</p>\n<p>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是”立即”的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">40</span>      <span class=\"comment\"># 创建对象  &lt;40&gt;</span></span><br><span class=\"line\">b = a       <span class=\"comment\"># 增加引用， &lt;40&gt; 的计数</span></span><br><span class=\"line\">c = [b]     <span class=\"comment\"># 增加引用.  &lt;40&gt; 的计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> a       <span class=\"comment\"># 减少引用 &lt;40&gt; 的计数</span></span><br><span class=\"line\">b = <span class=\"number\">100</span>     <span class=\"comment\"># 减少引用 &lt;40&gt; 的计数</span></span><br><span class=\"line\">c[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>   <span class=\"comment\"># 减少引用 &lt;40&gt; 的计数</span></span><br></pre></td></tr></table></figure>\n<p>垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。</p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>析构函数 <strong>del</strong> ，<strong>del</strong>在对象销毁的时候被调用，当对象不再被使用时，<strong>del</strong>方法运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!/usr/<span class=\"built_in\">bin</span>/python</span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span>:</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\"> self, x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span></span>):</span></span><br><span class=\"line\">      self.x = x</span><br><span class=\"line\">      self.y = y</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      class_name = self.__class__.__name__</span><br><span class=\"line\">      <span class=\"built_in\">print</span> class_name, <span class=\"string\">&quot;销毁&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">pt1 = Point()</span><br><span class=\"line\">pt2 = pt1</span><br><span class=\"line\">pt3 = pt1</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">id</span>(pt1), <span class=\"built_in\">id</span>(pt2), <span class=\"built_in\">id</span>(pt3) <span class=\"comment\"># 打印对象的id</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> pt1</span><br><span class=\"line\"><span class=\"keyword\">del</span> pt2</span><br><span class=\"line\"><span class=\"keyword\">del</span> pt3</span><br></pre></td></tr></table></figure>\n<p>以上实例运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3083401324 3083401324 3083401324</span><br><span class=\"line\">Point 销毁</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>通常你需要在单独的文件中定义一个类，</p>\n<h1 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h1><p>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。</p>\n<p>通过继承创建的新类称为<strong>子类</strong>或<strong>派生类</strong>，被继承的类称为<strong>基类</strong>、<strong>父类</strong>或<strong>超类</strong>。</p>\n<p><strong>继承语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 派生类名(基类名)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>在python中继承中的一些特点：</p>\n<ul>\n<li>1、如果在子类中需要父类的构造方法就需要显示的调用父类的构造方法，或者不重写父类的构造方法。详细说明可查看：<a href=\"https://www.runoob.com/w3cnote/python-extends-init.html\">python 子类继承父类构造函数说明</a>。</li>\n<li>2、在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数</li>\n<li>3、Python 总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。</li>\n</ul>\n<p>如果在继承元组中列了一个以上的类，那么它就被称作”多重继承” 。</p>\n<p><strong>语法：</strong></p>\n<p>派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SubClassName (ParentClass1[, ParentClass2, ...]):</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span>:</span>        <span class=\"comment\"># 定义父类</span></span><br><span class=\"line\">   parentAttr = <span class=\"number\">100</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;调用父类构造函数&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parentMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&#x27;调用父类方法&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setAttr</span>(<span class=\"params\">self, attr</span>):</span></span><br><span class=\"line\">      Parent.parentAttr = attr</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAttr</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;父类属性 :&quot;</span>, Parent.parentAttr</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span>(<span class=\"params\">Parent</span>):</span> <span class=\"comment\"># 定义子类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;调用子类构造方法&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">childMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&#x27;调用子类方法&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">c = Child()          <span class=\"comment\"># 实例化子类</span></span><br><span class=\"line\">c.childMethod()      <span class=\"comment\"># 调用子类的方法</span></span><br><span class=\"line\">c.parentMethod()     <span class=\"comment\"># 调用父类方法</span></span><br><span class=\"line\">c.setAttr(<span class=\"number\">200</span>)       <span class=\"comment\"># 再次调用父类的方法 - 设置属性值</span></span><br><span class=\"line\">c.getAttr()          <span class=\"comment\"># 再次调用父类的方法 - 获取属性值</span></span><br></pre></td></tr></table></figure>\n<p>以上代码执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用子类构造方法</span><br><span class=\"line\">调用子类方法</span><br><span class=\"line\">调用父类方法</span><br><span class=\"line\">父类属性 : 200</span><br></pre></td></tr></table></figure>\n<p>你可以继承多个类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:        # 定义类 A</span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">class B:         # 定义类 B</span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">class C(A, B):   # 继承类 A 和 B</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<p>你可以使用issubclass()或者isinstance()方法来检测。</p>\n<ul>\n<li>issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)</li>\n<li>isinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。</li>\n</ul>\n<hr>\n<h1 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h1><p>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：</p>\n<p>实例：</p>\n<h3 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span>:</span>        <span class=\"comment\"># 定义父类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&#x27;调用父类方法&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span>(<span class=\"params\">Parent</span>):</span> <span class=\"comment\"># 定义子类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&#x27;调用子类方法&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">c = Child()          <span class=\"comment\"># 子类实例</span></span><br><span class=\"line\">c.myMethod()         <span class=\"comment\"># 子类调用重写方法</span></span><br></pre></td></tr></table></figure>\n<p>执行以上代码输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用子类方法</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"基础重载方法\"><a href=\"#基础重载方法\" class=\"headerlink\" title=\"基础重载方法\"></a>基础重载方法</h2><p>下表列出了一些通用的功能，你可以在自己的类重写：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">方法, 描述 &amp; 简单的调用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong><strong>init</strong> ( self [,args…] )</strong> 构造函数 简单的调用方法: <em>obj = className(args)</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong><strong>del</strong>( self )</strong> 析构方法, 删除一个对象 简单的调用方法 : <em>del obj</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong><strong>repr</strong>( self )</strong> 转化为供解释器读取的形式 简单的调用方法 : <em>repr(obj)</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong><strong>str</strong>( self )</strong> 用于将值转化为适于人阅读的形式 简单的调用方法 : <em>str(obj)</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong><strong>cmp</strong> ( self, x )</strong> 对象比较 简单的调用方法 : <em>cmp(obj, x)</em></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h3><p>Python同样支持运算符重载，实例如下：</p>\n<h3 id=\"实例-5\"><a href=\"#实例-5\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, a, b</span>):</span></span><br><span class=\"line\">      self.a = a</span><br><span class=\"line\">      self.b = b</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span>(<span class=\"params\">self,other</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class=\"line\"> </span><br><span class=\"line\">v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">v2 = Vector(<span class=\"number\">5</span>,-<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> v1 + v2</span><br></pre></td></tr></table></figure>\n<p>以上代码执行结果如下所示:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector(7,8)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"类属性与方法\"><a href=\"#类属性与方法\" class=\"headerlink\" title=\"类属性与方法\"></a>类属性与方法</h2><h3 id=\"类的私有属性\"><a href=\"#类的私有属性\" class=\"headerlink\" title=\"类的私有属性\"></a>类的私有属性</h3><p><strong>__private_attrs</strong>：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <strong>self.__private_attrs</strong>。</p>\n<h3 id=\"类的方法\"><a href=\"#类的方法\" class=\"headerlink\" title=\"类的方法\"></a>类的方法</h3><p>在类的内部，使用 <strong>def</strong> 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数</p>\n<h3 id=\"类的私有方法\"><a href=\"#类的私有方法\" class=\"headerlink\" title=\"类的私有方法\"></a>类的私有方法</h3><p><strong>__private_method</strong>：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 <strong>self.__private_methods</strong></p>\n<h3 id=\"实例-6\"><a href=\"#实例-6\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JustCounter</span>:</span></span><br><span class=\"line\">    __secretCount = <span class=\"number\">0</span>  <span class=\"comment\"># 私有变量</span></span><br><span class=\"line\">    publicCount = <span class=\"number\">0</span>    <span class=\"comment\"># 公开变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__secretCount += <span class=\"number\">1</span></span><br><span class=\"line\">        self.publicCount += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> self.__secretCount</span><br><span class=\"line\"> </span><br><span class=\"line\">counter = JustCounter()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\"><span class=\"built_in\">print</span> counter.publicCount</span><br><span class=\"line\"><span class=\"built_in\">print</span> counter.__secretCount  <span class=\"comment\"># 报错，实例不能访问私有变量</span></span><br></pre></td></tr></table></figure>\n<p>Python 通过改变名称来包含类名:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;test.py&quot;, line 17, in &lt;module&gt;</span><br><span class=\"line\">    print counter.__secretCount  # 报错，实例不能访问私有变量</span><br><span class=\"line\">AttributeError: JustCounter instance has no attribute &#x27;__secretCount&#x27;</span><br></pre></td></tr></table></figure>\n<p>Python不允许实例化的类访问私有数据，但你可以使用 <strong>object._className__attrName</strong>（ <strong>对象名._类名__私有属性名</strong> ）访问属性，参考以下实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">class Runoob:</span><br><span class=\"line\">    __site = &quot;www.runoob.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">runoob = Runoob()</span><br><span class=\"line\">print runoob._Runoob__site</span><br></pre></td></tr></table></figure>\n<p>执行以上代码，执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www.runoob.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"单下划线、双下划线、头尾双下划线说明：\"><a href=\"#单下划线、双下划线、头尾双下划线说明：\" class=\"headerlink\" title=\"单下划线、双下划线、头尾双下划线说明：\"></a>单下划线、双下划线、头尾双下划线说明：</h3><ul>\n<li><strong><strong>foo</strong></strong>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong><strong>init</strong>()</strong> 之类的。</li>\n<li><strong>_foo</strong>: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 <strong>from module import *</strong></li>\n<li><strong>__foo</strong>: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</li>\n</ul>\n<h1 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperParams</span>:</span></span><br><span class=\"line\">    batch_num=<span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"built_in\">iter</span>=<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> utils <span class=\"keyword\">import</span> SuperParams</span><br><span class=\"line\">batch_num=SuperParams.batch_num</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Args</span>(<span class=\"params\">SuperParams</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,is_training=<span class=\"literal\">True</span></span>):</span></span><br><span class=\"line\">        self.dnn_depth=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Args().dnn_depth)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(Args().batch_num)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>__init__ 函数中的变量是</p>\n<h1 id=\"对象调用\"><a href=\"#对象调用\" class=\"headerlink\" title=\"对象调用\"></a>对象调用</h1>","site":{"data":{}},"excerpt":"<p>python 面向对象</p>","more":"<p>[TOC]</p>\n<p>类(Class):** 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p>\n<h1 id=\"自定义类的引用\"><a href=\"#自定义类的引用\" class=\"headerlink\" title=\"自定义类的引用\"></a>自定义类的引用</h1><p><img src=\"/Users/hetianqi/Documents/charging/notes_of_the_world/python面向对象编程.assets/image-20200710093905513.png\" alt=\"image-20200710093905513\"></p>\n<ul>\n<li><strong>init</strong>.py 可以是空文件，指明models是一个package，models下面的子文件或文件夹可通过 import bao’ming</li>\n</ul>\n<h1 id=\"面向对象技术简介\"><a href=\"#面向对象技术简介\" class=\"headerlink\" title=\"面向对象技术简介\"></a>面向对象技术简介</h1><ul>\n<li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li>\n<li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li>\n<li><strong>数据成员：</strong>类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li>\n<li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li>\n<li><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li>\n<li><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。</li>\n<li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li>\n<li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li>\n<li><strong>方法：</strong>类中定义的函数。</li>\n<li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li>\n</ul>\n<hr>\n<h1 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h1><p>使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ClassName:</span><br><span class=\"line\">   &#x27;类的帮助信息&#x27;   #类文档字符串</span><br><span class=\"line\">   class_suite  #类体</span><br></pre></td></tr></table></figure>\n<p>类的帮助信息可以通过ClassName.<strong>doc</strong>查看。</p>\n<p>class_suite 由类成员，方法，数据属性组成。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>以下是一个简单的 Python 类的例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;所有员工的基类&#x27;</span></span><br><span class=\"line\">   empCount = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, salary</span>):</span></span><br><span class=\"line\">      self.name = name</span><br><span class=\"line\">      self.salary = salary</span><br><span class=\"line\">      Employee.empCount += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;Name : &quot;</span>, self.name,  <span class=\"string\">&quot;, Salary: &quot;</span>, self.salary</span><br></pre></td></tr></table></figure>\n<ul>\n<li>empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。</li>\n<li>第一种方法<strong>init</strong>()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</li>\n<li>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</li>\n</ul>\n<h3 id=\"self代表类的实例，而非类\"><a href=\"#self代表类的实例，而非类\" class=\"headerlink\" title=\"self代表类的实例，而非类\"></a>self代表类的实例，而非类</h3><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prt</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.__class__)</span><br><span class=\"line\"> </span><br><span class=\"line\">t = Test()</span><br><span class=\"line\">t.prt()</span><br></pre></td></tr></table></figure>\n<p>以上实例执行结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;__main__.Test instance at <span class=\"number\">0x10d066878</span>&gt;</span><br><span class=\"line\">__main__.Test</span><br></pre></td></tr></table></figure>\n<p>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 <strong>self.<strong>class</strong></strong> 则指向类。</p>\n<p>self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:</p>\n<hr>\n<h1 id=\"创建实例对象\"><a href=\"#创建实例对象\" class=\"headerlink\" title=\"创建实例对象\"></a>创建实例对象</h1><p>实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。</p>\n<p>以下使用类的名称 Employee 来实例化，并通过 <strong>init</strong> 方法接收参数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;创建 Employee 类的第一个对象&quot;</span></span><br><span class=\"line\">emp1 = Employee(<span class=\"string\">&quot;Zara&quot;</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;创建 Employee 类的第二个对象&quot;</span></span><br><span class=\"line\">emp2 = Employee(<span class=\"string\">&quot;Manni&quot;</span>, <span class=\"number\">5000</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"访问属性\"><a href=\"#访问属性\" class=\"headerlink\" title=\"访问属性\"></a>访问属性</h1><p>您可以使用点号 <strong>.</strong> 来访问对象的属性。使用如下类的名称访问类变量:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emp1.displayEmployee()</span><br><span class=\"line\">emp2.displayEmployee()</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例属性-amp-类属性\"><a href=\"#实例属性-amp-类属性\" class=\"headerlink\" title=\"实例属性 &amp; 类属性\"></a>实例属性 &amp; 类属性</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">\t\tcountry=<span class=\"string\">&#x27;CHINA&#x27;</span> <span class=\"comment\">#类变量，作用域是类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        self.name = name <span class=\"comment\">#实例属性，在创建类时指定，作用域是实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = Student(<span class=\"string\">&#x27;Bob&#x27;</span>) <span class=\"comment\">#创建实例s的实例属性name</span></span><br><span class=\"line\">s.score = <span class=\"number\">90</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;所有员工的基类&#x27;</span></span><br><span class=\"line\">   empCount = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, salary</span>):</span></span><br><span class=\"line\">      self.name = name</span><br><span class=\"line\">      self.salary = salary</span><br><span class=\"line\">      Employee.empCount += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;Name : &quot;</span>, self.name,  <span class=\"string\">&quot;, Salary: &quot;</span>, self.salary</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">&quot;创建 Employee 类的第一个对象&quot;</span></span><br><span class=\"line\">emp1 = Employee(<span class=\"string\">&quot;Zara&quot;</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;创建 Employee 类的第二个对象&quot;</span></span><br><span class=\"line\">emp2 = Employee(<span class=\"string\">&quot;Manni&quot;</span>, <span class=\"number\">5000</span>)</span><br><span class=\"line\">emp1.displayEmployee()</span><br><span class=\"line\">emp2.displayEmployee()</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br></pre></td></tr></table></figure>\n<p>执行以上代码输出结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name :  Zara ,Salary:  <span class=\"number\">2000</span></span><br><span class=\"line\">Name :  Manni ,Salary:  <span class=\"number\">5000</span></span><br><span class=\"line\">Total Employee <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>你可以添加，删除，修改类的属性，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emp1.age = <span class=\"number\">7</span>  <span class=\"comment\"># 添加一个 &#x27;age&#x27; 属性</span></span><br><span class=\"line\">emp1.age = <span class=\"number\">8</span>  <span class=\"comment\"># 修改 &#x27;age&#x27; 属性</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> emp1.age  <span class=\"comment\"># 删除 &#x27;age&#x27; 属性</span></span><br></pre></td></tr></table></figure>\n<p>你也可以使用以下函数的方式来访问属性：</p>\n<ul>\n<li>getattr(obj, name[, default]) : 访问对象的属性。</li>\n<li>hasattr(obj,name) : 检查是否存在一个属性。</li>\n<li>setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。</li>\n<li>delattr(obj, name) : 删除属性。</li>\n</ul>\n<p>hasattr(emp1, ‘age’)    # 如果存在 ‘age’ 属性返回 True。 getattr(emp1, ‘age’)    # 返回 ‘age’ 属性的值 setattr(emp1, ‘age’, 8) # 添加属性 ‘age’ 值为 8 delattr(emp1, ‘age’)    # 删除属性 ‘age’</p>\n<hr>\n<h3 id=\"Python内置类属性实例\"><a href=\"#Python内置类属性实例\" class=\"headerlink\" title=\"Python内置类属性实例\"></a>Python内置类属性实例</h3><ul>\n<li><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）</li>\n<li><strong>doc</strong> :类的文档字符串</li>\n<li><strong>name</strong>: 类名</li>\n<li><strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）</li>\n<li><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</li>\n</ul>\n<p>Python内置类属性调用实例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;所有员工的基类&#x27;</span></span><br><span class=\"line\">   empCount = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, salary</span>):</span></span><br><span class=\"line\">      self.name = name</span><br><span class=\"line\">      self.salary = salary</span><br><span class=\"line\">      Employee.empCount += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;Name : &quot;</span>, self.name,  <span class=\"string\">&quot;, Salary: &quot;</span>, self.salary</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__doc__:&quot;</span>, Employee.__doc__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__name__:&quot;</span>, Employee.__name__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__module__:&quot;</span>, Employee.__module__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__bases__:&quot;</span>, Employee.__bases__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__dict__:&quot;</span>, Employee.__dict__</span><br></pre></td></tr></table></figure>\n<p>执行以上代码输出结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee.__doc__: 所有员工的基类</span><br><span class=\"line\">Employee.__name__: Employee</span><br><span class=\"line\">Employee.__module__: __main__</span><br><span class=\"line\">Employee.__bases__: ()</span><br><span class=\"line\">Employee.__dict__: &#123;<span class=\"string\">&#x27;__module__&#x27;</span>: <span class=\"string\">&#x27;__main__&#x27;</span>, <span class=\"string\">&#x27;displayCount&#x27;</span>: &lt;function displayCount at <span class=\"number\">0x10a939c80</span>&gt;, <span class=\"string\">&#x27;empCount&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;displayEmployee&#x27;</span>: &lt;function displayEmployee at <span class=\"number\">0x10a93caa0</span>&gt;, <span class=\"string\">&#x27;__doc__&#x27;</span>: <span class=\"string\">&#x27;\\xe6\\x89\\x80\\xe6\\x9c\\x89\\xe5\\x91\\x98\\xe5\\xb7\\xa5\\xe7\\x9a\\x84\\xe5\\x9f\\xba\\xe7\\xb1\\xbb&#x27;</span>, <span class=\"string\">&#x27;__init__&#x27;</span>: &lt;function __init__ at <span class=\"number\">0x10a939578</span>&gt;&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"python对象销毁-垃圾回收\"><a href=\"#python对象销毁-垃圾回收\" class=\"headerlink\" title=\"python对象销毁(垃圾回收)\"></a>python对象销毁(垃圾回收)</h1><p>Python 使用了引用计数这一简单技术来跟踪和回收垃圾。</p>\n<p>在 Python 内部记录着所有使用中的对象各有多少引用。</p>\n<p>一个内部跟踪变量，称为一个引用计数器。</p>\n<p>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是”立即”的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">40</span>      <span class=\"comment\"># 创建对象  &lt;40&gt;</span></span><br><span class=\"line\">b = a       <span class=\"comment\"># 增加引用， &lt;40&gt; 的计数</span></span><br><span class=\"line\">c = [b]     <span class=\"comment\"># 增加引用.  &lt;40&gt; 的计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> a       <span class=\"comment\"># 减少引用 &lt;40&gt; 的计数</span></span><br><span class=\"line\">b = <span class=\"number\">100</span>     <span class=\"comment\"># 减少引用 &lt;40&gt; 的计数</span></span><br><span class=\"line\">c[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>   <span class=\"comment\"># 减少引用 &lt;40&gt; 的计数</span></span><br></pre></td></tr></table></figure>\n<p>垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。</p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>析构函数 <strong>del</strong> ，<strong>del</strong>在对象销毁的时候被调用，当对象不再被使用时，<strong>del</strong>方法运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!/usr/<span class=\"built_in\">bin</span>/python</span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span>:</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\"> self, x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span></span>):</span></span><br><span class=\"line\">      self.x = x</span><br><span class=\"line\">      self.y = y</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      class_name = self.__class__.__name__</span><br><span class=\"line\">      <span class=\"built_in\">print</span> class_name, <span class=\"string\">&quot;销毁&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">pt1 = Point()</span><br><span class=\"line\">pt2 = pt1</span><br><span class=\"line\">pt3 = pt1</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">id</span>(pt1), <span class=\"built_in\">id</span>(pt2), <span class=\"built_in\">id</span>(pt3) <span class=\"comment\"># 打印对象的id</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> pt1</span><br><span class=\"line\"><span class=\"keyword\">del</span> pt2</span><br><span class=\"line\"><span class=\"keyword\">del</span> pt3</span><br></pre></td></tr></table></figure>\n<p>以上实例运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3083401324 3083401324 3083401324</span><br><span class=\"line\">Point 销毁</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>通常你需要在单独的文件中定义一个类，</p>\n<h1 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h1><p>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。</p>\n<p>通过继承创建的新类称为<strong>子类</strong>或<strong>派生类</strong>，被继承的类称为<strong>基类</strong>、<strong>父类</strong>或<strong>超类</strong>。</p>\n<p><strong>继承语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 派生类名(基类名)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>在python中继承中的一些特点：</p>\n<ul>\n<li>1、如果在子类中需要父类的构造方法就需要显示的调用父类的构造方法，或者不重写父类的构造方法。详细说明可查看：<a href=\"https://www.runoob.com/w3cnote/python-extends-init.html\">python 子类继承父类构造函数说明</a>。</li>\n<li>2、在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数</li>\n<li>3、Python 总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。</li>\n</ul>\n<p>如果在继承元组中列了一个以上的类，那么它就被称作”多重继承” 。</p>\n<p><strong>语法：</strong></p>\n<p>派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SubClassName (ParentClass1[, ParentClass2, ...]):</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span>:</span>        <span class=\"comment\"># 定义父类</span></span><br><span class=\"line\">   parentAttr = <span class=\"number\">100</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;调用父类构造函数&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parentMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&#x27;调用父类方法&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setAttr</span>(<span class=\"params\">self, attr</span>):</span></span><br><span class=\"line\">      Parent.parentAttr = attr</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAttr</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;父类属性 :&quot;</span>, Parent.parentAttr</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span>(<span class=\"params\">Parent</span>):</span> <span class=\"comment\"># 定义子类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;调用子类构造方法&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">childMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&#x27;调用子类方法&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">c = Child()          <span class=\"comment\"># 实例化子类</span></span><br><span class=\"line\">c.childMethod()      <span class=\"comment\"># 调用子类的方法</span></span><br><span class=\"line\">c.parentMethod()     <span class=\"comment\"># 调用父类方法</span></span><br><span class=\"line\">c.setAttr(<span class=\"number\">200</span>)       <span class=\"comment\"># 再次调用父类的方法 - 设置属性值</span></span><br><span class=\"line\">c.getAttr()          <span class=\"comment\"># 再次调用父类的方法 - 获取属性值</span></span><br></pre></td></tr></table></figure>\n<p>以上代码执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用子类构造方法</span><br><span class=\"line\">调用子类方法</span><br><span class=\"line\">调用父类方法</span><br><span class=\"line\">父类属性 : 200</span><br></pre></td></tr></table></figure>\n<p>你可以继承多个类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:        # 定义类 A</span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">class B:         # 定义类 B</span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">class C(A, B):   # 继承类 A 和 B</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<p>你可以使用issubclass()或者isinstance()方法来检测。</p>\n<ul>\n<li>issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)</li>\n<li>isinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。</li>\n</ul>\n<hr>\n<h1 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h1><p>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：</p>\n<p>实例：</p>\n<h3 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span>:</span>        <span class=\"comment\"># 定义父类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&#x27;调用父类方法&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span>(<span class=\"params\">Parent</span>):</span> <span class=\"comment\"># 定义子类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&#x27;调用子类方法&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">c = Child()          <span class=\"comment\"># 子类实例</span></span><br><span class=\"line\">c.myMethod()         <span class=\"comment\"># 子类调用重写方法</span></span><br></pre></td></tr></table></figure>\n<p>执行以上代码输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用子类方法</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"基础重载方法\"><a href=\"#基础重载方法\" class=\"headerlink\" title=\"基础重载方法\"></a>基础重载方法</h2><p>下表列出了一些通用的功能，你可以在自己的类重写：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">方法, 描述 &amp; 简单的调用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong><strong>init</strong> ( self [,args…] )</strong> 构造函数 简单的调用方法: <em>obj = className(args)</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong><strong>del</strong>( self )</strong> 析构方法, 删除一个对象 简单的调用方法 : <em>del obj</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong><strong>repr</strong>( self )</strong> 转化为供解释器读取的形式 简单的调用方法 : <em>repr(obj)</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong><strong>str</strong>( self )</strong> 用于将值转化为适于人阅读的形式 简单的调用方法 : <em>str(obj)</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong><strong>cmp</strong> ( self, x )</strong> 对象比较 简单的调用方法 : <em>cmp(obj, x)</em></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h3><p>Python同样支持运算符重载，实例如下：</p>\n<h3 id=\"实例-5\"><a href=\"#实例-5\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, a, b</span>):</span></span><br><span class=\"line\">      self.a = a</span><br><span class=\"line\">      self.b = b</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span>(<span class=\"params\">self,other</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class=\"line\"> </span><br><span class=\"line\">v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">v2 = Vector(<span class=\"number\">5</span>,-<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> v1 + v2</span><br></pre></td></tr></table></figure>\n<p>以上代码执行结果如下所示:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector(7,8)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"类属性与方法\"><a href=\"#类属性与方法\" class=\"headerlink\" title=\"类属性与方法\"></a>类属性与方法</h2><h3 id=\"类的私有属性\"><a href=\"#类的私有属性\" class=\"headerlink\" title=\"类的私有属性\"></a>类的私有属性</h3><p><strong>__private_attrs</strong>：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <strong>self.__private_attrs</strong>。</p>\n<h3 id=\"类的方法\"><a href=\"#类的方法\" class=\"headerlink\" title=\"类的方法\"></a>类的方法</h3><p>在类的内部，使用 <strong>def</strong> 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数</p>\n<h3 id=\"类的私有方法\"><a href=\"#类的私有方法\" class=\"headerlink\" title=\"类的私有方法\"></a>类的私有方法</h3><p><strong>__private_method</strong>：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 <strong>self.__private_methods</strong></p>\n<h3 id=\"实例-6\"><a href=\"#实例-6\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JustCounter</span>:</span></span><br><span class=\"line\">    __secretCount = <span class=\"number\">0</span>  <span class=\"comment\"># 私有变量</span></span><br><span class=\"line\">    publicCount = <span class=\"number\">0</span>    <span class=\"comment\"># 公开变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__secretCount += <span class=\"number\">1</span></span><br><span class=\"line\">        self.publicCount += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> self.__secretCount</span><br><span class=\"line\"> </span><br><span class=\"line\">counter = JustCounter()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\"><span class=\"built_in\">print</span> counter.publicCount</span><br><span class=\"line\"><span class=\"built_in\">print</span> counter.__secretCount  <span class=\"comment\"># 报错，实例不能访问私有变量</span></span><br></pre></td></tr></table></figure>\n<p>Python 通过改变名称来包含类名:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;test.py&quot;, line 17, in &lt;module&gt;</span><br><span class=\"line\">    print counter.__secretCount  # 报错，实例不能访问私有变量</span><br><span class=\"line\">AttributeError: JustCounter instance has no attribute &#x27;__secretCount&#x27;</span><br></pre></td></tr></table></figure>\n<p>Python不允许实例化的类访问私有数据，但你可以使用 <strong>object._className__attrName</strong>（ <strong>对象名._类名__私有属性名</strong> ）访问属性，参考以下实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">class Runoob:</span><br><span class=\"line\">    __site = &quot;www.runoob.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">runoob = Runoob()</span><br><span class=\"line\">print runoob._Runoob__site</span><br></pre></td></tr></table></figure>\n<p>执行以上代码，执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www.runoob.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"单下划线、双下划线、头尾双下划线说明：\"><a href=\"#单下划线、双下划线、头尾双下划线说明：\" class=\"headerlink\" title=\"单下划线、双下划线、头尾双下划线说明：\"></a>单下划线、双下划线、头尾双下划线说明：</h3><ul>\n<li><strong><strong>foo</strong></strong>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong><strong>init</strong>()</strong> 之类的。</li>\n<li><strong>_foo</strong>: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 <strong>from module import *</strong></li>\n<li><strong>__foo</strong>: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</li>\n</ul>\n<h1 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperParams</span>:</span></span><br><span class=\"line\">    batch_num=<span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"built_in\">iter</span>=<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> utils <span class=\"keyword\">import</span> SuperParams</span><br><span class=\"line\">batch_num=SuperParams.batch_num</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Args</span>(<span class=\"params\">SuperParams</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,is_training=<span class=\"literal\">True</span></span>):</span></span><br><span class=\"line\">        self.dnn_depth=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 调用</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Args().dnn_depth)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(Args().batch_num)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>__init__ 函数中的变量是</p>\n<h1 id=\"对象调用\"><a href=\"#对象调用\" class=\"headerlink\" title=\"对象调用\"></a>对象调用</h1>"},{"title":"shell","date":"2022-03-01T03:32:38.000Z","_content":"\n常用shell命令\n\n<!-- more -->\n\n\n[TOC]\n\n# /etc/profile、/etc/bashrc、~/.bash_profile、~/.bashrc\n\n## /etc/profile\n\n此文件为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行。并从 /etc/profile.d 目录的配置文件中收集 shell 的设置。如果你有对 /etc/profile 有修改的话必须得 source 一下你的修改才会生效，此修改对每个用户都生效。\n\n## /etc/bashrc（ubuntu为 /etc/bash.bashrc）\n\n为每一个运行 bash shell 的用户执行此文件。当 bash shell 被打开时，该文件被读取。如果你想对所有的使用 bash 的用户修改某个配置并在以后打开的 bash 都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个 bash 即可生效。\nUbuntu没有此文件，与之对应的是/ect/bash.bashrc。\n\n## ~/.bash_profile（ubuntu为 ~/.profile）\n\n每个用户都可使用该文件输入专用于自己使用的 shell 信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量，执行用户的~/ .bashrc 文件。 此文件类似于 /etc/profile，也是需要需要 source 才会生效，/etc/profile 对所有用户生效，~/.bash_profile 只对当前用户生效。~/.profile(由Bourne Shell和Korn Shell使用)和.login(由C Shell使用)两个文件是.bash_profile的同义词，目的是为了兼容其它Shell。\n\n# Linux的Shell种类\n\n常见的有：\n\n- Bourne Shell（/usr/bin/sh或/bin/sh）、\n  Bourne Again Shell（/bin/bash）、\n  C Shell（/usr/bin/csh）、\n  K Shell（/usr/bin/ksh）、\n  Shell for Root（/sbin/sh）等等。\n\n- 不同的Shell语言的语法有所不同，所以不能交换使用。每种Shell都有其特色之处，基本上，掌握其中任何一种 就足够了。在本文中，我们关注的重点是Bash，也就是Bourne Again Shell，由于易用和免费，Bash在日常工作中被广泛使用；同时，Bash也是大多数Linux系统默认的Shell。\n- 在一般情况下，人们并不区分 Bourne Shell和Bourne Again Shell，所以，在下面的文字中，我们可以看到#!/bin/sh，它同样也可以改为#!/bin/bash。(定义使用哪种sh解释器来解释脚本)\n\n# 如果不存在则创建文件夹\n\n```shell\nif [ ! -d \"$build_dir\" ]; then\n        mkdir $build_dir\nfi\n```\n\n\n\n# df\n\n```shell\ndf -hl 查看磁盘剩余空间\ndf -h 查看每个根路径的分区大小\n```\n\n# alias 外部传参\n\n```bash\nalias cd='func() { cd $1; ls;}; func' #定义一个函数func（）{......}；func; {}中间是要alias的执行的命令，多个命令用；隔开，最后；结尾\n\n\n/notebook/download\nalias dl='func() { cp $1 /notebook/download/; }; func'\nalias push='func() { cd /notebook/download/; git add . ; git commit -m \"update\"; git push origin master; }; func'\n```\n\n\n\n# du\n\n##查看磁盘大小\n\n```shell\n du -s * | sort -nr  #查看大小并按大小排序\ndu -h ftp #查看指定文件夹下所有文件大小（包括子文件夹）\ndu -sh [目录名] 返回该目录的大小\ndu -sm [文件夹] 返回该文件夹总M数\n```\n\n\n\n#grep\n\n```\ngrep 'hi' test.txt #显示包含hi的行\n```\n#find\n\n## 遍历符合条件的文件\n\n```shell\nfor f in `find . -name \"正则匹配\" ` #.是路径   双引号和飘号要注意\ndo\n\techo $f\ndone\n```\n\n\n\n##对于多个文件执行操作\n\n```\nfind . -name \"*.sh\" | xargs wc -l\n```\n## 删除符合条件的多个文件\n\n```shell\nfind . -type f -name \"${file_name}_*\" | xargs rm -f\n```\n\n\n\n## 统计python文件总行数\n\n```\n find . -name \"*.py\" | xargs wc -l >> temp.txt\n```\n\n# shellcheck检查sh文件\n\n```\nfind . -name \"*.sh\" | xargs shellcheck >> temp2.txt\ngrep 'In ./'\n```\n\n# 获取当前路径\n\n```bash\nCUR_DIR=$(cd $(dirname $0); pwd) #但是用source调用脚本时$0的值为\"-bash\"，词命令无法获取地址\nCUR_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n```\n\n#hive\n## 获取hive表最新分区\n\n```bash\nnewest_dt=$(hive -e \"show partitions cf_model.htq_hztz_xdtz_brs_s;\"|tail -1)\nnewest_dt=${newest_dt:3}\n```\n\n# sed\n\n## 插入行\n\n```shell\nsed -i '1i\\要添加的内容'  yourfile\n```\n\n## 删除指定行\n\n```shell\nsed -i ‘1d’ filename\n```\n\n## 替换指定字符\n\n```shell\nsed -i 's/foo/bar/g' myfile #-i会修改代码\n```\n\n## 查看指定行\n\n```shell\nsed -n '5,10p' filename 这样你就可以只查看文件的第5行到第10行。\n```\n\n\n\n# split\n\n```shell\nsplit -l 2000 urls.txt -d -a 2 url_\n解释一下：\n-l：按行分割，上面表示将urls.txt文件按2000行一个文件分割为多个文件\n-d：添加数字后缀，比如上图中的00，01，02\n-a 2：表示用两位数据来顺序命名\nurl_：看上图就应该明白了，用来定义分割后的文件名前面的部分。\n\n```\n\n# conda管理环境\n\n```shell\nconda info -envs #列出所有环境\nsource activate 环境名\nsource deactivate #回到默认环境\n```\n\n<https://blog.csdn.net/cxk207017/article/details/89598139>\n\nconda测试指南\n在开始这个conda测试之前，你应该已经下载并安装好了Anaconda或者Miniconda\n注意：在安装之后，你应该关闭并重新打开windows命令行。\n\n一、Conda测试过程：\n使用conda。首先我们将要确认你已经安装好了conda\n配置环境。下一步我们将通过创建几个环境来展示conda的环境管理功能。使你更加轻松的了解关于环境的一切。我们将学习如何确认你在哪个环境中，以及如何做复制一个环境作为备份。\n测试python。然后我们将检查哪一个版本的python可以被安装，以及安装另一个版本的python，还有在两个版本的python之间的切换。\n检查包。我们将1)罗列出安装在我们电脑上的包，2)浏览可用的包，3)使用conda install命令来来安装以及移除一些包。对于一些不能使用conda安装的包，我们将4)在Anaconda.org网站上搜索。对于那些在其它位置的包，我们将5)使用pip命令来实现安装。我们还会安装一个可以免费试用30天的商业包IOPro\n移除包、环境以及conda.我们将以学习删除你的包、环境以及conda来结束这次测试。\n二、完整过程\n提示：在任何时候你可以通过在命令后边跟上--help来获得该命令的完整文档。例如，你可以通过如下的命令来学习conda的update命令。\n\nconda update --help\n\\1. 管理conda：\nConda既是一个包管理器又是一个环境管理器。你肯定知道包管理器，它可以帮你发现和查看包。但是如果当我们想要安装一个包，但是这个包只支持跟我们目前使用的python不同的版本时。你只需要几行命令，就可以搭建起一个可以运行另外python版本的环境。，这就是conda环境管理器的强大功能。\n提示：无论你使用Linux、OS X或者Windows命令行工具，在你的命令行终端conda指令都是一样的，除非有特别说明。\n\n检查conda已经被安装。\n为了确保你已经在正确的位置安装好了conda，让我们来检查你是否已经成功安装好了Anaconda。在你的命令行终端窗口，输入如下代码：\n\nconda --version\nConda会返回你安装Anaconda软件的版本。\n提示：如果你看到了错误信息，检查你是否在安装过程中选择了仅为当前用户按安装，并且是否以同样的账户来操作。确保用同样的账户登录安装了之后重新打开命令行终端窗口。\n\n升级当前版本的conda\n接下来，让我们通过使用如下update命令来升级conda：\n\nconda update conda\nconda将会比较新旧版本并且告诉你哪一个版本的conda可以被安装。它也会通知你伴随这次升级其它包同时升级的情况。\n如果新版本的conda可用，它会提示你输入y进行升级.\n\nproceed ([y]/n)? y\nconda更新到最新版后，我们将进入下一个主题。\n\n##  管理环境\n\n\n现在我们通过创建一些环境来展示conda的环境操作，然后移动它们。\n\n###创建并激活一个环境\n使用conda create命令，后边跟上你希望用来称呼它的任何名字：\n\n> conda create --n py3 python=3\n>\n> 这条命令将会给biopython包创建一个新的环境，位置在/envs/snowflakes\n> 小技巧：很多跟在--后边常用的命令选项，可以被略写为一个短线加命令首字母。所以--name选项和-n的作用是一样的。通过conda -h或conda –-help来看大量的缩写。\n\n###激活这个新环境\n\nLinux，OS X: source activate snowflakes\nWindows：activate snowflake`\n小技巧：新的开发环境会被默认安装在你conda目录下的envs文件目录下。你可以指定一个其他的路径；去通过conda create -h了解更多信息吧。\n小技巧：如果我们没有指定安装python的版本，donda会安装我们最初安装conda时所装的那个版本的python。\n\n创建第二个环境\n这次让我们来创建并命名一个新环境，然后安装另一个版本的python以及两个包 Astroid 和 Babel。\n\nconda create -n bunnies python=3 Astroid Babel\n这将创建第二个基于python3 ，包含Astroid 和 Babel 包，称为bunnies的新环境，在/envs/bunnies文件夹里。\n小技巧：在此同时安装你想在这个环境中运行的包，\n小提示：在你创建环境的同时安装好所有你想要的包，在后来依次安装可能会导致依赖性问题（貌似是，不太懂这个术语怎么翻）。\n小技巧：你可以在conda create命令后边附加跟多的条件，键入conda create –h 查看更多细节。\n\n列出所有的环境\n现在让我们来检查一下截至目前你所安装的环境，使用conda environment info 命令来查看它:\n\n```shell\nconda info --envs\n```\n\n\n你将会看到如下的环境列表：\n\nconda environments:\n\n snowflakes          * /home/username/miniconda/envs/snowflakes\n\n bunnies               /home/username/miniconda/envs/bunnies\n\n root                  /home/username/miniconda\n确认当前环境\n你现在处于哪个环境中呢？snowflakes还是bunnies？想要确定它，输入下面的代码：\n\nconda info -envis\nconda将会显示所有环境的列表，当前环境会显示在一个括号内。\n\n(snowflakes)  \n注意：conda有时也会在目前活动的环境前边加上*号。\n\n切换到另一个环境(activate/deactivate)\n为了切换到另一个环境，键入下列命令以及所需环境的名字。\n\nLinux，OS X: source activate snowflakes\nWindows：activate snowflakes\n如果要从你当前工作环境的路径切换到系统根目录时，键入：\n\nLinux，OS X: source deactivate\nWindows: deactivate\n当该环境不再活动时，将不再被提前显示。\n\n复制一个环境\n通过克隆来复制一个环境。这儿将通过克隆snowfllakes来创建一个称为flowers的副本。\n\nconda create -n flowers --clone snowflakes\n通过conda info –-envs来检查环境\n你现在应该可以看到一个环境列表：flowers, bunnies, and snowflakes.\n\n删除一个环境\n如果你不想要这个名为flowers的环境，就按照如下方法移除该环境：\n\nconda remove -n flowers --all\n为了确定这个名为flowers的环境已经被移除，输入以下命令：\n\nconda info -e\nflowers 已经不再在你的环境列表里了，所以我们知道它被删除了。\n\n学习更多关于环境的知识\n如果你想学习更多关于conda的命令，就在该命令后边跟上 -h\n\nconda remove -h\n\\3. 管理Python\nconda对Python的管理跟其他包的管理类似，所以可以很轻松地管理和升级多个安装。\n\n检查python版本\n首先让我们检查那个版本的python可以被安装：\n\nconda search --full --name python\n你可以使用conda search python来看到所有名字中含有“python”的包或者加上--full --name命令选项来列出完全与“python”匹配的包。\n\n安装一个不同版本的python\n现在我们假设你需要python3来编译程序，但是你不想覆盖掉你的python2.7来升级，你可以创建并激活一个名为snakes的环境，并通过下面的命令来安装最新版本的python3：\n\nconda create -n snakes python=３\n·Linux，OS X：source activate snakes\n·Windows： activate snakes\n小提示：给环境取一个很形象的名字，例如“Python3”是很明智的，但是并不有趣。\n\n确定环境添加成功\n为了确保snakes环境已经被安装了，键入如下命令：\n\nconda info -e\nconda会显示环境列表，当前活动的环境会被括号括起来（snakes）\n\n检查新的环境中的python版本\n确保snakes环境中运行的是python3：\n\npython --version\n使用不同版本的python\n为了使用不同版本的python，你可以切换环境，通过简单的激活它就可以，让我们看看如何返回默认2.7\n\n·Linux，OS X: source activate snowflakes\n·Windows：activate snowflakes\n检查python版本：\n确保snowflakes环境中仍然在运行你安装conda时安装的那个版本的python。\n\npython --version\n注销该环境\n当你完成了在snowflakes环境中的工作室，注销掉该环境并转换你的路径到先前的状态：\n\n·Linux，OS X：source deactivate\n·Windows：deactivate\n\\4. 管理包\n现在让我们来演示包。我们已经安装了一些包（Astroid，Babel和一些特定版本的python），当我们创建一个新环境时。我们检查我们已经安装了那些包，检查哪些是可用的，寻找特定的包并安装它。接下来我们在Anconda.org仓库中查找并安装一些指定的包，用conda来完成更多pip可以实现的安装，并安装一个商业包。\n\n查看该环境中包和其版本的列表：\n使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。在你的终端窗口中输入：\n\n> conda list\n> 使用conda命令查看可用包的列表\n> 一个可用conda安装的包的列表，按照Python版本分类，可以从这个地址获得：\n> http://docs.continuum.io/anaconda/pkg-docs.html\n\n查找一个包\n首先让我们来检查我们需要的这个包是否可以通过conda来安装：\n\nconda search beautifulsoup4\n它展示了这个包，所以我们知道它是可用的。\n\n安装一个新包\n我们将在当前环境中安装这个Beautiful Soup包，使用conda命令如下；\nconda install --name bunnies beautifulsoup4\n提示：你必须告诉conda你要安装环境的名字（-n bunies）否则它将会被安装到当前环境中。\n现在激活bunnies环境，并且用conda list来显示哪些程序被安装了。\n\n·Linux，OS X：source activate bunnies\n·Windows：activate bunnies\n所有的平台：\nconda list\n从Anaconda.org安装一个包\n如果一个包不能使用conda安装，我们接下来将在Anaconda.org网站查找。Anaconda.org向公开和私有包仓库提供包管理服务。Anaconda.org是一个连续分析产品。\n提示：你在Anaconda.org下载东西的时候不强制要求注册。\n为了从Anaconda.org下载到当前的环境中，我们需要通过指定Anaconda.org为一个特定通道，通过输入这个包的完整路径来实现。\n在浏览器中，去 http://anaconda.org 网站。我们查找一个叫“bottleneck”的包，所以在左上角的叫“Search Anaconda Cloud”搜索框中输入“bottleneck”并点击search按钮。\nAnaconda.org上会有超过一打的bottleneck包的版本可用，但是我们想要那个被下载最频繁的版本。所以你可以通过下载量来排序，通过点击Download栏。\n点击包的名字来选择最常被下载的包。它会链接到Anaconda.org详情页显示下载的具体命令：\n\nconda install --channel https：//conda .anaconda.ort/pandas bottleneck\n检查被下载的包\nconda list\n通过pip命令来安装包\n对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip（“pip install packages”的简称）来安装包。\n提示： pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包，和vice versa（此处不会翻译）。pip和conda都集成在Anaconda或miniconda里边。\n\n我们激活我们想放置程序的环境，然后通过pip安装一个叫“See”的程序。\n\n·Linux，OS X： source activate bunnies\n·Windows：activate bunnies\n所有平台：\npip install see\n检查pip安装\n检查See是否被安装：\n\nconda list\n安装商业包\n安装商业包与你安装其他的包的过程异常。举个例子，让我们安装并删除一个更新的商业包的免费试用 IOPro，可以加速你的python处理速度：\n\nconda install iopro\n提示：除了学术使用，该版本在30天后试用期满\n\n你现在可以安装以及检查你想用conda安装的任何包，无论使用conda命令、从Anaconda.org下载或者使用pip安装，无论开源软件还是商业包。\n\n\\5. 移除包、环境、或者conda\n如果你愿意的话。让我们通过移除一个或多个试验包、环境以及conda来结束这次测试指导。\n\n移除包\n假设你决定不再使用商业包IOPro。你可以在bunnies环境中移除它。\n\nconda remove -n bunnies iopro\n确认包已经被移除\n使用conda list命令来确认IOPro已经被移除了\n\nconda list\n移除环境\n我们不再需要snakes环境了，所以输入以下命令：\nconda remove -n snakes --all\n\n确认环境被移除\n为了确认snakes环境已经被移除了，输入以下命令：\n\n conda info --envis\nsnakes不再显示在环境列表里了，所以我们知道它已经被删除了\n\n删除conda\nLinux，OS X：\n移除Anaconda 或 Miniconda 安装文件夹\nrm -rf ~/miniconda OR  rm -rf ~/anaconda\nWindows：\n去控制面板，点击“添加或删除程序”，选择“Python2.7（Anaconda）”或“Python2.7（Miniconda）”并点击删除程序。\n\n### 5K服务器环境安装实例\n\n> conda create -n py3 python=3.6   #创建叫做py3的环境，python版本是3.6\n\n> conda info -e #查看所有环境\n> \\# To activate this environment, use:\n> \\# > source activate py3\n> \\# To deactivate an active environment, use:\n> \\# > source deactivate\n\n> activate py3 #激活相应环境\n>\n> conda install numpy #安装包方式一\n>\n> conda install scikit-learn\n>\n> pip install numoy #安装包方式二\n\n# find\n\n列出当前目录及子目录下所有文件和文件夹\n\n```\nfind .\n```\n\n在`/home`目录下查找以.txt结尾的文件名\n\n```\nfind /home -name \"*.txt\"\n```\n\n同上，但忽略大小写\n\n```\nfind /home -iname \"*.txt\"\n```\n\n当前目录及子目录下查找所有以.txt和.pdf结尾的文件\n\n```\nfind . \\( -name \"*.txt\" -o -name \"*.pdf\" \\)\n\n或\n\nfind . -name \"*.txt\" -o -name \"*.pdf\" \n```\n\n匹配文件路径或者文件\n\n```\nfind /usr/ -path \"*local*\"\n```\n\n基于正则表达式匹配文件路径\n\n```\nfind . -regex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n\n同上，但忽略大小写\n\n```\nfind . -iregex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n\n- 否定参数\n\n找出/home下不是以.txt结尾的文件\n\n```\nfind /home ! -name \"*.txt\"\n```\n\n- 根据文件类型进行搜索\n\n```\nfind . -type 类型参数\n```\n\n类型参数列表：\n\n- **f** 普通文件\n- **l** 符号连接\n- **d** 目录\n- **c** 字符设备\n- **b** 块设备\n- **s** 套接字\n- **p** Fifo\n\n- 基于目录深度搜索\n\n向下最大深度限制为3\n\n```\nfind . -maxdepth 3 -type f\n```\n\n搜索出深度距离当前目录至少2个子目录的所有文件\n\n```\nfind . -mindepth 2 -type f\n```\n\n- 根据文件时间戳进行搜索\n\n```\nfind . -type f 时间戳\n```\n\nUNIX/Linux文件系统每个文件都有三种时间戳：\n\n- **访问时间**（-atime/天，-amin/分钟）：用户最近一次访问时间。\n- **修改时间**（-mtime/天，-mmin/分钟）：文件最后一次修改时间。\n- **变化时间**（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。\n\n搜索最近七天内被访问过的所有文件\n\n```\nfind . -type f -atime -7\n```\n\n搜索恰好在七天前被访问过的所有文件\n\n```\nfind . -type f -atime 7\n```\n\n搜索超过七天内被访问过的所有文件\n\n```\nfind . -type f -atime +7\n```\n\n搜索访问时间超过10分钟的所有文件\n\n```\nfind . -type f -amin +10\n```\n\n找出比[file](http://man.linuxde.net/file).log修改时间更长的所有文件\n\n```\nfind . -type f -newer file.log\n```\n\n- 根据文件大小进行匹配\n\n```\nfind . -type f -size 文件大小单元\n```\n\n文件大小单元：\n\n- **b** —— 块（512字节）\n- **c** —— 字节\n- **w** —— 字（2字节）\n- **k** —— 千字节\n- **M** —— 兆字节\n- **G** —— 吉字节\n\n搜索大于10KB的文件\n\n```\nfind . -type f -size +10k\n```\n\n搜索小于10KB的文件\n\n```\nfind . -type f -size -10k\n```\n\n搜索等于10KB的文件\n\n```\nfind . -type f -size 10k\n```\n\n- 删除匹配文件\n\n删除当前目录下所有.txt文件\n\n```\nfind . -type f -name \"*.txt\" -delete\n```\n\n- 根据文件权限/所有权进行匹配\n\n当前目录下搜索出权限为777的文件\n\n```\nfind . -type f -perm 777\n```\n\n找出当前目录下权限不是644的[php](http://man.linuxde.net/php)文件\n\n```\nfind . -type f -name \"*.php\" ! -perm 644\n```\n\n找出当前目录用户tom拥有的所有文件\n\n```\nfind . -type f -user tom\n```\n\n找出当前目录用户组sunk拥有的所有文件\n\n```\nfind . -type f -group sunk\n```\n\n- 借助`-exec`选项与其他命令结合使用\n\n找出当前目录下所有root的文件，并把所有权更改为用户tom\n\n```\nfind .-type f -user root -exec chown tom {} \\;\n```\n\n上例中，**{}** 用于与**-exec**选项结合使用来匹配所有文件，然后会被替换为相应的文件名。\n\n找出自己家目录下所有的.txt文件并删除\n\n```\nfind $HOME/. -name \"*.txt\" -ok rm {} \\;\n```\n\n上例中，**-ok**和**-exec**行为一样，不过它会给出提示，是否执行相应的操作。\n\n查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中\n\n```\nfind . -type f -name \"*.txt\" -exec cat {} \\;> all.txt\n```\n\n将30天前的.log文件移动到old目录中\n\n```\nfind . -type f -mtime +30 -name \"*.log\" -exec cp {} old \\;\n```\n\n找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来\n\n```\nfind . -type f -name \"*.txt\" -exec printf \"File: %s\\n\" {} \\;\n```\n\n因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令\n\n```\n-exec ./text.sh {} \\;\n```\n\n- 搜索但跳出指定的目录\n\n查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk\n\n```\nfind . -path \"./sk\" -prune -o -name \"*.txt\" -print\n```\n\n- find其他技巧收集\n\n要列出所有长度为零的文件\n\n```\nfind . -empty\n```\n\n# && 和&的区别\n\na & b 表示a和b同时运行\na && b表示 a运行成功后再运行b\n\n # sh,source,exct的区别\n\nhttps://www.jianshu.com/p/dd7956aec097\n\n","source":"_posts/0_代码相关/shell.md","raw":"---\ntitle: shell\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n常用shell命令\n\n<!-- more -->\n\n\n[TOC]\n\n# /etc/profile、/etc/bashrc、~/.bash_profile、~/.bashrc\n\n## /etc/profile\n\n此文件为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行。并从 /etc/profile.d 目录的配置文件中收集 shell 的设置。如果你有对 /etc/profile 有修改的话必须得 source 一下你的修改才会生效，此修改对每个用户都生效。\n\n## /etc/bashrc（ubuntu为 /etc/bash.bashrc）\n\n为每一个运行 bash shell 的用户执行此文件。当 bash shell 被打开时，该文件被读取。如果你想对所有的使用 bash 的用户修改某个配置并在以后打开的 bash 都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个 bash 即可生效。\nUbuntu没有此文件，与之对应的是/ect/bash.bashrc。\n\n## ~/.bash_profile（ubuntu为 ~/.profile）\n\n每个用户都可使用该文件输入专用于自己使用的 shell 信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量，执行用户的~/ .bashrc 文件。 此文件类似于 /etc/profile，也是需要需要 source 才会生效，/etc/profile 对所有用户生效，~/.bash_profile 只对当前用户生效。~/.profile(由Bourne Shell和Korn Shell使用)和.login(由C Shell使用)两个文件是.bash_profile的同义词，目的是为了兼容其它Shell。\n\n# Linux的Shell种类\n\n常见的有：\n\n- Bourne Shell（/usr/bin/sh或/bin/sh）、\n  Bourne Again Shell（/bin/bash）、\n  C Shell（/usr/bin/csh）、\n  K Shell（/usr/bin/ksh）、\n  Shell for Root（/sbin/sh）等等。\n\n- 不同的Shell语言的语法有所不同，所以不能交换使用。每种Shell都有其特色之处，基本上，掌握其中任何一种 就足够了。在本文中，我们关注的重点是Bash，也就是Bourne Again Shell，由于易用和免费，Bash在日常工作中被广泛使用；同时，Bash也是大多数Linux系统默认的Shell。\n- 在一般情况下，人们并不区分 Bourne Shell和Bourne Again Shell，所以，在下面的文字中，我们可以看到#!/bin/sh，它同样也可以改为#!/bin/bash。(定义使用哪种sh解释器来解释脚本)\n\n# 如果不存在则创建文件夹\n\n```shell\nif [ ! -d \"$build_dir\" ]; then\n        mkdir $build_dir\nfi\n```\n\n\n\n# df\n\n```shell\ndf -hl 查看磁盘剩余空间\ndf -h 查看每个根路径的分区大小\n```\n\n# alias 外部传参\n\n```bash\nalias cd='func() { cd $1; ls;}; func' #定义一个函数func（）{......}；func; {}中间是要alias的执行的命令，多个命令用；隔开，最后；结尾\n\n\n/notebook/download\nalias dl='func() { cp $1 /notebook/download/; }; func'\nalias push='func() { cd /notebook/download/; git add . ; git commit -m \"update\"; git push origin master; }; func'\n```\n\n\n\n# du\n\n##查看磁盘大小\n\n```shell\n du -s * | sort -nr  #查看大小并按大小排序\ndu -h ftp #查看指定文件夹下所有文件大小（包括子文件夹）\ndu -sh [目录名] 返回该目录的大小\ndu -sm [文件夹] 返回该文件夹总M数\n```\n\n\n\n#grep\n\n```\ngrep 'hi' test.txt #显示包含hi的行\n```\n#find\n\n## 遍历符合条件的文件\n\n```shell\nfor f in `find . -name \"正则匹配\" ` #.是路径   双引号和飘号要注意\ndo\n\techo $f\ndone\n```\n\n\n\n##对于多个文件执行操作\n\n```\nfind . -name \"*.sh\" | xargs wc -l\n```\n## 删除符合条件的多个文件\n\n```shell\nfind . -type f -name \"${file_name}_*\" | xargs rm -f\n```\n\n\n\n## 统计python文件总行数\n\n```\n find . -name \"*.py\" | xargs wc -l >> temp.txt\n```\n\n# shellcheck检查sh文件\n\n```\nfind . -name \"*.sh\" | xargs shellcheck >> temp2.txt\ngrep 'In ./'\n```\n\n# 获取当前路径\n\n```bash\nCUR_DIR=$(cd $(dirname $0); pwd) #但是用source调用脚本时$0的值为\"-bash\"，词命令无法获取地址\nCUR_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n```\n\n#hive\n## 获取hive表最新分区\n\n```bash\nnewest_dt=$(hive -e \"show partitions cf_model.htq_hztz_xdtz_brs_s;\"|tail -1)\nnewest_dt=${newest_dt:3}\n```\n\n# sed\n\n## 插入行\n\n```shell\nsed -i '1i\\要添加的内容'  yourfile\n```\n\n## 删除指定行\n\n```shell\nsed -i ‘1d’ filename\n```\n\n## 替换指定字符\n\n```shell\nsed -i 's/foo/bar/g' myfile #-i会修改代码\n```\n\n## 查看指定行\n\n```shell\nsed -n '5,10p' filename 这样你就可以只查看文件的第5行到第10行。\n```\n\n\n\n# split\n\n```shell\nsplit -l 2000 urls.txt -d -a 2 url_\n解释一下：\n-l：按行分割，上面表示将urls.txt文件按2000行一个文件分割为多个文件\n-d：添加数字后缀，比如上图中的00，01，02\n-a 2：表示用两位数据来顺序命名\nurl_：看上图就应该明白了，用来定义分割后的文件名前面的部分。\n\n```\n\n# conda管理环境\n\n```shell\nconda info -envs #列出所有环境\nsource activate 环境名\nsource deactivate #回到默认环境\n```\n\n<https://blog.csdn.net/cxk207017/article/details/89598139>\n\nconda测试指南\n在开始这个conda测试之前，你应该已经下载并安装好了Anaconda或者Miniconda\n注意：在安装之后，你应该关闭并重新打开windows命令行。\n\n一、Conda测试过程：\n使用conda。首先我们将要确认你已经安装好了conda\n配置环境。下一步我们将通过创建几个环境来展示conda的环境管理功能。使你更加轻松的了解关于环境的一切。我们将学习如何确认你在哪个环境中，以及如何做复制一个环境作为备份。\n测试python。然后我们将检查哪一个版本的python可以被安装，以及安装另一个版本的python，还有在两个版本的python之间的切换。\n检查包。我们将1)罗列出安装在我们电脑上的包，2)浏览可用的包，3)使用conda install命令来来安装以及移除一些包。对于一些不能使用conda安装的包，我们将4)在Anaconda.org网站上搜索。对于那些在其它位置的包，我们将5)使用pip命令来实现安装。我们还会安装一个可以免费试用30天的商业包IOPro\n移除包、环境以及conda.我们将以学习删除你的包、环境以及conda来结束这次测试。\n二、完整过程\n提示：在任何时候你可以通过在命令后边跟上--help来获得该命令的完整文档。例如，你可以通过如下的命令来学习conda的update命令。\n\nconda update --help\n\\1. 管理conda：\nConda既是一个包管理器又是一个环境管理器。你肯定知道包管理器，它可以帮你发现和查看包。但是如果当我们想要安装一个包，但是这个包只支持跟我们目前使用的python不同的版本时。你只需要几行命令，就可以搭建起一个可以运行另外python版本的环境。，这就是conda环境管理器的强大功能。\n提示：无论你使用Linux、OS X或者Windows命令行工具，在你的命令行终端conda指令都是一样的，除非有特别说明。\n\n检查conda已经被安装。\n为了确保你已经在正确的位置安装好了conda，让我们来检查你是否已经成功安装好了Anaconda。在你的命令行终端窗口，输入如下代码：\n\nconda --version\nConda会返回你安装Anaconda软件的版本。\n提示：如果你看到了错误信息，检查你是否在安装过程中选择了仅为当前用户按安装，并且是否以同样的账户来操作。确保用同样的账户登录安装了之后重新打开命令行终端窗口。\n\n升级当前版本的conda\n接下来，让我们通过使用如下update命令来升级conda：\n\nconda update conda\nconda将会比较新旧版本并且告诉你哪一个版本的conda可以被安装。它也会通知你伴随这次升级其它包同时升级的情况。\n如果新版本的conda可用，它会提示你输入y进行升级.\n\nproceed ([y]/n)? y\nconda更新到最新版后，我们将进入下一个主题。\n\n##  管理环境\n\n\n现在我们通过创建一些环境来展示conda的环境操作，然后移动它们。\n\n###创建并激活一个环境\n使用conda create命令，后边跟上你希望用来称呼它的任何名字：\n\n> conda create --n py3 python=3\n>\n> 这条命令将会给biopython包创建一个新的环境，位置在/envs/snowflakes\n> 小技巧：很多跟在--后边常用的命令选项，可以被略写为一个短线加命令首字母。所以--name选项和-n的作用是一样的。通过conda -h或conda –-help来看大量的缩写。\n\n###激活这个新环境\n\nLinux，OS X: source activate snowflakes\nWindows：activate snowflake`\n小技巧：新的开发环境会被默认安装在你conda目录下的envs文件目录下。你可以指定一个其他的路径；去通过conda create -h了解更多信息吧。\n小技巧：如果我们没有指定安装python的版本，donda会安装我们最初安装conda时所装的那个版本的python。\n\n创建第二个环境\n这次让我们来创建并命名一个新环境，然后安装另一个版本的python以及两个包 Astroid 和 Babel。\n\nconda create -n bunnies python=3 Astroid Babel\n这将创建第二个基于python3 ，包含Astroid 和 Babel 包，称为bunnies的新环境，在/envs/bunnies文件夹里。\n小技巧：在此同时安装你想在这个环境中运行的包，\n小提示：在你创建环境的同时安装好所有你想要的包，在后来依次安装可能会导致依赖性问题（貌似是，不太懂这个术语怎么翻）。\n小技巧：你可以在conda create命令后边附加跟多的条件，键入conda create –h 查看更多细节。\n\n列出所有的环境\n现在让我们来检查一下截至目前你所安装的环境，使用conda environment info 命令来查看它:\n\n```shell\nconda info --envs\n```\n\n\n你将会看到如下的环境列表：\n\nconda environments:\n\n snowflakes          * /home/username/miniconda/envs/snowflakes\n\n bunnies               /home/username/miniconda/envs/bunnies\n\n root                  /home/username/miniconda\n确认当前环境\n你现在处于哪个环境中呢？snowflakes还是bunnies？想要确定它，输入下面的代码：\n\nconda info -envis\nconda将会显示所有环境的列表，当前环境会显示在一个括号内。\n\n(snowflakes)  \n注意：conda有时也会在目前活动的环境前边加上*号。\n\n切换到另一个环境(activate/deactivate)\n为了切换到另一个环境，键入下列命令以及所需环境的名字。\n\nLinux，OS X: source activate snowflakes\nWindows：activate snowflakes\n如果要从你当前工作环境的路径切换到系统根目录时，键入：\n\nLinux，OS X: source deactivate\nWindows: deactivate\n当该环境不再活动时，将不再被提前显示。\n\n复制一个环境\n通过克隆来复制一个环境。这儿将通过克隆snowfllakes来创建一个称为flowers的副本。\n\nconda create -n flowers --clone snowflakes\n通过conda info –-envs来检查环境\n你现在应该可以看到一个环境列表：flowers, bunnies, and snowflakes.\n\n删除一个环境\n如果你不想要这个名为flowers的环境，就按照如下方法移除该环境：\n\nconda remove -n flowers --all\n为了确定这个名为flowers的环境已经被移除，输入以下命令：\n\nconda info -e\nflowers 已经不再在你的环境列表里了，所以我们知道它被删除了。\n\n学习更多关于环境的知识\n如果你想学习更多关于conda的命令，就在该命令后边跟上 -h\n\nconda remove -h\n\\3. 管理Python\nconda对Python的管理跟其他包的管理类似，所以可以很轻松地管理和升级多个安装。\n\n检查python版本\n首先让我们检查那个版本的python可以被安装：\n\nconda search --full --name python\n你可以使用conda search python来看到所有名字中含有“python”的包或者加上--full --name命令选项来列出完全与“python”匹配的包。\n\n安装一个不同版本的python\n现在我们假设你需要python3来编译程序，但是你不想覆盖掉你的python2.7来升级，你可以创建并激活一个名为snakes的环境，并通过下面的命令来安装最新版本的python3：\n\nconda create -n snakes python=３\n·Linux，OS X：source activate snakes\n·Windows： activate snakes\n小提示：给环境取一个很形象的名字，例如“Python3”是很明智的，但是并不有趣。\n\n确定环境添加成功\n为了确保snakes环境已经被安装了，键入如下命令：\n\nconda info -e\nconda会显示环境列表，当前活动的环境会被括号括起来（snakes）\n\n检查新的环境中的python版本\n确保snakes环境中运行的是python3：\n\npython --version\n使用不同版本的python\n为了使用不同版本的python，你可以切换环境，通过简单的激活它就可以，让我们看看如何返回默认2.7\n\n·Linux，OS X: source activate snowflakes\n·Windows：activate snowflakes\n检查python版本：\n确保snowflakes环境中仍然在运行你安装conda时安装的那个版本的python。\n\npython --version\n注销该环境\n当你完成了在snowflakes环境中的工作室，注销掉该环境并转换你的路径到先前的状态：\n\n·Linux，OS X：source deactivate\n·Windows：deactivate\n\\4. 管理包\n现在让我们来演示包。我们已经安装了一些包（Astroid，Babel和一些特定版本的python），当我们创建一个新环境时。我们检查我们已经安装了那些包，检查哪些是可用的，寻找特定的包并安装它。接下来我们在Anconda.org仓库中查找并安装一些指定的包，用conda来完成更多pip可以实现的安装，并安装一个商业包。\n\n查看该环境中包和其版本的列表：\n使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。在你的终端窗口中输入：\n\n> conda list\n> 使用conda命令查看可用包的列表\n> 一个可用conda安装的包的列表，按照Python版本分类，可以从这个地址获得：\n> http://docs.continuum.io/anaconda/pkg-docs.html\n\n查找一个包\n首先让我们来检查我们需要的这个包是否可以通过conda来安装：\n\nconda search beautifulsoup4\n它展示了这个包，所以我们知道它是可用的。\n\n安装一个新包\n我们将在当前环境中安装这个Beautiful Soup包，使用conda命令如下；\nconda install --name bunnies beautifulsoup4\n提示：你必须告诉conda你要安装环境的名字（-n bunies）否则它将会被安装到当前环境中。\n现在激活bunnies环境，并且用conda list来显示哪些程序被安装了。\n\n·Linux，OS X：source activate bunnies\n·Windows：activate bunnies\n所有的平台：\nconda list\n从Anaconda.org安装一个包\n如果一个包不能使用conda安装，我们接下来将在Anaconda.org网站查找。Anaconda.org向公开和私有包仓库提供包管理服务。Anaconda.org是一个连续分析产品。\n提示：你在Anaconda.org下载东西的时候不强制要求注册。\n为了从Anaconda.org下载到当前的环境中，我们需要通过指定Anaconda.org为一个特定通道，通过输入这个包的完整路径来实现。\n在浏览器中，去 http://anaconda.org 网站。我们查找一个叫“bottleneck”的包，所以在左上角的叫“Search Anaconda Cloud”搜索框中输入“bottleneck”并点击search按钮。\nAnaconda.org上会有超过一打的bottleneck包的版本可用，但是我们想要那个被下载最频繁的版本。所以你可以通过下载量来排序，通过点击Download栏。\n点击包的名字来选择最常被下载的包。它会链接到Anaconda.org详情页显示下载的具体命令：\n\nconda install --channel https：//conda .anaconda.ort/pandas bottleneck\n检查被下载的包\nconda list\n通过pip命令来安装包\n对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip（“pip install packages”的简称）来安装包。\n提示： pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包，和vice versa（此处不会翻译）。pip和conda都集成在Anaconda或miniconda里边。\n\n我们激活我们想放置程序的环境，然后通过pip安装一个叫“See”的程序。\n\n·Linux，OS X： source activate bunnies\n·Windows：activate bunnies\n所有平台：\npip install see\n检查pip安装\n检查See是否被安装：\n\nconda list\n安装商业包\n安装商业包与你安装其他的包的过程异常。举个例子，让我们安装并删除一个更新的商业包的免费试用 IOPro，可以加速你的python处理速度：\n\nconda install iopro\n提示：除了学术使用，该版本在30天后试用期满\n\n你现在可以安装以及检查你想用conda安装的任何包，无论使用conda命令、从Anaconda.org下载或者使用pip安装，无论开源软件还是商业包。\n\n\\5. 移除包、环境、或者conda\n如果你愿意的话。让我们通过移除一个或多个试验包、环境以及conda来结束这次测试指导。\n\n移除包\n假设你决定不再使用商业包IOPro。你可以在bunnies环境中移除它。\n\nconda remove -n bunnies iopro\n确认包已经被移除\n使用conda list命令来确认IOPro已经被移除了\n\nconda list\n移除环境\n我们不再需要snakes环境了，所以输入以下命令：\nconda remove -n snakes --all\n\n确认环境被移除\n为了确认snakes环境已经被移除了，输入以下命令：\n\n conda info --envis\nsnakes不再显示在环境列表里了，所以我们知道它已经被删除了\n\n删除conda\nLinux，OS X：\n移除Anaconda 或 Miniconda 安装文件夹\nrm -rf ~/miniconda OR  rm -rf ~/anaconda\nWindows：\n去控制面板，点击“添加或删除程序”，选择“Python2.7（Anaconda）”或“Python2.7（Miniconda）”并点击删除程序。\n\n### 5K服务器环境安装实例\n\n> conda create -n py3 python=3.6   #创建叫做py3的环境，python版本是3.6\n\n> conda info -e #查看所有环境\n> \\# To activate this environment, use:\n> \\# > source activate py3\n> \\# To deactivate an active environment, use:\n> \\# > source deactivate\n\n> activate py3 #激活相应环境\n>\n> conda install numpy #安装包方式一\n>\n> conda install scikit-learn\n>\n> pip install numoy #安装包方式二\n\n# find\n\n列出当前目录及子目录下所有文件和文件夹\n\n```\nfind .\n```\n\n在`/home`目录下查找以.txt结尾的文件名\n\n```\nfind /home -name \"*.txt\"\n```\n\n同上，但忽略大小写\n\n```\nfind /home -iname \"*.txt\"\n```\n\n当前目录及子目录下查找所有以.txt和.pdf结尾的文件\n\n```\nfind . \\( -name \"*.txt\" -o -name \"*.pdf\" \\)\n\n或\n\nfind . -name \"*.txt\" -o -name \"*.pdf\" \n```\n\n匹配文件路径或者文件\n\n```\nfind /usr/ -path \"*local*\"\n```\n\n基于正则表达式匹配文件路径\n\n```\nfind . -regex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n\n同上，但忽略大小写\n\n```\nfind . -iregex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n\n- 否定参数\n\n找出/home下不是以.txt结尾的文件\n\n```\nfind /home ! -name \"*.txt\"\n```\n\n- 根据文件类型进行搜索\n\n```\nfind . -type 类型参数\n```\n\n类型参数列表：\n\n- **f** 普通文件\n- **l** 符号连接\n- **d** 目录\n- **c** 字符设备\n- **b** 块设备\n- **s** 套接字\n- **p** Fifo\n\n- 基于目录深度搜索\n\n向下最大深度限制为3\n\n```\nfind . -maxdepth 3 -type f\n```\n\n搜索出深度距离当前目录至少2个子目录的所有文件\n\n```\nfind . -mindepth 2 -type f\n```\n\n- 根据文件时间戳进行搜索\n\n```\nfind . -type f 时间戳\n```\n\nUNIX/Linux文件系统每个文件都有三种时间戳：\n\n- **访问时间**（-atime/天，-amin/分钟）：用户最近一次访问时间。\n- **修改时间**（-mtime/天，-mmin/分钟）：文件最后一次修改时间。\n- **变化时间**（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。\n\n搜索最近七天内被访问过的所有文件\n\n```\nfind . -type f -atime -7\n```\n\n搜索恰好在七天前被访问过的所有文件\n\n```\nfind . -type f -atime 7\n```\n\n搜索超过七天内被访问过的所有文件\n\n```\nfind . -type f -atime +7\n```\n\n搜索访问时间超过10分钟的所有文件\n\n```\nfind . -type f -amin +10\n```\n\n找出比[file](http://man.linuxde.net/file).log修改时间更长的所有文件\n\n```\nfind . -type f -newer file.log\n```\n\n- 根据文件大小进行匹配\n\n```\nfind . -type f -size 文件大小单元\n```\n\n文件大小单元：\n\n- **b** —— 块（512字节）\n- **c** —— 字节\n- **w** —— 字（2字节）\n- **k** —— 千字节\n- **M** —— 兆字节\n- **G** —— 吉字节\n\n搜索大于10KB的文件\n\n```\nfind . -type f -size +10k\n```\n\n搜索小于10KB的文件\n\n```\nfind . -type f -size -10k\n```\n\n搜索等于10KB的文件\n\n```\nfind . -type f -size 10k\n```\n\n- 删除匹配文件\n\n删除当前目录下所有.txt文件\n\n```\nfind . -type f -name \"*.txt\" -delete\n```\n\n- 根据文件权限/所有权进行匹配\n\n当前目录下搜索出权限为777的文件\n\n```\nfind . -type f -perm 777\n```\n\n找出当前目录下权限不是644的[php](http://man.linuxde.net/php)文件\n\n```\nfind . -type f -name \"*.php\" ! -perm 644\n```\n\n找出当前目录用户tom拥有的所有文件\n\n```\nfind . -type f -user tom\n```\n\n找出当前目录用户组sunk拥有的所有文件\n\n```\nfind . -type f -group sunk\n```\n\n- 借助`-exec`选项与其他命令结合使用\n\n找出当前目录下所有root的文件，并把所有权更改为用户tom\n\n```\nfind .-type f -user root -exec chown tom {} \\;\n```\n\n上例中，**{}** 用于与**-exec**选项结合使用来匹配所有文件，然后会被替换为相应的文件名。\n\n找出自己家目录下所有的.txt文件并删除\n\n```\nfind $HOME/. -name \"*.txt\" -ok rm {} \\;\n```\n\n上例中，**-ok**和**-exec**行为一样，不过它会给出提示，是否执行相应的操作。\n\n查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中\n\n```\nfind . -type f -name \"*.txt\" -exec cat {} \\;> all.txt\n```\n\n将30天前的.log文件移动到old目录中\n\n```\nfind . -type f -mtime +30 -name \"*.log\" -exec cp {} old \\;\n```\n\n找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来\n\n```\nfind . -type f -name \"*.txt\" -exec printf \"File: %s\\n\" {} \\;\n```\n\n因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令\n\n```\n-exec ./text.sh {} \\;\n```\n\n- 搜索但跳出指定的目录\n\n查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk\n\n```\nfind . -path \"./sk\" -prune -o -name \"*.txt\" -print\n```\n\n- find其他技巧收集\n\n要列出所有长度为零的文件\n\n```\nfind . -empty\n```\n\n# && 和&的区别\n\na & b 表示a和b同时运行\na && b表示 a运行成功后再运行b\n\n # sh,source,exct的区别\n\nhttps://www.jianshu.com/p/dd7956aec097\n\n","slug":"0_代码相关/shell","published":1,"updated":"2022-03-01T03:53:24.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly5100428s32bukx42x8","content":"<p>常用shell命令</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"etc-profile、-etc-bashrc、-bash-profile、-bashrc\"><a href=\"#etc-profile、-etc-bashrc、-bash-profile、-bashrc\" class=\"headerlink\" title=\"/etc/profile、/etc/bashrc、~/.bash_profile、~/.bashrc\"></a>/etc/profile、/etc/bashrc、~/.bash_profile、~/.bashrc</h1><h2 id=\"etc-profile\"><a href=\"#etc-profile\" class=\"headerlink\" title=\"/etc/profile\"></a>/etc/profile</h2><p>此文件为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行。并从 /etc/profile.d 目录的配置文件中收集 shell 的设置。如果你有对 /etc/profile 有修改的话必须得 source 一下你的修改才会生效，此修改对每个用户都生效。</p>\n<h2 id=\"etc-bashrc（ubuntu为-etc-bash-bashrc）\"><a href=\"#etc-bashrc（ubuntu为-etc-bash-bashrc）\" class=\"headerlink\" title=\"/etc/bashrc（ubuntu为 /etc/bash.bashrc）\"></a>/etc/bashrc（ubuntu为 /etc/bash.bashrc）</h2><p>为每一个运行 bash shell 的用户执行此文件。当 bash shell 被打开时，该文件被读取。如果你想对所有的使用 bash 的用户修改某个配置并在以后打开的 bash 都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个 bash 即可生效。<br>Ubuntu没有此文件，与之对应的是/ect/bash.bashrc。</p>\n<h2 id=\"bash-profile（ubuntu为-profile）\"><a href=\"#bash-profile（ubuntu为-profile）\" class=\"headerlink\" title=\"~/.bash_profile（ubuntu为 ~/.profile）\"></a>~/.bash_profile（ubuntu为 ~/.profile）</h2><p>每个用户都可使用该文件输入专用于自己使用的 shell 信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量，执行用户的~/ .bashrc 文件。 此文件类似于 /etc/profile，也是需要需要 source 才会生效，/etc/profile 对所有用户生效，~/.bash_profile 只对当前用户生效。~/.profile(由Bourne Shell和Korn Shell使用)和.login(由C Shell使用)两个文件是.bash_profile的同义词，目的是为了兼容其它Shell。</p>\n<h1 id=\"Linux的Shell种类\"><a href=\"#Linux的Shell种类\" class=\"headerlink\" title=\"Linux的Shell种类\"></a>Linux的Shell种类</h1><p>常见的有：</p>\n<ul>\n<li><p>Bourne Shell（/usr/bin/sh或/bin/sh）、<br>Bourne Again Shell（/bin/bash）、<br>C Shell（/usr/bin/csh）、<br>K Shell（/usr/bin/ksh）、<br>Shell for Root（/sbin/sh）等等。</p>\n</li>\n<li><p>不同的Shell语言的语法有所不同，所以不能交换使用。每种Shell都有其特色之处，基本上，掌握其中任何一种 就足够了。在本文中，我们关注的重点是Bash，也就是Bourne Again Shell，由于易用和免费，Bash在日常工作中被广泛使用；同时，Bash也是大多数Linux系统默认的Shell。</p>\n</li>\n<li>在一般情况下，人们并不区分 Bourne Shell和Bourne Again Shell，所以，在下面的文字中，我们可以看到#!/bin/sh，它同样也可以改为#!/bin/bash。(定义使用哪种sh解释器来解释脚本)</li>\n</ul>\n<h1 id=\"如果不存在则创建文件夹\"><a href=\"#如果不存在则创建文件夹\" class=\"headerlink\" title=\"如果不存在则创建文件夹\"></a>如果不存在则创建文件夹</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ ! -d &quot;$build_dir&quot; ]; then</span><br><span class=\"line\">        mkdir $build_dir</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h1 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -hl 查看磁盘剩余空间</span><br><span class=\"line\">df -h 查看每个根路径的分区大小</span><br></pre></td></tr></table></figure>\n<h1 id=\"alias-外部传参\"><a href=\"#alias-外部传参\" class=\"headerlink\" title=\"alias 外部传参\"></a>alias 外部传参</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">cd</span>=<span class=\"string\">&#x27;func() &#123; cd $1; ls;&#125;; func&#x27;</span> <span class=\"comment\">#定义一个函数func（）&#123;......&#125;；func; &#123;&#125;中间是要alias的执行的命令，多个命令用；隔开，最后；结尾</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/notebook/download</span><br><span class=\"line\"><span class=\"built_in\">alias</span> dl=<span class=\"string\">&#x27;func() &#123; cp $1 /notebook/download/; &#125;; func&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> push=<span class=\"string\">&#x27;func() &#123; cd /notebook/download/; git add . ; git commit -m &quot;update&quot;; git push origin master; &#125;; func&#x27;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h1><h2 id=\"查看磁盘大小\"><a href=\"#查看磁盘大小\" class=\"headerlink\" title=\"查看磁盘大小\"></a>查看磁盘大小</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> du -s * | sort -nr  #查看大小并按大小排序</span><br><span class=\"line\">du -h ftp #查看指定文件夹下所有文件大小（包括子文件夹）</span><br><span class=\"line\">du -sh [目录名] 返回该目录的大小</span><br><span class=\"line\">du -sm [文件夹] 返回该文件夹总M数</span><br></pre></td></tr></table></figure>\n<h1 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;hi&#x27; test.txt #显示包含hi的行</span><br></pre></td></tr></table></figure>\n<h1 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h1><h2 id=\"遍历符合条件的文件\"><a href=\"#遍历符合条件的文件\" class=\"headerlink\" title=\"遍历符合条件的文件\"></a>遍历符合条件的文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for f in `find . -name &quot;正则匹配&quot; ` #.是路径   双引号和飘号要注意</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $f</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h2 id=\"对于多个文件执行操作\"><a href=\"#对于多个文件执行操作\" class=\"headerlink\" title=\"对于多个文件执行操作\"></a>对于多个文件执行操作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.sh&quot; | xargs wc -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除符合条件的多个文件\"><a href=\"#删除符合条件的多个文件\" class=\"headerlink\" title=\"删除符合条件的多个文件\"></a>删除符合条件的多个文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;$&#123;file_name&#125;_*&quot; | xargs rm -f</span><br></pre></td></tr></table></figure>\n<h2 id=\"统计python文件总行数\"><a href=\"#统计python文件总行数\" class=\"headerlink\" title=\"统计python文件总行数\"></a>统计python文件总行数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.py&quot; | xargs wc -l &gt;&gt; temp.txt</span><br></pre></td></tr></table></figure>\n<h1 id=\"shellcheck检查sh文件\"><a href=\"#shellcheck检查sh文件\" class=\"headerlink\" title=\"shellcheck检查sh文件\"></a>shellcheck检查sh文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.sh&quot; | xargs shellcheck &gt;&gt; temp2.txt</span><br><span class=\"line\">grep &#x27;In ./&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"获取当前路径\"><a href=\"#获取当前路径\" class=\"headerlink\" title=\"获取当前路径\"></a>获取当前路径</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CUR_DIR=$(<span class=\"built_in\">cd</span> $(dirname <span class=\"variable\">$0</span>); <span class=\"built_in\">pwd</span>) <span class=\"comment\">#但是用source调用脚本时$0的值为&quot;-bash&quot;，词命令无法获取地址</span></span><br><span class=\"line\">CUR_DIR=<span class=\"string\">&quot;<span class=\"subst\">$( cd <span class=\"string\">&quot;<span class=\"subst\">$( dirname <span class=\"string\">&quot;<span class=\"variable\">$&#123;BASH_SOURCE[0]&#125;</span>&quot;</span> )</span>&quot;</span> &amp;&amp; pwd )</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"hive\"><a href=\"#hive\" class=\"headerlink\" title=\"hive\"></a>hive</h1><h2 id=\"获取hive表最新分区\"><a href=\"#获取hive表最新分区\" class=\"headerlink\" title=\"获取hive表最新分区\"></a>获取hive表最新分区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newest_dt=$(hive -e <span class=\"string\">&quot;show partitions cf_model.htq_hztz_xdtz_brs_s;&quot;</span>|tail -1)</span><br><span class=\"line\">newest_dt=<span class=\"variable\">$&#123;newest_dt:3&#125;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h1><h2 id=\"插入行\"><a href=\"#插入行\" class=\"headerlink\" title=\"插入行\"></a>插入行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;1i\\要添加的内容&#x27;  yourfile</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除指定行\"><a href=\"#删除指定行\" class=\"headerlink\" title=\"删除指定行\"></a>删除指定行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i ‘1d’ filename</span><br></pre></td></tr></table></figure>\n<h2 id=\"替换指定字符\"><a href=\"#替换指定字符\" class=\"headerlink\" title=\"替换指定字符\"></a>替换指定字符</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;s/foo/bar/g&#x27; myfile #-i会修改代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看指定行\"><a href=\"#查看指定行\" class=\"headerlink\" title=\"查看指定行\"></a>查看指定行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -n &#x27;5,10p&#x27; filename 这样你就可以只查看文件的第5行到第10行。</span><br></pre></td></tr></table></figure>\n<h1 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">split -l 2000 urls.txt -d -a 2 url_</span><br><span class=\"line\">解释一下：</span><br><span class=\"line\">-l：按行分割，上面表示将urls.txt文件按2000行一个文件分割为多个文件</span><br><span class=\"line\">-d：添加数字后缀，比如上图中的00，01，02</span><br><span class=\"line\">-a 2：表示用两位数据来顺序命名</span><br><span class=\"line\">url_：看上图就应该明白了，用来定义分割后的文件名前面的部分。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"conda管理环境\"><a href=\"#conda管理环境\" class=\"headerlink\" title=\"conda管理环境\"></a>conda管理环境</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info -envs #列出所有环境</span><br><span class=\"line\">source activate 环境名</span><br><span class=\"line\">source deactivate #回到默认环境</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/cxk207017/article/details/89598139\">https://blog.csdn.net/cxk207017/article/details/89598139</a></p>\n<p>conda测试指南<br>在开始这个conda测试之前，你应该已经下载并安装好了Anaconda或者Miniconda<br>注意：在安装之后，你应该关闭并重新打开windows命令行。</p>\n<p>一、Conda测试过程：<br>使用conda。首先我们将要确认你已经安装好了conda<br>配置环境。下一步我们将通过创建几个环境来展示conda的环境管理功能。使你更加轻松的了解关于环境的一切。我们将学习如何确认你在哪个环境中，以及如何做复制一个环境作为备份。<br>测试python。然后我们将检查哪一个版本的python可以被安装，以及安装另一个版本的python，还有在两个版本的python之间的切换。<br>检查包。我们将1)罗列出安装在我们电脑上的包，2)浏览可用的包，3)使用conda install命令来来安装以及移除一些包。对于一些不能使用conda安装的包，我们将4)在Anaconda.org网站上搜索。对于那些在其它位置的包，我们将5)使用pip命令来实现安装。我们还会安装一个可以免费试用30天的商业包IOPro<br>移除包、环境以及conda.我们将以学习删除你的包、环境以及conda来结束这次测试。<br>二、完整过程<br>提示：在任何时候你可以通过在命令后边跟上—help来获得该命令的完整文档。例如，你可以通过如下的命令来学习conda的update命令。</p>\n<p>conda update —help<br>\\1. 管理conda：<br>Conda既是一个包管理器又是一个环境管理器。你肯定知道包管理器，它可以帮你发现和查看包。但是如果当我们想要安装一个包，但是这个包只支持跟我们目前使用的python不同的版本时。你只需要几行命令，就可以搭建起一个可以运行另外python版本的环境。，这就是conda环境管理器的强大功能。<br>提示：无论你使用Linux、OS X或者Windows命令行工具，在你的命令行终端conda指令都是一样的，除非有特别说明。</p>\n<p>检查conda已经被安装。<br>为了确保你已经在正确的位置安装好了conda，让我们来检查你是否已经成功安装好了Anaconda。在你的命令行终端窗口，输入如下代码：</p>\n<p>conda —version<br>Conda会返回你安装Anaconda软件的版本。<br>提示：如果你看到了错误信息，检查你是否在安装过程中选择了仅为当前用户按安装，并且是否以同样的账户来操作。确保用同样的账户登录安装了之后重新打开命令行终端窗口。</p>\n<p>升级当前版本的conda<br>接下来，让我们通过使用如下update命令来升级conda：</p>\n<p>conda update conda<br>conda将会比较新旧版本并且告诉你哪一个版本的conda可以被安装。它也会通知你伴随这次升级其它包同时升级的情况。<br>如果新版本的conda可用，它会提示你输入y进行升级.</p>\n<p>proceed ([y]/n)? y<br>conda更新到最新版后，我们将进入下一个主题。</p>\n<h2 id=\"管理环境\"><a href=\"#管理环境\" class=\"headerlink\" title=\"管理环境\"></a>管理环境</h2><p>现在我们通过创建一些环境来展示conda的环境操作，然后移动它们。</p>\n<h3 id=\"创建并激活一个环境\"><a href=\"#创建并激活一个环境\" class=\"headerlink\" title=\"创建并激活一个环境\"></a>创建并激活一个环境</h3><p>使用conda create命令，后边跟上你希望用来称呼它的任何名字：</p>\n<blockquote>\n<p>conda create —n py3 python=3</p>\n<p>这条命令将会给biopython包创建一个新的环境，位置在/envs/snowflakes<br>小技巧：很多跟在—后边常用的命令选项，可以被略写为一个短线加命令首字母。所以—name选项和-n的作用是一样的。通过conda -h或conda –-help来看大量的缩写。</p>\n</blockquote>\n<h3 id=\"激活这个新环境\"><a href=\"#激活这个新环境\" class=\"headerlink\" title=\"激活这个新环境\"></a>激活这个新环境</h3><p>Linux，OS X: source activate snowflakes<br>Windows：activate snowflake`<br>小技巧：新的开发环境会被默认安装在你conda目录下的envs文件目录下。你可以指定一个其他的路径；去通过conda create -h了解更多信息吧。<br>小技巧：如果我们没有指定安装python的版本，donda会安装我们最初安装conda时所装的那个版本的python。</p>\n<p>创建第二个环境<br>这次让我们来创建并命名一个新环境，然后安装另一个版本的python以及两个包 Astroid 和 Babel。</p>\n<p>conda create -n bunnies python=3 Astroid Babel<br>这将创建第二个基于python3 ，包含Astroid 和 Babel 包，称为bunnies的新环境，在/envs/bunnies文件夹里。<br>小技巧：在此同时安装你想在这个环境中运行的包，<br>小提示：在你创建环境的同时安装好所有你想要的包，在后来依次安装可能会导致依赖性问题（貌似是，不太懂这个术语怎么翻）。<br>小技巧：你可以在conda create命令后边附加跟多的条件，键入conda create –h 查看更多细节。</p>\n<p>列出所有的环境<br>现在让我们来检查一下截至目前你所安装的环境，使用conda environment info 命令来查看它:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info --envs</span><br></pre></td></tr></table></figure>\n<p>你将会看到如下的环境列表：</p>\n<p>conda environments:</p>\n<p> snowflakes          * /home/username/miniconda/envs/snowflakes</p>\n<p> bunnies               /home/username/miniconda/envs/bunnies</p>\n<p> root                  /home/username/miniconda<br>确认当前环境<br>你现在处于哪个环境中呢？snowflakes还是bunnies？想要确定它，输入下面的代码：</p>\n<p>conda info -envis<br>conda将会显示所有环境的列表，当前环境会显示在一个括号内。</p>\n<p>(snowflakes)<br>注意：conda有时也会在目前活动的环境前边加上*号。</p>\n<p>切换到另一个环境(activate/deactivate)<br>为了切换到另一个环境，键入下列命令以及所需环境的名字。</p>\n<p>Linux，OS X: source activate snowflakes<br>Windows：activate snowflakes<br>如果要从你当前工作环境的路径切换到系统根目录时，键入：</p>\n<p>Linux，OS X: source deactivate<br>Windows: deactivate<br>当该环境不再活动时，将不再被提前显示。</p>\n<p>复制一个环境<br>通过克隆来复制一个环境。这儿将通过克隆snowfllakes来创建一个称为flowers的副本。</p>\n<p>conda create -n flowers —clone snowflakes<br>通过conda info –-envs来检查环境<br>你现在应该可以看到一个环境列表：flowers, bunnies, and snowflakes.</p>\n<p>删除一个环境<br>如果你不想要这个名为flowers的环境，就按照如下方法移除该环境：</p>\n<p>conda remove -n flowers —all<br>为了确定这个名为flowers的环境已经被移除，输入以下命令：</p>\n<p>conda info -e<br>flowers 已经不再在你的环境列表里了，所以我们知道它被删除了。</p>\n<p>学习更多关于环境的知识<br>如果你想学习更多关于conda的命令，就在该命令后边跟上 -h</p>\n<p>conda remove -h<br>\\3. 管理Python<br>conda对Python的管理跟其他包的管理类似，所以可以很轻松地管理和升级多个安装。</p>\n<p>检查python版本<br>首先让我们检查那个版本的python可以被安装：</p>\n<p>conda search —full —name python<br>你可以使用conda search python来看到所有名字中含有“python”的包或者加上—full —name命令选项来列出完全与“python”匹配的包。</p>\n<p>安装一个不同版本的python<br>现在我们假设你需要python3来编译程序，但是你不想覆盖掉你的python2.7来升级，你可以创建并激活一个名为snakes的环境，并通过下面的命令来安装最新版本的python3：</p>\n<p>conda create -n snakes python=３<br>·Linux，OS X：source activate snakes<br>·Windows： activate snakes<br>小提示：给环境取一个很形象的名字，例如“Python3”是很明智的，但是并不有趣。</p>\n<p>确定环境添加成功<br>为了确保snakes环境已经被安装了，键入如下命令：</p>\n<p>conda info -e<br>conda会显示环境列表，当前活动的环境会被括号括起来（snakes）</p>\n<p>检查新的环境中的python版本<br>确保snakes环境中运行的是python3：</p>\n<p>python —version<br>使用不同版本的python<br>为了使用不同版本的python，你可以切换环境，通过简单的激活它就可以，让我们看看如何返回默认2.7</p>\n<p>·Linux，OS X: source activate snowflakes<br>·Windows：activate snowflakes<br>检查python版本：<br>确保snowflakes环境中仍然在运行你安装conda时安装的那个版本的python。</p>\n<p>python —version<br>注销该环境<br>当你完成了在snowflakes环境中的工作室，注销掉该环境并转换你的路径到先前的状态：</p>\n<p>·Linux，OS X：source deactivate<br>·Windows：deactivate<br>\\4. 管理包<br>现在让我们来演示包。我们已经安装了一些包（Astroid，Babel和一些特定版本的python），当我们创建一个新环境时。我们检查我们已经安装了那些包，检查哪些是可用的，寻找特定的包并安装它。接下来我们在Anconda.org仓库中查找并安装一些指定的包，用conda来完成更多pip可以实现的安装，并安装一个商业包。</p>\n<p>查看该环境中包和其版本的列表：<br>使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。在你的终端窗口中输入：</p>\n<blockquote>\n<p>conda list<br>使用conda命令查看可用包的列表<br>一个可用conda安装的包的列表，按照Python版本分类，可以从这个地址获得：<br><a href=\"http://docs.continuum.io/anaconda/pkg-docs.html\">http://docs.continuum.io/anaconda/pkg-docs.html</a></p>\n</blockquote>\n<p>查找一个包<br>首先让我们来检查我们需要的这个包是否可以通过conda来安装：</p>\n<p>conda search beautifulsoup4<br>它展示了这个包，所以我们知道它是可用的。</p>\n<p>安装一个新包<br>我们将在当前环境中安装这个Beautiful Soup包，使用conda命令如下；<br>conda install —name bunnies beautifulsoup4<br>提示：你必须告诉conda你要安装环境的名字（-n bunies）否则它将会被安装到当前环境中。<br>现在激活bunnies环境，并且用conda list来显示哪些程序被安装了。</p>\n<p>·Linux，OS X：source activate bunnies<br>·Windows：activate bunnies<br>所有的平台：<br>conda list<br>从Anaconda.org安装一个包<br>如果一个包不能使用conda安装，我们接下来将在Anaconda.org网站查找。Anaconda.org向公开和私有包仓库提供包管理服务。Anaconda.org是一个连续分析产品。<br>提示：你在Anaconda.org下载东西的时候不强制要求注册。<br>为了从Anaconda.org下载到当前的环境中，我们需要通过指定Anaconda.org为一个特定通道，通过输入这个包的完整路径来实现。<br>在浏览器中，去 <a href=\"http://anaconda.org\">http://anaconda.org</a> 网站。我们查找一个叫“bottleneck”的包，所以在左上角的叫“Search Anaconda Cloud”搜索框中输入“bottleneck”并点击search按钮。<br>Anaconda.org上会有超过一打的bottleneck包的版本可用，但是我们想要那个被下载最频繁的版本。所以你可以通过下载量来排序，通过点击Download栏。<br>点击包的名字来选择最常被下载的包。它会链接到Anaconda.org详情页显示下载的具体命令：</p>\n<p>conda install —channel https：//conda .anaconda.ort/pandas bottleneck<br>检查被下载的包<br>conda list<br>通过pip命令来安装包<br>对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip（“pip install packages”的简称）来安装包。<br>提示： pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包，和vice versa（此处不会翻译）。pip和conda都集成在Anaconda或miniconda里边。</p>\n<p>我们激活我们想放置程序的环境，然后通过pip安装一个叫“See”的程序。</p>\n<p>·Linux，OS X： source activate bunnies<br>·Windows：activate bunnies<br>所有平台：<br>pip install see<br>检查pip安装<br>检查See是否被安装：</p>\n<p>conda list<br>安装商业包<br>安装商业包与你安装其他的包的过程异常。举个例子，让我们安装并删除一个更新的商业包的免费试用 IOPro，可以加速你的python处理速度：</p>\n<p>conda install iopro<br>提示：除了学术使用，该版本在30天后试用期满</p>\n<p>你现在可以安装以及检查你想用conda安装的任何包，无论使用conda命令、从Anaconda.org下载或者使用pip安装，无论开源软件还是商业包。</p>\n<p>\\5. 移除包、环境、或者conda<br>如果你愿意的话。让我们通过移除一个或多个试验包、环境以及conda来结束这次测试指导。</p>\n<p>移除包<br>假设你决定不再使用商业包IOPro。你可以在bunnies环境中移除它。</p>\n<p>conda remove -n bunnies iopro<br>确认包已经被移除<br>使用conda list命令来确认IOPro已经被移除了</p>\n<p>conda list<br>移除环境<br>我们不再需要snakes环境了，所以输入以下命令：<br>conda remove -n snakes —all</p>\n<p>确认环境被移除<br>为了确认snakes环境已经被移除了，输入以下命令：</p>\n<p> conda info —envis<br>snakes不再显示在环境列表里了，所以我们知道它已经被删除了</p>\n<p>删除conda<br>Linux，OS X：<br>移除Anaconda 或 Miniconda 安装文件夹<br>rm -rf ~/miniconda OR  rm -rf ~/anaconda<br>Windows：<br>去控制面板，点击“添加或删除程序”，选择“Python2.7（Anaconda）”或“Python2.7（Miniconda）”并点击删除程序。</p>\n<h3 id=\"5K服务器环境安装实例\"><a href=\"#5K服务器环境安装实例\" class=\"headerlink\" title=\"5K服务器环境安装实例\"></a>5K服务器环境安装实例</h3><blockquote>\n<p>conda create -n py3 python=3.6   #创建叫做py3的环境，python版本是3.6</p>\n<p>conda info -e #查看所有环境<br># To activate this environment, use:<br># &gt; source activate py3<br># To deactivate an active environment, use:<br># &gt; source deactivate</p>\n<p>activate py3 #激活相应环境</p>\n<p>conda install numpy #安装包方式一</p>\n<p>conda install scikit-learn</p>\n<p>pip install numoy #安装包方式二</p>\n</blockquote>\n<h1 id=\"find-1\"><a href=\"#find-1\" class=\"headerlink\" title=\"find\"></a>find</h1><p>列出当前目录及子目录下所有文件和文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find .</span><br></pre></td></tr></table></figure>\n<p>在<code>/home</code>目录下查找以.txt结尾的文件名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>\n<p>同上，但忽略大小写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -iname &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>\n<p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . \\( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \\)</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; </span><br></pre></td></tr></table></figure>\n<p>匹配文件路径或者文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /usr/ -path &quot;*local*&quot;</span><br></pre></td></tr></table></figure>\n<p>基于正则表达式匹配文件路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -regex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br></pre></td></tr></table></figure>\n<p>同上，但忽略大小写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -iregex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>否定参数</li>\n</ul>\n<p>找出/home下不是以.txt结尾的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home ! -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据文件类型进行搜索</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type 类型参数</span><br></pre></td></tr></table></figure>\n<p>类型参数列表：</p>\n<ul>\n<li><strong>f</strong> 普通文件</li>\n<li><strong>l</strong> 符号连接</li>\n<li><strong>d</strong> 目录</li>\n<li><strong>c</strong> 字符设备</li>\n<li><strong>b</strong> 块设备</li>\n<li><strong>s</strong> 套接字</li>\n<li><p><strong>p</strong> Fifo</p>\n</li>\n<li><p>基于目录深度搜索</p>\n</li>\n</ul>\n<p>向下最大深度限制为3</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -maxdepth 3 -type f</span><br></pre></td></tr></table></figure>\n<p>搜索出深度距离当前目录至少2个子目录的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -mindepth 2 -type f</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据文件时间戳进行搜索</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f 时间戳</span><br></pre></td></tr></table></figure>\n<p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>\n<ul>\n<li><strong>访问时间</strong>（-atime/天，-amin/分钟）：用户最近一次访问时间。</li>\n<li><strong>修改时间</strong>（-mtime/天，-mmin/分钟）：文件最后一次修改时间。</li>\n<li><strong>变化时间</strong>（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</li>\n</ul>\n<p>搜索最近七天内被访问过的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -atime -7</span><br></pre></td></tr></table></figure>\n<p>搜索恰好在七天前被访问过的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -atime 7</span><br></pre></td></tr></table></figure>\n<p>搜索超过七天内被访问过的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -atime +7</span><br></pre></td></tr></table></figure>\n<p>搜索访问时间超过10分钟的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -amin +10</span><br></pre></td></tr></table></figure>\n<p>找出比<a href=\"http://man.linuxde.net/file\">file</a>.log修改时间更长的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -newer file.log</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据文件大小进行匹配</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -size 文件大小单元</span><br></pre></td></tr></table></figure>\n<p>文件大小单元：</p>\n<ul>\n<li><strong>b</strong> —— 块（512字节）</li>\n<li><strong>c</strong> —— 字节</li>\n<li><strong>w</strong> —— 字（2字节）</li>\n<li><strong>k</strong> —— 千字节</li>\n<li><strong>M</strong> —— 兆字节</li>\n<li><strong>G</strong> —— 吉字节</li>\n</ul>\n<p>搜索大于10KB的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -size +10k</span><br></pre></td></tr></table></figure>\n<p>搜索小于10KB的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -size -10k</span><br></pre></td></tr></table></figure>\n<p>搜索等于10KB的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -size 10k</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除匹配文件</li>\n</ul>\n<p>删除当前目录下所有.txt文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;*.txt&quot; -delete</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据文件权限/所有权进行匹配</li>\n</ul>\n<p>当前目录下搜索出权限为777的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -perm 777</span><br></pre></td></tr></table></figure>\n<p>找出当前目录下权限不是644的<a href=\"http://man.linuxde.net/php\">php</a>文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;*.php&quot; ! -perm 644</span><br></pre></td></tr></table></figure>\n<p>找出当前目录用户tom拥有的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -user tom</span><br></pre></td></tr></table></figure>\n<p>找出当前目录用户组sunk拥有的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -group sunk</span><br></pre></td></tr></table></figure>\n<ul>\n<li>借助<code>-exec</code>选项与其他命令结合使用</li>\n</ul>\n<p>找出当前目录下所有root的文件，并把所有权更改为用户tom</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find .-type f -user root -exec chown tom &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<p>上例中，<strong>{}</strong> 用于与<strong>-exec</strong>选项结合使用来匹配所有文件，然后会被替换为相应的文件名。</p>\n<p>找出自己家目录下所有的.txt文件并删除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find $HOME/. -name &quot;*.txt&quot; -ok rm &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<p>上例中，<strong>-ok</strong>和<strong>-exec</strong>行为一样，不过它会给出提示，是否执行相应的操作。</p>\n<p>查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;*.txt&quot; -exec cat &#123;&#125; \\;&gt; all.txt</span><br></pre></td></tr></table></figure>\n<p>将30天前的.log文件移动到old目录中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -mtime +30 -name &quot;*.log&quot; -exec cp &#123;&#125; old \\;</span><br></pre></td></tr></table></figure>\n<p>找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;*.txt&quot; -exec printf &quot;File: %s\\n&quot; &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<p>因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-exec ./text.sh &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>搜索但跳出指定的目录</li>\n</ul>\n<p>查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -path &quot;./sk&quot; -prune -o -name &quot;*.txt&quot; -print</span><br></pre></td></tr></table></figure>\n<ul>\n<li>find其他技巧收集</li>\n</ul>\n<p>要列出所有长度为零的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -empty</span><br></pre></td></tr></table></figure>\n<h1 id=\"amp-amp-和-amp-的区别\"><a href=\"#amp-amp-和-amp-的区别\" class=\"headerlink\" title=\"&amp;&amp; 和&amp;的区别\"></a>&amp;&amp; 和&amp;的区别</h1><p>a &amp; b 表示a和b同时运行<br>a &amp;&amp; b表示 a运行成功后再运行b</p>\n<h1 id=\"sh-source-exct的区别\"><a href=\"#sh-source-exct的区别\" class=\"headerlink\" title=\"sh,source,exct的区别\"></a>sh,source,exct的区别</h1><p><a href=\"https://www.jianshu.com/p/dd7956aec097\">https://www.jianshu.com/p/dd7956aec097</a></p>\n","site":{"data":{}},"excerpt":"<p>常用shell命令</p>","more":"<p>[TOC]</p>\n<h1 id=\"etc-profile、-etc-bashrc、-bash-profile、-bashrc\"><a href=\"#etc-profile、-etc-bashrc、-bash-profile、-bashrc\" class=\"headerlink\" title=\"/etc/profile、/etc/bashrc、~/.bash_profile、~/.bashrc\"></a>/etc/profile、/etc/bashrc、~/.bash_profile、~/.bashrc</h1><h2 id=\"etc-profile\"><a href=\"#etc-profile\" class=\"headerlink\" title=\"/etc/profile\"></a>/etc/profile</h2><p>此文件为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行。并从 /etc/profile.d 目录的配置文件中收集 shell 的设置。如果你有对 /etc/profile 有修改的话必须得 source 一下你的修改才会生效，此修改对每个用户都生效。</p>\n<h2 id=\"etc-bashrc（ubuntu为-etc-bash-bashrc）\"><a href=\"#etc-bashrc（ubuntu为-etc-bash-bashrc）\" class=\"headerlink\" title=\"/etc/bashrc（ubuntu为 /etc/bash.bashrc）\"></a>/etc/bashrc（ubuntu为 /etc/bash.bashrc）</h2><p>为每一个运行 bash shell 的用户执行此文件。当 bash shell 被打开时，该文件被读取。如果你想对所有的使用 bash 的用户修改某个配置并在以后打开的 bash 都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个 bash 即可生效。<br>Ubuntu没有此文件，与之对应的是/ect/bash.bashrc。</p>\n<h2 id=\"bash-profile（ubuntu为-profile）\"><a href=\"#bash-profile（ubuntu为-profile）\" class=\"headerlink\" title=\"~/.bash_profile（ubuntu为 ~/.profile）\"></a>~/.bash_profile（ubuntu为 ~/.profile）</h2><p>每个用户都可使用该文件输入专用于自己使用的 shell 信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量，执行用户的~/ .bashrc 文件。 此文件类似于 /etc/profile，也是需要需要 source 才会生效，/etc/profile 对所有用户生效，~/.bash_profile 只对当前用户生效。~/.profile(由Bourne Shell和Korn Shell使用)和.login(由C Shell使用)两个文件是.bash_profile的同义词，目的是为了兼容其它Shell。</p>\n<h1 id=\"Linux的Shell种类\"><a href=\"#Linux的Shell种类\" class=\"headerlink\" title=\"Linux的Shell种类\"></a>Linux的Shell种类</h1><p>常见的有：</p>\n<ul>\n<li><p>Bourne Shell（/usr/bin/sh或/bin/sh）、<br>Bourne Again Shell（/bin/bash）、<br>C Shell（/usr/bin/csh）、<br>K Shell（/usr/bin/ksh）、<br>Shell for Root（/sbin/sh）等等。</p>\n</li>\n<li><p>不同的Shell语言的语法有所不同，所以不能交换使用。每种Shell都有其特色之处，基本上，掌握其中任何一种 就足够了。在本文中，我们关注的重点是Bash，也就是Bourne Again Shell，由于易用和免费，Bash在日常工作中被广泛使用；同时，Bash也是大多数Linux系统默认的Shell。</p>\n</li>\n<li>在一般情况下，人们并不区分 Bourne Shell和Bourne Again Shell，所以，在下面的文字中，我们可以看到#!/bin/sh，它同样也可以改为#!/bin/bash。(定义使用哪种sh解释器来解释脚本)</li>\n</ul>\n<h1 id=\"如果不存在则创建文件夹\"><a href=\"#如果不存在则创建文件夹\" class=\"headerlink\" title=\"如果不存在则创建文件夹\"></a>如果不存在则创建文件夹</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ ! -d &quot;$build_dir&quot; ]; then</span><br><span class=\"line\">        mkdir $build_dir</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h1 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -hl 查看磁盘剩余空间</span><br><span class=\"line\">df -h 查看每个根路径的分区大小</span><br></pre></td></tr></table></figure>\n<h1 id=\"alias-外部传参\"><a href=\"#alias-外部传参\" class=\"headerlink\" title=\"alias 外部传参\"></a>alias 外部传参</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">cd</span>=<span class=\"string\">&#x27;func() &#123; cd $1; ls;&#125;; func&#x27;</span> <span class=\"comment\">#定义一个函数func（）&#123;......&#125;；func; &#123;&#125;中间是要alias的执行的命令，多个命令用；隔开，最后；结尾</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/notebook/download</span><br><span class=\"line\"><span class=\"built_in\">alias</span> dl=<span class=\"string\">&#x27;func() &#123; cp $1 /notebook/download/; &#125;; func&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> push=<span class=\"string\">&#x27;func() &#123; cd /notebook/download/; git add . ; git commit -m &quot;update&quot;; git push origin master; &#125;; func&#x27;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h1><h2 id=\"查看磁盘大小\"><a href=\"#查看磁盘大小\" class=\"headerlink\" title=\"查看磁盘大小\"></a>查看磁盘大小</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> du -s * | sort -nr  #查看大小并按大小排序</span><br><span class=\"line\">du -h ftp #查看指定文件夹下所有文件大小（包括子文件夹）</span><br><span class=\"line\">du -sh [目录名] 返回该目录的大小</span><br><span class=\"line\">du -sm [文件夹] 返回该文件夹总M数</span><br></pre></td></tr></table></figure>\n<h1 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;hi&#x27; test.txt #显示包含hi的行</span><br></pre></td></tr></table></figure>\n<h1 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h1><h2 id=\"遍历符合条件的文件\"><a href=\"#遍历符合条件的文件\" class=\"headerlink\" title=\"遍历符合条件的文件\"></a>遍历符合条件的文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for f in `find . -name &quot;正则匹配&quot; ` #.是路径   双引号和飘号要注意</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $f</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h2 id=\"对于多个文件执行操作\"><a href=\"#对于多个文件执行操作\" class=\"headerlink\" title=\"对于多个文件执行操作\"></a>对于多个文件执行操作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.sh&quot; | xargs wc -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除符合条件的多个文件\"><a href=\"#删除符合条件的多个文件\" class=\"headerlink\" title=\"删除符合条件的多个文件\"></a>删除符合条件的多个文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;$&#123;file_name&#125;_*&quot; | xargs rm -f</span><br></pre></td></tr></table></figure>\n<h2 id=\"统计python文件总行数\"><a href=\"#统计python文件总行数\" class=\"headerlink\" title=\"统计python文件总行数\"></a>统计python文件总行数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.py&quot; | xargs wc -l &gt;&gt; temp.txt</span><br></pre></td></tr></table></figure>\n<h1 id=\"shellcheck检查sh文件\"><a href=\"#shellcheck检查sh文件\" class=\"headerlink\" title=\"shellcheck检查sh文件\"></a>shellcheck检查sh文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.sh&quot; | xargs shellcheck &gt;&gt; temp2.txt</span><br><span class=\"line\">grep &#x27;In ./&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"获取当前路径\"><a href=\"#获取当前路径\" class=\"headerlink\" title=\"获取当前路径\"></a>获取当前路径</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CUR_DIR=$(<span class=\"built_in\">cd</span> $(dirname <span class=\"variable\">$0</span>); <span class=\"built_in\">pwd</span>) <span class=\"comment\">#但是用source调用脚本时$0的值为&quot;-bash&quot;，词命令无法获取地址</span></span><br><span class=\"line\">CUR_DIR=<span class=\"string\">&quot;<span class=\"subst\">$( cd <span class=\"string\">&quot;<span class=\"subst\">$( dirname <span class=\"string\">&quot;<span class=\"variable\">$&#123;BASH_SOURCE[0]&#125;</span>&quot;</span> )</span>&quot;</span> &amp;&amp; pwd )</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"hive\"><a href=\"#hive\" class=\"headerlink\" title=\"hive\"></a>hive</h1><h2 id=\"获取hive表最新分区\"><a href=\"#获取hive表最新分区\" class=\"headerlink\" title=\"获取hive表最新分区\"></a>获取hive表最新分区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newest_dt=$(hive -e <span class=\"string\">&quot;show partitions cf_model.htq_hztz_xdtz_brs_s;&quot;</span>|tail -1)</span><br><span class=\"line\">newest_dt=<span class=\"variable\">$&#123;newest_dt:3&#125;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h1><h2 id=\"插入行\"><a href=\"#插入行\" class=\"headerlink\" title=\"插入行\"></a>插入行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;1i\\要添加的内容&#x27;  yourfile</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除指定行\"><a href=\"#删除指定行\" class=\"headerlink\" title=\"删除指定行\"></a>删除指定行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i ‘1d’ filename</span><br></pre></td></tr></table></figure>\n<h2 id=\"替换指定字符\"><a href=\"#替换指定字符\" class=\"headerlink\" title=\"替换指定字符\"></a>替换指定字符</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;s/foo/bar/g&#x27; myfile #-i会修改代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看指定行\"><a href=\"#查看指定行\" class=\"headerlink\" title=\"查看指定行\"></a>查看指定行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -n &#x27;5,10p&#x27; filename 这样你就可以只查看文件的第5行到第10行。</span><br></pre></td></tr></table></figure>\n<h1 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">split -l 2000 urls.txt -d -a 2 url_</span><br><span class=\"line\">解释一下：</span><br><span class=\"line\">-l：按行分割，上面表示将urls.txt文件按2000行一个文件分割为多个文件</span><br><span class=\"line\">-d：添加数字后缀，比如上图中的00，01，02</span><br><span class=\"line\">-a 2：表示用两位数据来顺序命名</span><br><span class=\"line\">url_：看上图就应该明白了，用来定义分割后的文件名前面的部分。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"conda管理环境\"><a href=\"#conda管理环境\" class=\"headerlink\" title=\"conda管理环境\"></a>conda管理环境</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info -envs #列出所有环境</span><br><span class=\"line\">source activate 环境名</span><br><span class=\"line\">source deactivate #回到默认环境</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/cxk207017/article/details/89598139\">https://blog.csdn.net/cxk207017/article/details/89598139</a></p>\n<p>conda测试指南<br>在开始这个conda测试之前，你应该已经下载并安装好了Anaconda或者Miniconda<br>注意：在安装之后，你应该关闭并重新打开windows命令行。</p>\n<p>一、Conda测试过程：<br>使用conda。首先我们将要确认你已经安装好了conda<br>配置环境。下一步我们将通过创建几个环境来展示conda的环境管理功能。使你更加轻松的了解关于环境的一切。我们将学习如何确认你在哪个环境中，以及如何做复制一个环境作为备份。<br>测试python。然后我们将检查哪一个版本的python可以被安装，以及安装另一个版本的python，还有在两个版本的python之间的切换。<br>检查包。我们将1)罗列出安装在我们电脑上的包，2)浏览可用的包，3)使用conda install命令来来安装以及移除一些包。对于一些不能使用conda安装的包，我们将4)在Anaconda.org网站上搜索。对于那些在其它位置的包，我们将5)使用pip命令来实现安装。我们还会安装一个可以免费试用30天的商业包IOPro<br>移除包、环境以及conda.我们将以学习删除你的包、环境以及conda来结束这次测试。<br>二、完整过程<br>提示：在任何时候你可以通过在命令后边跟上—help来获得该命令的完整文档。例如，你可以通过如下的命令来学习conda的update命令。</p>\n<p>conda update —help<br>\\1. 管理conda：<br>Conda既是一个包管理器又是一个环境管理器。你肯定知道包管理器，它可以帮你发现和查看包。但是如果当我们想要安装一个包，但是这个包只支持跟我们目前使用的python不同的版本时。你只需要几行命令，就可以搭建起一个可以运行另外python版本的环境。，这就是conda环境管理器的强大功能。<br>提示：无论你使用Linux、OS X或者Windows命令行工具，在你的命令行终端conda指令都是一样的，除非有特别说明。</p>\n<p>检查conda已经被安装。<br>为了确保你已经在正确的位置安装好了conda，让我们来检查你是否已经成功安装好了Anaconda。在你的命令行终端窗口，输入如下代码：</p>\n<p>conda —version<br>Conda会返回你安装Anaconda软件的版本。<br>提示：如果你看到了错误信息，检查你是否在安装过程中选择了仅为当前用户按安装，并且是否以同样的账户来操作。确保用同样的账户登录安装了之后重新打开命令行终端窗口。</p>\n<p>升级当前版本的conda<br>接下来，让我们通过使用如下update命令来升级conda：</p>\n<p>conda update conda<br>conda将会比较新旧版本并且告诉你哪一个版本的conda可以被安装。它也会通知你伴随这次升级其它包同时升级的情况。<br>如果新版本的conda可用，它会提示你输入y进行升级.</p>\n<p>proceed ([y]/n)? y<br>conda更新到最新版后，我们将进入下一个主题。</p>\n<h2 id=\"管理环境\"><a href=\"#管理环境\" class=\"headerlink\" title=\"管理环境\"></a>管理环境</h2><p>现在我们通过创建一些环境来展示conda的环境操作，然后移动它们。</p>\n<h3 id=\"创建并激活一个环境\"><a href=\"#创建并激活一个环境\" class=\"headerlink\" title=\"创建并激活一个环境\"></a>创建并激活一个环境</h3><p>使用conda create命令，后边跟上你希望用来称呼它的任何名字：</p>\n<blockquote>\n<p>conda create —n py3 python=3</p>\n<p>这条命令将会给biopython包创建一个新的环境，位置在/envs/snowflakes<br>小技巧：很多跟在—后边常用的命令选项，可以被略写为一个短线加命令首字母。所以—name选项和-n的作用是一样的。通过conda -h或conda –-help来看大量的缩写。</p>\n</blockquote>\n<h3 id=\"激活这个新环境\"><a href=\"#激活这个新环境\" class=\"headerlink\" title=\"激活这个新环境\"></a>激活这个新环境</h3><p>Linux，OS X: source activate snowflakes<br>Windows：activate snowflake`<br>小技巧：新的开发环境会被默认安装在你conda目录下的envs文件目录下。你可以指定一个其他的路径；去通过conda create -h了解更多信息吧。<br>小技巧：如果我们没有指定安装python的版本，donda会安装我们最初安装conda时所装的那个版本的python。</p>\n<p>创建第二个环境<br>这次让我们来创建并命名一个新环境，然后安装另一个版本的python以及两个包 Astroid 和 Babel。</p>\n<p>conda create -n bunnies python=3 Astroid Babel<br>这将创建第二个基于python3 ，包含Astroid 和 Babel 包，称为bunnies的新环境，在/envs/bunnies文件夹里。<br>小技巧：在此同时安装你想在这个环境中运行的包，<br>小提示：在你创建环境的同时安装好所有你想要的包，在后来依次安装可能会导致依赖性问题（貌似是，不太懂这个术语怎么翻）。<br>小技巧：你可以在conda create命令后边附加跟多的条件，键入conda create –h 查看更多细节。</p>\n<p>列出所有的环境<br>现在让我们来检查一下截至目前你所安装的环境，使用conda environment info 命令来查看它:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info --envs</span><br></pre></td></tr></table></figure>\n<p>你将会看到如下的环境列表：</p>\n<p>conda environments:</p>\n<p> snowflakes          * /home/username/miniconda/envs/snowflakes</p>\n<p> bunnies               /home/username/miniconda/envs/bunnies</p>\n<p> root                  /home/username/miniconda<br>确认当前环境<br>你现在处于哪个环境中呢？snowflakes还是bunnies？想要确定它，输入下面的代码：</p>\n<p>conda info -envis<br>conda将会显示所有环境的列表，当前环境会显示在一个括号内。</p>\n<p>(snowflakes)<br>注意：conda有时也会在目前活动的环境前边加上*号。</p>\n<p>切换到另一个环境(activate/deactivate)<br>为了切换到另一个环境，键入下列命令以及所需环境的名字。</p>\n<p>Linux，OS X: source activate snowflakes<br>Windows：activate snowflakes<br>如果要从你当前工作环境的路径切换到系统根目录时，键入：</p>\n<p>Linux，OS X: source deactivate<br>Windows: deactivate<br>当该环境不再活动时，将不再被提前显示。</p>\n<p>复制一个环境<br>通过克隆来复制一个环境。这儿将通过克隆snowfllakes来创建一个称为flowers的副本。</p>\n<p>conda create -n flowers —clone snowflakes<br>通过conda info –-envs来检查环境<br>你现在应该可以看到一个环境列表：flowers, bunnies, and snowflakes.</p>\n<p>删除一个环境<br>如果你不想要这个名为flowers的环境，就按照如下方法移除该环境：</p>\n<p>conda remove -n flowers —all<br>为了确定这个名为flowers的环境已经被移除，输入以下命令：</p>\n<p>conda info -e<br>flowers 已经不再在你的环境列表里了，所以我们知道它被删除了。</p>\n<p>学习更多关于环境的知识<br>如果你想学习更多关于conda的命令，就在该命令后边跟上 -h</p>\n<p>conda remove -h<br>\\3. 管理Python<br>conda对Python的管理跟其他包的管理类似，所以可以很轻松地管理和升级多个安装。</p>\n<p>检查python版本<br>首先让我们检查那个版本的python可以被安装：</p>\n<p>conda search —full —name python<br>你可以使用conda search python来看到所有名字中含有“python”的包或者加上—full —name命令选项来列出完全与“python”匹配的包。</p>\n<p>安装一个不同版本的python<br>现在我们假设你需要python3来编译程序，但是你不想覆盖掉你的python2.7来升级，你可以创建并激活一个名为snakes的环境，并通过下面的命令来安装最新版本的python3：</p>\n<p>conda create -n snakes python=３<br>·Linux，OS X：source activate snakes<br>·Windows： activate snakes<br>小提示：给环境取一个很形象的名字，例如“Python3”是很明智的，但是并不有趣。</p>\n<p>确定环境添加成功<br>为了确保snakes环境已经被安装了，键入如下命令：</p>\n<p>conda info -e<br>conda会显示环境列表，当前活动的环境会被括号括起来（snakes）</p>\n<p>检查新的环境中的python版本<br>确保snakes环境中运行的是python3：</p>\n<p>python —version<br>使用不同版本的python<br>为了使用不同版本的python，你可以切换环境，通过简单的激活它就可以，让我们看看如何返回默认2.7</p>\n<p>·Linux，OS X: source activate snowflakes<br>·Windows：activate snowflakes<br>检查python版本：<br>确保snowflakes环境中仍然在运行你安装conda时安装的那个版本的python。</p>\n<p>python —version<br>注销该环境<br>当你完成了在snowflakes环境中的工作室，注销掉该环境并转换你的路径到先前的状态：</p>\n<p>·Linux，OS X：source deactivate<br>·Windows：deactivate<br>\\4. 管理包<br>现在让我们来演示包。我们已经安装了一些包（Astroid，Babel和一些特定版本的python），当我们创建一个新环境时。我们检查我们已经安装了那些包，检查哪些是可用的，寻找特定的包并安装它。接下来我们在Anconda.org仓库中查找并安装一些指定的包，用conda来完成更多pip可以实现的安装，并安装一个商业包。</p>\n<p>查看该环境中包和其版本的列表：<br>使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。在你的终端窗口中输入：</p>\n<blockquote>\n<p>conda list<br>使用conda命令查看可用包的列表<br>一个可用conda安装的包的列表，按照Python版本分类，可以从这个地址获得：<br><a href=\"http://docs.continuum.io/anaconda/pkg-docs.html\">http://docs.continuum.io/anaconda/pkg-docs.html</a></p>\n</blockquote>\n<p>查找一个包<br>首先让我们来检查我们需要的这个包是否可以通过conda来安装：</p>\n<p>conda search beautifulsoup4<br>它展示了这个包，所以我们知道它是可用的。</p>\n<p>安装一个新包<br>我们将在当前环境中安装这个Beautiful Soup包，使用conda命令如下；<br>conda install —name bunnies beautifulsoup4<br>提示：你必须告诉conda你要安装环境的名字（-n bunies）否则它将会被安装到当前环境中。<br>现在激活bunnies环境，并且用conda list来显示哪些程序被安装了。</p>\n<p>·Linux，OS X：source activate bunnies<br>·Windows：activate bunnies<br>所有的平台：<br>conda list<br>从Anaconda.org安装一个包<br>如果一个包不能使用conda安装，我们接下来将在Anaconda.org网站查找。Anaconda.org向公开和私有包仓库提供包管理服务。Anaconda.org是一个连续分析产品。<br>提示：你在Anaconda.org下载东西的时候不强制要求注册。<br>为了从Anaconda.org下载到当前的环境中，我们需要通过指定Anaconda.org为一个特定通道，通过输入这个包的完整路径来实现。<br>在浏览器中，去 <a href=\"http://anaconda.org\">http://anaconda.org</a> 网站。我们查找一个叫“bottleneck”的包，所以在左上角的叫“Search Anaconda Cloud”搜索框中输入“bottleneck”并点击search按钮。<br>Anaconda.org上会有超过一打的bottleneck包的版本可用，但是我们想要那个被下载最频繁的版本。所以你可以通过下载量来排序，通过点击Download栏。<br>点击包的名字来选择最常被下载的包。它会链接到Anaconda.org详情页显示下载的具体命令：</p>\n<p>conda install —channel https：//conda .anaconda.ort/pandas bottleneck<br>检查被下载的包<br>conda list<br>通过pip命令来安装包<br>对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip（“pip install packages”的简称）来安装包。<br>提示： pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包，和vice versa（此处不会翻译）。pip和conda都集成在Anaconda或miniconda里边。</p>\n<p>我们激活我们想放置程序的环境，然后通过pip安装一个叫“See”的程序。</p>\n<p>·Linux，OS X： source activate bunnies<br>·Windows：activate bunnies<br>所有平台：<br>pip install see<br>检查pip安装<br>检查See是否被安装：</p>\n<p>conda list<br>安装商业包<br>安装商业包与你安装其他的包的过程异常。举个例子，让我们安装并删除一个更新的商业包的免费试用 IOPro，可以加速你的python处理速度：</p>\n<p>conda install iopro<br>提示：除了学术使用，该版本在30天后试用期满</p>\n<p>你现在可以安装以及检查你想用conda安装的任何包，无论使用conda命令、从Anaconda.org下载或者使用pip安装，无论开源软件还是商业包。</p>\n<p>\\5. 移除包、环境、或者conda<br>如果你愿意的话。让我们通过移除一个或多个试验包、环境以及conda来结束这次测试指导。</p>\n<p>移除包<br>假设你决定不再使用商业包IOPro。你可以在bunnies环境中移除它。</p>\n<p>conda remove -n bunnies iopro<br>确认包已经被移除<br>使用conda list命令来确认IOPro已经被移除了</p>\n<p>conda list<br>移除环境<br>我们不再需要snakes环境了，所以输入以下命令：<br>conda remove -n snakes —all</p>\n<p>确认环境被移除<br>为了确认snakes环境已经被移除了，输入以下命令：</p>\n<p> conda info —envis<br>snakes不再显示在环境列表里了，所以我们知道它已经被删除了</p>\n<p>删除conda<br>Linux，OS X：<br>移除Anaconda 或 Miniconda 安装文件夹<br>rm -rf ~/miniconda OR  rm -rf ~/anaconda<br>Windows：<br>去控制面板，点击“添加或删除程序”，选择“Python2.7（Anaconda）”或“Python2.7（Miniconda）”并点击删除程序。</p>\n<h3 id=\"5K服务器环境安装实例\"><a href=\"#5K服务器环境安装实例\" class=\"headerlink\" title=\"5K服务器环境安装实例\"></a>5K服务器环境安装实例</h3><blockquote>\n<p>conda create -n py3 python=3.6   #创建叫做py3的环境，python版本是3.6</p>\n<p>conda info -e #查看所有环境<br># To activate this environment, use:<br># &gt; source activate py3<br># To deactivate an active environment, use:<br># &gt; source deactivate</p>\n<p>activate py3 #激活相应环境</p>\n<p>conda install numpy #安装包方式一</p>\n<p>conda install scikit-learn</p>\n<p>pip install numoy #安装包方式二</p>\n</blockquote>\n<h1 id=\"find-1\"><a href=\"#find-1\" class=\"headerlink\" title=\"find\"></a>find</h1><p>列出当前目录及子目录下所有文件和文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find .</span><br></pre></td></tr></table></figure>\n<p>在<code>/home</code>目录下查找以.txt结尾的文件名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>\n<p>同上，但忽略大小写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home -iname &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>\n<p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . \\( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \\)</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; </span><br></pre></td></tr></table></figure>\n<p>匹配文件路径或者文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /usr/ -path &quot;*local*&quot;</span><br></pre></td></tr></table></figure>\n<p>基于正则表达式匹配文件路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -regex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br></pre></td></tr></table></figure>\n<p>同上，但忽略大小写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -iregex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>否定参数</li>\n</ul>\n<p>找出/home下不是以.txt结尾的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home ! -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据文件类型进行搜索</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type 类型参数</span><br></pre></td></tr></table></figure>\n<p>类型参数列表：</p>\n<ul>\n<li><strong>f</strong> 普通文件</li>\n<li><strong>l</strong> 符号连接</li>\n<li><strong>d</strong> 目录</li>\n<li><strong>c</strong> 字符设备</li>\n<li><strong>b</strong> 块设备</li>\n<li><strong>s</strong> 套接字</li>\n<li><p><strong>p</strong> Fifo</p>\n</li>\n<li><p>基于目录深度搜索</p>\n</li>\n</ul>\n<p>向下最大深度限制为3</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -maxdepth 3 -type f</span><br></pre></td></tr></table></figure>\n<p>搜索出深度距离当前目录至少2个子目录的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -mindepth 2 -type f</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据文件时间戳进行搜索</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f 时间戳</span><br></pre></td></tr></table></figure>\n<p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>\n<ul>\n<li><strong>访问时间</strong>（-atime/天，-amin/分钟）：用户最近一次访问时间。</li>\n<li><strong>修改时间</strong>（-mtime/天，-mmin/分钟）：文件最后一次修改时间。</li>\n<li><strong>变化时间</strong>（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</li>\n</ul>\n<p>搜索最近七天内被访问过的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -atime -7</span><br></pre></td></tr></table></figure>\n<p>搜索恰好在七天前被访问过的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -atime 7</span><br></pre></td></tr></table></figure>\n<p>搜索超过七天内被访问过的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -atime +7</span><br></pre></td></tr></table></figure>\n<p>搜索访问时间超过10分钟的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -amin +10</span><br></pre></td></tr></table></figure>\n<p>找出比<a href=\"http://man.linuxde.net/file\">file</a>.log修改时间更长的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -newer file.log</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据文件大小进行匹配</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -size 文件大小单元</span><br></pre></td></tr></table></figure>\n<p>文件大小单元：</p>\n<ul>\n<li><strong>b</strong> —— 块（512字节）</li>\n<li><strong>c</strong> —— 字节</li>\n<li><strong>w</strong> —— 字（2字节）</li>\n<li><strong>k</strong> —— 千字节</li>\n<li><strong>M</strong> —— 兆字节</li>\n<li><strong>G</strong> —— 吉字节</li>\n</ul>\n<p>搜索大于10KB的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -size +10k</span><br></pre></td></tr></table></figure>\n<p>搜索小于10KB的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -size -10k</span><br></pre></td></tr></table></figure>\n<p>搜索等于10KB的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -size 10k</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除匹配文件</li>\n</ul>\n<p>删除当前目录下所有.txt文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;*.txt&quot; -delete</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据文件权限/所有权进行匹配</li>\n</ul>\n<p>当前目录下搜索出权限为777的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -perm 777</span><br></pre></td></tr></table></figure>\n<p>找出当前目录下权限不是644的<a href=\"http://man.linuxde.net/php\">php</a>文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;*.php&quot; ! -perm 644</span><br></pre></td></tr></table></figure>\n<p>找出当前目录用户tom拥有的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -user tom</span><br></pre></td></tr></table></figure>\n<p>找出当前目录用户组sunk拥有的所有文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -group sunk</span><br></pre></td></tr></table></figure>\n<ul>\n<li>借助<code>-exec</code>选项与其他命令结合使用</li>\n</ul>\n<p>找出当前目录下所有root的文件，并把所有权更改为用户tom</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find .-type f -user root -exec chown tom &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<p>上例中，<strong>{}</strong> 用于与<strong>-exec</strong>选项结合使用来匹配所有文件，然后会被替换为相应的文件名。</p>\n<p>找出自己家目录下所有的.txt文件并删除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find $HOME/. -name &quot;*.txt&quot; -ok rm &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<p>上例中，<strong>-ok</strong>和<strong>-exec</strong>行为一样，不过它会给出提示，是否执行相应的操作。</p>\n<p>查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;*.txt&quot; -exec cat &#123;&#125; \\;&gt; all.txt</span><br></pre></td></tr></table></figure>\n<p>将30天前的.log文件移动到old目录中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -mtime +30 -name &quot;*.log&quot; -exec cp &#123;&#125; old \\;</span><br></pre></td></tr></table></figure>\n<p>找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -name &quot;*.txt&quot; -exec printf &quot;File: %s\\n&quot; &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<p>因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-exec ./text.sh &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>搜索但跳出指定的目录</li>\n</ul>\n<p>查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -path &quot;./sk&quot; -prune -o -name &quot;*.txt&quot; -print</span><br></pre></td></tr></table></figure>\n<ul>\n<li>find其他技巧收集</li>\n</ul>\n<p>要列出所有长度为零的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -empty</span><br></pre></td></tr></table></figure>\n<h1 id=\"amp-amp-和-amp-的区别\"><a href=\"#amp-amp-和-amp-的区别\" class=\"headerlink\" title=\"&amp;&amp; 和&amp;的区别\"></a>&amp;&amp; 和&amp;的区别</h1><p>a &amp; b 表示a和b同时运行<br>a &amp;&amp; b表示 a运行成功后再运行b</p>\n<h1 id=\"sh-source-exct的区别\"><a href=\"#sh-source-exct的区别\" class=\"headerlink\" title=\"sh,source,exct的区别\"></a>sh,source,exct的区别</h1><p><a href=\"https://www.jianshu.com/p/dd7956aec097\">https://www.jianshu.com/p/dd7956aec097</a></p>"},{"title":"shellcheck","date":"2022-03-01T03:32:38.000Z","_content":"\n忘记是啥了\n\n<!-- more -->\n\n\nctrl+r,输入cmd,打开dos命令行\n输入：powershell\n输入：set-ExecutionPolicy RemoteSigned -scope CurrentUser  （修改执行策略执行）\n输入：iex (new-object net.webclient).downloadstring('<https://get.scoop.sh>')   (安装scoop)\n输入：scoop install shellcheck (安装shellcheck）\n\n","source":"_posts/0_代码相关/shellcheck.md","raw":"---\ntitle: shellcheck\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n忘记是啥了\n\n<!-- more -->\n\n\nctrl+r,输入cmd,打开dos命令行\n输入：powershell\n输入：set-ExecutionPolicy RemoteSigned -scope CurrentUser  （修改执行策略执行）\n输入：iex (new-object net.webclient).downloadstring('<https://get.scoop.sh>')   (安装scoop)\n输入：scoop install shellcheck (安装shellcheck）\n\n","slug":"0_代码相关/shellcheck","published":1,"updated":"2022-03-01T03:53:42.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly5100458s32918feu1s","content":"<p>忘记是啥了</p>\n<span id=\"more\"></span>\n<p>ctrl+r,输入cmd,打开dos命令行<br>输入：powershell<br>输入：set-ExecutionPolicy RemoteSigned -scope CurrentUser  （修改执行策略执行）<br>输入：iex (new-object net.webclient).downloadstring(‘<a href=\"https://get.scoop.sh\">https://get.scoop.sh</a>‘)   (安装scoop)<br>输入：scoop install shellcheck (安装shellcheck）</p>\n","site":{"data":{}},"excerpt":"<p>忘记是啥了</p>","more":"<p>ctrl+r,输入cmd,打开dos命令行<br>输入：powershell<br>输入：set-ExecutionPolicy RemoteSigned -scope CurrentUser  （修改执行策略执行）<br>输入：iex (new-object net.webclient).downloadstring(‘<a href=\"https://get.scoop.sh\">https://get.scoop.sh</a>‘)   (安装scoop)<br>输入：scoop install shellcheck (安装shellcheck）</p>"},{"title":"shell日期运算","date":"2022-03-01T03:32:38.000Z","_content":"\nshell日期操作\n\n<!-- more -->\n\n\n## 一、[date](http://man7.org/linux/man-pages/man1/date.1.html)\n\n### 1. 查看文档\n\n```bash\nman date\n```\n\n### 2. 常用用法\n\n```bash\nsetdt=$(date +%Y-%m-01) $=$(date -d \"now\" +%Y-%m-01)\nsetdt=\"'`date -d \"-1 day ${setdt}\" +%Y-%m-%d`'\"\ntoday=$(date +%Y-%m-%d)\nyesterday=\"'$(date -d \"-1 day ${today}\" +%Y-%m-%d)'\"  #输出： '2019-01-01' \nyesterday=$(date -d \"yesterday\" +%Y-%m-%d)\nlast_week=\"'$(date -d \"-7 day ${today}\" +%Y-%m-%d)'\"\n```\n\n\n\n### 3. 案例\n\n案例：计算生日还有多少天\n\n```bash\nread -p\"Input your birthday(YYYYmmdd):\" date1\nm=`date --date=\"$date1\" +%m` #得到生日的月\nd=`date --date=\"$date1\" +%d` #得到生日的日\ndate_now=`date +%s` #得到当前时间的秒值\ny=`date +%Y` #得到当前时间的年\nbirth=`date --date=\"$y$m$d\" +%s` #得到今年的生日日期的秒值\ninternal=$(($birth-$date_now)) #计算今日到生日日期的间隔时间\nif [ \"$internal\" -lt \"0\" ]; then #判断今天的生日是否已过\nbirth=`date --date=\"$(($y+1))$m$d\" +%s` #得到明天的生日日期秒值\ninternal=$(($birth-$date_now))#计算今天到下一个生日的间隔时间\nfi\necho \"Thereis :$(($internal/60/60/24)) days.\" #输出结果，秒换算为天\n```\n\n案例2：循环日期计算\n\n```bash\nset_date=\"2017-12-01\"\nlast_date=\"2017-11-30\"\nfor((i=0;i<=15;i++));\n  do\n  start_date=`date -d \"+$i month ${set_date}\" +%Y-%m-%d`\n  input_date=`date -d \"-1 day ${start_date}\" +%Y-%m-%d`\n  date_str=`date -d \"${input_date}\" +%Y%m%d`\n  sed -i \"s/${last_date}/${input_date}/g\" _config.sh \n\n  last_date=$input_date\n\n  sh train_pinlist.sh\n  sh get_features.sh\ndone\n```\n\n案例3：循环日期计算\n\n```bash\nSTART_DATE='2018-10-12'\nEND_DATE='2018-12-11'\n\nwhile [ \"$START_DATE\" != \"$END_DATE\" ]\ndo\n    echo \"****** the date is $START_DATE !!! ******\"\n    hive -S --hiveconf dt=$START_DATE  -f  a01_extract_feat_jt_transaction.sql\n    echo \"****** $START_DATE finished !!!!\"\n    NEXT_DATE=`date -d \"1 day ${START_DATE}\" +%Y-%m-%d`\n    START_DATE=$NEXT_DATE\ndone\n```\n\n\n\n## 二、日期函数\n\n```\n#1:判断是否闰年check_leap() #\n#2:获取月份最大日期get_mon_days() #\n#3:检查日期格式check_date() #\n#4:返回昨天日期get_before_date() #\n#5:返回明天日期get_next_date() #\n#6:返回当月月末日期YYYYMMDD get_cur_date()\n#7:返回当月月份YYYYMM get_cur_month()\n#8:返回上月月末日期YYYYMMDD get_last_date()\n#9:返回上月月份YYYYMM get_last_month()\n```\n\n","source":"_posts/0_代码相关/shell日期运算.md","raw":"---\ntitle: shell日期运算\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nshell日期操作\n\n<!-- more -->\n\n\n## 一、[date](http://man7.org/linux/man-pages/man1/date.1.html)\n\n### 1. 查看文档\n\n```bash\nman date\n```\n\n### 2. 常用用法\n\n```bash\nsetdt=$(date +%Y-%m-01) $=$(date -d \"now\" +%Y-%m-01)\nsetdt=\"'`date -d \"-1 day ${setdt}\" +%Y-%m-%d`'\"\ntoday=$(date +%Y-%m-%d)\nyesterday=\"'$(date -d \"-1 day ${today}\" +%Y-%m-%d)'\"  #输出： '2019-01-01' \nyesterday=$(date -d \"yesterday\" +%Y-%m-%d)\nlast_week=\"'$(date -d \"-7 day ${today}\" +%Y-%m-%d)'\"\n```\n\n\n\n### 3. 案例\n\n案例：计算生日还有多少天\n\n```bash\nread -p\"Input your birthday(YYYYmmdd):\" date1\nm=`date --date=\"$date1\" +%m` #得到生日的月\nd=`date --date=\"$date1\" +%d` #得到生日的日\ndate_now=`date +%s` #得到当前时间的秒值\ny=`date +%Y` #得到当前时间的年\nbirth=`date --date=\"$y$m$d\" +%s` #得到今年的生日日期的秒值\ninternal=$(($birth-$date_now)) #计算今日到生日日期的间隔时间\nif [ \"$internal\" -lt \"0\" ]; then #判断今天的生日是否已过\nbirth=`date --date=\"$(($y+1))$m$d\" +%s` #得到明天的生日日期秒值\ninternal=$(($birth-$date_now))#计算今天到下一个生日的间隔时间\nfi\necho \"Thereis :$(($internal/60/60/24)) days.\" #输出结果，秒换算为天\n```\n\n案例2：循环日期计算\n\n```bash\nset_date=\"2017-12-01\"\nlast_date=\"2017-11-30\"\nfor((i=0;i<=15;i++));\n  do\n  start_date=`date -d \"+$i month ${set_date}\" +%Y-%m-%d`\n  input_date=`date -d \"-1 day ${start_date}\" +%Y-%m-%d`\n  date_str=`date -d \"${input_date}\" +%Y%m%d`\n  sed -i \"s/${last_date}/${input_date}/g\" _config.sh \n\n  last_date=$input_date\n\n  sh train_pinlist.sh\n  sh get_features.sh\ndone\n```\n\n案例3：循环日期计算\n\n```bash\nSTART_DATE='2018-10-12'\nEND_DATE='2018-12-11'\n\nwhile [ \"$START_DATE\" != \"$END_DATE\" ]\ndo\n    echo \"****** the date is $START_DATE !!! ******\"\n    hive -S --hiveconf dt=$START_DATE  -f  a01_extract_feat_jt_transaction.sql\n    echo \"****** $START_DATE finished !!!!\"\n    NEXT_DATE=`date -d \"1 day ${START_DATE}\" +%Y-%m-%d`\n    START_DATE=$NEXT_DATE\ndone\n```\n\n\n\n## 二、日期函数\n\n```\n#1:判断是否闰年check_leap() #\n#2:获取月份最大日期get_mon_days() #\n#3:检查日期格式check_date() #\n#4:返回昨天日期get_before_date() #\n#5:返回明天日期get_next_date() #\n#6:返回当月月末日期YYYYMMDD get_cur_date()\n#7:返回当月月份YYYYMM get_cur_month()\n#8:返回上月月末日期YYYYMMDD get_last_date()\n#9:返回上月月份YYYYMM get_last_month()\n```\n\n","slug":"0_代码相关/shell日期运算","published":1,"updated":"2022-03-01T03:53:52.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly5200488s329q79cqe7","content":"<p>shell日期操作</p>\n<span id=\"more\"></span>\n<h2 id=\"一、date\"><a href=\"#一、date\" class=\"headerlink\" title=\"一、date\"></a>一、<a href=\"http://man7.org/linux/man-pages/man1/date.1.html\">date</a></h2><h3 id=\"1-查看文档\"><a href=\"#1-查看文档\" class=\"headerlink\" title=\"1. 查看文档\"></a>1. 查看文档</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man date</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-常用用法\"><a href=\"#2-常用用法\" class=\"headerlink\" title=\"2. 常用用法\"></a>2. 常用用法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setdt=$(date +%Y-%m-01) $=$(date -d <span class=\"string\">&quot;now&quot;</span> +%Y-%m-01)</span><br><span class=\"line\">setdt=<span class=\"string\">&quot;&#x27;`date -d &quot;</span>-1 day <span class=\"variable\">$&#123;setdt&#125;</span><span class=\"string\">&quot; +%Y-%m-%d`&#x27;&quot;</span></span><br><span class=\"line\">today=$(date +%Y-%m-%d)</span><br><span class=\"line\">yesterday=<span class=\"string\">&quot;&#x27;<span class=\"subst\">$(date -d <span class=\"string\">&quot;-1 day <span class=\"variable\">$&#123;today&#125;</span>&quot;</span> +%Y-%m-%d)</span>&#x27;&quot;</span>  <span class=\"comment\">#输出： &#x27;2019-01-01&#x27; </span></span><br><span class=\"line\">yesterday=$(date -d <span class=\"string\">&quot;yesterday&quot;</span> +%Y-%m-%d)</span><br><span class=\"line\">last_week=<span class=\"string\">&quot;&#x27;<span class=\"subst\">$(date -d <span class=\"string\">&quot;-7 day <span class=\"variable\">$&#123;today&#125;</span>&quot;</span> +%Y-%m-%d)</span>&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-案例\"><a href=\"#3-案例\" class=\"headerlink\" title=\"3. 案例\"></a>3. 案例</h3><p>案例：计算生日还有多少天</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">read</span> -p<span class=\"string\">&quot;Input your birthday(YYYYmmdd):&quot;</span> date1</span><br><span class=\"line\">m=`date --date=<span class=\"string\">&quot;<span class=\"variable\">$date1</span>&quot;</span> +%m` <span class=\"comment\">#得到生日的月</span></span><br><span class=\"line\">d=`date --date=<span class=\"string\">&quot;<span class=\"variable\">$date1</span>&quot;</span> +%d` <span class=\"comment\">#得到生日的日</span></span><br><span class=\"line\">date_now=`date +%s` <span class=\"comment\">#得到当前时间的秒值</span></span><br><span class=\"line\">y=`date +%Y` <span class=\"comment\">#得到当前时间的年</span></span><br><span class=\"line\">birth=`date --date=<span class=\"string\">&quot;$y$m<span class=\"variable\">$d</span>&quot;</span> +%s` <span class=\"comment\">#得到今年的生日日期的秒值</span></span><br><span class=\"line\">internal=$((<span class=\"variable\">$birth</span>-<span class=\"variable\">$date_now</span>)) <span class=\"comment\">#计算今日到生日日期的间隔时间</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$internal</span>&quot;</span> -lt <span class=\"string\">&quot;0&quot;</span> ]; <span class=\"keyword\">then</span> <span class=\"comment\">#判断今天的生日是否已过</span></span><br><span class=\"line\">birth=`date --date=<span class=\"string\">&quot;<span class=\"subst\">$(($y+1)</span>)$m<span class=\"variable\">$d</span>&quot;</span> +%s` <span class=\"comment\">#得到明天的生日日期秒值</span></span><br><span class=\"line\">internal=$((<span class=\"variable\">$birth</span>-<span class=\"variable\">$date_now</span>))<span class=\"comment\">#计算今天到下一个生日的间隔时间</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Thereis :<span class=\"subst\">$(($internal/60/60/24)</span>) days.&quot;</span> <span class=\"comment\">#输出结果，秒换算为天</span></span><br></pre></td></tr></table></figure>\n<p>案例2：循环日期计算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_date=<span class=\"string\">&quot;2017-12-01&quot;</span></span><br><span class=\"line\">last_date=<span class=\"string\">&quot;2017-11-30&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((i=0;i&lt;=15;i++));</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  start_date=`date -d <span class=\"string\">&quot;+<span class=\"variable\">$i</span> month <span class=\"variable\">$&#123;set_date&#125;</span>&quot;</span> +%Y-%m-%d`</span><br><span class=\"line\">  input_date=`date -d <span class=\"string\">&quot;-1 day <span class=\"variable\">$&#123;start_date&#125;</span>&quot;</span> +%Y-%m-%d`</span><br><span class=\"line\">  date_str=`date -d <span class=\"string\">&quot;<span class=\"variable\">$&#123;input_date&#125;</span>&quot;</span> +%Y%m%d`</span><br><span class=\"line\">  sed -i <span class=\"string\">&quot;s/<span class=\"variable\">$&#123;last_date&#125;</span>/<span class=\"variable\">$&#123;input_date&#125;</span>/g&quot;</span> _config.sh </span><br><span class=\"line\"></span><br><span class=\"line\">  last_date=<span class=\"variable\">$input_date</span></span><br><span class=\"line\"></span><br><span class=\"line\">  sh train_pinlist.sh</span><br><span class=\"line\">  sh get_features.sh</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>案例3：循环日期计算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">START_DATE=<span class=\"string\">&#x27;2018-10-12&#x27;</span></span><br><span class=\"line\">END_DATE=<span class=\"string\">&#x27;2018-12-11&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"string\">&quot;<span class=\"variable\">$START_DATE</span>&quot;</span> != <span class=\"string\">&quot;<span class=\"variable\">$END_DATE</span>&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;****** the date is <span class=\"variable\">$START_DATE</span> !!! ******&quot;</span></span><br><span class=\"line\">    hive -S --hiveconf dt=<span class=\"variable\">$START_DATE</span>  -f  a01_extract_feat_jt_transaction.sql</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;****** <span class=\"variable\">$START_DATE</span> finished !!!!&quot;</span></span><br><span class=\"line\">    NEXT_DATE=`date -d <span class=\"string\">&quot;1 day <span class=\"variable\">$&#123;START_DATE&#125;</span>&quot;</span> +%Y-%m-%d`</span><br><span class=\"line\">    START_DATE=<span class=\"variable\">$NEXT_DATE</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、日期函数\"><a href=\"#二、日期函数\" class=\"headerlink\" title=\"二、日期函数\"></a>二、日期函数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1:判断是否闰年check_leap() #</span><br><span class=\"line\">#2:获取月份最大日期get_mon_days() #</span><br><span class=\"line\">#3:检查日期格式check_date() #</span><br><span class=\"line\">#4:返回昨天日期get_before_date() #</span><br><span class=\"line\">#5:返回明天日期get_next_date() #</span><br><span class=\"line\">#6:返回当月月末日期YYYYMMDD get_cur_date()</span><br><span class=\"line\">#7:返回当月月份YYYYMM get_cur_month()</span><br><span class=\"line\">#8:返回上月月末日期YYYYMMDD get_last_date()</span><br><span class=\"line\">#9:返回上月月份YYYYMM get_last_month()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>shell日期操作</p>","more":"<h2 id=\"一、date\"><a href=\"#一、date\" class=\"headerlink\" title=\"一、date\"></a>一、<a href=\"http://man7.org/linux/man-pages/man1/date.1.html\">date</a></h2><h3 id=\"1-查看文档\"><a href=\"#1-查看文档\" class=\"headerlink\" title=\"1. 查看文档\"></a>1. 查看文档</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man date</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-常用用法\"><a href=\"#2-常用用法\" class=\"headerlink\" title=\"2. 常用用法\"></a>2. 常用用法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setdt=$(date +%Y-%m-01) $=$(date -d <span class=\"string\">&quot;now&quot;</span> +%Y-%m-01)</span><br><span class=\"line\">setdt=<span class=\"string\">&quot;&#x27;`date -d &quot;</span>-1 day <span class=\"variable\">$&#123;setdt&#125;</span><span class=\"string\">&quot; +%Y-%m-%d`&#x27;&quot;</span></span><br><span class=\"line\">today=$(date +%Y-%m-%d)</span><br><span class=\"line\">yesterday=<span class=\"string\">&quot;&#x27;<span class=\"subst\">$(date -d <span class=\"string\">&quot;-1 day <span class=\"variable\">$&#123;today&#125;</span>&quot;</span> +%Y-%m-%d)</span>&#x27;&quot;</span>  <span class=\"comment\">#输出： &#x27;2019-01-01&#x27; </span></span><br><span class=\"line\">yesterday=$(date -d <span class=\"string\">&quot;yesterday&quot;</span> +%Y-%m-%d)</span><br><span class=\"line\">last_week=<span class=\"string\">&quot;&#x27;<span class=\"subst\">$(date -d <span class=\"string\">&quot;-7 day <span class=\"variable\">$&#123;today&#125;</span>&quot;</span> +%Y-%m-%d)</span>&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-案例\"><a href=\"#3-案例\" class=\"headerlink\" title=\"3. 案例\"></a>3. 案例</h3><p>案例：计算生日还有多少天</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">read</span> -p<span class=\"string\">&quot;Input your birthday(YYYYmmdd):&quot;</span> date1</span><br><span class=\"line\">m=`date --date=<span class=\"string\">&quot;<span class=\"variable\">$date1</span>&quot;</span> +%m` <span class=\"comment\">#得到生日的月</span></span><br><span class=\"line\">d=`date --date=<span class=\"string\">&quot;<span class=\"variable\">$date1</span>&quot;</span> +%d` <span class=\"comment\">#得到生日的日</span></span><br><span class=\"line\">date_now=`date +%s` <span class=\"comment\">#得到当前时间的秒值</span></span><br><span class=\"line\">y=`date +%Y` <span class=\"comment\">#得到当前时间的年</span></span><br><span class=\"line\">birth=`date --date=<span class=\"string\">&quot;$y$m<span class=\"variable\">$d</span>&quot;</span> +%s` <span class=\"comment\">#得到今年的生日日期的秒值</span></span><br><span class=\"line\">internal=$((<span class=\"variable\">$birth</span>-<span class=\"variable\">$date_now</span>)) <span class=\"comment\">#计算今日到生日日期的间隔时间</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$internal</span>&quot;</span> -lt <span class=\"string\">&quot;0&quot;</span> ]; <span class=\"keyword\">then</span> <span class=\"comment\">#判断今天的生日是否已过</span></span><br><span class=\"line\">birth=`date --date=<span class=\"string\">&quot;<span class=\"subst\">$(($y+1)</span>)$m<span class=\"variable\">$d</span>&quot;</span> +%s` <span class=\"comment\">#得到明天的生日日期秒值</span></span><br><span class=\"line\">internal=$((<span class=\"variable\">$birth</span>-<span class=\"variable\">$date_now</span>))<span class=\"comment\">#计算今天到下一个生日的间隔时间</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Thereis :<span class=\"subst\">$(($internal/60/60/24)</span>) days.&quot;</span> <span class=\"comment\">#输出结果，秒换算为天</span></span><br></pre></td></tr></table></figure>\n<p>案例2：循环日期计算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_date=<span class=\"string\">&quot;2017-12-01&quot;</span></span><br><span class=\"line\">last_date=<span class=\"string\">&quot;2017-11-30&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((i=0;i&lt;=15;i++));</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  start_date=`date -d <span class=\"string\">&quot;+<span class=\"variable\">$i</span> month <span class=\"variable\">$&#123;set_date&#125;</span>&quot;</span> +%Y-%m-%d`</span><br><span class=\"line\">  input_date=`date -d <span class=\"string\">&quot;-1 day <span class=\"variable\">$&#123;start_date&#125;</span>&quot;</span> +%Y-%m-%d`</span><br><span class=\"line\">  date_str=`date -d <span class=\"string\">&quot;<span class=\"variable\">$&#123;input_date&#125;</span>&quot;</span> +%Y%m%d`</span><br><span class=\"line\">  sed -i <span class=\"string\">&quot;s/<span class=\"variable\">$&#123;last_date&#125;</span>/<span class=\"variable\">$&#123;input_date&#125;</span>/g&quot;</span> _config.sh </span><br><span class=\"line\"></span><br><span class=\"line\">  last_date=<span class=\"variable\">$input_date</span></span><br><span class=\"line\"></span><br><span class=\"line\">  sh train_pinlist.sh</span><br><span class=\"line\">  sh get_features.sh</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>案例3：循环日期计算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">START_DATE=<span class=\"string\">&#x27;2018-10-12&#x27;</span></span><br><span class=\"line\">END_DATE=<span class=\"string\">&#x27;2018-12-11&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"string\">&quot;<span class=\"variable\">$START_DATE</span>&quot;</span> != <span class=\"string\">&quot;<span class=\"variable\">$END_DATE</span>&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;****** the date is <span class=\"variable\">$START_DATE</span> !!! ******&quot;</span></span><br><span class=\"line\">    hive -S --hiveconf dt=<span class=\"variable\">$START_DATE</span>  -f  a01_extract_feat_jt_transaction.sql</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;****** <span class=\"variable\">$START_DATE</span> finished !!!!&quot;</span></span><br><span class=\"line\">    NEXT_DATE=`date -d <span class=\"string\">&quot;1 day <span class=\"variable\">$&#123;START_DATE&#125;</span>&quot;</span> +%Y-%m-%d`</span><br><span class=\"line\">    START_DATE=<span class=\"variable\">$NEXT_DATE</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、日期函数\"><a href=\"#二、日期函数\" class=\"headerlink\" title=\"二、日期函数\"></a>二、日期函数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1:判断是否闰年check_leap() #</span><br><span class=\"line\">#2:获取月份最大日期get_mon_days() #</span><br><span class=\"line\">#3:检查日期格式check_date() #</span><br><span class=\"line\">#4:返回昨天日期get_before_date() #</span><br><span class=\"line\">#5:返回明天日期get_next_date() #</span><br><span class=\"line\">#6:返回当月月末日期YYYYMMDD get_cur_date()</span><br><span class=\"line\">#7:返回当月月份YYYYMM get_cur_month()</span><br><span class=\"line\">#8:返回上月月末日期YYYYMMDD get_last_date()</span><br><span class=\"line\">#9:返回上月月份YYYYMM get_last_month()</span><br></pre></td></tr></table></figure>"},{"title":"tensorflow","date":"2022-03-01T03:32:38.000Z","_content":"\ntf易混淆操作\n\n<!-- more -->\n\n\n[TOC]\n\n# Tensorflow笔记\n\n# name_scope VS variable_scope\n\n参考知乎：https://zhuanlan.zhihu.com/p/52055580\n\n**注意**，tf.variable() 和tf.get_variable()有不同的创建变量的方式：**tf.Variable() 每次都会新建变量**。如果希望**重用**（**共享**）一些变量，就需要用到了**get_variable()，它会去搜索变量名，有就直接用，没有再新建**。此外，**为了对不同位置或者范围的共享进行区分**，就引入**名字域**。既然用到变量名了，就涉及到了名字域的概念。这就是为什么会有scope 的概念。name_scope 作用域操作，variable_scope 可以通过设置reuse 标志以及初始化方式来影响域下的变量，**因为想要达到变量共享的效果, 就要在 tf.variable_scope()的作用域下使用 tf.get_variable() 这种方式产生和提取变量. 不像 tf.Variable() 每次都会产生新的变量, tf.get_variable() 如果遇到了已经存在名字的变量时, 它会单纯的提取这个同样名字的变量，如果不存在名字的变量再创建.**\n\n## 基本流程\n\n建图(graph) -- 打开对话(session) -- 初始化变量 -- sess.run()\n\n```python\n# 模型保存\nsaver=tf.train.Saver() \nsess=tf.Session()\nsaver.save(sess,check_point_dir + 'model.ckpt',global_step=i+1)\n\n# 模型调用（只调用参数）\nsaver=tf.train.Saver()\nsess=tf.Session()\nckpt = tf.train.get_checkpoint_state(check_point_dir) #获取最新的保存的模型地址\nsaver.restore(sess,ckpt.model_saved_ckeckpoint_path)\n#saver.restore(sess,'....ckpt')\n\n#模型调用（参数和图）\nsess=tf.Session()\nckpt =tf.train.latest_checkpoint(check_point_path)  #获取最新的保存的模型地址\nsaver =tf.train.import_meta_graph(ckpt+'.meta') #载入结构图\n#saver =tf.train.import_meta_graph('........ckpt.meta')\nsaver.restore(sess,'....ckpt')\n\n#基本操作\na=tf.placeholder('float')\nb=tf.placeholder('float')#定义变量\ny=tf.mul(a,b) #构造op节点\n\nsess=tf.Session()#建立对话\nprint（sess.run(y,feed_dic{a:3,b:3})）#运行节点并打印结果\nsess.close（）#关闭会话\n\n#onehot\n#tf.one_hot(indices, depth, on_value=None, off_value=None, CLASS=8\nlabel=tf.constant([0,1,2,3,4,5,6,7])\nCLASS=8\nb=tf.one_hot(label,CLASS，1，0)\nwith tf.Session() as sess:\n\tsess.run(tf.global_variables_initializer())\n\tprint(sess.run(b))\n```\n\ncheckpoint文件：用于告知某些TF函数，这是最新的检查点文件（可以用记事本打开看一下）\n\n.data文件：（后面缀的那一串我也布吉岛是啥）这个文件保存的是图中所有变量的值，没有结构。\n\n.index文件：可能是保存了一些必要的索引叭（这个文件不大清楚）。\n\n.meta文件：保存了计算图的结构，但是不包含里面变量的值。\n\n```python\nimport tensorflow as tf\nwith tf.Session() as sess:\n　　#搭建网络\n　　x=tf.placeholder(tf.float32,name='x')\n　　y=tf.placeholder(tf.float32,name='y')\n　　b=tf.Variable(1.,name='b')\n　　xy=tf.multiply(x,y)\n　　op=tf.add(xy,b,name='op')\n　　sess.run(tf.global_variables_initializer())\n　　print(sess.run(op,feed_dict={x:2,y:3}))\n\n　　#ckpt保存\n　　saver=tf.train.Saver()\n　　saver.save(sess,'D:/pycharm files/111/ckpt/model_ck')\n\n　　#pb保存\n　　constant_graph=tf.graph_util.convert_variables_to_constants(sess,sess.graph_def,['op'])\n　　with tf.gfile.FastGFile('D:/pycharm files/111/pb/model.pb','wb') as f:\n　　f.write(constant_graph.SerializeToString())\n\n　　#savedmodel文件保存\n　　builder=tf.saved_model.builder.SavedModelBuilder('D:/pycharm files/111/savemodel')\n　　builder.add_meta_graph_and_variables(sess,['cpu_server_1'])\n　　builder.save()\n\n　　print('over')\n\n\n　　#ckpt加载\n　　saver=tf.train.import_meta_graph('D:/pycharm files/111/ckpt/model_ck.meta')\n　　saver.restore(sess,tf.train.latest_checkpoint('D:/pycharm files/111/ckpt'))\n\n　　#pb加载\n　　with tf.gfile.FastGFile('D:/pycharm files/111/pb/model.pb','rb') as f:\n　　　　graph_def=tf.GraphDef()\n　　　　graph_def.ParseFromString(f.read())\n　　　　tf.import_graph_def(graph_def,name='')\n\n　　#savemodel加载\n　　tf.saved_model.loader.load(sess, ['cpu_server_1'], 'D:/pycharm files/111/savemodel')\n\n　　#测试模型加载是否成功\n　　input_x = sess.graph.get_tensor_by_name('x:0')\n　　input_y = sess.graph.get_tensor_by_name('y:0')\n　　op = sess.graph.get_tensor_by_name('op:0')\n　　ret = sess.run(op, feed_dict={input_x: 5, input_y: 5})\n　　print(ret)\n```\n\n\n\n## graph & session\nhttps://www.cnblogs.com/hypnus-ly/p/8040951.html\n\n- 使用默认图和默认session\n\n  不用指定图或session\n  ```python\n  tf.reset_default_graph()   #清空默认图中所有节点\n  with tf.variable_scope(''):\n  \ta = tf.constant(1,name='a')\n  \tb = tf.constant(2,name='b')\n  \tc = a*b\n  with tf.Session() as sess:\n  \tprint(sess.run(c))\n  ```\n- 使用指定图\n\n  ```\n  g1=tf.Graph()\n  with g1.as_default():\n      # 在计算图g1中定义变量'v',并设置初始值为0。\n      v=tf.get_variable('v',initializer=tf.zeros_initializer()(shape = [1]))\n      \n  g2=tf.Graph()\n  with g2.as_default():\n      # 在计算图g2中定义变量'v',并设置初始值微1。\n      v=tf.get_variable('v',initializer=tf.ones_initializer()(shape = [1]))\n  \n  # 在计算图g1中读取变量'v'的取值\n  with tf.Session(graph=g1) as sess:\n      tf.global_variables_initializer().run()\n      with tf.variable_scope('',reuse=True):\n          # 在计算图g1中，变量'v'的取值应该为0，下一行代码会输出[0.]。\n          print(sess.run(tf.get_variable('v')))\n  \n  # 在计算图g2中读取变量'v'的取值\n  with tf.Session(graph=g2) as sess:\n      tf.global_variables_initializer().run()\n      with tf.variable_scope('',reuse=True):\n          # 在计算图g2中，变量'v'的取值应该为1，下一行代码会输出[1.]。\n          print(sess.run(tf.get_variable('v')))\n  ```\n\n| 集合名称                              | 集合内容                               | 使用场景                     |\n| ------------------------------------- | -------------------------------------- | ---------------------------- |\n| tf.GraphKeys.VARIABLES                | 所有变量                               | 持久化tensorflow模型         |\n| tf.GraphKeys.TRAINABLE_VARIABLES      | 可学习的变量（一般指神经网络中的参数） | 模型训练、生成模型可视化内容 |\n| tf.GraphKeys.SUMMARIES                | 日志生成相关的张量                     | tensorflow计算可视化         |\n| tf.GraphKeys.QUEUE_RUNNERS            | 处理输入的QueueRunner                  | 输入处理                     |\n| tf.GraphKeys.MOVING_AVERAGE_VARIABLES | 所有计算了滑动平均值的变量             | 计算变量的滑动平均值         |\n\n## 获取变量\n\n```python\ng_list = tf.global_variables() #获取素有变量（有的是tensor不是变量，不会获取）\nvariable_names = [v.name for v in tf.trainable_variables()] #获取所有可训练变量\n[print(n.name) for n in tf.get_default_graph().as_graph_def().node] #打印所有节点（tensor)\n\n```\n\n\n\n## tf.nn，tf.layers， tf.contrib 异同\n\n我们在使用tensorflow时，会发现tf.nn，tf.layers， tf.contrib模块有很多功能是重复的，尤其是卷积操作，在使用的时候，我们可以根据需要现在不同的模块。但有些时候可以一起混用。\n\n​        下面是对三个模块的简述：\n\n​        （1）tf.nn ：提供神经网络相关操作的支持，包括卷积操作（conv）、池化操作（pooling）、归一化、loss、分类操作、embedding、RNN、Evaluation。\n\n​        （2）tf.layers：主要提供的高层的神经网络，主要和卷积相关的，个人感觉是对tf.nn的进一步封装，tf.nn会更底层一些。\n\n​        （3）tf.contrib：tf.contrib.layers提供够将计算图中的  网络层、正则化、摘要操作、是构建计算图的高级操作，但是tf.contrib包含不稳定和实验代码，有可能以后API会改变。\n\n\n\n## load pb model\n\nhttps://leimao.github.io/blog/Save-Load-Inference-From-TF-Frozen-Graph/\n\n```python\n#参考 https://stackoverflow.com/questions/50632258/how-to-restore-tensorflow-model-from-pb-file-in-python\nimport tensorflow as tf\nfrom tensorflow.python.platform import gfile\nGRAPH_PB_PATH = './frozen_model.pb'\nwith tf.Session() as sess:\n   print(\"load graph\")\n   with gfile.FastGFile(GRAPH_PB_PATH,'rb') as f:\n       graph_def = tf.GraphDef()\n   graph_def.ParseFromString(f.read())\n   sess.graph.as_default()\n   tf.import_graph_def(graph_def, name='')\n   graph_nodes=[n for n in graph_def.node]\n   names = []\n   for t in graph_nodes:\n      names.append(t.name)\n   print(names)\n```\n\n如果报错：DecodeError: Error parsing message ,则修改为以下\n\n```python\nimport tensorflow as tf\nimport sys\nfrom tensorflow.python.platform import gfile\nfrom tensorflow.core.protobuf import saved_model_pb2\nfrom tensorflow.python.util import compat\ngraph_path = './saved_model_ctcvr.pb'\n# sess = tf.InteractiveSession(graph = self.graph)\nsess = tf.Session()\nwith gfile.FastGFile(graph_path, 'rb') as f:\n    data = compat.as_bytes(f.read())\n    sm = saved_model_pb2.SavedModel()\n    sm.ParseFromString(data)\n    graph_def = sm.meta_graphs[0].graph_def\nsess.graph.as_default()\ngraph = sess.graph\ntf.import_graph_def(graph_def,name='')\n\nprint('Check out the input placeholders:')\nnodes = [n.name + ' => ' +  n.op for n in graph_def.node if n.op in ('Placeholder')]\nfor node in nodes:\n    print(node)\n    \n # Get layer names\nlayers = [op.name for op in graph.get_operations()]\nfor layer in layers:\n    print(layer)\n\noutput_tensor = graph.get_tensor_by_name(\"import/model/pctr:0\")\noutput = sess.run(output_tensor, feed_dict = features_dic) #但是貌似知识import了图，没有restore variable\n```\n\n\n\n# tfrecord\n\n- 生成\n\n```python\nimport tensorflow as tf\n\n# 借助于TFRecordWriter 才能将信息写入TFRecord 文件\nwriter = tf.python_io.TFRecordWriter(output)\n\n# 创建example对象\nexample = tf.train.Example(features=tf.train.Features(feature={\n             'name': tf.train.Feature(bytes_list=tf.train.BytesList(value=[name])),\n             'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=[shape[0], shape[1], shape[2]])),\n             'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image_data]))\n        }\n        ))\n# 将example序列化成string 类型，然后写入。\n writer.write(example.SerializeToString())\n```\n\n- 解析\n\n```python\n```\n\n\n\n# 流式数据读取&训练\n\n简介：起两个进程，一个数据读取进程源源不断的读多个文件到内存；一个计算进程从内存中读数并计算\n\n## 流式读文件到内存\n\n为了方便管理，有**文件名队列**和**内存队列**\n\n- 文件名队列用tf.train.string_input_producer(文件名list)函数产生文件名和结束标志的队列；可设置shuffle（决定小文件间有没有shuffle）和num_epoch（决定读多少次全部文件名list）；\n- 读数据到内存队列用tf.WholeFileReader().read()读到内存队列\n- tf.train.start_queue_runners使整个线程开始运转\n\n![image-20200422180419725](/Users/hetianqi/Documents/charging/notes_of_the_world/tensorflow.assets/image-20200422180419725.png)\n\n## 代码示例\n```python\nimport tensorflow as tf\nfile_name_list=['a1.txt','a2.txt','a3.txt']\n\nwith tf.Session() as sess:\n  # 产生文件名队列\n  filename_queue = tf.train.string_input_producer(file_name_list,shuffle=False,num_epoch=5)\n  # reader从文件名队列中读数据。对应的方法是reader.read\n  reader = tf.WholeFileReader()\n  key , value = reader.read(filename_queue)\n  # tf.train.string_input_producer定义了一个epoch变量，要对它进行初始化\n   tf.local_variables_initializer().run()\n   # 使用start_queue_runners之后，才会开始填充队列\n   threads = tf.train.start_queue_runners(sess=sess)\n   i = 0\n   while True:# 内存队列检测到结束次数>num_epochs时就会自动抛出一个异常（OutOfRange），从而停止读数\n       i += 1 \n       # 获取图片数据并保存\n       data = sess.run(value)\n```\n\n\n\n# tensorboard\n\n\n\n1. cd到wirter文件夹的上层路径\n2. 执行以下命令\n\n```\ntensorboard --logdir v0\n```\n\n3. 打开http://localhost:6006/  （terminal的路径不是这个的话依然打开这个路径。。。）\n\n\n\n# 控制日志级别\n\n```python\n# logger = logging.getLogger(\"tensorflow\")\n# 貌似tensorflow的logger默认就有一个StreamHandler了\n# 所以，首先判断len(logger.handlers)是否为1\n# 如果为1的话， 说明只有默认的StreamHandler,\n# 那么先清空handlers,然后再加入指定格式(formatter)的StreamHandler和FileHandler\ndef set_logger():\n    logger = logging.getLogger(\"tensorflow\")\n    if len(logger.handlers) == 1:\n        logger.handlers = []\n        logger.setLevel(logging.DEBUG)\n\n        formatter = logging.Formatter(\n            \"%(asctime)s - [%(filename)s:%(lineno)d] - %(name)s - %(levelname)s - %(message)s\")\n        ch = logging.StreamHandler(sys.stdout)\n        ch.setLevel(logging.DEBUG)\n        ch.setFormatter(formatter)\n\n        fh = logging.FileHandler('tensorflow.log')\n        fh.setLevel(logging.DEBUG)\n        fh.setFormatter(formatter)\n\n        logger.addHandler(ch)\n        logger.addHandler(fh)\n    return logger\nlogger = set_logger()\ntf.logging.set_verbosity(tf.logging.INFO)\n```\n\n日志等级：debug<info<warn<error\n\n# tf.identity,=,assign的区别\n\n- tf.identity(变量引用)\n\ntf.identity在计算图内部创建了两个节点，send/recv节点，用来发送和接受两个变量，如果两个变量在不同的设备上，比如CPU和GPU，那么将会复制变量，如果在一个设备上，将会只是一个引用\n\n- \n  - 引用变量：当遇到一个操作没有name这个参数的时候，可以用它来给该操作设置一个name，这样在模型测试阶段直接加载图模型，然后通过name来获取op\n  - 复制变量：不同设备(CPU\\GPU)之间传递变量的值\n  - 作为一个虚拟节点来控制流程操作，一般配合tf.control_dependencies()使用\n\n**Note：**具体实例参考[In TensorFlow, what is tf.identity used for?](https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/34877523/in-tensorflow-what-is-tf-identity-used-for)中前三个回答\n\n- =\n\n=只是拷贝内存，而y不会作为一个tensor在图中出现\n\n如果希望y成为一个tensor出现在图中，=的右边必须是一个op，而遗憾的x是一个tensor，所以\n\n需要利用tf.identity来告诉告诉编译器，y可以是一个和x一样的tensor。\n\n```python\nimport tensorflow as tf\n\nx = tf.Variable(1.0)\nx_plus_1 = tf.assign_add(x, 1)\nwith tf.control_dependencies([x_plus_1]):\n    y = x\n    #y = tf.identity(x)\n\ninit = tf.initialize_all_variables()\nwith tf.Session() as session:\n    init.run()\n    for i in range(5):\n        print('y=',y.eval())\n        \n#y= 1.0\n#y= 1.0\n#y= 1.0\n#y= 1.0\n#y= 1.0\n\nimport tensorflow as tf\n\nx = tf.Variable(1.0)\nx_plus_1 = tf.assign_add(x, 1)\nwith tf.control_dependencies([x_plus_1]):\n    y = tf.identity(x)\n\ninit = tf.initialize_all_variables()\nwith tf.Session() as session:\n    init.run()\n    for i in range(5):\n        print('y=',y.eval())\n\n#y= 2.0\n#y= 3.0\n#y= 4.0\n#y= 5.0\n#y= 6.0        \n```\n\n# TensorFlow入门12 -- Checkpoints，保存和恢复Estimator创建的模型\n\n参考 https://www.jianshu.com/p/60c3b084fe44\n\n模型训练好了后，下一步就是保存（Save）和恢复（restore）模型，TensorFlow提供两种模型格式（Model Format）\n\n1，Checkpoints, 该格式依赖于创建模型的代码.\n\n2，SavedModel, 该格式不依赖于创建模型的代码.\n\n本文主要讨论检查点(Checkpoint).\n\n如《[从数据的角度理解TensorFlow鸢尾花分类程序6](https://www.jianshu.com/p/4e1d4bfd056d)》一文所述，在创建tf.estimator.DNNClassifier对象时，其构造函数__init__有一个参数：\n\n**model_dir：**保存模型参数的路径。（Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into a estimator to continue training a previously saved model.）\n\na.当没有指定的时候，Estimator 会将检查点文件写入由 Python 的 [tempfile.mkdtemp](https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.python.org%2F3%2Flibrary%2Ftempfile.html%23tempfile.mkdtemp)函数选择的临时目录中。用语句 print(tempfile.gettempdir())可以查出本机的临时目录\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-617d15c988fca257.png?imageMogr2/auto-orient/strip|imageView2/2/w/704/format/webp)\n\ntempfile.gettempdir\n\nb.当指定了目录的时候，例如：*model_dir = 'models/iris'*，Estimator 会将检查点文件写入~/models/iris\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-ede38dbd30efd3c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1074/format/webp)\n\n有了保存检查点文件路径后，tf.estimator.DNNClassifier对象会在**运行train方法的时候，写入检查点文件，**如下图所示：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-82fde1420900d6b5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\ntrain方法负责写入检查点文件\n\n**那train方法以什么频率写入检查点文件呢？**\n\n默认情况下，Estimator 按照以下时间安排将[检查点](https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fmachine-learning%2Fglossary%2F%23checkpoint)保存到 model_dir 中：\n\na.每 10 分钟（600 秒）写入一个检查点。\n\nb.在 train 方法开始（第一次迭代）和完成（最后一次迭代）时写入一个检查点。\n\nc.只在目录中保留 5 个最近写入的检查点。\n\n**保存好检查点文件后，如何恢复模型呢？**\n\nEstimator 将一个检查点保存到 model_dir 中后，每次调用 Estimator 的 train、eval 或 predict 方法时，都会发生下列情况：\n\na) Estimator 通过运行 model_fn() 构建模型[图](https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fmachine-learning%2Fglossary%2F%23graph)。（要详细了解 model_fn()，请参阅[创建自定义 Estimator](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.tensorflow.org%2Fget_started%2Fcustom_estimators)。）\n\nb) Estimator 根据最近写入的检查点中存储的数据来初始化新模型的权重。\n\n换言之，如下图所示，一旦存在检查点，TensorFlow 就会在您每次调用 train()、evaluate() 或 predict() 时重建模型。\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-d5376e32b383d1de.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n**不当恢复**\n\n通过检查点恢复模型的状态这一操作**仅在模型和检查点兼容时可行**。例如，假设训练了一个 tf.estimator.DNNClassifier，它包含 2 个隐藏层且每层都有 10 个节点；在训练之后（TensorFlow已在 models/iris 中创建检查点），将每个隐藏层中的神经元数量从 10 更改为 3，然后重新训练模型，由于检查点中的状态与 修改后tf.estimator.DNNClassifier 中描述的模型不兼容，因此重新训练失败并出现以下错误，如下图所示：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-66ba8e48437be765.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/976/format/webp)\n\n不当恢复\n\n**解决不当恢复**\n\n1，当模型参数一直在变化的时候，最简单的方式是，不要指定*model_dir，*这样TensorFlow不会启动Checkpoint模型恢复，方便你随时修改模型。\n\n2，启动Checkpoint的情况下，用Git为每个 model-dir 所需的代码保存一个副本，即为每个模型版本创建一个单独的 git 分支。这种区分将有助于保证检查点的可恢复性。\n\n**总结**：检查点提供了一种简单的自动机制来保存和恢复由 Estimator 创建的模型。\n\n# 分布式训练\n\n- ps: Parameter Sever, 参数服务器\n- chief: ps-worker架构中的主节点\n- worker: 正常训练节点\n- evaluator: 评估节点，不参与训练，只用来进行训练数据评估\n\n# 记录timeline-tf.train.ProfilerHook\n\n通过ProfilerHook对tensor代码中的各个节点耗时情况进行分析\n\nhttps://zhuanlan.zhihu.com/p/147319531\n\n```python\ndef train_and_eval(model):\n    \"\"\"\n    :param model: 声明的estimator实例\n    :return: None\n    :usage: 进行模型训练，并在指定步长的时候进行结果评估\n    \"\"\"\n    timeline_hook = tf.train.ProfilerHook(save_steps=100, output_dir=os.path.join(\n            os.getcwd(), './timeline_track'\n        ))\n\n    hook = tf.contrib.estimator.stop_if_no_increase_hook(\n        model,\n        metric_name='ctcvr_cvr_auc_esmm',\n        max_steps_without_increase=configuration_params['max_steps_without_increase'],\n        # maximum number of training steps with no decrease in the given metric.\n        min_steps=configuration_params['min_steps'],  # stop is never requested if global step is less than this value\n        run_every_steps=configuration_params['run_every_steps'],\n        run_every_secs=None\n    )\n\n    train_spec = tf.estimator.TrainSpec(\n        input_fn=lambda: input_fn(os.path.join(os.getcwd(),\n                                               CONFIG_TRAIN['train_data']),\n                                  'train', CONFIG_TRAIN['batch_size']),\n        hooks=[hook, timeline_hook]\n    )\n\n    eval_spec = tf.estimator.EvalSpec(\n        input_fn=lambda: input_fn(os.path.join(os.getcwd(),\n                                               CONFIG_TRAIN['test_data']),\n                                  'eval', 128),\n        steps=CONFIG.evalconfig['steps'],\n        throttle_secs=30\n        )\n\n    tf.estimator.train_and_evaluate(model, train_spec, eval_spec)\n```\n\ntimeline.json：每个保存步长输出的监控文件\n\n- web展示\n\n  1. 在chrome中打开“chome://tracing”页面\n\n     ![img](https://pic4.zhimg.com/80/v2-cfed5df9f0c6ae2d180e7b8c65ed233b_720w.jpg)\n\n\n- - 点击“load”，将上一步中生成time-line.json文件导入，导入任意一个即可\n  - 输出结果如下：\n\n![img](https://pic2.zhimg.com/80/v2-5dd2ee82f762b8fa9ef2a64e631f9cf1_720w.jpg)\n\n","source":"_posts/0_代码相关/tensorflow.md","raw":"---\ntitle: tensorflow\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\ntf易混淆操作\n\n<!-- more -->\n\n\n[TOC]\n\n# Tensorflow笔记\n\n# name_scope VS variable_scope\n\n参考知乎：https://zhuanlan.zhihu.com/p/52055580\n\n**注意**，tf.variable() 和tf.get_variable()有不同的创建变量的方式：**tf.Variable() 每次都会新建变量**。如果希望**重用**（**共享**）一些变量，就需要用到了**get_variable()，它会去搜索变量名，有就直接用，没有再新建**。此外，**为了对不同位置或者范围的共享进行区分**，就引入**名字域**。既然用到变量名了，就涉及到了名字域的概念。这就是为什么会有scope 的概念。name_scope 作用域操作，variable_scope 可以通过设置reuse 标志以及初始化方式来影响域下的变量，**因为想要达到变量共享的效果, 就要在 tf.variable_scope()的作用域下使用 tf.get_variable() 这种方式产生和提取变量. 不像 tf.Variable() 每次都会产生新的变量, tf.get_variable() 如果遇到了已经存在名字的变量时, 它会单纯的提取这个同样名字的变量，如果不存在名字的变量再创建.**\n\n## 基本流程\n\n建图(graph) -- 打开对话(session) -- 初始化变量 -- sess.run()\n\n```python\n# 模型保存\nsaver=tf.train.Saver() \nsess=tf.Session()\nsaver.save(sess,check_point_dir + 'model.ckpt',global_step=i+1)\n\n# 模型调用（只调用参数）\nsaver=tf.train.Saver()\nsess=tf.Session()\nckpt = tf.train.get_checkpoint_state(check_point_dir) #获取最新的保存的模型地址\nsaver.restore(sess,ckpt.model_saved_ckeckpoint_path)\n#saver.restore(sess,'....ckpt')\n\n#模型调用（参数和图）\nsess=tf.Session()\nckpt =tf.train.latest_checkpoint(check_point_path)  #获取最新的保存的模型地址\nsaver =tf.train.import_meta_graph(ckpt+'.meta') #载入结构图\n#saver =tf.train.import_meta_graph('........ckpt.meta')\nsaver.restore(sess,'....ckpt')\n\n#基本操作\na=tf.placeholder('float')\nb=tf.placeholder('float')#定义变量\ny=tf.mul(a,b) #构造op节点\n\nsess=tf.Session()#建立对话\nprint（sess.run(y,feed_dic{a:3,b:3})）#运行节点并打印结果\nsess.close（）#关闭会话\n\n#onehot\n#tf.one_hot(indices, depth, on_value=None, off_value=None, CLASS=8\nlabel=tf.constant([0,1,2,3,4,5,6,7])\nCLASS=8\nb=tf.one_hot(label,CLASS，1，0)\nwith tf.Session() as sess:\n\tsess.run(tf.global_variables_initializer())\n\tprint(sess.run(b))\n```\n\ncheckpoint文件：用于告知某些TF函数，这是最新的检查点文件（可以用记事本打开看一下）\n\n.data文件：（后面缀的那一串我也布吉岛是啥）这个文件保存的是图中所有变量的值，没有结构。\n\n.index文件：可能是保存了一些必要的索引叭（这个文件不大清楚）。\n\n.meta文件：保存了计算图的结构，但是不包含里面变量的值。\n\n```python\nimport tensorflow as tf\nwith tf.Session() as sess:\n　　#搭建网络\n　　x=tf.placeholder(tf.float32,name='x')\n　　y=tf.placeholder(tf.float32,name='y')\n　　b=tf.Variable(1.,name='b')\n　　xy=tf.multiply(x,y)\n　　op=tf.add(xy,b,name='op')\n　　sess.run(tf.global_variables_initializer())\n　　print(sess.run(op,feed_dict={x:2,y:3}))\n\n　　#ckpt保存\n　　saver=tf.train.Saver()\n　　saver.save(sess,'D:/pycharm files/111/ckpt/model_ck')\n\n　　#pb保存\n　　constant_graph=tf.graph_util.convert_variables_to_constants(sess,sess.graph_def,['op'])\n　　with tf.gfile.FastGFile('D:/pycharm files/111/pb/model.pb','wb') as f:\n　　f.write(constant_graph.SerializeToString())\n\n　　#savedmodel文件保存\n　　builder=tf.saved_model.builder.SavedModelBuilder('D:/pycharm files/111/savemodel')\n　　builder.add_meta_graph_and_variables(sess,['cpu_server_1'])\n　　builder.save()\n\n　　print('over')\n\n\n　　#ckpt加载\n　　saver=tf.train.import_meta_graph('D:/pycharm files/111/ckpt/model_ck.meta')\n　　saver.restore(sess,tf.train.latest_checkpoint('D:/pycharm files/111/ckpt'))\n\n　　#pb加载\n　　with tf.gfile.FastGFile('D:/pycharm files/111/pb/model.pb','rb') as f:\n　　　　graph_def=tf.GraphDef()\n　　　　graph_def.ParseFromString(f.read())\n　　　　tf.import_graph_def(graph_def,name='')\n\n　　#savemodel加载\n　　tf.saved_model.loader.load(sess, ['cpu_server_1'], 'D:/pycharm files/111/savemodel')\n\n　　#测试模型加载是否成功\n　　input_x = sess.graph.get_tensor_by_name('x:0')\n　　input_y = sess.graph.get_tensor_by_name('y:0')\n　　op = sess.graph.get_tensor_by_name('op:0')\n　　ret = sess.run(op, feed_dict={input_x: 5, input_y: 5})\n　　print(ret)\n```\n\n\n\n## graph & session\nhttps://www.cnblogs.com/hypnus-ly/p/8040951.html\n\n- 使用默认图和默认session\n\n  不用指定图或session\n  ```python\n  tf.reset_default_graph()   #清空默认图中所有节点\n  with tf.variable_scope(''):\n  \ta = tf.constant(1,name='a')\n  \tb = tf.constant(2,name='b')\n  \tc = a*b\n  with tf.Session() as sess:\n  \tprint(sess.run(c))\n  ```\n- 使用指定图\n\n  ```\n  g1=tf.Graph()\n  with g1.as_default():\n      # 在计算图g1中定义变量'v',并设置初始值为0。\n      v=tf.get_variable('v',initializer=tf.zeros_initializer()(shape = [1]))\n      \n  g2=tf.Graph()\n  with g2.as_default():\n      # 在计算图g2中定义变量'v',并设置初始值微1。\n      v=tf.get_variable('v',initializer=tf.ones_initializer()(shape = [1]))\n  \n  # 在计算图g1中读取变量'v'的取值\n  with tf.Session(graph=g1) as sess:\n      tf.global_variables_initializer().run()\n      with tf.variable_scope('',reuse=True):\n          # 在计算图g1中，变量'v'的取值应该为0，下一行代码会输出[0.]。\n          print(sess.run(tf.get_variable('v')))\n  \n  # 在计算图g2中读取变量'v'的取值\n  with tf.Session(graph=g2) as sess:\n      tf.global_variables_initializer().run()\n      with tf.variable_scope('',reuse=True):\n          # 在计算图g2中，变量'v'的取值应该为1，下一行代码会输出[1.]。\n          print(sess.run(tf.get_variable('v')))\n  ```\n\n| 集合名称                              | 集合内容                               | 使用场景                     |\n| ------------------------------------- | -------------------------------------- | ---------------------------- |\n| tf.GraphKeys.VARIABLES                | 所有变量                               | 持久化tensorflow模型         |\n| tf.GraphKeys.TRAINABLE_VARIABLES      | 可学习的变量（一般指神经网络中的参数） | 模型训练、生成模型可视化内容 |\n| tf.GraphKeys.SUMMARIES                | 日志生成相关的张量                     | tensorflow计算可视化         |\n| tf.GraphKeys.QUEUE_RUNNERS            | 处理输入的QueueRunner                  | 输入处理                     |\n| tf.GraphKeys.MOVING_AVERAGE_VARIABLES | 所有计算了滑动平均值的变量             | 计算变量的滑动平均值         |\n\n## 获取变量\n\n```python\ng_list = tf.global_variables() #获取素有变量（有的是tensor不是变量，不会获取）\nvariable_names = [v.name for v in tf.trainable_variables()] #获取所有可训练变量\n[print(n.name) for n in tf.get_default_graph().as_graph_def().node] #打印所有节点（tensor)\n\n```\n\n\n\n## tf.nn，tf.layers， tf.contrib 异同\n\n我们在使用tensorflow时，会发现tf.nn，tf.layers， tf.contrib模块有很多功能是重复的，尤其是卷积操作，在使用的时候，我们可以根据需要现在不同的模块。但有些时候可以一起混用。\n\n​        下面是对三个模块的简述：\n\n​        （1）tf.nn ：提供神经网络相关操作的支持，包括卷积操作（conv）、池化操作（pooling）、归一化、loss、分类操作、embedding、RNN、Evaluation。\n\n​        （2）tf.layers：主要提供的高层的神经网络，主要和卷积相关的，个人感觉是对tf.nn的进一步封装，tf.nn会更底层一些。\n\n​        （3）tf.contrib：tf.contrib.layers提供够将计算图中的  网络层、正则化、摘要操作、是构建计算图的高级操作，但是tf.contrib包含不稳定和实验代码，有可能以后API会改变。\n\n\n\n## load pb model\n\nhttps://leimao.github.io/blog/Save-Load-Inference-From-TF-Frozen-Graph/\n\n```python\n#参考 https://stackoverflow.com/questions/50632258/how-to-restore-tensorflow-model-from-pb-file-in-python\nimport tensorflow as tf\nfrom tensorflow.python.platform import gfile\nGRAPH_PB_PATH = './frozen_model.pb'\nwith tf.Session() as sess:\n   print(\"load graph\")\n   with gfile.FastGFile(GRAPH_PB_PATH,'rb') as f:\n       graph_def = tf.GraphDef()\n   graph_def.ParseFromString(f.read())\n   sess.graph.as_default()\n   tf.import_graph_def(graph_def, name='')\n   graph_nodes=[n for n in graph_def.node]\n   names = []\n   for t in graph_nodes:\n      names.append(t.name)\n   print(names)\n```\n\n如果报错：DecodeError: Error parsing message ,则修改为以下\n\n```python\nimport tensorflow as tf\nimport sys\nfrom tensorflow.python.platform import gfile\nfrom tensorflow.core.protobuf import saved_model_pb2\nfrom tensorflow.python.util import compat\ngraph_path = './saved_model_ctcvr.pb'\n# sess = tf.InteractiveSession(graph = self.graph)\nsess = tf.Session()\nwith gfile.FastGFile(graph_path, 'rb') as f:\n    data = compat.as_bytes(f.read())\n    sm = saved_model_pb2.SavedModel()\n    sm.ParseFromString(data)\n    graph_def = sm.meta_graphs[0].graph_def\nsess.graph.as_default()\ngraph = sess.graph\ntf.import_graph_def(graph_def,name='')\n\nprint('Check out the input placeholders:')\nnodes = [n.name + ' => ' +  n.op for n in graph_def.node if n.op in ('Placeholder')]\nfor node in nodes:\n    print(node)\n    \n # Get layer names\nlayers = [op.name for op in graph.get_operations()]\nfor layer in layers:\n    print(layer)\n\noutput_tensor = graph.get_tensor_by_name(\"import/model/pctr:0\")\noutput = sess.run(output_tensor, feed_dict = features_dic) #但是貌似知识import了图，没有restore variable\n```\n\n\n\n# tfrecord\n\n- 生成\n\n```python\nimport tensorflow as tf\n\n# 借助于TFRecordWriter 才能将信息写入TFRecord 文件\nwriter = tf.python_io.TFRecordWriter(output)\n\n# 创建example对象\nexample = tf.train.Example(features=tf.train.Features(feature={\n             'name': tf.train.Feature(bytes_list=tf.train.BytesList(value=[name])),\n             'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=[shape[0], shape[1], shape[2]])),\n             'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image_data]))\n        }\n        ))\n# 将example序列化成string 类型，然后写入。\n writer.write(example.SerializeToString())\n```\n\n- 解析\n\n```python\n```\n\n\n\n# 流式数据读取&训练\n\n简介：起两个进程，一个数据读取进程源源不断的读多个文件到内存；一个计算进程从内存中读数并计算\n\n## 流式读文件到内存\n\n为了方便管理，有**文件名队列**和**内存队列**\n\n- 文件名队列用tf.train.string_input_producer(文件名list)函数产生文件名和结束标志的队列；可设置shuffle（决定小文件间有没有shuffle）和num_epoch（决定读多少次全部文件名list）；\n- 读数据到内存队列用tf.WholeFileReader().read()读到内存队列\n- tf.train.start_queue_runners使整个线程开始运转\n\n![image-20200422180419725](/Users/hetianqi/Documents/charging/notes_of_the_world/tensorflow.assets/image-20200422180419725.png)\n\n## 代码示例\n```python\nimport tensorflow as tf\nfile_name_list=['a1.txt','a2.txt','a3.txt']\n\nwith tf.Session() as sess:\n  # 产生文件名队列\n  filename_queue = tf.train.string_input_producer(file_name_list,shuffle=False,num_epoch=5)\n  # reader从文件名队列中读数据。对应的方法是reader.read\n  reader = tf.WholeFileReader()\n  key , value = reader.read(filename_queue)\n  # tf.train.string_input_producer定义了一个epoch变量，要对它进行初始化\n   tf.local_variables_initializer().run()\n   # 使用start_queue_runners之后，才会开始填充队列\n   threads = tf.train.start_queue_runners(sess=sess)\n   i = 0\n   while True:# 内存队列检测到结束次数>num_epochs时就会自动抛出一个异常（OutOfRange），从而停止读数\n       i += 1 \n       # 获取图片数据并保存\n       data = sess.run(value)\n```\n\n\n\n# tensorboard\n\n\n\n1. cd到wirter文件夹的上层路径\n2. 执行以下命令\n\n```\ntensorboard --logdir v0\n```\n\n3. 打开http://localhost:6006/  （terminal的路径不是这个的话依然打开这个路径。。。）\n\n\n\n# 控制日志级别\n\n```python\n# logger = logging.getLogger(\"tensorflow\")\n# 貌似tensorflow的logger默认就有一个StreamHandler了\n# 所以，首先判断len(logger.handlers)是否为1\n# 如果为1的话， 说明只有默认的StreamHandler,\n# 那么先清空handlers,然后再加入指定格式(formatter)的StreamHandler和FileHandler\ndef set_logger():\n    logger = logging.getLogger(\"tensorflow\")\n    if len(logger.handlers) == 1:\n        logger.handlers = []\n        logger.setLevel(logging.DEBUG)\n\n        formatter = logging.Formatter(\n            \"%(asctime)s - [%(filename)s:%(lineno)d] - %(name)s - %(levelname)s - %(message)s\")\n        ch = logging.StreamHandler(sys.stdout)\n        ch.setLevel(logging.DEBUG)\n        ch.setFormatter(formatter)\n\n        fh = logging.FileHandler('tensorflow.log')\n        fh.setLevel(logging.DEBUG)\n        fh.setFormatter(formatter)\n\n        logger.addHandler(ch)\n        logger.addHandler(fh)\n    return logger\nlogger = set_logger()\ntf.logging.set_verbosity(tf.logging.INFO)\n```\n\n日志等级：debug<info<warn<error\n\n# tf.identity,=,assign的区别\n\n- tf.identity(变量引用)\n\ntf.identity在计算图内部创建了两个节点，send/recv节点，用来发送和接受两个变量，如果两个变量在不同的设备上，比如CPU和GPU，那么将会复制变量，如果在一个设备上，将会只是一个引用\n\n- \n  - 引用变量：当遇到一个操作没有name这个参数的时候，可以用它来给该操作设置一个name，这样在模型测试阶段直接加载图模型，然后通过name来获取op\n  - 复制变量：不同设备(CPU\\GPU)之间传递变量的值\n  - 作为一个虚拟节点来控制流程操作，一般配合tf.control_dependencies()使用\n\n**Note：**具体实例参考[In TensorFlow, what is tf.identity used for?](https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/34877523/in-tensorflow-what-is-tf-identity-used-for)中前三个回答\n\n- =\n\n=只是拷贝内存，而y不会作为一个tensor在图中出现\n\n如果希望y成为一个tensor出现在图中，=的右边必须是一个op，而遗憾的x是一个tensor，所以\n\n需要利用tf.identity来告诉告诉编译器，y可以是一个和x一样的tensor。\n\n```python\nimport tensorflow as tf\n\nx = tf.Variable(1.0)\nx_plus_1 = tf.assign_add(x, 1)\nwith tf.control_dependencies([x_plus_1]):\n    y = x\n    #y = tf.identity(x)\n\ninit = tf.initialize_all_variables()\nwith tf.Session() as session:\n    init.run()\n    for i in range(5):\n        print('y=',y.eval())\n        \n#y= 1.0\n#y= 1.0\n#y= 1.0\n#y= 1.0\n#y= 1.0\n\nimport tensorflow as tf\n\nx = tf.Variable(1.0)\nx_plus_1 = tf.assign_add(x, 1)\nwith tf.control_dependencies([x_plus_1]):\n    y = tf.identity(x)\n\ninit = tf.initialize_all_variables()\nwith tf.Session() as session:\n    init.run()\n    for i in range(5):\n        print('y=',y.eval())\n\n#y= 2.0\n#y= 3.0\n#y= 4.0\n#y= 5.0\n#y= 6.0        \n```\n\n# TensorFlow入门12 -- Checkpoints，保存和恢复Estimator创建的模型\n\n参考 https://www.jianshu.com/p/60c3b084fe44\n\n模型训练好了后，下一步就是保存（Save）和恢复（restore）模型，TensorFlow提供两种模型格式（Model Format）\n\n1，Checkpoints, 该格式依赖于创建模型的代码.\n\n2，SavedModel, 该格式不依赖于创建模型的代码.\n\n本文主要讨论检查点(Checkpoint).\n\n如《[从数据的角度理解TensorFlow鸢尾花分类程序6](https://www.jianshu.com/p/4e1d4bfd056d)》一文所述，在创建tf.estimator.DNNClassifier对象时，其构造函数__init__有一个参数：\n\n**model_dir：**保存模型参数的路径。（Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into a estimator to continue training a previously saved model.）\n\na.当没有指定的时候，Estimator 会将检查点文件写入由 Python 的 [tempfile.mkdtemp](https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.python.org%2F3%2Flibrary%2Ftempfile.html%23tempfile.mkdtemp)函数选择的临时目录中。用语句 print(tempfile.gettempdir())可以查出本机的临时目录\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-617d15c988fca257.png?imageMogr2/auto-orient/strip|imageView2/2/w/704/format/webp)\n\ntempfile.gettempdir\n\nb.当指定了目录的时候，例如：*model_dir = 'models/iris'*，Estimator 会将检查点文件写入~/models/iris\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-ede38dbd30efd3c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1074/format/webp)\n\n有了保存检查点文件路径后，tf.estimator.DNNClassifier对象会在**运行train方法的时候，写入检查点文件，**如下图所示：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-82fde1420900d6b5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\ntrain方法负责写入检查点文件\n\n**那train方法以什么频率写入检查点文件呢？**\n\n默认情况下，Estimator 按照以下时间安排将[检查点](https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fmachine-learning%2Fglossary%2F%23checkpoint)保存到 model_dir 中：\n\na.每 10 分钟（600 秒）写入一个检查点。\n\nb.在 train 方法开始（第一次迭代）和完成（最后一次迭代）时写入一个检查点。\n\nc.只在目录中保留 5 个最近写入的检查点。\n\n**保存好检查点文件后，如何恢复模型呢？**\n\nEstimator 将一个检查点保存到 model_dir 中后，每次调用 Estimator 的 train、eval 或 predict 方法时，都会发生下列情况：\n\na) Estimator 通过运行 model_fn() 构建模型[图](https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fmachine-learning%2Fglossary%2F%23graph)。（要详细了解 model_fn()，请参阅[创建自定义 Estimator](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.tensorflow.org%2Fget_started%2Fcustom_estimators)。）\n\nb) Estimator 根据最近写入的检查点中存储的数据来初始化新模型的权重。\n\n换言之，如下图所示，一旦存在检查点，TensorFlow 就会在您每次调用 train()、evaluate() 或 predict() 时重建模型。\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-d5376e32b383d1de.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n**不当恢复**\n\n通过检查点恢复模型的状态这一操作**仅在模型和检查点兼容时可行**。例如，假设训练了一个 tf.estimator.DNNClassifier，它包含 2 个隐藏层且每层都有 10 个节点；在训练之后（TensorFlow已在 models/iris 中创建检查点），将每个隐藏层中的神经元数量从 10 更改为 3，然后重新训练模型，由于检查点中的状态与 修改后tf.estimator.DNNClassifier 中描述的模型不兼容，因此重新训练失败并出现以下错误，如下图所示：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/10758717-66ba8e48437be765.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/976/format/webp)\n\n不当恢复\n\n**解决不当恢复**\n\n1，当模型参数一直在变化的时候，最简单的方式是，不要指定*model_dir，*这样TensorFlow不会启动Checkpoint模型恢复，方便你随时修改模型。\n\n2，启动Checkpoint的情况下，用Git为每个 model-dir 所需的代码保存一个副本，即为每个模型版本创建一个单独的 git 分支。这种区分将有助于保证检查点的可恢复性。\n\n**总结**：检查点提供了一种简单的自动机制来保存和恢复由 Estimator 创建的模型。\n\n# 分布式训练\n\n- ps: Parameter Sever, 参数服务器\n- chief: ps-worker架构中的主节点\n- worker: 正常训练节点\n- evaluator: 评估节点，不参与训练，只用来进行训练数据评估\n\n# 记录timeline-tf.train.ProfilerHook\n\n通过ProfilerHook对tensor代码中的各个节点耗时情况进行分析\n\nhttps://zhuanlan.zhihu.com/p/147319531\n\n```python\ndef train_and_eval(model):\n    \"\"\"\n    :param model: 声明的estimator实例\n    :return: None\n    :usage: 进行模型训练，并在指定步长的时候进行结果评估\n    \"\"\"\n    timeline_hook = tf.train.ProfilerHook(save_steps=100, output_dir=os.path.join(\n            os.getcwd(), './timeline_track'\n        ))\n\n    hook = tf.contrib.estimator.stop_if_no_increase_hook(\n        model,\n        metric_name='ctcvr_cvr_auc_esmm',\n        max_steps_without_increase=configuration_params['max_steps_without_increase'],\n        # maximum number of training steps with no decrease in the given metric.\n        min_steps=configuration_params['min_steps'],  # stop is never requested if global step is less than this value\n        run_every_steps=configuration_params['run_every_steps'],\n        run_every_secs=None\n    )\n\n    train_spec = tf.estimator.TrainSpec(\n        input_fn=lambda: input_fn(os.path.join(os.getcwd(),\n                                               CONFIG_TRAIN['train_data']),\n                                  'train', CONFIG_TRAIN['batch_size']),\n        hooks=[hook, timeline_hook]\n    )\n\n    eval_spec = tf.estimator.EvalSpec(\n        input_fn=lambda: input_fn(os.path.join(os.getcwd(),\n                                               CONFIG_TRAIN['test_data']),\n                                  'eval', 128),\n        steps=CONFIG.evalconfig['steps'],\n        throttle_secs=30\n        )\n\n    tf.estimator.train_and_evaluate(model, train_spec, eval_spec)\n```\n\ntimeline.json：每个保存步长输出的监控文件\n\n- web展示\n\n  1. 在chrome中打开“chome://tracing”页面\n\n     ![img](https://pic4.zhimg.com/80/v2-cfed5df9f0c6ae2d180e7b8c65ed233b_720w.jpg)\n\n\n- - 点击“load”，将上一步中生成time-line.json文件导入，导入任意一个即可\n  - 输出结果如下：\n\n![img](https://pic2.zhimg.com/80/v2-5dd2ee82f762b8fa9ef2a64e631f9cf1_720w.jpg)\n\n","slug":"0_代码相关/tensorflow","published":1,"updated":"2022-03-01T03:54:19.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly52004b8s32bnne2cmn","content":"<p>tf易混淆操作</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"Tensorflow笔记\"><a href=\"#Tensorflow笔记\" class=\"headerlink\" title=\"Tensorflow笔记\"></a>Tensorflow笔记</h1><h1 id=\"name-scope-VS-variable-scope\"><a href=\"#name-scope-VS-variable-scope\" class=\"headerlink\" title=\"name_scope VS variable_scope\"></a>name_scope VS variable_scope</h1><p>参考知乎：<a href=\"https://zhuanlan.zhihu.com/p/52055580\">https://zhuanlan.zhihu.com/p/52055580</a></p>\n<p><strong>注意</strong>，tf.variable() 和tf.get_variable()有不同的创建变量的方式：<strong>tf.Variable() 每次都会新建变量</strong>。如果希望<strong>重用</strong>（<strong>共享</strong>）一些变量，就需要用到了<strong>get_variable()，它会去搜索变量名，有就直接用，没有再新建</strong>。此外，<strong>为了对不同位置或者范围的共享进行区分</strong>，就引入<strong>名字域</strong>。既然用到变量名了，就涉及到了名字域的概念。这就是为什么会有scope 的概念。name_scope 作用域操作，variable_scope 可以通过设置reuse 标志以及初始化方式来影响域下的变量，<strong>因为想要达到变量共享的效果, 就要在 tf.variable_scope()的作用域下使用 tf.get_variable() 这种方式产生和提取变量. 不像 tf.Variable() 每次都会产生新的变量, tf.get_variable() 如果遇到了已经存在名字的变量时, 它会单纯的提取这个同样名字的变量，如果不存在名字的变量再创建.</strong></p>\n<h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>建图(graph) — 打开对话(session) — 初始化变量 — sess.run()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模型保存</span></span><br><span class=\"line\">saver=tf.train.Saver() </span><br><span class=\"line\">sess=tf.Session()</span><br><span class=\"line\">saver.save(sess,check_point_dir + <span class=\"string\">&#x27;model.ckpt&#x27;</span>,global_step=i+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模型调用（只调用参数）</span></span><br><span class=\"line\">saver=tf.train.Saver()</span><br><span class=\"line\">sess=tf.Session()</span><br><span class=\"line\">ckpt = tf.train.get_checkpoint_state(check_point_dir) <span class=\"comment\">#获取最新的保存的模型地址</span></span><br><span class=\"line\">saver.restore(sess,ckpt.model_saved_ckeckpoint_path)</span><br><span class=\"line\"><span class=\"comment\">#saver.restore(sess,&#x27;....ckpt&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#模型调用（参数和图）</span></span><br><span class=\"line\">sess=tf.Session()</span><br><span class=\"line\">ckpt =tf.train.latest_checkpoint(check_point_path)  <span class=\"comment\">#获取最新的保存的模型地址</span></span><br><span class=\"line\">saver =tf.train.import_meta_graph(ckpt+<span class=\"string\">&#x27;.meta&#x27;</span>) <span class=\"comment\">#载入结构图</span></span><br><span class=\"line\"><span class=\"comment\">#saver =tf.train.import_meta_graph(&#x27;........ckpt.meta&#x27;)</span></span><br><span class=\"line\">saver.restore(sess,<span class=\"string\">&#x27;....ckpt&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#基本操作</span></span><br><span class=\"line\">a=tf.placeholder(<span class=\"string\">&#x27;float&#x27;</span>)</span><br><span class=\"line\">b=tf.placeholder(<span class=\"string\">&#x27;float&#x27;</span>)<span class=\"comment\">#定义变量</span></span><br><span class=\"line\">y=tf.mul(a,b) <span class=\"comment\">#构造op节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">sess=tf.Session()<span class=\"comment\">#建立对话</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>（sess.run(y,feed_dic&#123;a:<span class=\"number\">3</span>,b:<span class=\"number\">3</span>&#125;)）<span class=\"comment\">#运行节点并打印结果</span></span><br><span class=\"line\">sess.close（）<span class=\"comment\">#关闭会话</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#onehot</span></span><br><span class=\"line\"><span class=\"comment\">#tf.one_hot(indices, depth, on_value=None, off_value=None, CLASS=8</span></span><br><span class=\"line\">label=tf.constant([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>])</span><br><span class=\"line\">CLASS=<span class=\"number\">8</span></span><br><span class=\"line\">b=tf.one_hot(label,CLASS，<span class=\"number\">1</span>，<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">\tsess.run(tf.global_variables_initializer())</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(sess.run(b))</span><br></pre></td></tr></table></figure>\n<p>checkpoint文件：用于告知某些TF函数，这是最新的检查点文件（可以用记事本打开看一下）</p>\n<p>.data文件：（后面缀的那一串我也布吉岛是啥）这个文件保存的是图中所有变量的值，没有结构。</p>\n<p>.index文件：可能是保存了一些必要的索引叭（这个文件不大清楚）。</p>\n<p>.meta文件：保存了计算图的结构，但是不包含里面变量的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">　　<span class=\"comment\">#搭建网络</span></span><br><span class=\"line\">　　x=tf.placeholder(tf.float32,name=<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">　　y=tf.placeholder(tf.float32,name=<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\">　　b=tf.Variable(<span class=\"number\">1.</span>,name=<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">　　xy=tf.multiply(x,y)</span><br><span class=\"line\">　　op=tf.add(xy,b,name=<span class=\"string\">&#x27;op&#x27;</span>)</span><br><span class=\"line\">　　sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">　　<span class=\"built_in\">print</span>(sess.run(op,feed_dict=&#123;x:<span class=\"number\">2</span>,y:<span class=\"number\">3</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#ckpt保存</span></span><br><span class=\"line\">　　saver=tf.train.Saver()</span><br><span class=\"line\">　　saver.save(sess,<span class=\"string\">&#x27;D:/pycharm files/111/ckpt/model_ck&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#pb保存</span></span><br><span class=\"line\">　　constant_graph=tf.graph_util.convert_variables_to_constants(sess,sess.graph_def,[<span class=\"string\">&#x27;op&#x27;</span>])</span><br><span class=\"line\">　　<span class=\"keyword\">with</span> tf.gfile.FastGFile(<span class=\"string\">&#x27;D:/pycharm files/111/pb/model.pb&#x27;</span>,<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">　　f.write(constant_graph.SerializeToString())</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#savedmodel文件保存</span></span><br><span class=\"line\">　　builder=tf.saved_model.builder.SavedModelBuilder(<span class=\"string\">&#x27;D:/pycharm files/111/savemodel&#x27;</span>)</span><br><span class=\"line\">　　builder.add_meta_graph_and_variables(sess,[<span class=\"string\">&#x27;cpu_server_1&#x27;</span>])</span><br><span class=\"line\">　　builder.save()</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#ckpt加载</span></span><br><span class=\"line\">　　saver=tf.train.import_meta_graph(<span class=\"string\">&#x27;D:/pycharm files/111/ckpt/model_ck.meta&#x27;</span>)</span><br><span class=\"line\">　　saver.restore(sess,tf.train.latest_checkpoint(<span class=\"string\">&#x27;D:/pycharm files/111/ckpt&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#pb加载</span></span><br><span class=\"line\">　　<span class=\"keyword\">with</span> tf.gfile.FastGFile(<span class=\"string\">&#x27;D:/pycharm files/111/pb/model.pb&#x27;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">　　　　graph_def=tf.GraphDef()</span><br><span class=\"line\">　　　　graph_def.ParseFromString(f.read())</span><br><span class=\"line\">　　　　tf.import_graph_def(graph_def,name=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#savemodel加载</span></span><br><span class=\"line\">　　tf.saved_model.loader.load(sess, [<span class=\"string\">&#x27;cpu_server_1&#x27;</span>], <span class=\"string\">&#x27;D:/pycharm files/111/savemodel&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#测试模型加载是否成功</span></span><br><span class=\"line\">　　input_x = sess.graph.get_tensor_by_name(<span class=\"string\">&#x27;x:0&#x27;</span>)</span><br><span class=\"line\">　　input_y = sess.graph.get_tensor_by_name(<span class=\"string\">&#x27;y:0&#x27;</span>)</span><br><span class=\"line\">　　op = sess.graph.get_tensor_by_name(<span class=\"string\">&#x27;op:0&#x27;</span>)</span><br><span class=\"line\">　　ret = sess.run(op, feed_dict=&#123;input_x: <span class=\"number\">5</span>, input_y: <span class=\"number\">5</span>&#125;)</span><br><span class=\"line\">　　<span class=\"built_in\">print</span>(ret)</span><br></pre></td></tr></table></figure>\n<h2 id=\"graph-amp-session\"><a href=\"#graph-amp-session\" class=\"headerlink\" title=\"graph &amp; session\"></a>graph &amp; session</h2><p><a href=\"https://www.cnblogs.com/hypnus-ly/p/8040951.html\">https://www.cnblogs.com/hypnus-ly/p/8040951.html</a></p>\n<ul>\n<li><p>使用默认图和默认session</p>\n<p>不用指定图或session</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf.reset_default_graph()   <span class=\"comment\">#清空默认图中所有节点</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.variable_scope(<span class=\"string\">&#x27;&#x27;</span>):</span><br><span class=\"line\">\ta = tf.constant(<span class=\"number\">1</span>,name=<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">\tb = tf.constant(<span class=\"number\">2</span>,name=<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">\tc = a*b</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(sess.run(c))</span><br></pre></td></tr></table></figure></li>\n<li><p>使用指定图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g1=tf.Graph()</span><br><span class=\"line\">with g1.as_default():</span><br><span class=\"line\">    # 在计算图g1中定义变量&#x27;v&#x27;,并设置初始值为0。</span><br><span class=\"line\">    v=tf.get_variable(&#x27;v&#x27;,initializer=tf.zeros_initializer()(shape = [1]))</span><br><span class=\"line\">    </span><br><span class=\"line\">g2=tf.Graph()</span><br><span class=\"line\">with g2.as_default():</span><br><span class=\"line\">    # 在计算图g2中定义变量&#x27;v&#x27;,并设置初始值微1。</span><br><span class=\"line\">    v=tf.get_variable(&#x27;v&#x27;,initializer=tf.ones_initializer()(shape = [1]))</span><br><span class=\"line\"></span><br><span class=\"line\"># 在计算图g1中读取变量&#x27;v&#x27;的取值</span><br><span class=\"line\">with tf.Session(graph=g1) as sess:</span><br><span class=\"line\">    tf.global_variables_initializer().run()</span><br><span class=\"line\">    with tf.variable_scope(&#x27;&#x27;,reuse=True):</span><br><span class=\"line\">        # 在计算图g1中，变量&#x27;v&#x27;的取值应该为0，下一行代码会输出[0.]。</span><br><span class=\"line\">        print(sess.run(tf.get_variable(&#x27;v&#x27;)))</span><br><span class=\"line\"></span><br><span class=\"line\"># 在计算图g2中读取变量&#x27;v&#x27;的取值</span><br><span class=\"line\">with tf.Session(graph=g2) as sess:</span><br><span class=\"line\">    tf.global_variables_initializer().run()</span><br><span class=\"line\">    with tf.variable_scope(&#x27;&#x27;,reuse=True):</span><br><span class=\"line\">        # 在计算图g2中，变量&#x27;v&#x27;的取值应该为1，下一行代码会输出[1.]。</span><br><span class=\"line\">        print(sess.run(tf.get_variable(&#x27;v&#x27;)))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>集合名称</th>\n<th>集合内容</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tf.GraphKeys.VARIABLES</td>\n<td>所有变量</td>\n<td>持久化tensorflow模型</td>\n</tr>\n<tr>\n<td>tf.GraphKeys.TRAINABLE_VARIABLES</td>\n<td>可学习的变量（一般指神经网络中的参数）</td>\n<td>模型训练、生成模型可视化内容</td>\n</tr>\n<tr>\n<td>tf.GraphKeys.SUMMARIES</td>\n<td>日志生成相关的张量</td>\n<td>tensorflow计算可视化</td>\n</tr>\n<tr>\n<td>tf.GraphKeys.QUEUE_RUNNERS</td>\n<td>处理输入的QueueRunner</td>\n<td>输入处理</td>\n</tr>\n<tr>\n<td>tf.GraphKeys.MOVING_AVERAGE_VARIABLES</td>\n<td>所有计算了滑动平均值的变量</td>\n<td>计算变量的滑动平均值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"获取变量\"><a href=\"#获取变量\" class=\"headerlink\" title=\"获取变量\"></a>获取变量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g_list = tf.global_variables() <span class=\"comment\">#获取素有变量（有的是tensor不是变量，不会获取）</span></span><br><span class=\"line\">variable_names = [v.name <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> tf.trainable_variables()] <span class=\"comment\">#获取所有可训练变量</span></span><br><span class=\"line\">[<span class=\"built_in\">print</span>(n.name) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> tf.get_default_graph().as_graph_def().node] <span class=\"comment\">#打印所有节点（tensor)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"tf-nn，tf-layers，-tf-contrib-异同\"><a href=\"#tf-nn，tf-layers，-tf-contrib-异同\" class=\"headerlink\" title=\"tf.nn，tf.layers， tf.contrib 异同\"></a>tf.nn，tf.layers， tf.contrib 异同</h2><p>我们在使用tensorflow时，会发现tf.nn，tf.layers， tf.contrib模块有很多功能是重复的，尤其是卷积操作，在使用的时候，我们可以根据需要现在不同的模块。但有些时候可以一起混用。</p>\n<p>​        下面是对三个模块的简述：</p>\n<p>​        （1）tf.nn ：提供神经网络相关操作的支持，包括卷积操作（conv）、池化操作（pooling）、归一化、loss、分类操作、embedding、RNN、Evaluation。</p>\n<p>​        （2）tf.layers：主要提供的高层的神经网络，主要和卷积相关的，个人感觉是对tf.nn的进一步封装，tf.nn会更底层一些。</p>\n<p>​        （3）tf.contrib：tf.contrib.layers提供够将计算图中的  网络层、正则化、摘要操作、是构建计算图的高级操作，但是tf.contrib包含不稳定和实验代码，有可能以后API会改变。</p>\n<h2 id=\"load-pb-model\"><a href=\"#load-pb-model\" class=\"headerlink\" title=\"load pb model\"></a>load pb model</h2><p><a href=\"https://leimao.github.io/blog/Save-Load-Inference-From-TF-Frozen-Graph/\">https://leimao.github.io/blog/Save-Load-Inference-From-TF-Frozen-Graph/</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#参考 https://stackoverflow.com/questions/50632258/how-to-restore-tensorflow-model-from-pb-file-in-python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.python.platform <span class=\"keyword\">import</span> gfile</span><br><span class=\"line\">GRAPH_PB_PATH = <span class=\"string\">&#x27;./frozen_model.pb&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&quot;load graph&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">with</span> gfile.FastGFile(GRAPH_PB_PATH,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">       graph_def = tf.GraphDef()</span><br><span class=\"line\">   graph_def.ParseFromString(f.read())</span><br><span class=\"line\">   sess.graph.as_default()</span><br><span class=\"line\">   tf.import_graph_def(graph_def, name=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">   graph_nodes=[n <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> graph_def.node]</span><br><span class=\"line\">   names = []</span><br><span class=\"line\">   <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> graph_nodes:</span><br><span class=\"line\">      names.append(t.name)</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(names)</span><br></pre></td></tr></table></figure>\n<p>如果报错：DecodeError: Error parsing message ,则修改为以下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.python.platform <span class=\"keyword\">import</span> gfile</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.core.protobuf <span class=\"keyword\">import</span> saved_model_pb2</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.python.util <span class=\"keyword\">import</span> compat</span><br><span class=\"line\">graph_path = <span class=\"string\">&#x27;./saved_model_ctcvr.pb&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># sess = tf.InteractiveSession(graph = self.graph)</span></span><br><span class=\"line\">sess = tf.Session()</span><br><span class=\"line\"><span class=\"keyword\">with</span> gfile.FastGFile(graph_path, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = compat.as_bytes(f.read())</span><br><span class=\"line\">    sm = saved_model_pb2.SavedModel()</span><br><span class=\"line\">    sm.ParseFromString(data)</span><br><span class=\"line\">    graph_def = sm.meta_graphs[<span class=\"number\">0</span>].graph_def</span><br><span class=\"line\">sess.graph.as_default()</span><br><span class=\"line\">graph = sess.graph</span><br><span class=\"line\">tf.import_graph_def(graph_def,name=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Check out the input placeholders:&#x27;</span>)</span><br><span class=\"line\">nodes = [n.name + <span class=\"string\">&#x27; =&gt; &#x27;</span> +  n.op <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> graph_def.node <span class=\"keyword\">if</span> n.op <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;Placeholder&#x27;</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> nodes:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(node)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\"># Get layer names</span></span><br><span class=\"line\">layers = [op.name <span class=\"keyword\">for</span> op <span class=\"keyword\">in</span> graph.get_operations()]</span><br><span class=\"line\"><span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> layers:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(layer)</span><br><span class=\"line\"></span><br><span class=\"line\">output_tensor = graph.get_tensor_by_name(<span class=\"string\">&quot;import/model/pctr:0&quot;</span>)</span><br><span class=\"line\">output = sess.run(output_tensor, feed_dict = features_dic) <span class=\"comment\">#但是貌似知识import了图，没有restore variable</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"tfrecord\"><a href=\"#tfrecord\" class=\"headerlink\" title=\"tfrecord\"></a>tfrecord</h1><ul>\n<li>生成</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 借助于TFRecordWriter 才能将信息写入TFRecord 文件</span></span><br><span class=\"line\">writer = tf.python_io.TFRecordWriter(output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建example对象</span></span><br><span class=\"line\">example = tf.train.Example(features=tf.train.Features(feature=&#123;</span><br><span class=\"line\">             <span class=\"string\">&#x27;name&#x27;</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[name])),</span><br><span class=\"line\">             <span class=\"string\">&#x27;shape&#x27;</span>: tf.train.Feature(int64_list=tf.train.Int64List(value=[shape[<span class=\"number\">0</span>], shape[<span class=\"number\">1</span>], shape[<span class=\"number\">2</span>]])),</span><br><span class=\"line\">             <span class=\"string\">&#x27;data&#x27;</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[image_data]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ))</span><br><span class=\"line\"><span class=\"comment\"># 将example序列化成string 类型，然后写入。</span></span><br><span class=\"line\"> writer.write(example.SerializeToString())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解析</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 流式数据读取&amp;训练</span></span><br><span class=\"line\"></span><br><span class=\"line\">简介：起两个进程，一个数据读取进程源源不断的读多个文件到内存；一个计算进程从内存中读数并计算</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 流式读文件到内存</span></span><br><span class=\"line\"></span><br><span class=\"line\">为了方便管理，有**文件名队列**和**内存队列**</span><br><span class=\"line\"></span><br><span class=\"line\">- 文件名队列用tf.train.string_input_producer(文件名<span class=\"built_in\">list</span>)函数产生文件名和结束标志的队列；可设置shuffle（决定小文件间有没有shuffle）和num_epoch（决定读多少次全部文件名<span class=\"built_in\">list</span>）；</span><br><span class=\"line\">- 读数据到内存队列用tf.WholeFileReader().read()读到内存队列</span><br><span class=\"line\">- tf.train.start_queue_runners使整个线程开始运转</span><br><span class=\"line\"></span><br><span class=\"line\">![image-<span class=\"number\">20200422180419725</span>](/Users/hetianqi/Documents/charging/notes_of_the_world/tensorflow.assets/image-<span class=\"number\">20200422180419725.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 代码示例</span></span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\">file_name_list=[<span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;a2.txt&#x27;</span>,<span class=\"string\">&#x27;a3.txt&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  <span class=\"comment\"># 产生文件名队列</span></span><br><span class=\"line\">  filename_queue = tf.train.string_input_producer(file_name_list,shuffle=<span class=\"literal\">False</span>,num_epoch=<span class=\"number\">5</span>)</span><br><span class=\"line\">  <span class=\"comment\"># reader从文件名队列中读数据。对应的方法是reader.read</span></span><br><span class=\"line\">  reader = tf.WholeFileReader()</span><br><span class=\"line\">  key , value = reader.read(filename_queue)</span><br><span class=\"line\">  <span class=\"comment\"># tf.train.string_input_producer定义了一个epoch变量，要对它进行初始化</span></span><br><span class=\"line\">   tf.local_variables_initializer().run()</span><br><span class=\"line\">   <span class=\"comment\"># 使用start_queue_runners之后，才会开始填充队列</span></span><br><span class=\"line\">   threads = tf.train.start_queue_runners(sess=sess)</span><br><span class=\"line\">   i = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:<span class=\"comment\"># 内存队列检测到结束次数&gt;num_epochs时就会自动抛出一个异常（OutOfRange），从而停止读数</span></span><br><span class=\"line\">       i += <span class=\"number\">1</span> </span><br><span class=\"line\">       <span class=\"comment\"># 获取图片数据并保存</span></span><br><span class=\"line\">       data = sess.run(value)</span><br></pre></td></tr></table></figure>\n<h1 id=\"tensorboard\"><a href=\"#tensorboard\" class=\"headerlink\" title=\"tensorboard\"></a>tensorboard</h1><ol>\n<li>cd到wirter文件夹的上层路径</li>\n<li>执行以下命令</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensorboard --logdir v0</span><br></pre></td></tr></table></figure>\n<ol>\n<li>打开<a href=\"http://localhost:6006/\">http://localhost:6006/</a>  （terminal的路径不是这个的话依然打开这个路径。。。）</li>\n</ol>\n<h1 id=\"控制日志级别\"><a href=\"#控制日志级别\" class=\"headerlink\" title=\"控制日志级别\"></a>控制日志级别</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logger = logging.getLogger(&quot;tensorflow&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># 貌似tensorflow的logger默认就有一个StreamHandler了</span></span><br><span class=\"line\"><span class=\"comment\"># 所以，首先判断len(logger.handlers)是否为1</span></span><br><span class=\"line\"><span class=\"comment\"># 如果为1的话， 说明只有默认的StreamHandler,</span></span><br><span class=\"line\"><span class=\"comment\"># 那么先清空handlers,然后再加入指定格式(formatter)的StreamHandler和FileHandler</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_logger</span>():</span></span><br><span class=\"line\">    logger = logging.getLogger(<span class=\"string\">&quot;tensorflow&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(logger.handlers) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        logger.handlers = []</span><br><span class=\"line\">        logger.setLevel(logging.DEBUG)</span><br><span class=\"line\"></span><br><span class=\"line\">        formatter = logging.Formatter(</span><br><span class=\"line\">            <span class=\"string\">&quot;%(asctime)s - [%(filename)s:%(lineno)d] - %(name)s - %(levelname)s - %(message)s&quot;</span>)</span><br><span class=\"line\">        ch = logging.StreamHandler(sys.stdout)</span><br><span class=\"line\">        ch.setLevel(logging.DEBUG)</span><br><span class=\"line\">        ch.setFormatter(formatter)</span><br><span class=\"line\"></span><br><span class=\"line\">        fh = logging.FileHandler(<span class=\"string\">&#x27;tensorflow.log&#x27;</span>)</span><br><span class=\"line\">        fh.setLevel(logging.DEBUG)</span><br><span class=\"line\">        fh.setFormatter(formatter)</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.addHandler(ch)</span><br><span class=\"line\">        logger.addHandler(fh)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> logger</span><br><span class=\"line\">logger = set_logger()</span><br><span class=\"line\">tf.logging.set_verbosity(tf.logging.INFO)</span><br></pre></td></tr></table></figure>\n<p>日志等级：debug&lt;info&lt;warn&lt;error</p>\n<h1 id=\"tf-identity-assign的区别\"><a href=\"#tf-identity-assign的区别\" class=\"headerlink\" title=\"tf.identity,=,assign的区别\"></a>tf.identity,=,assign的区别</h1><ul>\n<li>tf.identity(变量引用)</li>\n</ul>\n<p>tf.identity在计算图内部创建了两个节点，send/recv节点，用来发送和接受两个变量，如果两个变量在不同的设备上，比如CPU和GPU，那么将会复制变量，如果在一个设备上，将会只是一个引用</p>\n<ul>\n<li><ul>\n<li>引用变量：当遇到一个操作没有name这个参数的时候，可以用它来给该操作设置一个name，这样在模型测试阶段直接加载图模型，然后通过name来获取op</li>\n<li>复制变量：不同设备(CPU\\GPU)之间传递变量的值</li>\n<li>作为一个虚拟节点来控制流程操作，一般配合tf.control_dependencies()使用</li>\n</ul>\n</li>\n</ul>\n<p><strong>Note：</strong>具体实例参考<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/34877523/in-tensorflow-what-is-tf-identity-used-for\">In TensorFlow, what is tf.identity used for?</a>中前三个回答</p>\n<ul>\n<li>=</li>\n</ul>\n<p>=只是拷贝内存，而y不会作为一个tensor在图中出现</p>\n<p>如果希望y成为一个tensor出现在图中，=的右边必须是一个op，而遗憾的x是一个tensor，所以</p>\n<p>需要利用tf.identity来告诉告诉编译器，y可以是一个和x一样的tensor。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.Variable(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">x_plus_1 = tf.assign_add(x, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.control_dependencies([x_plus_1]):</span><br><span class=\"line\">    y = x</span><br><span class=\"line\">    <span class=\"comment\">#y = tf.identity(x)</span></span><br><span class=\"line\"></span><br><span class=\"line\">init = tf.initialize_all_variables()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">    init.run()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;y=&#x27;</span>,y.<span class=\"built_in\">eval</span>())</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.Variable(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">x_plus_1 = tf.assign_add(x, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.control_dependencies([x_plus_1]):</span><br><span class=\"line\">    y = tf.identity(x)</span><br><span class=\"line\"></span><br><span class=\"line\">init = tf.initialize_all_variables()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">    init.run()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;y=&#x27;</span>,y.<span class=\"built_in\">eval</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#y= 2.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 3.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 4.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 5.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 6.0        </span></span><br></pre></td></tr></table></figure>\n<h1 id=\"TensorFlow入门12-—-Checkpoints，保存和恢复Estimator创建的模型\"><a href=\"#TensorFlow入门12-—-Checkpoints，保存和恢复Estimator创建的模型\" class=\"headerlink\" title=\"TensorFlow入门12 — Checkpoints，保存和恢复Estimator创建的模型\"></a>TensorFlow入门12 — Checkpoints，保存和恢复Estimator创建的模型</h1><p>参考 <a href=\"https://www.jianshu.com/p/60c3b084fe44\">https://www.jianshu.com/p/60c3b084fe44</a></p>\n<p>模型训练好了后，下一步就是保存（Save）和恢复（restore）模型，TensorFlow提供两种模型格式（Model Format）</p>\n<p>1，Checkpoints, 该格式依赖于创建模型的代码.</p>\n<p>2，SavedModel, 该格式不依赖于创建模型的代码.</p>\n<p>本文主要讨论检查点(Checkpoint).</p>\n<p>如《<a href=\"https://www.jianshu.com/p/4e1d4bfd056d\">从数据的角度理解TensorFlow鸢尾花分类程序6</a>》一文所述，在创建tf.estimator.DNNClassifier对象时，其构造函数<strong>init</strong>有一个参数：</p>\n<p><strong>model_dir：</strong>保存模型参数的路径。（Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into a estimator to continue training a previously saved model.）</p>\n<p>a.当没有指定的时候，Estimator 会将检查点文件写入由 Python 的 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.python.org%2F3%2Flibrary%2Ftempfile.html%23tempfile.mkdtemp\">tempfile.mkdtemp</a>函数选择的临时目录中。用语句 print(tempfile.gettempdir())可以查出本机的临时目录</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-617d15c988fca257.png?imageMogr2/auto-orient/strip|imageView2/2/w/704/format/webp\" alt=\"img\"></p>\n<p>tempfile.gettempdir</p>\n<p>b.当指定了目录的时候，例如：<em>model_dir = ‘models/iris’</em>，Estimator 会将检查点文件写入~/models/iris</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-ede38dbd30efd3c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1074/format/webp\" alt=\"img\"></p>\n<p>有了保存检查点文件路径后，tf.estimator.DNNClassifier对象会在<strong>运行train方法的时候，写入检查点文件，</strong>如下图所示：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-82fde1420900d6b5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p>train方法负责写入检查点文件</p>\n<p><strong>那train方法以什么频率写入检查点文件呢？</strong></p>\n<p>默认情况下，Estimator 按照以下时间安排将<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fmachine-learning%2Fglossary%2F%23checkpoint\">检查点</a>保存到 model_dir 中：</p>\n<p>a.每 10 分钟（600 秒）写入一个检查点。</p>\n<p>b.在 train 方法开始（第一次迭代）和完成（最后一次迭代）时写入一个检查点。</p>\n<p>c.只在目录中保留 5 个最近写入的检查点。</p>\n<p><strong>保存好检查点文件后，如何恢复模型呢？</strong></p>\n<p>Estimator 将一个检查点保存到 model_dir 中后，每次调用 Estimator 的 train、eval 或 predict 方法时，都会发生下列情况：</p>\n<p>a) Estimator 通过运行 model_fn() 构建模型<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fmachine-learning%2Fglossary%2F%23graph\">图</a>。（要详细了解 model_fn()，请参阅<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.tensorflow.org%2Fget_started%2Fcustom_estimators\">创建自定义 Estimator</a>。）</p>\n<p>b) Estimator 根据最近写入的检查点中存储的数据来初始化新模型的权重。</p>\n<p>换言之，如下图所示，一旦存在检查点，TensorFlow 就会在您每次调用 train()、evaluate() 或 predict() 时重建模型。</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-d5376e32b383d1de.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p><strong>不当恢复</strong></p>\n<p>通过检查点恢复模型的状态这一操作<strong>仅在模型和检查点兼容时可行</strong>。例如，假设训练了一个 tf.estimator.DNNClassifier，它包含 2 个隐藏层且每层都有 10 个节点；在训练之后（TensorFlow已在 models/iris 中创建检查点），将每个隐藏层中的神经元数量从 10 更改为 3，然后重新训练模型，由于检查点中的状态与 修改后tf.estimator.DNNClassifier 中描述的模型不兼容，因此重新训练失败并出现以下错误，如下图所示：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-66ba8e48437be765.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/976/format/webp\" alt=\"img\"></p>\n<p>不当恢复</p>\n<p><strong>解决不当恢复</strong></p>\n<p>1，当模型参数一直在变化的时候，最简单的方式是，不要指定<em>model_dir，</em>这样TensorFlow不会启动Checkpoint模型恢复，方便你随时修改模型。</p>\n<p>2，启动Checkpoint的情况下，用Git为每个 model-dir 所需的代码保存一个副本，即为每个模型版本创建一个单独的 git 分支。这种区分将有助于保证检查点的可恢复性。</p>\n<p><strong>总结</strong>：检查点提供了一种简单的自动机制来保存和恢复由 Estimator 创建的模型。</p>\n<h1 id=\"分布式训练\"><a href=\"#分布式训练\" class=\"headerlink\" title=\"分布式训练\"></a>分布式训练</h1><ul>\n<li>ps: Parameter Sever, 参数服务器</li>\n<li>chief: ps-worker架构中的主节点</li>\n<li>worker: 正常训练节点</li>\n<li>evaluator: 评估节点，不参与训练，只用来进行训练数据评估</li>\n</ul>\n<h1 id=\"记录timeline-tf-train-ProfilerHook\"><a href=\"#记录timeline-tf-train-ProfilerHook\" class=\"headerlink\" title=\"记录timeline-tf.train.ProfilerHook\"></a>记录timeline-tf.train.ProfilerHook</h1><p>通过ProfilerHook对tensor代码中的各个节点耗时情况进行分析</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/147319531\">https://zhuanlan.zhihu.com/p/147319531</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train_and_eval</span>(<span class=\"params\">model</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param model: 声明的estimator实例</span></span><br><span class=\"line\"><span class=\"string\">    :return: None</span></span><br><span class=\"line\"><span class=\"string\">    :usage: 进行模型训练，并在指定步长的时候进行结果评估</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    timeline_hook = tf.train.ProfilerHook(save_steps=<span class=\"number\">100</span>, output_dir=os.path.join(</span><br><span class=\"line\">            os.getcwd(), <span class=\"string\">&#x27;./timeline_track&#x27;</span></span><br><span class=\"line\">        ))</span><br><span class=\"line\"></span><br><span class=\"line\">    hook = tf.contrib.estimator.stop_if_no_increase_hook(</span><br><span class=\"line\">        model,</span><br><span class=\"line\">        metric_name=<span class=\"string\">&#x27;ctcvr_cvr_auc_esmm&#x27;</span>,</span><br><span class=\"line\">        max_steps_without_increase=configuration_params[<span class=\"string\">&#x27;max_steps_without_increase&#x27;</span>],</span><br><span class=\"line\">        <span class=\"comment\"># maximum number of training steps with no decrease in the given metric.</span></span><br><span class=\"line\">        min_steps=configuration_params[<span class=\"string\">&#x27;min_steps&#x27;</span>],  <span class=\"comment\"># stop is never requested if global step is less than this value</span></span><br><span class=\"line\">        run_every_steps=configuration_params[<span class=\"string\">&#x27;run_every_steps&#x27;</span>],</span><br><span class=\"line\">        run_every_secs=<span class=\"literal\">None</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    train_spec = tf.estimator.TrainSpec(</span><br><span class=\"line\">        input_fn=<span class=\"keyword\">lambda</span>: input_fn(os.path.join(os.getcwd(),</span><br><span class=\"line\">                                               CONFIG_TRAIN[<span class=\"string\">&#x27;train_data&#x27;</span>]),</span><br><span class=\"line\">                                  <span class=\"string\">&#x27;train&#x27;</span>, CONFIG_TRAIN[<span class=\"string\">&#x27;batch_size&#x27;</span>]),</span><br><span class=\"line\">        hooks=[hook, timeline_hook]</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    eval_spec = tf.estimator.EvalSpec(</span><br><span class=\"line\">        input_fn=<span class=\"keyword\">lambda</span>: input_fn(os.path.join(os.getcwd(),</span><br><span class=\"line\">                                               CONFIG_TRAIN[<span class=\"string\">&#x27;test_data&#x27;</span>]),</span><br><span class=\"line\">                                  <span class=\"string\">&#x27;eval&#x27;</span>, <span class=\"number\">128</span>),</span><br><span class=\"line\">        steps=CONFIG.evalconfig[<span class=\"string\">&#x27;steps&#x27;</span>],</span><br><span class=\"line\">        throttle_secs=<span class=\"number\">30</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    tf.estimator.train_and_evaluate(model, train_spec, eval_spec)</span><br></pre></td></tr></table></figure>\n<p>timeline.json：每个保存步长输出的监控文件</p>\n<ul>\n<li><p>web展示</p>\n<ol>\n<li><p>在chrome中打开“chome://tracing”页面</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-cfed5df9f0c6ae2d180e7b8c65ed233b_720w.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><ul>\n<li>点击“load”，将上一步中生成time-line.json文件导入，导入任意一个即可</li>\n<li>输出结果如下：</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/80/v2-5dd2ee82f762b8fa9ef2a64e631f9cf1_720w.jpg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p>tf易混淆操作</p>","more":"<p>[TOC]</p>\n<h1 id=\"Tensorflow笔记\"><a href=\"#Tensorflow笔记\" class=\"headerlink\" title=\"Tensorflow笔记\"></a>Tensorflow笔记</h1><h1 id=\"name-scope-VS-variable-scope\"><a href=\"#name-scope-VS-variable-scope\" class=\"headerlink\" title=\"name_scope VS variable_scope\"></a>name_scope VS variable_scope</h1><p>参考知乎：<a href=\"https://zhuanlan.zhihu.com/p/52055580\">https://zhuanlan.zhihu.com/p/52055580</a></p>\n<p><strong>注意</strong>，tf.variable() 和tf.get_variable()有不同的创建变量的方式：<strong>tf.Variable() 每次都会新建变量</strong>。如果希望<strong>重用</strong>（<strong>共享</strong>）一些变量，就需要用到了<strong>get_variable()，它会去搜索变量名，有就直接用，没有再新建</strong>。此外，<strong>为了对不同位置或者范围的共享进行区分</strong>，就引入<strong>名字域</strong>。既然用到变量名了，就涉及到了名字域的概念。这就是为什么会有scope 的概念。name_scope 作用域操作，variable_scope 可以通过设置reuse 标志以及初始化方式来影响域下的变量，<strong>因为想要达到变量共享的效果, 就要在 tf.variable_scope()的作用域下使用 tf.get_variable() 这种方式产生和提取变量. 不像 tf.Variable() 每次都会产生新的变量, tf.get_variable() 如果遇到了已经存在名字的变量时, 它会单纯的提取这个同样名字的变量，如果不存在名字的变量再创建.</strong></p>\n<h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>建图(graph) — 打开对话(session) — 初始化变量 — sess.run()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模型保存</span></span><br><span class=\"line\">saver=tf.train.Saver() </span><br><span class=\"line\">sess=tf.Session()</span><br><span class=\"line\">saver.save(sess,check_point_dir + <span class=\"string\">&#x27;model.ckpt&#x27;</span>,global_step=i+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模型调用（只调用参数）</span></span><br><span class=\"line\">saver=tf.train.Saver()</span><br><span class=\"line\">sess=tf.Session()</span><br><span class=\"line\">ckpt = tf.train.get_checkpoint_state(check_point_dir) <span class=\"comment\">#获取最新的保存的模型地址</span></span><br><span class=\"line\">saver.restore(sess,ckpt.model_saved_ckeckpoint_path)</span><br><span class=\"line\"><span class=\"comment\">#saver.restore(sess,&#x27;....ckpt&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#模型调用（参数和图）</span></span><br><span class=\"line\">sess=tf.Session()</span><br><span class=\"line\">ckpt =tf.train.latest_checkpoint(check_point_path)  <span class=\"comment\">#获取最新的保存的模型地址</span></span><br><span class=\"line\">saver =tf.train.import_meta_graph(ckpt+<span class=\"string\">&#x27;.meta&#x27;</span>) <span class=\"comment\">#载入结构图</span></span><br><span class=\"line\"><span class=\"comment\">#saver =tf.train.import_meta_graph(&#x27;........ckpt.meta&#x27;)</span></span><br><span class=\"line\">saver.restore(sess,<span class=\"string\">&#x27;....ckpt&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#基本操作</span></span><br><span class=\"line\">a=tf.placeholder(<span class=\"string\">&#x27;float&#x27;</span>)</span><br><span class=\"line\">b=tf.placeholder(<span class=\"string\">&#x27;float&#x27;</span>)<span class=\"comment\">#定义变量</span></span><br><span class=\"line\">y=tf.mul(a,b) <span class=\"comment\">#构造op节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">sess=tf.Session()<span class=\"comment\">#建立对话</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>（sess.run(y,feed_dic&#123;a:<span class=\"number\">3</span>,b:<span class=\"number\">3</span>&#125;)）<span class=\"comment\">#运行节点并打印结果</span></span><br><span class=\"line\">sess.close（）<span class=\"comment\">#关闭会话</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#onehot</span></span><br><span class=\"line\"><span class=\"comment\">#tf.one_hot(indices, depth, on_value=None, off_value=None, CLASS=8</span></span><br><span class=\"line\">label=tf.constant([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>])</span><br><span class=\"line\">CLASS=<span class=\"number\">8</span></span><br><span class=\"line\">b=tf.one_hot(label,CLASS，<span class=\"number\">1</span>，<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">\tsess.run(tf.global_variables_initializer())</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(sess.run(b))</span><br></pre></td></tr></table></figure>\n<p>checkpoint文件：用于告知某些TF函数，这是最新的检查点文件（可以用记事本打开看一下）</p>\n<p>.data文件：（后面缀的那一串我也布吉岛是啥）这个文件保存的是图中所有变量的值，没有结构。</p>\n<p>.index文件：可能是保存了一些必要的索引叭（这个文件不大清楚）。</p>\n<p>.meta文件：保存了计算图的结构，但是不包含里面变量的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">　　<span class=\"comment\">#搭建网络</span></span><br><span class=\"line\">　　x=tf.placeholder(tf.float32,name=<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">　　y=tf.placeholder(tf.float32,name=<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\">　　b=tf.Variable(<span class=\"number\">1.</span>,name=<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">　　xy=tf.multiply(x,y)</span><br><span class=\"line\">　　op=tf.add(xy,b,name=<span class=\"string\">&#x27;op&#x27;</span>)</span><br><span class=\"line\">　　sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">　　<span class=\"built_in\">print</span>(sess.run(op,feed_dict=&#123;x:<span class=\"number\">2</span>,y:<span class=\"number\">3</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#ckpt保存</span></span><br><span class=\"line\">　　saver=tf.train.Saver()</span><br><span class=\"line\">　　saver.save(sess,<span class=\"string\">&#x27;D:/pycharm files/111/ckpt/model_ck&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#pb保存</span></span><br><span class=\"line\">　　constant_graph=tf.graph_util.convert_variables_to_constants(sess,sess.graph_def,[<span class=\"string\">&#x27;op&#x27;</span>])</span><br><span class=\"line\">　　<span class=\"keyword\">with</span> tf.gfile.FastGFile(<span class=\"string\">&#x27;D:/pycharm files/111/pb/model.pb&#x27;</span>,<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">　　f.write(constant_graph.SerializeToString())</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#savedmodel文件保存</span></span><br><span class=\"line\">　　builder=tf.saved_model.builder.SavedModelBuilder(<span class=\"string\">&#x27;D:/pycharm files/111/savemodel&#x27;</span>)</span><br><span class=\"line\">　　builder.add_meta_graph_and_variables(sess,[<span class=\"string\">&#x27;cpu_server_1&#x27;</span>])</span><br><span class=\"line\">　　builder.save()</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#ckpt加载</span></span><br><span class=\"line\">　　saver=tf.train.import_meta_graph(<span class=\"string\">&#x27;D:/pycharm files/111/ckpt/model_ck.meta&#x27;</span>)</span><br><span class=\"line\">　　saver.restore(sess,tf.train.latest_checkpoint(<span class=\"string\">&#x27;D:/pycharm files/111/ckpt&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#pb加载</span></span><br><span class=\"line\">　　<span class=\"keyword\">with</span> tf.gfile.FastGFile(<span class=\"string\">&#x27;D:/pycharm files/111/pb/model.pb&#x27;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">　　　　graph_def=tf.GraphDef()</span><br><span class=\"line\">　　　　graph_def.ParseFromString(f.read())</span><br><span class=\"line\">　　　　tf.import_graph_def(graph_def,name=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#savemodel加载</span></span><br><span class=\"line\">　　tf.saved_model.loader.load(sess, [<span class=\"string\">&#x27;cpu_server_1&#x27;</span>], <span class=\"string\">&#x27;D:/pycharm files/111/savemodel&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">#测试模型加载是否成功</span></span><br><span class=\"line\">　　input_x = sess.graph.get_tensor_by_name(<span class=\"string\">&#x27;x:0&#x27;</span>)</span><br><span class=\"line\">　　input_y = sess.graph.get_tensor_by_name(<span class=\"string\">&#x27;y:0&#x27;</span>)</span><br><span class=\"line\">　　op = sess.graph.get_tensor_by_name(<span class=\"string\">&#x27;op:0&#x27;</span>)</span><br><span class=\"line\">　　ret = sess.run(op, feed_dict=&#123;input_x: <span class=\"number\">5</span>, input_y: <span class=\"number\">5</span>&#125;)</span><br><span class=\"line\">　　<span class=\"built_in\">print</span>(ret)</span><br></pre></td></tr></table></figure>\n<h2 id=\"graph-amp-session\"><a href=\"#graph-amp-session\" class=\"headerlink\" title=\"graph &amp; session\"></a>graph &amp; session</h2><p><a href=\"https://www.cnblogs.com/hypnus-ly/p/8040951.html\">https://www.cnblogs.com/hypnus-ly/p/8040951.html</a></p>\n<ul>\n<li><p>使用默认图和默认session</p>\n<p>不用指定图或session</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf.reset_default_graph()   <span class=\"comment\">#清空默认图中所有节点</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.variable_scope(<span class=\"string\">&#x27;&#x27;</span>):</span><br><span class=\"line\">\ta = tf.constant(<span class=\"number\">1</span>,name=<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">\tb = tf.constant(<span class=\"number\">2</span>,name=<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">\tc = a*b</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(sess.run(c))</span><br></pre></td></tr></table></figure></li>\n<li><p>使用指定图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g1=tf.Graph()</span><br><span class=\"line\">with g1.as_default():</span><br><span class=\"line\">    # 在计算图g1中定义变量&#x27;v&#x27;,并设置初始值为0。</span><br><span class=\"line\">    v=tf.get_variable(&#x27;v&#x27;,initializer=tf.zeros_initializer()(shape = [1]))</span><br><span class=\"line\">    </span><br><span class=\"line\">g2=tf.Graph()</span><br><span class=\"line\">with g2.as_default():</span><br><span class=\"line\">    # 在计算图g2中定义变量&#x27;v&#x27;,并设置初始值微1。</span><br><span class=\"line\">    v=tf.get_variable(&#x27;v&#x27;,initializer=tf.ones_initializer()(shape = [1]))</span><br><span class=\"line\"></span><br><span class=\"line\"># 在计算图g1中读取变量&#x27;v&#x27;的取值</span><br><span class=\"line\">with tf.Session(graph=g1) as sess:</span><br><span class=\"line\">    tf.global_variables_initializer().run()</span><br><span class=\"line\">    with tf.variable_scope(&#x27;&#x27;,reuse=True):</span><br><span class=\"line\">        # 在计算图g1中，变量&#x27;v&#x27;的取值应该为0，下一行代码会输出[0.]。</span><br><span class=\"line\">        print(sess.run(tf.get_variable(&#x27;v&#x27;)))</span><br><span class=\"line\"></span><br><span class=\"line\"># 在计算图g2中读取变量&#x27;v&#x27;的取值</span><br><span class=\"line\">with tf.Session(graph=g2) as sess:</span><br><span class=\"line\">    tf.global_variables_initializer().run()</span><br><span class=\"line\">    with tf.variable_scope(&#x27;&#x27;,reuse=True):</span><br><span class=\"line\">        # 在计算图g2中，变量&#x27;v&#x27;的取值应该为1，下一行代码会输出[1.]。</span><br><span class=\"line\">        print(sess.run(tf.get_variable(&#x27;v&#x27;)))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>集合名称</th>\n<th>集合内容</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tf.GraphKeys.VARIABLES</td>\n<td>所有变量</td>\n<td>持久化tensorflow模型</td>\n</tr>\n<tr>\n<td>tf.GraphKeys.TRAINABLE_VARIABLES</td>\n<td>可学习的变量（一般指神经网络中的参数）</td>\n<td>模型训练、生成模型可视化内容</td>\n</tr>\n<tr>\n<td>tf.GraphKeys.SUMMARIES</td>\n<td>日志生成相关的张量</td>\n<td>tensorflow计算可视化</td>\n</tr>\n<tr>\n<td>tf.GraphKeys.QUEUE_RUNNERS</td>\n<td>处理输入的QueueRunner</td>\n<td>输入处理</td>\n</tr>\n<tr>\n<td>tf.GraphKeys.MOVING_AVERAGE_VARIABLES</td>\n<td>所有计算了滑动平均值的变量</td>\n<td>计算变量的滑动平均值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"获取变量\"><a href=\"#获取变量\" class=\"headerlink\" title=\"获取变量\"></a>获取变量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g_list = tf.global_variables() <span class=\"comment\">#获取素有变量（有的是tensor不是变量，不会获取）</span></span><br><span class=\"line\">variable_names = [v.name <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> tf.trainable_variables()] <span class=\"comment\">#获取所有可训练变量</span></span><br><span class=\"line\">[<span class=\"built_in\">print</span>(n.name) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> tf.get_default_graph().as_graph_def().node] <span class=\"comment\">#打印所有节点（tensor)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"tf-nn，tf-layers，-tf-contrib-异同\"><a href=\"#tf-nn，tf-layers，-tf-contrib-异同\" class=\"headerlink\" title=\"tf.nn，tf.layers， tf.contrib 异同\"></a>tf.nn，tf.layers， tf.contrib 异同</h2><p>我们在使用tensorflow时，会发现tf.nn，tf.layers， tf.contrib模块有很多功能是重复的，尤其是卷积操作，在使用的时候，我们可以根据需要现在不同的模块。但有些时候可以一起混用。</p>\n<p>​        下面是对三个模块的简述：</p>\n<p>​        （1）tf.nn ：提供神经网络相关操作的支持，包括卷积操作（conv）、池化操作（pooling）、归一化、loss、分类操作、embedding、RNN、Evaluation。</p>\n<p>​        （2）tf.layers：主要提供的高层的神经网络，主要和卷积相关的，个人感觉是对tf.nn的进一步封装，tf.nn会更底层一些。</p>\n<p>​        （3）tf.contrib：tf.contrib.layers提供够将计算图中的  网络层、正则化、摘要操作、是构建计算图的高级操作，但是tf.contrib包含不稳定和实验代码，有可能以后API会改变。</p>\n<h2 id=\"load-pb-model\"><a href=\"#load-pb-model\" class=\"headerlink\" title=\"load pb model\"></a>load pb model</h2><p><a href=\"https://leimao.github.io/blog/Save-Load-Inference-From-TF-Frozen-Graph/\">https://leimao.github.io/blog/Save-Load-Inference-From-TF-Frozen-Graph/</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#参考 https://stackoverflow.com/questions/50632258/how-to-restore-tensorflow-model-from-pb-file-in-python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.python.platform <span class=\"keyword\">import</span> gfile</span><br><span class=\"line\">GRAPH_PB_PATH = <span class=\"string\">&#x27;./frozen_model.pb&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&quot;load graph&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">with</span> gfile.FastGFile(GRAPH_PB_PATH,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">       graph_def = tf.GraphDef()</span><br><span class=\"line\">   graph_def.ParseFromString(f.read())</span><br><span class=\"line\">   sess.graph.as_default()</span><br><span class=\"line\">   tf.import_graph_def(graph_def, name=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">   graph_nodes=[n <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> graph_def.node]</span><br><span class=\"line\">   names = []</span><br><span class=\"line\">   <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> graph_nodes:</span><br><span class=\"line\">      names.append(t.name)</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(names)</span><br></pre></td></tr></table></figure>\n<p>如果报错：DecodeError: Error parsing message ,则修改为以下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.python.platform <span class=\"keyword\">import</span> gfile</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.core.protobuf <span class=\"keyword\">import</span> saved_model_pb2</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.python.util <span class=\"keyword\">import</span> compat</span><br><span class=\"line\">graph_path = <span class=\"string\">&#x27;./saved_model_ctcvr.pb&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># sess = tf.InteractiveSession(graph = self.graph)</span></span><br><span class=\"line\">sess = tf.Session()</span><br><span class=\"line\"><span class=\"keyword\">with</span> gfile.FastGFile(graph_path, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = compat.as_bytes(f.read())</span><br><span class=\"line\">    sm = saved_model_pb2.SavedModel()</span><br><span class=\"line\">    sm.ParseFromString(data)</span><br><span class=\"line\">    graph_def = sm.meta_graphs[<span class=\"number\">0</span>].graph_def</span><br><span class=\"line\">sess.graph.as_default()</span><br><span class=\"line\">graph = sess.graph</span><br><span class=\"line\">tf.import_graph_def(graph_def,name=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Check out the input placeholders:&#x27;</span>)</span><br><span class=\"line\">nodes = [n.name + <span class=\"string\">&#x27; =&gt; &#x27;</span> +  n.op <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> graph_def.node <span class=\"keyword\">if</span> n.op <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;Placeholder&#x27;</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> nodes:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(node)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\"># Get layer names</span></span><br><span class=\"line\">layers = [op.name <span class=\"keyword\">for</span> op <span class=\"keyword\">in</span> graph.get_operations()]</span><br><span class=\"line\"><span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> layers:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(layer)</span><br><span class=\"line\"></span><br><span class=\"line\">output_tensor = graph.get_tensor_by_name(<span class=\"string\">&quot;import/model/pctr:0&quot;</span>)</span><br><span class=\"line\">output = sess.run(output_tensor, feed_dict = features_dic) <span class=\"comment\">#但是貌似知识import了图，没有restore variable</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"tfrecord\"><a href=\"#tfrecord\" class=\"headerlink\" title=\"tfrecord\"></a>tfrecord</h1><ul>\n<li>生成</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 借助于TFRecordWriter 才能将信息写入TFRecord 文件</span></span><br><span class=\"line\">writer = tf.python_io.TFRecordWriter(output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建example对象</span></span><br><span class=\"line\">example = tf.train.Example(features=tf.train.Features(feature=&#123;</span><br><span class=\"line\">             <span class=\"string\">&#x27;name&#x27;</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[name])),</span><br><span class=\"line\">             <span class=\"string\">&#x27;shape&#x27;</span>: tf.train.Feature(int64_list=tf.train.Int64List(value=[shape[<span class=\"number\">0</span>], shape[<span class=\"number\">1</span>], shape[<span class=\"number\">2</span>]])),</span><br><span class=\"line\">             <span class=\"string\">&#x27;data&#x27;</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[image_data]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ))</span><br><span class=\"line\"><span class=\"comment\"># 将example序列化成string 类型，然后写入。</span></span><br><span class=\"line\"> writer.write(example.SerializeToString())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解析</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 流式数据读取&amp;训练</span></span><br><span class=\"line\"></span><br><span class=\"line\">简介：起两个进程，一个数据读取进程源源不断的读多个文件到内存；一个计算进程从内存中读数并计算</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 流式读文件到内存</span></span><br><span class=\"line\"></span><br><span class=\"line\">为了方便管理，有**文件名队列**和**内存队列**</span><br><span class=\"line\"></span><br><span class=\"line\">- 文件名队列用tf.train.string_input_producer(文件名<span class=\"built_in\">list</span>)函数产生文件名和结束标志的队列；可设置shuffle（决定小文件间有没有shuffle）和num_epoch（决定读多少次全部文件名<span class=\"built_in\">list</span>）；</span><br><span class=\"line\">- 读数据到内存队列用tf.WholeFileReader().read()读到内存队列</span><br><span class=\"line\">- tf.train.start_queue_runners使整个线程开始运转</span><br><span class=\"line\"></span><br><span class=\"line\">![image-<span class=\"number\">20200422180419725</span>](/Users/hetianqi/Documents/charging/notes_of_the_world/tensorflow.assets/image-<span class=\"number\">20200422180419725.</span>png)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 代码示例</span></span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\">file_name_list=[<span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;a2.txt&#x27;</span>,<span class=\"string\">&#x27;a3.txt&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  <span class=\"comment\"># 产生文件名队列</span></span><br><span class=\"line\">  filename_queue = tf.train.string_input_producer(file_name_list,shuffle=<span class=\"literal\">False</span>,num_epoch=<span class=\"number\">5</span>)</span><br><span class=\"line\">  <span class=\"comment\"># reader从文件名队列中读数据。对应的方法是reader.read</span></span><br><span class=\"line\">  reader = tf.WholeFileReader()</span><br><span class=\"line\">  key , value = reader.read(filename_queue)</span><br><span class=\"line\">  <span class=\"comment\"># tf.train.string_input_producer定义了一个epoch变量，要对它进行初始化</span></span><br><span class=\"line\">   tf.local_variables_initializer().run()</span><br><span class=\"line\">   <span class=\"comment\"># 使用start_queue_runners之后，才会开始填充队列</span></span><br><span class=\"line\">   threads = tf.train.start_queue_runners(sess=sess)</span><br><span class=\"line\">   i = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:<span class=\"comment\"># 内存队列检测到结束次数&gt;num_epochs时就会自动抛出一个异常（OutOfRange），从而停止读数</span></span><br><span class=\"line\">       i += <span class=\"number\">1</span> </span><br><span class=\"line\">       <span class=\"comment\"># 获取图片数据并保存</span></span><br><span class=\"line\">       data = sess.run(value)</span><br></pre></td></tr></table></figure>\n<h1 id=\"tensorboard\"><a href=\"#tensorboard\" class=\"headerlink\" title=\"tensorboard\"></a>tensorboard</h1><ol>\n<li>cd到wirter文件夹的上层路径</li>\n<li>执行以下命令</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensorboard --logdir v0</span><br></pre></td></tr></table></figure>\n<ol>\n<li>打开<a href=\"http://localhost:6006/\">http://localhost:6006/</a>  （terminal的路径不是这个的话依然打开这个路径。。。）</li>\n</ol>\n<h1 id=\"控制日志级别\"><a href=\"#控制日志级别\" class=\"headerlink\" title=\"控制日志级别\"></a>控制日志级别</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logger = logging.getLogger(&quot;tensorflow&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># 貌似tensorflow的logger默认就有一个StreamHandler了</span></span><br><span class=\"line\"><span class=\"comment\"># 所以，首先判断len(logger.handlers)是否为1</span></span><br><span class=\"line\"><span class=\"comment\"># 如果为1的话， 说明只有默认的StreamHandler,</span></span><br><span class=\"line\"><span class=\"comment\"># 那么先清空handlers,然后再加入指定格式(formatter)的StreamHandler和FileHandler</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_logger</span>():</span></span><br><span class=\"line\">    logger = logging.getLogger(<span class=\"string\">&quot;tensorflow&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(logger.handlers) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        logger.handlers = []</span><br><span class=\"line\">        logger.setLevel(logging.DEBUG)</span><br><span class=\"line\"></span><br><span class=\"line\">        formatter = logging.Formatter(</span><br><span class=\"line\">            <span class=\"string\">&quot;%(asctime)s - [%(filename)s:%(lineno)d] - %(name)s - %(levelname)s - %(message)s&quot;</span>)</span><br><span class=\"line\">        ch = logging.StreamHandler(sys.stdout)</span><br><span class=\"line\">        ch.setLevel(logging.DEBUG)</span><br><span class=\"line\">        ch.setFormatter(formatter)</span><br><span class=\"line\"></span><br><span class=\"line\">        fh = logging.FileHandler(<span class=\"string\">&#x27;tensorflow.log&#x27;</span>)</span><br><span class=\"line\">        fh.setLevel(logging.DEBUG)</span><br><span class=\"line\">        fh.setFormatter(formatter)</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.addHandler(ch)</span><br><span class=\"line\">        logger.addHandler(fh)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> logger</span><br><span class=\"line\">logger = set_logger()</span><br><span class=\"line\">tf.logging.set_verbosity(tf.logging.INFO)</span><br></pre></td></tr></table></figure>\n<p>日志等级：debug&lt;info&lt;warn&lt;error</p>\n<h1 id=\"tf-identity-assign的区别\"><a href=\"#tf-identity-assign的区别\" class=\"headerlink\" title=\"tf.identity,=,assign的区别\"></a>tf.identity,=,assign的区别</h1><ul>\n<li>tf.identity(变量引用)</li>\n</ul>\n<p>tf.identity在计算图内部创建了两个节点，send/recv节点，用来发送和接受两个变量，如果两个变量在不同的设备上，比如CPU和GPU，那么将会复制变量，如果在一个设备上，将会只是一个引用</p>\n<ul>\n<li><ul>\n<li>引用变量：当遇到一个操作没有name这个参数的时候，可以用它来给该操作设置一个name，这样在模型测试阶段直接加载图模型，然后通过name来获取op</li>\n<li>复制变量：不同设备(CPU\\GPU)之间传递变量的值</li>\n<li>作为一个虚拟节点来控制流程操作，一般配合tf.control_dependencies()使用</li>\n</ul>\n</li>\n</ul>\n<p><strong>Note：</strong>具体实例参考<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/34877523/in-tensorflow-what-is-tf-identity-used-for\">In TensorFlow, what is tf.identity used for?</a>中前三个回答</p>\n<ul>\n<li>=</li>\n</ul>\n<p>=只是拷贝内存，而y不会作为一个tensor在图中出现</p>\n<p>如果希望y成为一个tensor出现在图中，=的右边必须是一个op，而遗憾的x是一个tensor，所以</p>\n<p>需要利用tf.identity来告诉告诉编译器，y可以是一个和x一样的tensor。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.Variable(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">x_plus_1 = tf.assign_add(x, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.control_dependencies([x_plus_1]):</span><br><span class=\"line\">    y = x</span><br><span class=\"line\">    <span class=\"comment\">#y = tf.identity(x)</span></span><br><span class=\"line\"></span><br><span class=\"line\">init = tf.initialize_all_variables()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">    init.run()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;y=&#x27;</span>,y.<span class=\"built_in\">eval</span>())</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.Variable(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">x_plus_1 = tf.assign_add(x, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.control_dependencies([x_plus_1]):</span><br><span class=\"line\">    y = tf.identity(x)</span><br><span class=\"line\"></span><br><span class=\"line\">init = tf.initialize_all_variables()</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">    init.run()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;y=&#x27;</span>,y.<span class=\"built_in\">eval</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#y= 2.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 3.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 4.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 5.0</span></span><br><span class=\"line\"><span class=\"comment\">#y= 6.0        </span></span><br></pre></td></tr></table></figure>\n<h1 id=\"TensorFlow入门12-—-Checkpoints，保存和恢复Estimator创建的模型\"><a href=\"#TensorFlow入门12-—-Checkpoints，保存和恢复Estimator创建的模型\" class=\"headerlink\" title=\"TensorFlow入门12 — Checkpoints，保存和恢复Estimator创建的模型\"></a>TensorFlow入门12 — Checkpoints，保存和恢复Estimator创建的模型</h1><p>参考 <a href=\"https://www.jianshu.com/p/60c3b084fe44\">https://www.jianshu.com/p/60c3b084fe44</a></p>\n<p>模型训练好了后，下一步就是保存（Save）和恢复（restore）模型，TensorFlow提供两种模型格式（Model Format）</p>\n<p>1，Checkpoints, 该格式依赖于创建模型的代码.</p>\n<p>2，SavedModel, 该格式不依赖于创建模型的代码.</p>\n<p>本文主要讨论检查点(Checkpoint).</p>\n<p>如《<a href=\"https://www.jianshu.com/p/4e1d4bfd056d\">从数据的角度理解TensorFlow鸢尾花分类程序6</a>》一文所述，在创建tf.estimator.DNNClassifier对象时，其构造函数<strong>init</strong>有一个参数：</p>\n<p><strong>model_dir：</strong>保存模型参数的路径。（Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into a estimator to continue training a previously saved model.）</p>\n<p>a.当没有指定的时候，Estimator 会将检查点文件写入由 Python 的 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.python.org%2F3%2Flibrary%2Ftempfile.html%23tempfile.mkdtemp\">tempfile.mkdtemp</a>函数选择的临时目录中。用语句 print(tempfile.gettempdir())可以查出本机的临时目录</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-617d15c988fca257.png?imageMogr2/auto-orient/strip|imageView2/2/w/704/format/webp\" alt=\"img\"></p>\n<p>tempfile.gettempdir</p>\n<p>b.当指定了目录的时候，例如：<em>model_dir = ‘models/iris’</em>，Estimator 会将检查点文件写入~/models/iris</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-ede38dbd30efd3c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1074/format/webp\" alt=\"img\"></p>\n<p>有了保存检查点文件路径后，tf.estimator.DNNClassifier对象会在<strong>运行train方法的时候，写入检查点文件，</strong>如下图所示：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-82fde1420900d6b5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p>train方法负责写入检查点文件</p>\n<p><strong>那train方法以什么频率写入检查点文件呢？</strong></p>\n<p>默认情况下，Estimator 按照以下时间安排将<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fmachine-learning%2Fglossary%2F%23checkpoint\">检查点</a>保存到 model_dir 中：</p>\n<p>a.每 10 分钟（600 秒）写入一个检查点。</p>\n<p>b.在 train 方法开始（第一次迭代）和完成（最后一次迭代）时写入一个检查点。</p>\n<p>c.只在目录中保留 5 个最近写入的检查点。</p>\n<p><strong>保存好检查点文件后，如何恢复模型呢？</strong></p>\n<p>Estimator 将一个检查点保存到 model_dir 中后，每次调用 Estimator 的 train、eval 或 predict 方法时，都会发生下列情况：</p>\n<p>a) Estimator 通过运行 model_fn() 构建模型<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fmachine-learning%2Fglossary%2F%23graph\">图</a>。（要详细了解 model_fn()，请参阅<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.tensorflow.org%2Fget_started%2Fcustom_estimators\">创建自定义 Estimator</a>。）</p>\n<p>b) Estimator 根据最近写入的检查点中存储的数据来初始化新模型的权重。</p>\n<p>换言之，如下图所示，一旦存在检查点，TensorFlow 就会在您每次调用 train()、evaluate() 或 predict() 时重建模型。</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-d5376e32b383d1de.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p><strong>不当恢复</strong></p>\n<p>通过检查点恢复模型的状态这一操作<strong>仅在模型和检查点兼容时可行</strong>。例如，假设训练了一个 tf.estimator.DNNClassifier，它包含 2 个隐藏层且每层都有 10 个节点；在训练之后（TensorFlow已在 models/iris 中创建检查点），将每个隐藏层中的神经元数量从 10 更改为 3，然后重新训练模型，由于检查点中的状态与 修改后tf.estimator.DNNClassifier 中描述的模型不兼容，因此重新训练失败并出现以下错误，如下图所示：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/10758717-66ba8e48437be765.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/976/format/webp\" alt=\"img\"></p>\n<p>不当恢复</p>\n<p><strong>解决不当恢复</strong></p>\n<p>1，当模型参数一直在变化的时候，最简单的方式是，不要指定<em>model_dir，</em>这样TensorFlow不会启动Checkpoint模型恢复，方便你随时修改模型。</p>\n<p>2，启动Checkpoint的情况下，用Git为每个 model-dir 所需的代码保存一个副本，即为每个模型版本创建一个单独的 git 分支。这种区分将有助于保证检查点的可恢复性。</p>\n<p><strong>总结</strong>：检查点提供了一种简单的自动机制来保存和恢复由 Estimator 创建的模型。</p>\n<h1 id=\"分布式训练\"><a href=\"#分布式训练\" class=\"headerlink\" title=\"分布式训练\"></a>分布式训练</h1><ul>\n<li>ps: Parameter Sever, 参数服务器</li>\n<li>chief: ps-worker架构中的主节点</li>\n<li>worker: 正常训练节点</li>\n<li>evaluator: 评估节点，不参与训练，只用来进行训练数据评估</li>\n</ul>\n<h1 id=\"记录timeline-tf-train-ProfilerHook\"><a href=\"#记录timeline-tf-train-ProfilerHook\" class=\"headerlink\" title=\"记录timeline-tf.train.ProfilerHook\"></a>记录timeline-tf.train.ProfilerHook</h1><p>通过ProfilerHook对tensor代码中的各个节点耗时情况进行分析</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/147319531\">https://zhuanlan.zhihu.com/p/147319531</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train_and_eval</span>(<span class=\"params\">model</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param model: 声明的estimator实例</span></span><br><span class=\"line\"><span class=\"string\">    :return: None</span></span><br><span class=\"line\"><span class=\"string\">    :usage: 进行模型训练，并在指定步长的时候进行结果评估</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    timeline_hook = tf.train.ProfilerHook(save_steps=<span class=\"number\">100</span>, output_dir=os.path.join(</span><br><span class=\"line\">            os.getcwd(), <span class=\"string\">&#x27;./timeline_track&#x27;</span></span><br><span class=\"line\">        ))</span><br><span class=\"line\"></span><br><span class=\"line\">    hook = tf.contrib.estimator.stop_if_no_increase_hook(</span><br><span class=\"line\">        model,</span><br><span class=\"line\">        metric_name=<span class=\"string\">&#x27;ctcvr_cvr_auc_esmm&#x27;</span>,</span><br><span class=\"line\">        max_steps_without_increase=configuration_params[<span class=\"string\">&#x27;max_steps_without_increase&#x27;</span>],</span><br><span class=\"line\">        <span class=\"comment\"># maximum number of training steps with no decrease in the given metric.</span></span><br><span class=\"line\">        min_steps=configuration_params[<span class=\"string\">&#x27;min_steps&#x27;</span>],  <span class=\"comment\"># stop is never requested if global step is less than this value</span></span><br><span class=\"line\">        run_every_steps=configuration_params[<span class=\"string\">&#x27;run_every_steps&#x27;</span>],</span><br><span class=\"line\">        run_every_secs=<span class=\"literal\">None</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    train_spec = tf.estimator.TrainSpec(</span><br><span class=\"line\">        input_fn=<span class=\"keyword\">lambda</span>: input_fn(os.path.join(os.getcwd(),</span><br><span class=\"line\">                                               CONFIG_TRAIN[<span class=\"string\">&#x27;train_data&#x27;</span>]),</span><br><span class=\"line\">                                  <span class=\"string\">&#x27;train&#x27;</span>, CONFIG_TRAIN[<span class=\"string\">&#x27;batch_size&#x27;</span>]),</span><br><span class=\"line\">        hooks=[hook, timeline_hook]</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    eval_spec = tf.estimator.EvalSpec(</span><br><span class=\"line\">        input_fn=<span class=\"keyword\">lambda</span>: input_fn(os.path.join(os.getcwd(),</span><br><span class=\"line\">                                               CONFIG_TRAIN[<span class=\"string\">&#x27;test_data&#x27;</span>]),</span><br><span class=\"line\">                                  <span class=\"string\">&#x27;eval&#x27;</span>, <span class=\"number\">128</span>),</span><br><span class=\"line\">        steps=CONFIG.evalconfig[<span class=\"string\">&#x27;steps&#x27;</span>],</span><br><span class=\"line\">        throttle_secs=<span class=\"number\">30</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    tf.estimator.train_and_evaluate(model, train_spec, eval_spec)</span><br></pre></td></tr></table></figure>\n<p>timeline.json：每个保存步长输出的监控文件</p>\n<ul>\n<li><p>web展示</p>\n<ol>\n<li><p>在chrome中打开“chome://tracing”页面</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-cfed5df9f0c6ae2d180e7b8c65ed233b_720w.jpg\" alt=\"img\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><ul>\n<li>点击“load”，将上一步中生成time-line.json文件导入，导入任意一个即可</li>\n<li>输出结果如下：</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/80/v2-5dd2ee82f762b8fa9ef2a64e631f9cf1_720w.jpg\" alt=\"img\"></p>"},{"title":"tensroflow各种模型保存和加载","date":"2022-03-01T03:32:38.000Z","_content":"\ntf模型保存和加载\n\n<!-- more -->\n\n\nhttps://zhuanlan.zhihu.com/p/128546377\n\n[TOC]\n\n\n\n# Tensorflow笔记：模型保存、加载和Fine-tune\n\n[![锟斤拷](pics/tensroflow各种模型保存和加载/v2-da8a1fcd82fbe5f7206ac58cee088681_xs.jpg)](https://www.zhihu.com/people/chong-yu-4-73)\n\n[锟斤拷](https://www.zhihu.com/people/chong-yu-4-73)\n\n50 人赞同了该文章\n\n## 前言\n\n尝试过迁移学习的同学们都知道，Tensorflow的模型保存加载有不同格式，使用方法也不一样，新手会觉得乱七八糟，所以本文做一个梳理。从模型的保存到加载，再到使用，力求理清这个流程。\n\n## 1. 保存\n\nTensorflow的保存分为三种：1. checkpoint模式；2. pb模式；3. saved_model模式。\n\n### 1.1 先假设有这么个模型\n\n首先假定我们已经有了这样一个简单的线性回归网络结构：\n\n```python3\nimport tensorflow as tf\nsize = 10\n# 构建input\nX = tf.placeholder(name=\"input\", shape=[None, size], dtype=tf.float32)\ny = tf.placeholder(name=\"label\", shape=[None, 1], dtype=tf.float32)\n# 网络结构\nbeta = tf.get_variable(name=\"beta\", shape=[size, 1], initializer=tf.glorot_normal_initializer())\nbias = tf.get_variable(name=\"bias\", shape=[1], initializer=tf.glorot_normal_initializer())\npred = tf.add(tf.matmul(X, beta), bias, name=\"output\")\n# 构建损失\nloss = tf.losses.mean_squared_error(y, pred)\n# 构建train_op\ntrain_op = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8).minimize(loss)\n```\n\n我们来简单初始化，然后跑一下：\n\n```python3\n# 假设这是一个batch_size=8的batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n# 先看一下pred，在训练一个step，在看一下pred是否有变化\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run(pred, feed_dict={X:feed_X}))\n    sess.run(train_op, feed_dict={X:feed_X, y:feed_y})\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n可以看到初始化的输出y值，以及训练1个step之后的模型输出发生了变化。\n\n### 1.2 checkpoint模式\n\ncheckpoint模式将网络和变量数据分开保存，保存好的模型长这个样子：\n\n```text\n|--checkpoint_dir\n|    |--checkpoint\n|    |--test-model-550.meta\n|    |--test-model-550.data-00000-of-00001\n|    |--test-model-550.index\n```\n\ncheckpoint_dir就是保存时候指定的路径，路径下会生成4个文件。其中.meta文件（其实就是pb格式文件）用来保存模型结构，.data和.index文件用来保存模型中的各种变量，而checkpoint文件里面记录了最新的checkpoint文件以及其它checkpoint文件列表，在inference时可以通过修改这个文件，指定使用哪个model。那么要如何保存呢？\n\n```python3\n# 只有sess中有变量的值，所以保存模型的操作只能在sess内\ncheckpoint_dir = \"./model_ckpt/\"\nsaver = tf.train.Saver(max_to_keep=1)    # saver 不需要在sess内\nwith tf.Session() as sess:\n    saver.save(sess, checkpoint_dir + \"test-model\",global_step=i, write_meta_graph=True)\n```\n\n实际就两步。执行之后就可以在checkpoint_dir下面看到前面提到的4个文件了。（这里的max_to_keep是指本次训练在checkpoint_dir这个路径下最多保存多少个模型文件，新模型会覆盖旧模型以节省空间）。\n\n### 1.3 pb模式\n\npb模式保存的模型，只有在目标路径pb_dir = \"./model_pb/\"下孤孤单单的一个文件\"test-model.pb\"，这也是它相比于其他几种方式的优势，简单明了。假设还是前面的网络结构，如果想保存成pb模式该怎么做呢？\n\n```python3\n# 只有sess中有变量的值，所以保存模型的操作只能在sess内\npb_dir = \"./model_pb/\"\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    graph_def = tf.get_default_graph().as_graph_def()\n    # 这里是指定要冻结并保存到pb模型中的变量\n    var_list = [\"input\", \"label\", \"beta\", \"bias\", \"output\"]   # 如果有name_scope，要写全名，如:\"name_scope/beta\" \n    constant_graph = tf.graph_util.convert_variables_to_constants(sess, graph_def, var_list)\n    with tf.gfile.FastGFile(pb_dir + \"test-model.pb\", mode='wb') as f:\n        f.write(constant_graph.SerializeToString())\n```\n\n其实pb模式本质上就是把变量先冻结成常数，然后保存到图结构中。这样就可以直接加载图结构和“参数”了。\n\n### 1.4 saved_model模式\n\n虽然saved_model也支持模型加载，并进行迁移学习。可是不得不说**saved_model几乎就是为了部署而生的**，因为依靠tf.Serving部署模型时要求模型格式必须是saved_model格式。除此以外saved_model还有另外一个优点就是可以跨语言读取，所以本文也介绍一下这种模式的保存于加载。**本文样例的保存在参数设置上会考虑到方便部署**。保存好的saved_model结构长这个样子：\n\n```text\n|--saved_model_dir\n|    |--1\n|        |--saved_model.pb\n|        |--variables\n|            |--variables.data-00000-of-00001\n|            |--variables.index\n```\n\n保存时需要将保存路径精确到\"saved_model_dir/1/ \"，会在下面生成一个pb文件，以及一个variables文件夹。其中“1”文件夹是表示版本的文件夹，应该是一个整数。人为设定这个“版本文件夹”的原因是，在模型部署的时候需要将模型位置精确到saved_model_dir，tf.Serving会在saved_model_dir下搜索版本号最大的路径下的模型进行服务。模型保存的方法是\n\n```python3\n# 只有sess中有变量的值，所以保存模型的操作只能在sess内\nversion = \"1/\"\nsaved_model_dir = \"./saved_model/test-model-dir/\"\nbuilder = tf.saved_model.builder.SavedModelBuilder(saved_model_dir + version)\n\n# 构建 signature\nsignature = tf.saved_model.signature_def_utils.build_signature_def(\n        # 获取输入输出的信息（shape,dtype等），在部署服务后请求带来的数据会喂到inputs中，服务吐的结果会以outputs的形式返回\n        inputs={\"input\": tf.saved_model.utils.build_tensor_info(X)},          # 获取输入tensor的信息，这个字典可以有多个key-value对\n        outputs={\"output\": tf.saved_model.utils.build_tensor_info(pred)},     # 获取输出tensor的信息，这个字典可以有多个key-value对\n        method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME    # 就是'tensorflow/serving/predict'\n)\n\n# 保存到 saved_model\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    builder.add_meta_graph_and_variables(sess, \n        tags=[tf.saved_model.tag_constants.SERVING],         # 如果用来部署，就这样写。否则可以写其他，如[\"test-model\"]\n        signature_def_map={\"serving_default\": signature},    # 如果用来部署，字典的key必须是\"serving_default\"。否则可以写其他\n    )\n    builder.save()\n```\n\n因为涉及到部署，比较复杂，这里不得不说明一下。\n\n在保存之前需要构建一个signature，用来构造signature的build_signature_def函数有三个参数：inputs、outputs、method_name。其中inputs和outputs分别用来获取输入输出向量的信息，在部署服务后来的数据会喂到inputs中，服务吐的结果会以outputs的形式返回；而method_name如果用来部署模型的话需要设置为\"tensorflow/serving/predict\", \"tensorflow/serving/classify\", \"tensorflow/serving/regress\" 中的一个。如果不是用来服务，就可以写一个其他的。\n\n在保存的时候，除了刚刚构建的signature，还需要提供一个tags 参数，如果用来部署的话需要填[tf.saved_model.tag_constants.SERVING]，否则可以填其他。另外如果用来部署模型的话，signature_def_map的key必须是\"serving_default\"。\n\n## 2. 加载\n\n下面说如何加载，checkpoint和pb两种模式的加载方法也不一样。下面分别说\n\n### 2.1 checkpoint加载（略烦）\n\ncheckpoint模式的网络结构和变量是分来保存的，加载的时候也需要分别加载。而网络结构部分你有两种选择：1. 加载.meta文件中的结构， 2. 手动重新写一遍原样结构。\n\n我们先说后一个，如果你不光有模型文件，还有源码，可以把源码构建模型那部分复制过来，然后只加载变量就好，这是手动重新搭建网络结构：\n\n```python3\nimport tensorflow as tf\nsize = 10\n# 构建input\nX = tf.placeholder(name=\"input\", shape=[None, size], dtype=tf.float32)\ny = tf.placeholder(name=\"label\", shape=[None, 1], dtype=tf.float32)\n# 网络结构\nbeta = tf.get_variable(name=\"beta\", shape=[size, 1], initializer=tf.glorot_normal_initializer())\nbias = tf.get_variable(name=\"bias\", shape=[1], initializer=tf.glorot_normal_initializer())\npred = tf.sigmoid(tf.matmul(X, beta) + bias, name=\"output\")\n```\n\n然后加载变量：\n\n```python3\n# 假设这是一个batch_size=8的batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n# 用加载出来的参数，跑一下pred\nsaver = tf.train.Saver()\nwith tf.Session() as sess:\n    saver.restore(sess, tf.train.latest_checkpoint('./model_ckpt/'))    # 加载模型中的变量\n    # sess.run(tf.global_variables_initializer())    # 重新初始化一下参数\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n所以手动构建网络结构后，只需要saver.restore一下，就可以加载模型中的参数。\n\n另外，如果将上面的sess.run(tf.global_variables_initializer())注释掉，那每次运行的结果都一样，可见此时模型中的变量确实是加载进来的变量。如果取消注释这一句，每次跑出来的结果都不同，因为加载进来的变量又被初始化函数覆盖了，所以每次都不一样。这也说明了：**通过checkpoint这种模式加载进来的变量，依然是变量，而且是trainable=True的**。\n\n```python3\nprint(tf.trainable_variables())\n```\n\n结果为：[<tf.Variable 'beta:0' shape=(10, 1) dtype=float32_ref>, <tf.Variable 'bias:0' shape=(1,) dtype=float32_ref>]\n\n那如果我懒，活着没有源码，无法手动构建网络呢？就需要从.meta文件里导入网络结构了。\n\n```python3\n# 不手动构建，从文件中加载网络结构\nimport numpy as np\nimport tensorflow as tf\nsize = 10\n# 加载网络\nsaver=tf.train.import_meta_graph('./model_ckpt/test-model-0.meta')\n```\n\n什么？这就完了？网络结构在哪呢？先别急，这种方法就是这样，网络结构已经加载进来了，那怎么用呢？\n\n```python3\n# 假设这是一个batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n# 下面我们来跑一下 pred\nwith tf.Session() as sess:\n    saver.restore(sess, tf.train.latest_checkpoint('./model_ckpt/'))  # 加载模型变量\n    graph = tf.get_default_graph()\n    X = graph.get_tensor_by_name(\"input:0\")        # 根据tensor名字获取tensor变量\n    pred = graph.get_tensor_by_name(\"output:0\")    # 根据tensor名字获取tensor变量\n    # sess.run(tf.global_variables_initializer())  # 是否重新初始化变量\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n其实前面把网络结构加载进来之后，如果需要对某tensor进行操作的话（run、feed、concat等等）需要通过tensor的name获取成变量。同样通过sess.run(tf.global_variables_initializer())可以看出，加载进来的变量，还是变量。\n\n总结一下：手动构建网络结构的话，缺点是麻烦！优点是你想用什么变量直接用就行；而通过.meta文件来加载网络结构，优点是省事，缺点是如果想用某个变量，必须通过name获取变量。\n\n### 2.2 pb模式加载\n\n相比之下，pb模式的加载旧没那么复杂，因为他的网络结构和数据是存在一起的。\n\n```python3\nimport numpy as np\nimport tensorflow as tf\n\n# 直接从pb获取tensor\npb_dir = \"./model_pb/\"\nwith tf.gfile.FastGFile(pb_dir + \"test-model.pb\", \"rb\") as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())    # 从pb文件中导入信息\n    # 从网络中通过tensor的name获取为变量\n    X, pred = tf.import_graph_def(graph_def, return_elements=[\"input:0\", \"output:0\"])\n```\n\n现在我们就已经有了X和pred，下面来跑一个pred吧\n\n```python3\n# 假设这是一个batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n# 跑一下 pred\nwith tf.Session() as sess:\n    # sess.run(tf.global_variables_initializer())\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n就这么简单！从pb中获取进来的“变量”就可以直接用。为什么我要给变量两个字打上引号呢？因为在pb模型里保存的其实是常量了，取消注释sess.run(tf.global_variables_initializer())后，多次运行的结果还是一样的。此时的“beta:0”和\"bias:0\"已经不再是variable，而是constant。**这带来一个好处：读取模型中的tensor可以在Session外进行。相比之下checkpoint只能在Session内读取模型，对Fine-tune来说就比较麻烦。**\n\n### 2.3 saved_model模式加载\n\n前两种加载方法想要获取tensor，要么需要手动搭建网络，要么需要知道tensor的name，如果用模型和训模型的不是同一个人，那在没有源码的情况下，就不方便获取每个tensor的name。好在saved_model可以通过前面提到的signature_def_map的方法获取tensor。先看一下直接通过tensor的name获取变量的加载方式：\n\n```python3\n# 假设这是一个batch\nsize = 10\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n\nsaved_model_dir = \"./saved_model/1/\"\nwith tf.Session() as sess:\n    # tf.saved_model.tag_constants.SERVING == \"serve\"，这里load时的tags需要和保存时的tags一致\n    meta_graph_def = tf.saved_model.loader.load(sess, tags=[\"serve\"], export_dir=saved_model_dir)\n    graph = tf.get_default_graph()\n    X = graph.get_tensor_by_name(\"input:0\")\n    pred = graph.get_tensor_by_name(\"output:0\")\n    # sess.run(tf.global_variables_initializer())\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n这里和checkpoint的加载过程很相似，先一个load过程，然后get_tensor_by_name。这需要我们事先知道tensor的name。如果有了signature的信息就不一样了：\n\n```python3\n# 假设这是一个batch\nsize = 10\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n\nsaved_model_dir = \"./saved_model/1/\"\nwith tf.Session() as sess:\n    # tf.saved_model.tag_constants.SERVING == \"serve\"，这里load时的tags需要和保存时的tags一致\n    meta_graph_def = tf.saved_model.loader.load(sess, tags=[\"serve\"], export_dir=saved_model_dir)\n    signature = meta_graph_def.signature_def\n    # print(signature)    # signature 内包含了保存模型时，signature_def_map 的信息\n    X = signature[\"serving_default\"].inputs[\"input\"].name\n    pred = signature[\"serving_default\"].outputs[\"output\"].name\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n这时即使我们没有源码，也可以通过print(signature)获知关于tensor的信息，如上就展示了没有源码时，通过signature获取tensor的name，并获取tensor的过程。这里输出的signature长这样：\n\n```python3\n# signature长什么样\nprint(signature)\n\n# 输出\n\"\"\"\nINFO:tensorflow:Restoring parameters from ./saved_model/1/variables/variables\n{'serving_default': inputs {\n  key: \"input\"\n  value {\n    name: \"input:0\"\n    dtype: DT_FLOAT\n    tensor_shape {\n      dim {\n        size: -1\n      }\n      dim {\n        size: 10\n      }\n    }\n  }\n}\noutputs {\n  key: \"output\"\n  value {\n    name: \"output:0\"\n    dtype: DT_FLOAT\n    tensor_shape {\n      dim {\n        size: -1\n      }\n      dim {\n        size: 1\n      }\n    }\n  }\n}\nmethod_name: \"tensorflow/serving/predict\"\n}\n\"\"\"\n```\n\n\n\n## 3. Fine-tune\n\n最后不管保存还是加载模型，多数情况都是为了能够进行迁移学习。其实大部分无非就是将模型加载进来之后，使用某一个节点的值，作为我们后续模型的输入呗。比如我要用前面的模型结果作为特征通过一元罗辑回归去预测z，这样新的网络结构就是这样：\n\n```python3\nimport numpy as np\nimport tensorflow as tf\n\n# 加载模型部分，直接从pb获取X和pred\npb_dir = \"./model_pb/\"\nwith tf.gfile.FastGFile(pb_dir + \"test-model.pb\", \"rb\") as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    X, pred = tf.import_graph_def(graph_def, return_elements=[\"input:0\", \"output:0\"])\n\n# 下面是 Fine-tune 部分\n# 新的 label\nz = tf.placeholder(name=\"new_label\", shape=[None, 1], dtype=tf.float32)\n# 新的参数\nnew_beta = tf.get_variable(name=\"new_beta\", shape=[1], initializer=tf.glorot_normal_initializer())\nnew_bias = tf.get_variable(name=\"new_bias\", shape=[1], initializer=tf.glorot_normal_initializer())\n# 一元罗辑回归，通过pred去预测z\nnew_pred = tf.sigmoid(new_beta * pred + new_beta)    # 这种变量不写name的习惯是不好的哦\n\n# 下面是构建模型的损失函数以及train_op\n# log_loss\nnew_loss = tf.reduce_mean(tf.losses.log_loss(predictions=new_pred, labels=z))\n# train_op\ntrain_op = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8).minimize(new_loss)\n```\n\n就是这样，把保存好的模型看作一个黑盒，喂进去X吐出来pred，然后我们直接用pred就好了。\n\n但是这里存在一个问题，就是只能通过name获取节点。比如这里的new_pred就没有name，那我想要基于这个新模型再次进行Fine-tune的时候，就不能获取这个new_pred，就无法进行Fine-tune。所以大家还是要养成一个好习惯，多给变量起名字，尤其是placeholder！要是连placeholder都没名字，别人就没法用你的模型啦。如果保存的是saved_model，建议一定要设置signature。\n\n下面来实验一下这个Fine-tune的模型吧：\n\n```python3\n# 假设这是一个batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_z = np.array([[1],[1],[0],[0],[1],[1],[0],[0]]).astype(np.float32)\n# 跑一下 new_pred 之后train一个step，在看看 new_pred 有没有改变\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run(new_pred, feed_dict={X:feed_X}))\n    sess.run(train_op,  feed_dict={X:feed_X, z:feed_z})\n    print(sess.run(new_pred, feed_dict={X:feed_X}))\n```\n\n这里补充一下：**通过pb模式导入进来的参数其实是constants，所以在Fine-tune的时候不会变化，而通过checkpoint模式导入进来的参数是variables，在后续Fine-tune的时候是会发生变化的**。具体让不让他trainable就看你的实际需要了。\n\n## 4. 其他补充\n\n在2.2中，加载pb模型的时候，并不需要把所有的tensor都获取到，只要“一头一尾”即可。因为头（\"input:0\"）是需要进行feed操作的，而尾（\"output:0\"）是需要输出，或者在迁移学习中要进行其他操作。至于中间哪些其他不需要进行操作的tensor，可以不获取。\n\n因为只有pb模式在加载的时候，可以在Session外进行加载，方便Fine-tune。所以个人建议，如果要进行迁移学习，先将模型转化为pb模式。\n\n其他的想起来在写","source":"_posts/0_代码相关/tensroflow各种模型保存和加载.md","raw":"---\ntitle: tensroflow各种模型保存和加载\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\ntf模型保存和加载\n\n<!-- more -->\n\n\nhttps://zhuanlan.zhihu.com/p/128546377\n\n[TOC]\n\n\n\n# Tensorflow笔记：模型保存、加载和Fine-tune\n\n[![锟斤拷](pics/tensroflow各种模型保存和加载/v2-da8a1fcd82fbe5f7206ac58cee088681_xs.jpg)](https://www.zhihu.com/people/chong-yu-4-73)\n\n[锟斤拷](https://www.zhihu.com/people/chong-yu-4-73)\n\n50 人赞同了该文章\n\n## 前言\n\n尝试过迁移学习的同学们都知道，Tensorflow的模型保存加载有不同格式，使用方法也不一样，新手会觉得乱七八糟，所以本文做一个梳理。从模型的保存到加载，再到使用，力求理清这个流程。\n\n## 1. 保存\n\nTensorflow的保存分为三种：1. checkpoint模式；2. pb模式；3. saved_model模式。\n\n### 1.1 先假设有这么个模型\n\n首先假定我们已经有了这样一个简单的线性回归网络结构：\n\n```python3\nimport tensorflow as tf\nsize = 10\n# 构建input\nX = tf.placeholder(name=\"input\", shape=[None, size], dtype=tf.float32)\ny = tf.placeholder(name=\"label\", shape=[None, 1], dtype=tf.float32)\n# 网络结构\nbeta = tf.get_variable(name=\"beta\", shape=[size, 1], initializer=tf.glorot_normal_initializer())\nbias = tf.get_variable(name=\"bias\", shape=[1], initializer=tf.glorot_normal_initializer())\npred = tf.add(tf.matmul(X, beta), bias, name=\"output\")\n# 构建损失\nloss = tf.losses.mean_squared_error(y, pred)\n# 构建train_op\ntrain_op = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8).minimize(loss)\n```\n\n我们来简单初始化，然后跑一下：\n\n```python3\n# 假设这是一个batch_size=8的batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n# 先看一下pred，在训练一个step，在看一下pred是否有变化\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run(pred, feed_dict={X:feed_X}))\n    sess.run(train_op, feed_dict={X:feed_X, y:feed_y})\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n可以看到初始化的输出y值，以及训练1个step之后的模型输出发生了变化。\n\n### 1.2 checkpoint模式\n\ncheckpoint模式将网络和变量数据分开保存，保存好的模型长这个样子：\n\n```text\n|--checkpoint_dir\n|    |--checkpoint\n|    |--test-model-550.meta\n|    |--test-model-550.data-00000-of-00001\n|    |--test-model-550.index\n```\n\ncheckpoint_dir就是保存时候指定的路径，路径下会生成4个文件。其中.meta文件（其实就是pb格式文件）用来保存模型结构，.data和.index文件用来保存模型中的各种变量，而checkpoint文件里面记录了最新的checkpoint文件以及其它checkpoint文件列表，在inference时可以通过修改这个文件，指定使用哪个model。那么要如何保存呢？\n\n```python3\n# 只有sess中有变量的值，所以保存模型的操作只能在sess内\ncheckpoint_dir = \"./model_ckpt/\"\nsaver = tf.train.Saver(max_to_keep=1)    # saver 不需要在sess内\nwith tf.Session() as sess:\n    saver.save(sess, checkpoint_dir + \"test-model\",global_step=i, write_meta_graph=True)\n```\n\n实际就两步。执行之后就可以在checkpoint_dir下面看到前面提到的4个文件了。（这里的max_to_keep是指本次训练在checkpoint_dir这个路径下最多保存多少个模型文件，新模型会覆盖旧模型以节省空间）。\n\n### 1.3 pb模式\n\npb模式保存的模型，只有在目标路径pb_dir = \"./model_pb/\"下孤孤单单的一个文件\"test-model.pb\"，这也是它相比于其他几种方式的优势，简单明了。假设还是前面的网络结构，如果想保存成pb模式该怎么做呢？\n\n```python3\n# 只有sess中有变量的值，所以保存模型的操作只能在sess内\npb_dir = \"./model_pb/\"\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    graph_def = tf.get_default_graph().as_graph_def()\n    # 这里是指定要冻结并保存到pb模型中的变量\n    var_list = [\"input\", \"label\", \"beta\", \"bias\", \"output\"]   # 如果有name_scope，要写全名，如:\"name_scope/beta\" \n    constant_graph = tf.graph_util.convert_variables_to_constants(sess, graph_def, var_list)\n    with tf.gfile.FastGFile(pb_dir + \"test-model.pb\", mode='wb') as f:\n        f.write(constant_graph.SerializeToString())\n```\n\n其实pb模式本质上就是把变量先冻结成常数，然后保存到图结构中。这样就可以直接加载图结构和“参数”了。\n\n### 1.4 saved_model模式\n\n虽然saved_model也支持模型加载，并进行迁移学习。可是不得不说**saved_model几乎就是为了部署而生的**，因为依靠tf.Serving部署模型时要求模型格式必须是saved_model格式。除此以外saved_model还有另外一个优点就是可以跨语言读取，所以本文也介绍一下这种模式的保存于加载。**本文样例的保存在参数设置上会考虑到方便部署**。保存好的saved_model结构长这个样子：\n\n```text\n|--saved_model_dir\n|    |--1\n|        |--saved_model.pb\n|        |--variables\n|            |--variables.data-00000-of-00001\n|            |--variables.index\n```\n\n保存时需要将保存路径精确到\"saved_model_dir/1/ \"，会在下面生成一个pb文件，以及一个variables文件夹。其中“1”文件夹是表示版本的文件夹，应该是一个整数。人为设定这个“版本文件夹”的原因是，在模型部署的时候需要将模型位置精确到saved_model_dir，tf.Serving会在saved_model_dir下搜索版本号最大的路径下的模型进行服务。模型保存的方法是\n\n```python3\n# 只有sess中有变量的值，所以保存模型的操作只能在sess内\nversion = \"1/\"\nsaved_model_dir = \"./saved_model/test-model-dir/\"\nbuilder = tf.saved_model.builder.SavedModelBuilder(saved_model_dir + version)\n\n# 构建 signature\nsignature = tf.saved_model.signature_def_utils.build_signature_def(\n        # 获取输入输出的信息（shape,dtype等），在部署服务后请求带来的数据会喂到inputs中，服务吐的结果会以outputs的形式返回\n        inputs={\"input\": tf.saved_model.utils.build_tensor_info(X)},          # 获取输入tensor的信息，这个字典可以有多个key-value对\n        outputs={\"output\": tf.saved_model.utils.build_tensor_info(pred)},     # 获取输出tensor的信息，这个字典可以有多个key-value对\n        method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME    # 就是'tensorflow/serving/predict'\n)\n\n# 保存到 saved_model\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    builder.add_meta_graph_and_variables(sess, \n        tags=[tf.saved_model.tag_constants.SERVING],         # 如果用来部署，就这样写。否则可以写其他，如[\"test-model\"]\n        signature_def_map={\"serving_default\": signature},    # 如果用来部署，字典的key必须是\"serving_default\"。否则可以写其他\n    )\n    builder.save()\n```\n\n因为涉及到部署，比较复杂，这里不得不说明一下。\n\n在保存之前需要构建一个signature，用来构造signature的build_signature_def函数有三个参数：inputs、outputs、method_name。其中inputs和outputs分别用来获取输入输出向量的信息，在部署服务后来的数据会喂到inputs中，服务吐的结果会以outputs的形式返回；而method_name如果用来部署模型的话需要设置为\"tensorflow/serving/predict\", \"tensorflow/serving/classify\", \"tensorflow/serving/regress\" 中的一个。如果不是用来服务，就可以写一个其他的。\n\n在保存的时候，除了刚刚构建的signature，还需要提供一个tags 参数，如果用来部署的话需要填[tf.saved_model.tag_constants.SERVING]，否则可以填其他。另外如果用来部署模型的话，signature_def_map的key必须是\"serving_default\"。\n\n## 2. 加载\n\n下面说如何加载，checkpoint和pb两种模式的加载方法也不一样。下面分别说\n\n### 2.1 checkpoint加载（略烦）\n\ncheckpoint模式的网络结构和变量是分来保存的，加载的时候也需要分别加载。而网络结构部分你有两种选择：1. 加载.meta文件中的结构， 2. 手动重新写一遍原样结构。\n\n我们先说后一个，如果你不光有模型文件，还有源码，可以把源码构建模型那部分复制过来，然后只加载变量就好，这是手动重新搭建网络结构：\n\n```python3\nimport tensorflow as tf\nsize = 10\n# 构建input\nX = tf.placeholder(name=\"input\", shape=[None, size], dtype=tf.float32)\ny = tf.placeholder(name=\"label\", shape=[None, 1], dtype=tf.float32)\n# 网络结构\nbeta = tf.get_variable(name=\"beta\", shape=[size, 1], initializer=tf.glorot_normal_initializer())\nbias = tf.get_variable(name=\"bias\", shape=[1], initializer=tf.glorot_normal_initializer())\npred = tf.sigmoid(tf.matmul(X, beta) + bias, name=\"output\")\n```\n\n然后加载变量：\n\n```python3\n# 假设这是一个batch_size=8的batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n# 用加载出来的参数，跑一下pred\nsaver = tf.train.Saver()\nwith tf.Session() as sess:\n    saver.restore(sess, tf.train.latest_checkpoint('./model_ckpt/'))    # 加载模型中的变量\n    # sess.run(tf.global_variables_initializer())    # 重新初始化一下参数\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n所以手动构建网络结构后，只需要saver.restore一下，就可以加载模型中的参数。\n\n另外，如果将上面的sess.run(tf.global_variables_initializer())注释掉，那每次运行的结果都一样，可见此时模型中的变量确实是加载进来的变量。如果取消注释这一句，每次跑出来的结果都不同，因为加载进来的变量又被初始化函数覆盖了，所以每次都不一样。这也说明了：**通过checkpoint这种模式加载进来的变量，依然是变量，而且是trainable=True的**。\n\n```python3\nprint(tf.trainable_variables())\n```\n\n结果为：[<tf.Variable 'beta:0' shape=(10, 1) dtype=float32_ref>, <tf.Variable 'bias:0' shape=(1,) dtype=float32_ref>]\n\n那如果我懒，活着没有源码，无法手动构建网络呢？就需要从.meta文件里导入网络结构了。\n\n```python3\n# 不手动构建，从文件中加载网络结构\nimport numpy as np\nimport tensorflow as tf\nsize = 10\n# 加载网络\nsaver=tf.train.import_meta_graph('./model_ckpt/test-model-0.meta')\n```\n\n什么？这就完了？网络结构在哪呢？先别急，这种方法就是这样，网络结构已经加载进来了，那怎么用呢？\n\n```python3\n# 假设这是一个batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n# 下面我们来跑一下 pred\nwith tf.Session() as sess:\n    saver.restore(sess, tf.train.latest_checkpoint('./model_ckpt/'))  # 加载模型变量\n    graph = tf.get_default_graph()\n    X = graph.get_tensor_by_name(\"input:0\")        # 根据tensor名字获取tensor变量\n    pred = graph.get_tensor_by_name(\"output:0\")    # 根据tensor名字获取tensor变量\n    # sess.run(tf.global_variables_initializer())  # 是否重新初始化变量\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n其实前面把网络结构加载进来之后，如果需要对某tensor进行操作的话（run、feed、concat等等）需要通过tensor的name获取成变量。同样通过sess.run(tf.global_variables_initializer())可以看出，加载进来的变量，还是变量。\n\n总结一下：手动构建网络结构的话，缺点是麻烦！优点是你想用什么变量直接用就行；而通过.meta文件来加载网络结构，优点是省事，缺点是如果想用某个变量，必须通过name获取变量。\n\n### 2.2 pb模式加载\n\n相比之下，pb模式的加载旧没那么复杂，因为他的网络结构和数据是存在一起的。\n\n```python3\nimport numpy as np\nimport tensorflow as tf\n\n# 直接从pb获取tensor\npb_dir = \"./model_pb/\"\nwith tf.gfile.FastGFile(pb_dir + \"test-model.pb\", \"rb\") as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())    # 从pb文件中导入信息\n    # 从网络中通过tensor的name获取为变量\n    X, pred = tf.import_graph_def(graph_def, return_elements=[\"input:0\", \"output:0\"])\n```\n\n现在我们就已经有了X和pred，下面来跑一个pred吧\n\n```python3\n# 假设这是一个batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n# 跑一下 pred\nwith tf.Session() as sess:\n    # sess.run(tf.global_variables_initializer())\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n就这么简单！从pb中获取进来的“变量”就可以直接用。为什么我要给变量两个字打上引号呢？因为在pb模型里保存的其实是常量了，取消注释sess.run(tf.global_variables_initializer())后，多次运行的结果还是一样的。此时的“beta:0”和\"bias:0\"已经不再是variable，而是constant。**这带来一个好处：读取模型中的tensor可以在Session外进行。相比之下checkpoint只能在Session内读取模型，对Fine-tune来说就比较麻烦。**\n\n### 2.3 saved_model模式加载\n\n前两种加载方法想要获取tensor，要么需要手动搭建网络，要么需要知道tensor的name，如果用模型和训模型的不是同一个人，那在没有源码的情况下，就不方便获取每个tensor的name。好在saved_model可以通过前面提到的signature_def_map的方法获取tensor。先看一下直接通过tensor的name获取变量的加载方式：\n\n```python3\n# 假设这是一个batch\nsize = 10\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n\nsaved_model_dir = \"./saved_model/1/\"\nwith tf.Session() as sess:\n    # tf.saved_model.tag_constants.SERVING == \"serve\"，这里load时的tags需要和保存时的tags一致\n    meta_graph_def = tf.saved_model.loader.load(sess, tags=[\"serve\"], export_dir=saved_model_dir)\n    graph = tf.get_default_graph()\n    X = graph.get_tensor_by_name(\"input:0\")\n    pred = graph.get_tensor_by_name(\"output:0\")\n    # sess.run(tf.global_variables_initializer())\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n这里和checkpoint的加载过程很相似，先一个load过程，然后get_tensor_by_name。这需要我们事先知道tensor的name。如果有了signature的信息就不一样了：\n\n```python3\n# 假设这是一个batch\nsize = 10\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_y = np.ones((8,1)).astype(np.float32)\n\nsaved_model_dir = \"./saved_model/1/\"\nwith tf.Session() as sess:\n    # tf.saved_model.tag_constants.SERVING == \"serve\"，这里load时的tags需要和保存时的tags一致\n    meta_graph_def = tf.saved_model.loader.load(sess, tags=[\"serve\"], export_dir=saved_model_dir)\n    signature = meta_graph_def.signature_def\n    # print(signature)    # signature 内包含了保存模型时，signature_def_map 的信息\n    X = signature[\"serving_default\"].inputs[\"input\"].name\n    pred = signature[\"serving_default\"].outputs[\"output\"].name\n    print(sess.run(pred, feed_dict={X:feed_X}))\n```\n\n这时即使我们没有源码，也可以通过print(signature)获知关于tensor的信息，如上就展示了没有源码时，通过signature获取tensor的name，并获取tensor的过程。这里输出的signature长这样：\n\n```python3\n# signature长什么样\nprint(signature)\n\n# 输出\n\"\"\"\nINFO:tensorflow:Restoring parameters from ./saved_model/1/variables/variables\n{'serving_default': inputs {\n  key: \"input\"\n  value {\n    name: \"input:0\"\n    dtype: DT_FLOAT\n    tensor_shape {\n      dim {\n        size: -1\n      }\n      dim {\n        size: 10\n      }\n    }\n  }\n}\noutputs {\n  key: \"output\"\n  value {\n    name: \"output:0\"\n    dtype: DT_FLOAT\n    tensor_shape {\n      dim {\n        size: -1\n      }\n      dim {\n        size: 1\n      }\n    }\n  }\n}\nmethod_name: \"tensorflow/serving/predict\"\n}\n\"\"\"\n```\n\n\n\n## 3. Fine-tune\n\n最后不管保存还是加载模型，多数情况都是为了能够进行迁移学习。其实大部分无非就是将模型加载进来之后，使用某一个节点的值，作为我们后续模型的输入呗。比如我要用前面的模型结果作为特征通过一元罗辑回归去预测z，这样新的网络结构就是这样：\n\n```python3\nimport numpy as np\nimport tensorflow as tf\n\n# 加载模型部分，直接从pb获取X和pred\npb_dir = \"./model_pb/\"\nwith tf.gfile.FastGFile(pb_dir + \"test-model.pb\", \"rb\") as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    X, pred = tf.import_graph_def(graph_def, return_elements=[\"input:0\", \"output:0\"])\n\n# 下面是 Fine-tune 部分\n# 新的 label\nz = tf.placeholder(name=\"new_label\", shape=[None, 1], dtype=tf.float32)\n# 新的参数\nnew_beta = tf.get_variable(name=\"new_beta\", shape=[1], initializer=tf.glorot_normal_initializer())\nnew_bias = tf.get_variable(name=\"new_bias\", shape=[1], initializer=tf.glorot_normal_initializer())\n# 一元罗辑回归，通过pred去预测z\nnew_pred = tf.sigmoid(new_beta * pred + new_beta)    # 这种变量不写name的习惯是不好的哦\n\n# 下面是构建模型的损失函数以及train_op\n# log_loss\nnew_loss = tf.reduce_mean(tf.losses.log_loss(predictions=new_pred, labels=z))\n# train_op\ntrain_op = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8).minimize(new_loss)\n```\n\n就是这样，把保存好的模型看作一个黑盒，喂进去X吐出来pred，然后我们直接用pred就好了。\n\n但是这里存在一个问题，就是只能通过name获取节点。比如这里的new_pred就没有name，那我想要基于这个新模型再次进行Fine-tune的时候，就不能获取这个new_pred，就无法进行Fine-tune。所以大家还是要养成一个好习惯，多给变量起名字，尤其是placeholder！要是连placeholder都没名字，别人就没法用你的模型啦。如果保存的是saved_model，建议一定要设置signature。\n\n下面来实验一下这个Fine-tune的模型吧：\n\n```python3\n# 假设这是一个batch\nfeed_X = np.ones((8,size)).astype(np.float32)\nfeed_z = np.array([[1],[1],[0],[0],[1],[1],[0],[0]]).astype(np.float32)\n# 跑一下 new_pred 之后train一个step，在看看 new_pred 有没有改变\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run(new_pred, feed_dict={X:feed_X}))\n    sess.run(train_op,  feed_dict={X:feed_X, z:feed_z})\n    print(sess.run(new_pred, feed_dict={X:feed_X}))\n```\n\n这里补充一下：**通过pb模式导入进来的参数其实是constants，所以在Fine-tune的时候不会变化，而通过checkpoint模式导入进来的参数是variables，在后续Fine-tune的时候是会发生变化的**。具体让不让他trainable就看你的实际需要了。\n\n## 4. 其他补充\n\n在2.2中，加载pb模型的时候，并不需要把所有的tensor都获取到，只要“一头一尾”即可。因为头（\"input:0\"）是需要进行feed操作的，而尾（\"output:0\"）是需要输出，或者在迁移学习中要进行其他操作。至于中间哪些其他不需要进行操作的tensor，可以不获取。\n\n因为只有pb模式在加载的时候，可以在Session外进行加载，方便Fine-tune。所以个人建议，如果要进行迁移学习，先将模型转化为pb模式。\n\n其他的想起来在写","slug":"0_代码相关/tensroflow各种模型保存和加载","published":1,"updated":"2022-03-01T03:54:32.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly53004e8s32a53l0wmd","content":"<p>tf模型保存和加载</p>\n<span id=\"more\"></span>\n<p><a href=\"https://zhuanlan.zhihu.com/p/128546377\">https://zhuanlan.zhihu.com/p/128546377</a></p>\n<p>[TOC]</p>\n<h1 id=\"Tensorflow笔记：模型保存、加载和Fine-tune\"><a href=\"#Tensorflow笔记：模型保存、加载和Fine-tune\" class=\"headerlink\" title=\"Tensorflow笔记：模型保存、加载和Fine-tune\"></a>Tensorflow笔记：模型保存、加载和Fine-tune</h1><p><a href=\"https://www.zhihu.com/people/chong-yu-4-73\"><img src=\"pics/tensroflow各种模型保存和加载/v2-da8a1fcd82fbe5f7206ac58cee088681_xs.jpg\" alt=\"锟斤拷\"></a></p>\n<p><a href=\"https://www.zhihu.com/people/chong-yu-4-73\">锟斤拷</a></p>\n<p>50 人赞同了该文章</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>尝试过迁移学习的同学们都知道，Tensorflow的模型保存加载有不同格式，使用方法也不一样，新手会觉得乱七八糟，所以本文做一个梳理。从模型的保存到加载，再到使用，力求理清这个流程。</p>\n<h2 id=\"1-保存\"><a href=\"#1-保存\" class=\"headerlink\" title=\"1. 保存\"></a>1. 保存</h2><p>Tensorflow的保存分为三种：1. checkpoint模式；2. pb模式；3. saved_model模式。</p>\n<h3 id=\"1-1-先假设有这么个模型\"><a href=\"#1-1-先假设有这么个模型\" class=\"headerlink\" title=\"1.1 先假设有这么个模型\"></a>1.1 先假设有这么个模型</h3><p>首先假定我们已经有了这样一个简单的线性回归网络结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">size = 10</span><br><span class=\"line\"># 构建input</span><br><span class=\"line\">X = tf.placeholder(name=&quot;input&quot;, shape=[None, size], dtype=tf.float32)</span><br><span class=\"line\">y = tf.placeholder(name=&quot;label&quot;, shape=[None, 1], dtype=tf.float32)</span><br><span class=\"line\"># 网络结构</span><br><span class=\"line\">beta = tf.get_variable(name=&quot;beta&quot;, shape=[size, 1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">bias = tf.get_variable(name=&quot;bias&quot;, shape=[1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">pred = tf.add(tf.matmul(X, beta), bias, name=&quot;output&quot;)</span><br><span class=\"line\"># 构建损失</span><br><span class=\"line\">loss = tf.losses.mean_squared_error(y, pred)</span><br><span class=\"line\"># 构建train_op</span><br><span class=\"line\">train_op = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8).minimize(loss)</span><br></pre></td></tr></table></figure>\n<p>我们来简单初始化，然后跑一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch_size=8的batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"># 先看一下pred，在训练一个step，在看一下pred是否有变化</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br><span class=\"line\">    sess.run(train_op, feed_dict=&#123;X:feed_X, y:feed_y&#125;)</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>可以看到初始化的输出y值，以及训练1个step之后的模型输出发生了变化。</p>\n<h3 id=\"1-2-checkpoint模式\"><a href=\"#1-2-checkpoint模式\" class=\"headerlink\" title=\"1.2 checkpoint模式\"></a>1.2 checkpoint模式</h3><p>checkpoint模式将网络和变量数据分开保存，保存好的模型长这个样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--checkpoint_dir</span><br><span class=\"line\">|    |--checkpoint</span><br><span class=\"line\">|    |--test-model-550.meta</span><br><span class=\"line\">|    |--test-model-550.data-00000-of-00001</span><br><span class=\"line\">|    |--test-model-550.index</span><br></pre></td></tr></table></figure>\n<p>checkpoint_dir就是保存时候指定的路径，路径下会生成4个文件。其中.meta文件（其实就是pb格式文件）用来保存模型结构，.data和.index文件用来保存模型中的各种变量，而checkpoint文件里面记录了最新的checkpoint文件以及其它checkpoint文件列表，在inference时可以通过修改这个文件，指定使用哪个model。那么要如何保存呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只有sess中有变量的值，所以保存模型的操作只能在sess内</span><br><span class=\"line\">checkpoint_dir = &quot;./model_ckpt/&quot;</span><br><span class=\"line\">saver = tf.train.Saver(max_to_keep=1)    # saver 不需要在sess内</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    saver.save(sess, checkpoint_dir + &quot;test-model&quot;,global_step=i, write_meta_graph=True)</span><br></pre></td></tr></table></figure>\n<p>实际就两步。执行之后就可以在checkpoint_dir下面看到前面提到的4个文件了。（这里的max_to_keep是指本次训练在checkpoint_dir这个路径下最多保存多少个模型文件，新模型会覆盖旧模型以节省空间）。</p>\n<h3 id=\"1-3-pb模式\"><a href=\"#1-3-pb模式\" class=\"headerlink\" title=\"1.3 pb模式\"></a>1.3 pb模式</h3><p>pb模式保存的模型，只有在目标路径pb_dir = “./model_pb/“下孤孤单单的一个文件”test-model.pb”，这也是它相比于其他几种方式的优势，简单明了。假设还是前面的网络结构，如果想保存成pb模式该怎么做呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只有sess中有变量的值，所以保存模型的操作只能在sess内</span><br><span class=\"line\">pb_dir = &quot;./model_pb/&quot;</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    graph_def = tf.get_default_graph().as_graph_def()</span><br><span class=\"line\">    # 这里是指定要冻结并保存到pb模型中的变量</span><br><span class=\"line\">    var_list = [&quot;input&quot;, &quot;label&quot;, &quot;beta&quot;, &quot;bias&quot;, &quot;output&quot;]   # 如果有name_scope，要写全名，如:&quot;name_scope/beta&quot; </span><br><span class=\"line\">    constant_graph = tf.graph_util.convert_variables_to_constants(sess, graph_def, var_list)</span><br><span class=\"line\">    with tf.gfile.FastGFile(pb_dir + &quot;test-model.pb&quot;, mode=&#x27;wb&#x27;) as f:</span><br><span class=\"line\">        f.write(constant_graph.SerializeToString())</span><br></pre></td></tr></table></figure>\n<p>其实pb模式本质上就是把变量先冻结成常数，然后保存到图结构中。这样就可以直接加载图结构和“参数”了。</p>\n<h3 id=\"1-4-saved-model模式\"><a href=\"#1-4-saved-model模式\" class=\"headerlink\" title=\"1.4 saved_model模式\"></a>1.4 saved_model模式</h3><p>虽然saved_model也支持模型加载，并进行迁移学习。可是不得不说<strong>saved_model几乎就是为了部署而生的</strong>，因为依靠tf.Serving部署模型时要求模型格式必须是saved_model格式。除此以外saved_model还有另外一个优点就是可以跨语言读取，所以本文也介绍一下这种模式的保存于加载。<strong>本文样例的保存在参数设置上会考虑到方便部署</strong>。保存好的saved_model结构长这个样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--saved_model_dir</span><br><span class=\"line\">|    |--1</span><br><span class=\"line\">|        |--saved_model.pb</span><br><span class=\"line\">|        |--variables</span><br><span class=\"line\">|            |--variables.data-00000-of-00001</span><br><span class=\"line\">|            |--variables.index</span><br></pre></td></tr></table></figure>\n<p>保存时需要将保存路径精确到”saved_model_dir/1/ “，会在下面生成一个pb文件，以及一个variables文件夹。其中“1”文件夹是表示版本的文件夹，应该是一个整数。人为设定这个“版本文件夹”的原因是，在模型部署的时候需要将模型位置精确到saved_model_dir，tf.Serving会在saved_model_dir下搜索版本号最大的路径下的模型进行服务。模型保存的方法是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只有sess中有变量的值，所以保存模型的操作只能在sess内</span><br><span class=\"line\">version = &quot;1/&quot;</span><br><span class=\"line\">saved_model_dir = &quot;./saved_model/test-model-dir/&quot;</span><br><span class=\"line\">builder = tf.saved_model.builder.SavedModelBuilder(saved_model_dir + version)</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建 signature</span><br><span class=\"line\">signature = tf.saved_model.signature_def_utils.build_signature_def(</span><br><span class=\"line\">        # 获取输入输出的信息（shape,dtype等），在部署服务后请求带来的数据会喂到inputs中，服务吐的结果会以outputs的形式返回</span><br><span class=\"line\">        inputs=&#123;&quot;input&quot;: tf.saved_model.utils.build_tensor_info(X)&#125;,          # 获取输入tensor的信息，这个字典可以有多个key-value对</span><br><span class=\"line\">        outputs=&#123;&quot;output&quot;: tf.saved_model.utils.build_tensor_info(pred)&#125;,     # 获取输出tensor的信息，这个字典可以有多个key-value对</span><br><span class=\"line\">        method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME    # 就是&#x27;tensorflow/serving/predict&#x27;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"># 保存到 saved_model</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    builder.add_meta_graph_and_variables(sess, </span><br><span class=\"line\">        tags=[tf.saved_model.tag_constants.SERVING],         # 如果用来部署，就这样写。否则可以写其他，如[&quot;test-model&quot;]</span><br><span class=\"line\">        signature_def_map=&#123;&quot;serving_default&quot;: signature&#125;,    # 如果用来部署，字典的key必须是&quot;serving_default&quot;。否则可以写其他</span><br><span class=\"line\">    )</span><br><span class=\"line\">    builder.save()</span><br></pre></td></tr></table></figure>\n<p>因为涉及到部署，比较复杂，这里不得不说明一下。</p>\n<p>在保存之前需要构建一个signature，用来构造signature的build_signature_def函数有三个参数：inputs、outputs、method_name。其中inputs和outputs分别用来获取输入输出向量的信息，在部署服务后来的数据会喂到inputs中，服务吐的结果会以outputs的形式返回；而method_name如果用来部署模型的话需要设置为”tensorflow/serving/predict”, “tensorflow/serving/classify”, “tensorflow/serving/regress” 中的一个。如果不是用来服务，就可以写一个其他的。</p>\n<p>在保存的时候，除了刚刚构建的signature，还需要提供一个tags 参数，如果用来部署的话需要填[tf.saved_model.tag_constants.SERVING]，否则可以填其他。另外如果用来部署模型的话，signature_def_map的key必须是”serving_default”。</p>\n<h2 id=\"2-加载\"><a href=\"#2-加载\" class=\"headerlink\" title=\"2. 加载\"></a>2. 加载</h2><p>下面说如何加载，checkpoint和pb两种模式的加载方法也不一样。下面分别说</p>\n<h3 id=\"2-1-checkpoint加载（略烦）\"><a href=\"#2-1-checkpoint加载（略烦）\" class=\"headerlink\" title=\"2.1 checkpoint加载（略烦）\"></a>2.1 checkpoint加载（略烦）</h3><p>checkpoint模式的网络结构和变量是分来保存的，加载的时候也需要分别加载。而网络结构部分你有两种选择：1. 加载.meta文件中的结构， 2. 手动重新写一遍原样结构。</p>\n<p>我们先说后一个，如果你不光有模型文件，还有源码，可以把源码构建模型那部分复制过来，然后只加载变量就好，这是手动重新搭建网络结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">size = 10</span><br><span class=\"line\"># 构建input</span><br><span class=\"line\">X = tf.placeholder(name=&quot;input&quot;, shape=[None, size], dtype=tf.float32)</span><br><span class=\"line\">y = tf.placeholder(name=&quot;label&quot;, shape=[None, 1], dtype=tf.float32)</span><br><span class=\"line\"># 网络结构</span><br><span class=\"line\">beta = tf.get_variable(name=&quot;beta&quot;, shape=[size, 1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">bias = tf.get_variable(name=&quot;bias&quot;, shape=[1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">pred = tf.sigmoid(tf.matmul(X, beta) + bias, name=&quot;output&quot;)</span><br></pre></td></tr></table></figure>\n<p>然后加载变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch_size=8的batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"># 用加载出来的参数，跑一下pred</span><br><span class=\"line\">saver = tf.train.Saver()</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    saver.restore(sess, tf.train.latest_checkpoint(&#x27;./model_ckpt/&#x27;))    # 加载模型中的变量</span><br><span class=\"line\">    # sess.run(tf.global_variables_initializer())    # 重新初始化一下参数</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>所以手动构建网络结构后，只需要saver.restore一下，就可以加载模型中的参数。</p>\n<p>另外，如果将上面的sess.run(tf.global_variables_initializer())注释掉，那每次运行的结果都一样，可见此时模型中的变量确实是加载进来的变量。如果取消注释这一句，每次跑出来的结果都不同，因为加载进来的变量又被初始化函数覆盖了，所以每次都不一样。这也说明了：<strong>通过checkpoint这种模式加载进来的变量，依然是变量，而且是trainable=True的</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(tf.trainable_variables())</span><br></pre></td></tr></table></figure>\n<p>结果为：[<tf.Variable 'beta:0' shape=(10, 1) dtype=float32_ref>, <tf.Variable 'bias:0' shape=(1,) dtype=float32_ref>]</p>\n<p>那如果我懒，活着没有源码，无法手动构建网络呢？就需要从.meta文件里导入网络结构了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不手动构建，从文件中加载网络结构</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">size = 10</span><br><span class=\"line\"># 加载网络</span><br><span class=\"line\">saver=tf.train.import_meta_graph(&#x27;./model_ckpt/test-model-0.meta&#x27;)</span><br></pre></td></tr></table></figure>\n<p>什么？这就完了？网络结构在哪呢？先别急，这种方法就是这样，网络结构已经加载进来了，那怎么用呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"># 下面我们来跑一下 pred</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    saver.restore(sess, tf.train.latest_checkpoint(&#x27;./model_ckpt/&#x27;))  # 加载模型变量</span><br><span class=\"line\">    graph = tf.get_default_graph()</span><br><span class=\"line\">    X = graph.get_tensor_by_name(&quot;input:0&quot;)        # 根据tensor名字获取tensor变量</span><br><span class=\"line\">    pred = graph.get_tensor_by_name(&quot;output:0&quot;)    # 根据tensor名字获取tensor变量</span><br><span class=\"line\">    # sess.run(tf.global_variables_initializer())  # 是否重新初始化变量</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>其实前面把网络结构加载进来之后，如果需要对某tensor进行操作的话（run、feed、concat等等）需要通过tensor的name获取成变量。同样通过sess.run(tf.global_variables_initializer())可以看出，加载进来的变量，还是变量。</p>\n<p>总结一下：手动构建网络结构的话，缺点是麻烦！优点是你想用什么变量直接用就行；而通过.meta文件来加载网络结构，优点是省事，缺点是如果想用某个变量，必须通过name获取变量。</p>\n<h3 id=\"2-2-pb模式加载\"><a href=\"#2-2-pb模式加载\" class=\"headerlink\" title=\"2.2 pb模式加载\"></a>2.2 pb模式加载</h3><p>相比之下，pb模式的加载旧没那么复杂，因为他的网络结构和数据是存在一起的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接从pb获取tensor</span><br><span class=\"line\">pb_dir = &quot;./model_pb/&quot;</span><br><span class=\"line\">with tf.gfile.FastGFile(pb_dir + &quot;test-model.pb&quot;, &quot;rb&quot;) as f:</span><br><span class=\"line\">    graph_def = tf.GraphDef()</span><br><span class=\"line\">    graph_def.ParseFromString(f.read())    # 从pb文件中导入信息</span><br><span class=\"line\">    # 从网络中通过tensor的name获取为变量</span><br><span class=\"line\">    X, pred = tf.import_graph_def(graph_def, return_elements=[&quot;input:0&quot;, &quot;output:0&quot;])</span><br></pre></td></tr></table></figure>\n<p>现在我们就已经有了X和pred，下面来跑一个pred吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"># 跑一下 pred</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    # sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>就这么简单！从pb中获取进来的“变量”就可以直接用。为什么我要给变量两个字打上引号呢？因为在pb模型里保存的其实是常量了，取消注释sess.run(tf.global_variables_initializer())后，多次运行的结果还是一样的。此时的“beta:0”和”bias:0”已经不再是variable，而是constant。<strong>这带来一个好处：读取模型中的tensor可以在Session外进行。相比之下checkpoint只能在Session内读取模型，对Fine-tune来说就比较麻烦。</strong></p>\n<h3 id=\"2-3-saved-model模式加载\"><a href=\"#2-3-saved-model模式加载\" class=\"headerlink\" title=\"2.3 saved_model模式加载\"></a>2.3 saved_model模式加载</h3><p>前两种加载方法想要获取tensor，要么需要手动搭建网络，要么需要知道tensor的name，如果用模型和训模型的不是同一个人，那在没有源码的情况下，就不方便获取每个tensor的name。好在saved_model可以通过前面提到的signature_def_map的方法获取tensor。先看一下直接通过tensor的name获取变量的加载方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">size = 10</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"></span><br><span class=\"line\">saved_model_dir = &quot;./saved_model/1/&quot;</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    # tf.saved_model.tag_constants.SERVING == &quot;serve&quot;，这里load时的tags需要和保存时的tags一致</span><br><span class=\"line\">    meta_graph_def = tf.saved_model.loader.load(sess, tags=[&quot;serve&quot;], export_dir=saved_model_dir)</span><br><span class=\"line\">    graph = tf.get_default_graph()</span><br><span class=\"line\">    X = graph.get_tensor_by_name(&quot;input:0&quot;)</span><br><span class=\"line\">    pred = graph.get_tensor_by_name(&quot;output:0&quot;)</span><br><span class=\"line\">    # sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>这里和checkpoint的加载过程很相似，先一个load过程，然后get_tensor_by_name。这需要我们事先知道tensor的name。如果有了signature的信息就不一样了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">size = 10</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"></span><br><span class=\"line\">saved_model_dir = &quot;./saved_model/1/&quot;</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    # tf.saved_model.tag_constants.SERVING == &quot;serve&quot;，这里load时的tags需要和保存时的tags一致</span><br><span class=\"line\">    meta_graph_def = tf.saved_model.loader.load(sess, tags=[&quot;serve&quot;], export_dir=saved_model_dir)</span><br><span class=\"line\">    signature = meta_graph_def.signature_def</span><br><span class=\"line\">    # print(signature)    # signature 内包含了保存模型时，signature_def_map 的信息</span><br><span class=\"line\">    X = signature[&quot;serving_default&quot;].inputs[&quot;input&quot;].name</span><br><span class=\"line\">    pred = signature[&quot;serving_default&quot;].outputs[&quot;output&quot;].name</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>这时即使我们没有源码，也可以通过print(signature)获知关于tensor的信息，如上就展示了没有源码时，通过signature获取tensor的name，并获取tensor的过程。这里输出的signature长这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># signature长什么样</span><br><span class=\"line\">print(signature)</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">INFO:tensorflow:Restoring parameters from ./saved_model/1/variables/variables</span><br><span class=\"line\">&#123;&#x27;serving_default&#x27;: inputs &#123;</span><br><span class=\"line\">  key: &quot;input&quot;</span><br><span class=\"line\">  value &#123;</span><br><span class=\"line\">    name: &quot;input:0&quot;</span><br><span class=\"line\">    dtype: DT_FLOAT</span><br><span class=\"line\">    tensor_shape &#123;</span><br><span class=\"line\">      dim &#123;</span><br><span class=\"line\">        size: -1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dim &#123;</span><br><span class=\"line\">        size: 10</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outputs &#123;</span><br><span class=\"line\">  key: &quot;output&quot;</span><br><span class=\"line\">  value &#123;</span><br><span class=\"line\">    name: &quot;output:0&quot;</span><br><span class=\"line\">    dtype: DT_FLOAT</span><br><span class=\"line\">    tensor_shape &#123;</span><br><span class=\"line\">      dim &#123;</span><br><span class=\"line\">        size: -1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dim &#123;</span><br><span class=\"line\">        size: 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">method_name: &quot;tensorflow/serving/predict&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-Fine-tune\"><a href=\"#3-Fine-tune\" class=\"headerlink\" title=\"3. Fine-tune\"></a>3. Fine-tune</h2><p>最后不管保存还是加载模型，多数情况都是为了能够进行迁移学习。其实大部分无非就是将模型加载进来之后，使用某一个节点的值，作为我们后续模型的输入呗。比如我要用前面的模型结果作为特征通过一元罗辑回归去预测z，这样新的网络结构就是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\"></span><br><span class=\"line\"># 加载模型部分，直接从pb获取X和pred</span><br><span class=\"line\">pb_dir = &quot;./model_pb/&quot;</span><br><span class=\"line\">with tf.gfile.FastGFile(pb_dir + &quot;test-model.pb&quot;, &quot;rb&quot;) as f:</span><br><span class=\"line\">    graph_def = tf.GraphDef()</span><br><span class=\"line\">    graph_def.ParseFromString(f.read())</span><br><span class=\"line\">    X, pred = tf.import_graph_def(graph_def, return_elements=[&quot;input:0&quot;, &quot;output:0&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\"># 下面是 Fine-tune 部分</span><br><span class=\"line\"># 新的 label</span><br><span class=\"line\">z = tf.placeholder(name=&quot;new_label&quot;, shape=[None, 1], dtype=tf.float32)</span><br><span class=\"line\"># 新的参数</span><br><span class=\"line\">new_beta = tf.get_variable(name=&quot;new_beta&quot;, shape=[1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">new_bias = tf.get_variable(name=&quot;new_bias&quot;, shape=[1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\"># 一元罗辑回归，通过pred去预测z</span><br><span class=\"line\">new_pred = tf.sigmoid(new_beta * pred + new_beta)    # 这种变量不写name的习惯是不好的哦</span><br><span class=\"line\"></span><br><span class=\"line\"># 下面是构建模型的损失函数以及train_op</span><br><span class=\"line\"># log_loss</span><br><span class=\"line\">new_loss = tf.reduce_mean(tf.losses.log_loss(predictions=new_pred, labels=z))</span><br><span class=\"line\"># train_op</span><br><span class=\"line\">train_op = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8).minimize(new_loss)</span><br></pre></td></tr></table></figure>\n<p>就是这样，把保存好的模型看作一个黑盒，喂进去X吐出来pred，然后我们直接用pred就好了。</p>\n<p>但是这里存在一个问题，就是只能通过name获取节点。比如这里的new_pred就没有name，那我想要基于这个新模型再次进行Fine-tune的时候，就不能获取这个new_pred，就无法进行Fine-tune。所以大家还是要养成一个好习惯，多给变量起名字，尤其是placeholder！要是连placeholder都没名字，别人就没法用你的模型啦。如果保存的是saved_model，建议一定要设置signature。</p>\n<p>下面来实验一下这个Fine-tune的模型吧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_z = np.array([[1],[1],[0],[0],[1],[1],[0],[0]]).astype(np.float32)</span><br><span class=\"line\"># 跑一下 new_pred 之后train一个step，在看看 new_pred 有没有改变</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(new_pred, feed_dict=&#123;X:feed_X&#125;))</span><br><span class=\"line\">    sess.run(train_op,  feed_dict=&#123;X:feed_X, z:feed_z&#125;)</span><br><span class=\"line\">    print(sess.run(new_pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>这里补充一下：<strong>通过pb模式导入进来的参数其实是constants，所以在Fine-tune的时候不会变化，而通过checkpoint模式导入进来的参数是variables，在后续Fine-tune的时候是会发生变化的</strong>。具体让不让他trainable就看你的实际需要了。</p>\n<h2 id=\"4-其他补充\"><a href=\"#4-其他补充\" class=\"headerlink\" title=\"4. 其他补充\"></a>4. 其他补充</h2><p>在2.2中，加载pb模型的时候，并不需要把所有的tensor都获取到，只要“一头一尾”即可。因为头（”input:0”）是需要进行feed操作的，而尾（”output:0”）是需要输出，或者在迁移学习中要进行其他操作。至于中间哪些其他不需要进行操作的tensor，可以不获取。</p>\n<p>因为只有pb模式在加载的时候，可以在Session外进行加载，方便Fine-tune。所以个人建议，如果要进行迁移学习，先将模型转化为pb模式。</p>\n<p>其他的想起来在写</p>\n","site":{"data":{}},"excerpt":"<p>tf模型保存和加载</p>","more":"<p><a href=\"https://zhuanlan.zhihu.com/p/128546377\">https://zhuanlan.zhihu.com/p/128546377</a></p>\n<p>[TOC]</p>\n<h1 id=\"Tensorflow笔记：模型保存、加载和Fine-tune\"><a href=\"#Tensorflow笔记：模型保存、加载和Fine-tune\" class=\"headerlink\" title=\"Tensorflow笔记：模型保存、加载和Fine-tune\"></a>Tensorflow笔记：模型保存、加载和Fine-tune</h1><p><a href=\"https://www.zhihu.com/people/chong-yu-4-73\"><img src=\"pics/tensroflow各种模型保存和加载/v2-da8a1fcd82fbe5f7206ac58cee088681_xs.jpg\" alt=\"锟斤拷\"></a></p>\n<p><a href=\"https://www.zhihu.com/people/chong-yu-4-73\">锟斤拷</a></p>\n<p>50 人赞同了该文章</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>尝试过迁移学习的同学们都知道，Tensorflow的模型保存加载有不同格式，使用方法也不一样，新手会觉得乱七八糟，所以本文做一个梳理。从模型的保存到加载，再到使用，力求理清这个流程。</p>\n<h2 id=\"1-保存\"><a href=\"#1-保存\" class=\"headerlink\" title=\"1. 保存\"></a>1. 保存</h2><p>Tensorflow的保存分为三种：1. checkpoint模式；2. pb模式；3. saved_model模式。</p>\n<h3 id=\"1-1-先假设有这么个模型\"><a href=\"#1-1-先假设有这么个模型\" class=\"headerlink\" title=\"1.1 先假设有这么个模型\"></a>1.1 先假设有这么个模型</h3><p>首先假定我们已经有了这样一个简单的线性回归网络结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">size = 10</span><br><span class=\"line\"># 构建input</span><br><span class=\"line\">X = tf.placeholder(name=&quot;input&quot;, shape=[None, size], dtype=tf.float32)</span><br><span class=\"line\">y = tf.placeholder(name=&quot;label&quot;, shape=[None, 1], dtype=tf.float32)</span><br><span class=\"line\"># 网络结构</span><br><span class=\"line\">beta = tf.get_variable(name=&quot;beta&quot;, shape=[size, 1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">bias = tf.get_variable(name=&quot;bias&quot;, shape=[1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">pred = tf.add(tf.matmul(X, beta), bias, name=&quot;output&quot;)</span><br><span class=\"line\"># 构建损失</span><br><span class=\"line\">loss = tf.losses.mean_squared_error(y, pred)</span><br><span class=\"line\"># 构建train_op</span><br><span class=\"line\">train_op = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8).minimize(loss)</span><br></pre></td></tr></table></figure>\n<p>我们来简单初始化，然后跑一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch_size=8的batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"># 先看一下pred，在训练一个step，在看一下pred是否有变化</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br><span class=\"line\">    sess.run(train_op, feed_dict=&#123;X:feed_X, y:feed_y&#125;)</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>可以看到初始化的输出y值，以及训练1个step之后的模型输出发生了变化。</p>\n<h3 id=\"1-2-checkpoint模式\"><a href=\"#1-2-checkpoint模式\" class=\"headerlink\" title=\"1.2 checkpoint模式\"></a>1.2 checkpoint模式</h3><p>checkpoint模式将网络和变量数据分开保存，保存好的模型长这个样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--checkpoint_dir</span><br><span class=\"line\">|    |--checkpoint</span><br><span class=\"line\">|    |--test-model-550.meta</span><br><span class=\"line\">|    |--test-model-550.data-00000-of-00001</span><br><span class=\"line\">|    |--test-model-550.index</span><br></pre></td></tr></table></figure>\n<p>checkpoint_dir就是保存时候指定的路径，路径下会生成4个文件。其中.meta文件（其实就是pb格式文件）用来保存模型结构，.data和.index文件用来保存模型中的各种变量，而checkpoint文件里面记录了最新的checkpoint文件以及其它checkpoint文件列表，在inference时可以通过修改这个文件，指定使用哪个model。那么要如何保存呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只有sess中有变量的值，所以保存模型的操作只能在sess内</span><br><span class=\"line\">checkpoint_dir = &quot;./model_ckpt/&quot;</span><br><span class=\"line\">saver = tf.train.Saver(max_to_keep=1)    # saver 不需要在sess内</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    saver.save(sess, checkpoint_dir + &quot;test-model&quot;,global_step=i, write_meta_graph=True)</span><br></pre></td></tr></table></figure>\n<p>实际就两步。执行之后就可以在checkpoint_dir下面看到前面提到的4个文件了。（这里的max_to_keep是指本次训练在checkpoint_dir这个路径下最多保存多少个模型文件，新模型会覆盖旧模型以节省空间）。</p>\n<h3 id=\"1-3-pb模式\"><a href=\"#1-3-pb模式\" class=\"headerlink\" title=\"1.3 pb模式\"></a>1.3 pb模式</h3><p>pb模式保存的模型，只有在目标路径pb_dir = “./model_pb/“下孤孤单单的一个文件”test-model.pb”，这也是它相比于其他几种方式的优势，简单明了。假设还是前面的网络结构，如果想保存成pb模式该怎么做呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只有sess中有变量的值，所以保存模型的操作只能在sess内</span><br><span class=\"line\">pb_dir = &quot;./model_pb/&quot;</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    graph_def = tf.get_default_graph().as_graph_def()</span><br><span class=\"line\">    # 这里是指定要冻结并保存到pb模型中的变量</span><br><span class=\"line\">    var_list = [&quot;input&quot;, &quot;label&quot;, &quot;beta&quot;, &quot;bias&quot;, &quot;output&quot;]   # 如果有name_scope，要写全名，如:&quot;name_scope/beta&quot; </span><br><span class=\"line\">    constant_graph = tf.graph_util.convert_variables_to_constants(sess, graph_def, var_list)</span><br><span class=\"line\">    with tf.gfile.FastGFile(pb_dir + &quot;test-model.pb&quot;, mode=&#x27;wb&#x27;) as f:</span><br><span class=\"line\">        f.write(constant_graph.SerializeToString())</span><br></pre></td></tr></table></figure>\n<p>其实pb模式本质上就是把变量先冻结成常数，然后保存到图结构中。这样就可以直接加载图结构和“参数”了。</p>\n<h3 id=\"1-4-saved-model模式\"><a href=\"#1-4-saved-model模式\" class=\"headerlink\" title=\"1.4 saved_model模式\"></a>1.4 saved_model模式</h3><p>虽然saved_model也支持模型加载，并进行迁移学习。可是不得不说<strong>saved_model几乎就是为了部署而生的</strong>，因为依靠tf.Serving部署模型时要求模型格式必须是saved_model格式。除此以外saved_model还有另外一个优点就是可以跨语言读取，所以本文也介绍一下这种模式的保存于加载。<strong>本文样例的保存在参数设置上会考虑到方便部署</strong>。保存好的saved_model结构长这个样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--saved_model_dir</span><br><span class=\"line\">|    |--1</span><br><span class=\"line\">|        |--saved_model.pb</span><br><span class=\"line\">|        |--variables</span><br><span class=\"line\">|            |--variables.data-00000-of-00001</span><br><span class=\"line\">|            |--variables.index</span><br></pre></td></tr></table></figure>\n<p>保存时需要将保存路径精确到”saved_model_dir/1/ “，会在下面生成一个pb文件，以及一个variables文件夹。其中“1”文件夹是表示版本的文件夹，应该是一个整数。人为设定这个“版本文件夹”的原因是，在模型部署的时候需要将模型位置精确到saved_model_dir，tf.Serving会在saved_model_dir下搜索版本号最大的路径下的模型进行服务。模型保存的方法是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 只有sess中有变量的值，所以保存模型的操作只能在sess内</span><br><span class=\"line\">version = &quot;1/&quot;</span><br><span class=\"line\">saved_model_dir = &quot;./saved_model/test-model-dir/&quot;</span><br><span class=\"line\">builder = tf.saved_model.builder.SavedModelBuilder(saved_model_dir + version)</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建 signature</span><br><span class=\"line\">signature = tf.saved_model.signature_def_utils.build_signature_def(</span><br><span class=\"line\">        # 获取输入输出的信息（shape,dtype等），在部署服务后请求带来的数据会喂到inputs中，服务吐的结果会以outputs的形式返回</span><br><span class=\"line\">        inputs=&#123;&quot;input&quot;: tf.saved_model.utils.build_tensor_info(X)&#125;,          # 获取输入tensor的信息，这个字典可以有多个key-value对</span><br><span class=\"line\">        outputs=&#123;&quot;output&quot;: tf.saved_model.utils.build_tensor_info(pred)&#125;,     # 获取输出tensor的信息，这个字典可以有多个key-value对</span><br><span class=\"line\">        method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME    # 就是&#x27;tensorflow/serving/predict&#x27;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"># 保存到 saved_model</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    builder.add_meta_graph_and_variables(sess, </span><br><span class=\"line\">        tags=[tf.saved_model.tag_constants.SERVING],         # 如果用来部署，就这样写。否则可以写其他，如[&quot;test-model&quot;]</span><br><span class=\"line\">        signature_def_map=&#123;&quot;serving_default&quot;: signature&#125;,    # 如果用来部署，字典的key必须是&quot;serving_default&quot;。否则可以写其他</span><br><span class=\"line\">    )</span><br><span class=\"line\">    builder.save()</span><br></pre></td></tr></table></figure>\n<p>因为涉及到部署，比较复杂，这里不得不说明一下。</p>\n<p>在保存之前需要构建一个signature，用来构造signature的build_signature_def函数有三个参数：inputs、outputs、method_name。其中inputs和outputs分别用来获取输入输出向量的信息，在部署服务后来的数据会喂到inputs中，服务吐的结果会以outputs的形式返回；而method_name如果用来部署模型的话需要设置为”tensorflow/serving/predict”, “tensorflow/serving/classify”, “tensorflow/serving/regress” 中的一个。如果不是用来服务，就可以写一个其他的。</p>\n<p>在保存的时候，除了刚刚构建的signature，还需要提供一个tags 参数，如果用来部署的话需要填[tf.saved_model.tag_constants.SERVING]，否则可以填其他。另外如果用来部署模型的话，signature_def_map的key必须是”serving_default”。</p>\n<h2 id=\"2-加载\"><a href=\"#2-加载\" class=\"headerlink\" title=\"2. 加载\"></a>2. 加载</h2><p>下面说如何加载，checkpoint和pb两种模式的加载方法也不一样。下面分别说</p>\n<h3 id=\"2-1-checkpoint加载（略烦）\"><a href=\"#2-1-checkpoint加载（略烦）\" class=\"headerlink\" title=\"2.1 checkpoint加载（略烦）\"></a>2.1 checkpoint加载（略烦）</h3><p>checkpoint模式的网络结构和变量是分来保存的，加载的时候也需要分别加载。而网络结构部分你有两种选择：1. 加载.meta文件中的结构， 2. 手动重新写一遍原样结构。</p>\n<p>我们先说后一个，如果你不光有模型文件，还有源码，可以把源码构建模型那部分复制过来，然后只加载变量就好，这是手动重新搭建网络结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">size = 10</span><br><span class=\"line\"># 构建input</span><br><span class=\"line\">X = tf.placeholder(name=&quot;input&quot;, shape=[None, size], dtype=tf.float32)</span><br><span class=\"line\">y = tf.placeholder(name=&quot;label&quot;, shape=[None, 1], dtype=tf.float32)</span><br><span class=\"line\"># 网络结构</span><br><span class=\"line\">beta = tf.get_variable(name=&quot;beta&quot;, shape=[size, 1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">bias = tf.get_variable(name=&quot;bias&quot;, shape=[1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">pred = tf.sigmoid(tf.matmul(X, beta) + bias, name=&quot;output&quot;)</span><br></pre></td></tr></table></figure>\n<p>然后加载变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch_size=8的batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"># 用加载出来的参数，跑一下pred</span><br><span class=\"line\">saver = tf.train.Saver()</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    saver.restore(sess, tf.train.latest_checkpoint(&#x27;./model_ckpt/&#x27;))    # 加载模型中的变量</span><br><span class=\"line\">    # sess.run(tf.global_variables_initializer())    # 重新初始化一下参数</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>所以手动构建网络结构后，只需要saver.restore一下，就可以加载模型中的参数。</p>\n<p>另外，如果将上面的sess.run(tf.global_variables_initializer())注释掉，那每次运行的结果都一样，可见此时模型中的变量确实是加载进来的变量。如果取消注释这一句，每次跑出来的结果都不同，因为加载进来的变量又被初始化函数覆盖了，所以每次都不一样。这也说明了：<strong>通过checkpoint这种模式加载进来的变量，依然是变量，而且是trainable=True的</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(tf.trainable_variables())</span><br></pre></td></tr></table></figure>\n<p>结果为：[<tf.Variable 'beta:0' shape=(10, 1) dtype=float32_ref>, <tf.Variable 'bias:0' shape=(1,) dtype=float32_ref>]</p>\n<p>那如果我懒，活着没有源码，无法手动构建网络呢？就需要从.meta文件里导入网络结构了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不手动构建，从文件中加载网络结构</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">size = 10</span><br><span class=\"line\"># 加载网络</span><br><span class=\"line\">saver=tf.train.import_meta_graph(&#x27;./model_ckpt/test-model-0.meta&#x27;)</span><br></pre></td></tr></table></figure>\n<p>什么？这就完了？网络结构在哪呢？先别急，这种方法就是这样，网络结构已经加载进来了，那怎么用呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"># 下面我们来跑一下 pred</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    saver.restore(sess, tf.train.latest_checkpoint(&#x27;./model_ckpt/&#x27;))  # 加载模型变量</span><br><span class=\"line\">    graph = tf.get_default_graph()</span><br><span class=\"line\">    X = graph.get_tensor_by_name(&quot;input:0&quot;)        # 根据tensor名字获取tensor变量</span><br><span class=\"line\">    pred = graph.get_tensor_by_name(&quot;output:0&quot;)    # 根据tensor名字获取tensor变量</span><br><span class=\"line\">    # sess.run(tf.global_variables_initializer())  # 是否重新初始化变量</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>其实前面把网络结构加载进来之后，如果需要对某tensor进行操作的话（run、feed、concat等等）需要通过tensor的name获取成变量。同样通过sess.run(tf.global_variables_initializer())可以看出，加载进来的变量，还是变量。</p>\n<p>总结一下：手动构建网络结构的话，缺点是麻烦！优点是你想用什么变量直接用就行；而通过.meta文件来加载网络结构，优点是省事，缺点是如果想用某个变量，必须通过name获取变量。</p>\n<h3 id=\"2-2-pb模式加载\"><a href=\"#2-2-pb模式加载\" class=\"headerlink\" title=\"2.2 pb模式加载\"></a>2.2 pb模式加载</h3><p>相比之下，pb模式的加载旧没那么复杂，因为他的网络结构和数据是存在一起的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接从pb获取tensor</span><br><span class=\"line\">pb_dir = &quot;./model_pb/&quot;</span><br><span class=\"line\">with tf.gfile.FastGFile(pb_dir + &quot;test-model.pb&quot;, &quot;rb&quot;) as f:</span><br><span class=\"line\">    graph_def = tf.GraphDef()</span><br><span class=\"line\">    graph_def.ParseFromString(f.read())    # 从pb文件中导入信息</span><br><span class=\"line\">    # 从网络中通过tensor的name获取为变量</span><br><span class=\"line\">    X, pred = tf.import_graph_def(graph_def, return_elements=[&quot;input:0&quot;, &quot;output:0&quot;])</span><br></pre></td></tr></table></figure>\n<p>现在我们就已经有了X和pred，下面来跑一个pred吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"># 跑一下 pred</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    # sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>就这么简单！从pb中获取进来的“变量”就可以直接用。为什么我要给变量两个字打上引号呢？因为在pb模型里保存的其实是常量了，取消注释sess.run(tf.global_variables_initializer())后，多次运行的结果还是一样的。此时的“beta:0”和”bias:0”已经不再是variable，而是constant。<strong>这带来一个好处：读取模型中的tensor可以在Session外进行。相比之下checkpoint只能在Session内读取模型，对Fine-tune来说就比较麻烦。</strong></p>\n<h3 id=\"2-3-saved-model模式加载\"><a href=\"#2-3-saved-model模式加载\" class=\"headerlink\" title=\"2.3 saved_model模式加载\"></a>2.3 saved_model模式加载</h3><p>前两种加载方法想要获取tensor，要么需要手动搭建网络，要么需要知道tensor的name，如果用模型和训模型的不是同一个人，那在没有源码的情况下，就不方便获取每个tensor的name。好在saved_model可以通过前面提到的signature_def_map的方法获取tensor。先看一下直接通过tensor的name获取变量的加载方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">size = 10</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"></span><br><span class=\"line\">saved_model_dir = &quot;./saved_model/1/&quot;</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    # tf.saved_model.tag_constants.SERVING == &quot;serve&quot;，这里load时的tags需要和保存时的tags一致</span><br><span class=\"line\">    meta_graph_def = tf.saved_model.loader.load(sess, tags=[&quot;serve&quot;], export_dir=saved_model_dir)</span><br><span class=\"line\">    graph = tf.get_default_graph()</span><br><span class=\"line\">    X = graph.get_tensor_by_name(&quot;input:0&quot;)</span><br><span class=\"line\">    pred = graph.get_tensor_by_name(&quot;output:0&quot;)</span><br><span class=\"line\">    # sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>这里和checkpoint的加载过程很相似，先一个load过程，然后get_tensor_by_name。这需要我们事先知道tensor的name。如果有了signature的信息就不一样了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">size = 10</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_y = np.ones((8,1)).astype(np.float32)</span><br><span class=\"line\"></span><br><span class=\"line\">saved_model_dir = &quot;./saved_model/1/&quot;</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    # tf.saved_model.tag_constants.SERVING == &quot;serve&quot;，这里load时的tags需要和保存时的tags一致</span><br><span class=\"line\">    meta_graph_def = tf.saved_model.loader.load(sess, tags=[&quot;serve&quot;], export_dir=saved_model_dir)</span><br><span class=\"line\">    signature = meta_graph_def.signature_def</span><br><span class=\"line\">    # print(signature)    # signature 内包含了保存模型时，signature_def_map 的信息</span><br><span class=\"line\">    X = signature[&quot;serving_default&quot;].inputs[&quot;input&quot;].name</span><br><span class=\"line\">    pred = signature[&quot;serving_default&quot;].outputs[&quot;output&quot;].name</span><br><span class=\"line\">    print(sess.run(pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>这时即使我们没有源码，也可以通过print(signature)获知关于tensor的信息，如上就展示了没有源码时，通过signature获取tensor的name，并获取tensor的过程。这里输出的signature长这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># signature长什么样</span><br><span class=\"line\">print(signature)</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">INFO:tensorflow:Restoring parameters from ./saved_model/1/variables/variables</span><br><span class=\"line\">&#123;&#x27;serving_default&#x27;: inputs &#123;</span><br><span class=\"line\">  key: &quot;input&quot;</span><br><span class=\"line\">  value &#123;</span><br><span class=\"line\">    name: &quot;input:0&quot;</span><br><span class=\"line\">    dtype: DT_FLOAT</span><br><span class=\"line\">    tensor_shape &#123;</span><br><span class=\"line\">      dim &#123;</span><br><span class=\"line\">        size: -1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dim &#123;</span><br><span class=\"line\">        size: 10</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outputs &#123;</span><br><span class=\"line\">  key: &quot;output&quot;</span><br><span class=\"line\">  value &#123;</span><br><span class=\"line\">    name: &quot;output:0&quot;</span><br><span class=\"line\">    dtype: DT_FLOAT</span><br><span class=\"line\">    tensor_shape &#123;</span><br><span class=\"line\">      dim &#123;</span><br><span class=\"line\">        size: -1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dim &#123;</span><br><span class=\"line\">        size: 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">method_name: &quot;tensorflow/serving/predict&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-Fine-tune\"><a href=\"#3-Fine-tune\" class=\"headerlink\" title=\"3. Fine-tune\"></a>3. Fine-tune</h2><p>最后不管保存还是加载模型，多数情况都是为了能够进行迁移学习。其实大部分无非就是将模型加载进来之后，使用某一个节点的值，作为我们后续模型的输入呗。比如我要用前面的模型结果作为特征通过一元罗辑回归去预测z，这样新的网络结构就是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\"></span><br><span class=\"line\"># 加载模型部分，直接从pb获取X和pred</span><br><span class=\"line\">pb_dir = &quot;./model_pb/&quot;</span><br><span class=\"line\">with tf.gfile.FastGFile(pb_dir + &quot;test-model.pb&quot;, &quot;rb&quot;) as f:</span><br><span class=\"line\">    graph_def = tf.GraphDef()</span><br><span class=\"line\">    graph_def.ParseFromString(f.read())</span><br><span class=\"line\">    X, pred = tf.import_graph_def(graph_def, return_elements=[&quot;input:0&quot;, &quot;output:0&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\"># 下面是 Fine-tune 部分</span><br><span class=\"line\"># 新的 label</span><br><span class=\"line\">z = tf.placeholder(name=&quot;new_label&quot;, shape=[None, 1], dtype=tf.float32)</span><br><span class=\"line\"># 新的参数</span><br><span class=\"line\">new_beta = tf.get_variable(name=&quot;new_beta&quot;, shape=[1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\">new_bias = tf.get_variable(name=&quot;new_bias&quot;, shape=[1], initializer=tf.glorot_normal_initializer())</span><br><span class=\"line\"># 一元罗辑回归，通过pred去预测z</span><br><span class=\"line\">new_pred = tf.sigmoid(new_beta * pred + new_beta)    # 这种变量不写name的习惯是不好的哦</span><br><span class=\"line\"></span><br><span class=\"line\"># 下面是构建模型的损失函数以及train_op</span><br><span class=\"line\"># log_loss</span><br><span class=\"line\">new_loss = tf.reduce_mean(tf.losses.log_loss(predictions=new_pred, labels=z))</span><br><span class=\"line\"># train_op</span><br><span class=\"line\">train_op = tf.train.AdamOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8).minimize(new_loss)</span><br></pre></td></tr></table></figure>\n<p>就是这样，把保存好的模型看作一个黑盒，喂进去X吐出来pred，然后我们直接用pred就好了。</p>\n<p>但是这里存在一个问题，就是只能通过name获取节点。比如这里的new_pred就没有name，那我想要基于这个新模型再次进行Fine-tune的时候，就不能获取这个new_pred，就无法进行Fine-tune。所以大家还是要养成一个好习惯，多给变量起名字，尤其是placeholder！要是连placeholder都没名字，别人就没法用你的模型啦。如果保存的是saved_model，建议一定要设置signature。</p>\n<p>下面来实验一下这个Fine-tune的模型吧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 假设这是一个batch</span><br><span class=\"line\">feed_X = np.ones((8,size)).astype(np.float32)</span><br><span class=\"line\">feed_z = np.array([[1],[1],[0],[0],[1],[1],[0],[0]]).astype(np.float32)</span><br><span class=\"line\"># 跑一下 new_pred 之后train一个step，在看看 new_pred 有没有改变</span><br><span class=\"line\">with tf.Session() as sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(new_pred, feed_dict=&#123;X:feed_X&#125;))</span><br><span class=\"line\">    sess.run(train_op,  feed_dict=&#123;X:feed_X, z:feed_z&#125;)</span><br><span class=\"line\">    print(sess.run(new_pred, feed_dict=&#123;X:feed_X&#125;))</span><br></pre></td></tr></table></figure>\n<p>这里补充一下：<strong>通过pb模式导入进来的参数其实是constants，所以在Fine-tune的时候不会变化，而通过checkpoint模式导入进来的参数是variables，在后续Fine-tune的时候是会发生变化的</strong>。具体让不让他trainable就看你的实际需要了。</p>\n<h2 id=\"4-其他补充\"><a href=\"#4-其他补充\" class=\"headerlink\" title=\"4. 其他补充\"></a>4. 其他补充</h2><p>在2.2中，加载pb模型的时候，并不需要把所有的tensor都获取到，只要“一头一尾”即可。因为头（”input:0”）是需要进行feed操作的，而尾（”output:0”）是需要输出，或者在迁移学习中要进行其他操作。至于中间哪些其他不需要进行操作的tensor，可以不获取。</p>\n<p>因为只有pb模式在加载的时候，可以在Session外进行加载，方便Fine-tune。所以个人建议，如果要进行迁移学习，先将模型转化为pb模式。</p>\n<p>其他的想起来在写</p>"},{"title":"typora主题","date":"2022-03-01T03:32:38.000Z","_content":"\ntypora主题自动编号配置\n\n<!-- more -->\n\n\n[TOC]\n\n<https://pastebin.com/NYugSbXk>\n\n# typora主题\n\n```css\n:root {\n    --side-bar-bg-color: #fff;\n    --control-text-color: #777;\n}\n\n/* cyrillic-ext */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhGq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n\n/* cyrillic */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhPq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n\n/* greek-ext */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhHq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+1F00-1FFF;\n}\n\n/* greek */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhIq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0370-03FF;\n}\n\n/* vietnamese */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhEq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhFq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n/* latin */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhLq3-cXbKD.woff2') format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* cyrillic-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmhduz8A.woff2') format('woff2');\n    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n\n/* cyrillic */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwkxduz8A.woff2') format('woff2');\n    unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n\n/* greek-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmxduz8A.woff2') format('woff2');\n    unicode-range: U+1F00-1FFF;\n}\n\n/* greek */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlBduz8A.woff2') format('woff2');\n    unicode-range: U+0370-03FF;\n}\n\n/* vietnamese */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmBduz8A.woff2') format('woff2');\n    unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmRduz8A.woff2') format('woff2');\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n/* latin */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlxdu.woff2') format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* cyrillic-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNa7lqDY.woff2') format('woff2');\n    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n\n/* cyrillic */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qPK7lqDY.woff2') format('woff2');\n    unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n\n/* greek-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNK7lqDY.woff2') format('woff2');\n    unicode-range: U+1F00-1FFF;\n}\n\n/* greek */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qO67lqDY.woff2') format('woff2');\n    unicode-range: U+0370-03FF;\n}\n\n/* vietnamese */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qN67lqDY.woff2') format('woff2');\n    unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNq7lqDY.woff2') format('woff2');\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n/* latin */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qOK7l.woff2') format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* cyrillic-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmhduz8A.woff2') format('woff2');\n    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n\n/* cyrillic */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwkxduz8A.woff2') format('woff2');\n    unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n\n/* greek-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmxduz8A.woff2') format('woff2');\n    unicode-range: U+1F00-1FFF;\n}\n\n/* greek */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlBduz8A.woff2') format('woff2');\n    unicode-range: U+0370-03FF;\n}\n\n/* vietnamese */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmBduz8A.woff2') format('woff2');\n    unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmRduz8A.woff2') format('woff2');\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n/* latin */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlxdu.woff2') format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\nhtml {\n    font-size: 16px;\n}\n\nbody {\n    font-family: Source Sans Pro, Helvetica Neue, Arial, sans-serif !important;\n    color: #34495e;\n    -webkit-font-smoothing: antialiased;\n    line-height: 1.6rem;\n    letter-spacing: 0;\n    margin: 0;\n    overflow-x: hidden;\n}\n\n#write {\n    max-width: 860px;\n    margin: 0 auto;\n    padding: 20px 30px 100px;\n}\n\n#write p {\n    line-height: 1.6rem;\n    word-spacing: .05rem;\n}\n\n#write ol li {\n    text-indent: 0.5rem;\n}\n\n#write > ul:first-child,\n#write > ol:first-child {\n    margin-top: 30px;\n}\n\nbody > *:first-child {\n    margin-top: 0 !important;\n}\n\nbody > *:last-child {\n    margin-bottom: 0 !important;\n}\n\na {\n    color: #42b983;\n    font-weight: 600;\n    padding: 0 2px;\n    text-decoration: none;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    position: relative;\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n    font-weight: bold;\n    line-height: 1.4;\n    cursor: text;\n}\n\nh1:hover a.anchor,\nh2:hover a.anchor,\nh3:hover a.anchor,\nh4:hover a.anchor,\nh5:hover a.anchor,\nh6:hover a.anchor {\n    text-decoration: none;\n}\n\nh1 tt,\nh1 code {\n    font-size: inherit !important;\n}\n\nh2 tt,\nh2 code {\n    font-size: inherit !important;\n}\n\nh3 tt,\nh3 code {\n    font-size: inherit !important;\n}\n\nh4 tt,\nh4 code {\n    font-size: inherit !important;\n}\n\nh5 tt,\nh5 code {\n    font-size: inherit !important;\n}\n\nh6 tt,\nh6 code {\n    font-size: inherit !important;\n}\n\nh2 a,\nh3 a {\n    color: #34495e;\n}\n\nh1 {\n   /*padding-bottom:0rem;\n   color:#165f60;*/\n    font-size: 1.5rem;\n    line-height:1.5rem;\n    border-bottom: 1px solid #ddd;\n}\n\nh2 {\n    font-size: 1.4rem;\n    line-height: 1.4rem;\n    /*margin: 35px 0 15px;\n    padding-bottom: 0.5em;\n    border-bottom: 1px solid #ddd;*/\n}\n\nh3 {\n    font-size: 1.2rem;\n    line-height: 1.2rem;\n    /*margin: 20px 0 7px;*/\n}\n\nh4 {\n    font-size: 1rem;\n}\n\nh5 {\n    font-size: 1rem;\n}\n\nh6 {\n    font-size: 1rem;\n    color: #777;\n}\n\np,\nblockquote,\nul,\nol,\ndl,\ntable {\n    margin: 0.8em 0;\n}\n\nli > ol,\nli > ul {\n    margin: 0 0;\n}\n\nhr {\n    height: 2px;\n    padding: 0;\n    margin: 16px 0;\n    background-color: #e7e7e7;\n    border: 0 none;\n    overflow: hidden;\n    box-sizing: content-box;\n}\n\nbody > h2:first-child {\n    margin-top: 0;\n    padding-top: 0;\n}\n\nbody > h1:first-child {\n    margin-top: 0;\n    padding-top: 0;\n}\n\nbody > h1:first-child + h2 {\n    margin-top: 0;\n    padding-top: 0;\n}\n\nbody > h3:first-child,\nbody > h4:first-child,\nbody > h5:first-child,\nbody > h6:first-child {\n    margin-top: 0;\n    padding-top: 0;\n}\n\na:first-child h1,\na:first-child h2,\na:first-child h3,\na:first-child h4,\na:first-child h5,\na:first-child h6 {\n    margin-top: 0;\n    padding-top: 0;\n}\n\nh1 p,\nh2 p,\nh3 p,\nh4 p,\nh5 p,\nh6 p {\n    margin-top: 0;\n}\n\nli p.first {\n    display: inline-block;\n}\n\nul,\nol {\n    padding-left: 30px;\n}\n\nul:first-child,\nol:first-child {\n    margin-top: 0;\n}\n\nul:last-child,\nol:last-child {\n    margin-bottom: 0;\n}\n\nblockquote {\n    border-left: 4px solid #42b983;\n    padding: 10px 15px;\n    color: #777;\n    background-color: rgba(66, 185, 131, .1);\n}\n\ntable {\n    padding: 0;\n    word-break: initial;\n}\n\ntable tr {\n    border-top: 1px solid #dfe2e5;\n    margin: 0;\n    padding: 0;\n}\n\ntable tr:nth-child(2n),\nthead {\n    background-color: #fafafa;\n}\n\ntable tr th {\n    font-weight: bold;\n    border: 1px solid #dfe2e5;\n    border-bottom: 0;\n    text-align: left;\n    margin: 0;\n    padding: 6px 13px;\n}\n\ntable tr td {\n    border: 1px solid #dfe2e5;\n    text-align: left;\n    margin: 0;\n    padding: 6px 13px;\n}\n\ntable tr th:first-child,\ntable tr td:first-child {\n    margin-top: 0;\n}\n\ntable tr th:last-child,\ntable tr td:last-child {\n    margin-bottom: 0;\n}\n\n#write strong {\n    padding: 0 1px;\n}\n\n#write em {\n    padding: 0 5px 0 2px;\n}\n\n#write table thead th {\n    background-color: #f2f2f2;\n}\n\n#write .CodeMirror-gutters {\n    border-right: none;\n}\n\n#write .md-fences {\n    border: 1px solid #F4F4F4;\n    -webkit-font-smoothing: initial;\n    margin: 0.8rem 0 !important;\n    padding: 0.3rem 0 !important;\n    line-height: 1.43rem;\n    background-color: #F8F8F8 !important;\n    border-radius: 2px;\n    font-family: Roboto Mono, Source Sans Pro, Monaco, courier, monospace !important;\n    font-size: 0.85rem;\n    word-wrap: normal;\n}\n\n#write .CodeMirror-wrap .CodeMirror-code pre {\n    padding-left: 12px;\n}\n\n#write code, tt {\n    margin: 0 2px;\n    padding: 2px 4px;\n    border-radius: 2px;\n    font-family: Roboto Mono, Source Sans Pro, Monaco, courier, monospace !important;\n    font-size: 0.92rem;\n    color: #e96900;\n    background-color: #f8f8f8;\n}\n\n#write .md-footnote {\n    background-color: #f8f8f8;\n    color: #e96900;\n}\n\n/* heighlight. */\n#write mark {\n    background-color: #EBFFEB;\n    border-radius: 2px;\n    padding: 2px 4px;\n    margin: 0 2px;\n    color: #222;\n    font-weight: 500;\n}\n\n#write del {\n    padding: 1px 2px;\n}\n\n.cm-s-inner .cm-link,\n.cm-s-inner.cm-link {\n    color: #22a2c9;\n}\n\n.cm-s-inner .cm-string {\n    color: #22a2c9;\n}\n\n.md-task-list-item > input {\n    margin-left: -1.3em;\n}\n\n@media print {\n    html {\n        font-size: 13px;\n    }\n\n    table,\n    pre {\n        page-break-inside: avoid;\n    }\n\n    pre {\n        word-wrap: break-word;\n    }\n}\n\n.md-fences {\n    background-color: #f8f8f8;\n}\n\n#write pre.md-meta-block {\n    padding: 1rem;\n    font-size: 85%;\n    line-height: 1.45;\n    background-color: #f7f7f7;\n    border: 0;\n    border-radius: 3px;\n    color: #777777;\n    margin-top: 0 !important;\n}\n\n.mathjax-block > .code-tooltip {\n    bottom: .375rem;\n}\n\n#write > h3.md-focus:before {\n    left: -1.5625rem;\n    top: .375rem;\n}\n\n#write > h4.md-focus:before {\n    left: -1.5625rem;\n    top: .285714286rem;\n}\n\n#write > h5.md-focus:before {\n    left: -1.5625rem;\n    top: .285714286rem;\n}\n\n#write > h6.md-focus:before {\n    left: -1.5625rem;\n    top: .285714286rem;\n}\n\n.md-image > .md-meta {\n    border-radius: 3px;\n    font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n    padding: 2px 0 0 4px;\n    font-size: 0.9em;\n    color: inherit;\n}\n\n.md-tag {\n    color: inherit;\n}\n\n.md-toc {\n    margin-top: 20px;\n    padding-bottom: 20px;\n}\n\n.sidebar-tabs {\n    border-bottom: none;\n}\n\n#typora-quick-open {\n    border: 1px solid #ddd;\n    background-color: #f8f8f8;\n}\n\n#typora-quick-open-item {\n    background-color: #FAFAFA;\n    border-color: #FEFEFE #e5e5e5 #e5e5e5 #eee;\n    border-style: solid;\n    border-width: 1px;\n}\n\n#md-notification:before {\n    top: 10px;\n}\n\n/**************************************\n * Header Counters in TOC\n **************************************/\n\n/* No link underlines in TOC */\n.md-toc-inner {\n    text-decoration: none;\n}\n\n.md-toc-content {\n    counter-reset: h1toc\n}\n\n.md-toc-h1 {\n\n    counter-reset: h2toc\n}\n\n.md-toc-h2 {\nmargin-left: 2rem;\n    counter-reset: h3toc\n}\n\n.md-toc-h3 {\nmargin-left: 3rem;\n    counter-reset: h4toc\n}\n\n.md-toc-h4 {\n    margin-left: 4rem;\n\n    counter-reset: h5toc\n}\n\n.md-toc-h5 {\n    margin-left: 5rem;\n\n    counter-reset: h6toc\n}\n\n.md-toc-h6 {\n    margin-left: 6rem;\n\n}\n\n.md-toc-h1:before {\n    color: black;\n    counter-increment: h1toc;\n    content: counter(h1toc) \".\"\n}\n\n.md-toc-h1 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h2:before {\n    color: black;\n    counter-increment: h2toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\"\n}\n\n.md-toc-h2 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h3:before {\n    color: black;\n    counter-increment: h3toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\" counter(h3toc) \".\"\n}\n\n.md-toc-h3 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h4:before {\n    color: black;\n    counter-increment: h4toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\" counter(h3toc) \".\" counter(h4toc) \".\"\n}\n\n.md-toc-h4 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h5:before {\n    color: black;\n    counter-increment: h5toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\" counter(h3toc) \".\" counter(h4toc) \".\" counter(h5toc) \".\"\n}\n\n.md-toc-h5 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h6:before {\n    color: black;\n    counter-increment: h6toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\" counter(h3toc) \".\" counter(h4toc) \".\" counter(h5toc) \".\" counter(h6toc) \".\"\n}\n\n.md-toc-h6 .md-toc-inner {\n    margin-left: 0;\n}\n\n\n\n\n\n\n\n/** focus mode */\n\n.on-focus-mode blockquote {\n    border-left-color: rgba(85, 85, 85, 0.12);\n}\n\nheader,\n.context-menu,\n.megamenu-content,\nfooter {\n    font-family: \"Segoe UI\", \"Arial\", sans-serif;\n}\n\n.file-node-content:hover .file-node-icon,\n.file-node-content:hover .file-node-open-state {\n    visibility: visible;\n}\n\n.mac-seamless-mode #typora-sidebar {\n    background-color: var(--side-bar-bg-color);\n}\n\n.md-lang {\n    color: #b4654d;\n}\n\n.html-for-mac .context-menu {\n    --item-hover-bg-color: #E6F0FE;\n}\n\n/** initialize css counter */\n#write {\ncounter-reset: h1\n}\nh1 {\ncounter-reset: h2\n}\nh2 {\ncounter-reset: h3\n}\nh3 {\ncounter-reset: h4\n}\nh4 {\ncounter-reset: h5\n}\nh5 {\ncounter-reset: h6\n}\n/** put counter result into headings */\n#write h1:before {\ncounter-increment: h1;\ncontent: counter(h1) \". \"\n}\n#write h2:before {\ncounter-increment: h2;\ncontent: counter(h1) \".\" counter(h2) \". \"\n}\n#write h3:before,\nh3.md-focus.md-heading:before /** override the default style for focused headings */ {\ncounter-increment: h3;\ncontent: counter(h1) \".\" counter(h2) \".\" counter(h3) \". \"\n}\n#write h4:before,\nh4.md-focus.md-heading:before {\ncounter-increment: h4;\ncontent: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"\n}\n#write h5:before,\nh5.md-focus.md-heading:before {\ncounter-increment: h5;\ncontent: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"}\n#write h6:before,\nh6.md-focus.md-heading:before {\ncounter-increment: h6;\ncontent: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \".\n\"}\n/** override the default style for focused headings */\n#write>h3.md-focus:before,\n#write>h4.md-focus:before,\n#write>h5.md-focus:before,\n#write>h6.md-focus:before,\nh3.md-focus:before,\nh4.md-focus:before,\nh5.md-focus:before,\nh6.md-focus:before {\ncolor: inherit;\nborder: inherit;\nborder-radius: inherit;\nposition: inherit;\nleft:initial;\nfloat: none;\ntop:initial;\nfont-size: inherit;\npadding-left: inherit;\npadding-right: inherit;\nvertical-align: inherit;\nfont-weight: inherit;\nline-height: inherit;\n}\n/***                           TOC                       */\n\n```\n\n# 内容自动编号\n\n```css\n/** initialize css counter */\n#write {\n    counter-reset: h1\n}\n\nh1 {\n    counter-reset: h2\n}\n\nh2 {\n    counter-reset: h3\n}\n\nh3 {\n    counter-reset: h4\n}\n\nh4 {\n    counter-reset: h5\n}\n\nh5 {\n    counter-reset: h6\n}\n\n/** put counter result into headings */\n#write h1:before {\n    counter-increment: h1;\n    content: counter(h1) \". \"\n}\n\n#write h2:before {\n    counter-increment: h2;\n    content: counter(h1) \".\" counter(h2) \". \"\n}\n\n#write h3:before,\nh3.md-focus.md-heading:before /** override the default style for focused headings */ {\n    counter-increment: h3;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \". \"\n}\n\n#write h4:before,\nh4.md-focus.md-heading:before {\n    counter-increment: h4;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"\n}\n\n#write h5:before,\nh5.md-focus.md-heading:before {\n    counter-increment: h5;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"\n}\n\n#write h6:before,\nh6.md-focus.md-heading:before {\n    counter-increment: h6;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"\n}\n\n/** override the default style for focused headings */\n#write>h3.md-focus:before,\n#write>h4.md-focus:before,\n#write>h5.md-focus:before,\n#write>h6.md-focus:before,\nh3.md-focus:before,\nh4.md-focus:before,\nh5.md-focus:before,\nh6.md-focus:before {\n    color: inherit;\n    border: inherit;\n    border-radius: inherit;\n    position: inherit;\n    left:initial;\n    float: none;\n    top:initial;\n    font-size: inherit;\n    padding-left: inherit;\n    padding-right: inherit;\n    vertical-align: inherit;\n    font-weight: inherit;\n    line-height: inherit;\n}\n```\n\n# 目录自动编号\n\n```css\n/**************************************\n * Header Counters in TOC\n **************************************/\n \n/* No link underlines in TOC */\n.md-toc-inner {\n    text-decoration: none;\n}\n \n.md-toc-content {\n    counter-reset: h1toc\n}\n \n.md-toc-h1 {\n    margin-left: 0;\n    font-size: 1.5rem;\n    counter-reset: h2toc\n}\n \n.md-toc-h2 {\n    font-size: 1.1rem;\n    margin-left: 2rem;\n    counter-reset: h3toc\n}\n \n.md-toc-h3 {\n    margin-left: 3rem;\n    font-size: .9rem;\n    counter-reset: h4toc\n}\n \n.md-toc-h4 {\n    margin-left: 4rem;\n    font-size: .85rem;\n    counter-reset: h5toc\n}\n \n.md-toc-h5 {\n    margin-left: 5rem;\n    font-size: .8rem;\n    counter-reset: h6toc\n}\n \n.md-toc-h6 {\n    margin-left: 6rem;\n    font-size: .75rem;\n}\n \n.md-toc-h1:before {\n    color: black;\n    counter-increment: h1toc;\n    content: counter(h1toc) \". \"\n}\n \n.md-toc-h1 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h2:before {\n    color: black;\n    counter-increment: h2toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \"\n}\n \n.md-toc-h2 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h3:before {\n    color: black;\n    counter-increment: h3toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \"\n}\n \n.md-toc-h3 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h4:before {\n    color: black;\n    counter-increment: h4toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \" counter(h4toc) \". \"\n}\n \n.md-toc-h4 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h5:before {\n    color: black;\n    counter-increment: h5toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \" counter(h4toc) \". \" counter(h5toc) \". \"\n}\n \n.md-toc-h5 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h6:before {\n    color: black;\n    counter-increment: h6toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \" counter(h4toc) \". \" counter(h5toc) \". \" counter(h6toc) \". \"\n}\n \n.md-toc-h6 .md-toc-inner {\n    margin-left: 0;\n}\n \n/**************************************\n * Header Counters in Content\n **************************************/\n \n/** initialize css counter */\n#write {\n    counter-reset: h1\n}\n \nh1 {\n    counter-reset: h2\n}\n \nh2 {\n    counter-reset: h3\n}\n \nh3 {\n    counter-reset: h4\n}\n \nh4 {\n    counter-reset: h5\n}\n \nh5 {\n    counter-reset: h6\n}\n \n/** put counter result into headings */\n#write h1:before {\n    counter-increment: h1;\n    content: counter(h1) \". \"\n}\n \n#write h2:before {\n    counter-increment: h2;\n    content: counter(h1) \".\" counter(h2) \". \"\n}\n \n#write h3:before, h3.md-focus.md-heading:before { /*override the default style for focused headings */\n    counter-increment: h3;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \". \"\n}\n \n#write h4:before, h4.md-focus.md-heading:before {\n    counter-increment: h4;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"\n}\n \n#write h5:before, h5.md-focus.md-heading:before {\n    counter-increment: h5;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"\n}\n \n#write h6:before, h6.md-focus.md-heading:before {\n    counter-increment: h6;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"\n}\n \n/** override the default style for focused headings */\n#write>h3.md-focus:before, #write>h4.md-focus:before, #write>h5.md-focus:before, #write>h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before {\n    color: inherit;\n    border: inherit;\n    border-radius: inherit;\n    position: inherit;\n    left: initial;\n    float: none;\n    top: initial;\n    font-size: inherit;\n    padding-left: inherit;\n    padding-right: inherit;\n    vertical-align: inherit;\n    font-weight: inherit;\n    line-height: inherit;\n}\n```\n\nter-increment: h4;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"\n}\n\n#write h5:before, h5.md-focus.md-heading:before {\n    counter-increment: h5;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"\n}\n\n#write h6:before, h6.md-focus.md-heading:before {\n    counter-increment: h6;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"\n}\n\n/** override the default style for focused headings */\n#write>h3.md-focus:before, #write>h4.md-focus:before, #write>h5.md-focus:before, #write>h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before {\n    color: inherit;\n    border: inherit;\n    border-radius: inherit;\n    position: inherit;\n    left: initial;\n    float: none;\n    top: initial;\n    font-size: inherit;\n    padding-left: inherit;\n    padding-right: inherit;\n    vertical-align: inherit;\n    font-weight: inherit;\n    line-height: inherit;\n}\n```\n\n","source":"_posts/0_代码相关/typora主题.md","raw":"---\ntitle: typora主题\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\ntypora主题自动编号配置\n\n<!-- more -->\n\n\n[TOC]\n\n<https://pastebin.com/NYugSbXk>\n\n# typora主题\n\n```css\n:root {\n    --side-bar-bg-color: #fff;\n    --control-text-color: #777;\n}\n\n/* cyrillic-ext */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhGq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n\n/* cyrillic */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhPq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n\n/* greek-ext */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhHq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+1F00-1FFF;\n}\n\n/* greek */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhIq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0370-03FF;\n}\n\n/* vietnamese */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhEq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhFq3-cXbKDO1w.woff2') format('woff2');\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n/* latin */\n@font-face {\n    font-family: 'Roboto Mono';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto Mono'), local('RobotoMono-Regular'), url('vue/L0x5DF4xlVMF-BfR8bXMIjhLq3-cXbKD.woff2') format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* cyrillic-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmhduz8A.woff2') format('woff2');\n    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n\n/* cyrillic */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwkxduz8A.woff2') format('woff2');\n    unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n\n/* greek-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmxduz8A.woff2') format('woff2');\n    unicode-range: U+1F00-1FFF;\n}\n\n/* greek */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlBduz8A.woff2') format('woff2');\n    unicode-range: U+0370-03FF;\n}\n\n/* vietnamese */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmBduz8A.woff2') format('woff2');\n    unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmRduz8A.woff2') format('woff2');\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n/* latin */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Source Sans Pro Light'), local('SourceSansPro-Light'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlxdu.woff2') format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* cyrillic-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNa7lqDY.woff2') format('woff2');\n    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n\n/* cyrillic */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qPK7lqDY.woff2') format('woff2');\n    unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n\n/* greek-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNK7lqDY.woff2') format('woff2');\n    unicode-range: U+1F00-1FFF;\n}\n\n/* greek */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qO67lqDY.woff2') format('woff2');\n    unicode-range: U+0370-03FF;\n}\n\n/* vietnamese */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qN67lqDY.woff2') format('woff2');\n    unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNq7lqDY.woff2') format('woff2');\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n/* latin */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'), url('vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qOK7l.woff2') format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* cyrillic-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmhduz8A.woff2') format('woff2');\n    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n\n/* cyrillic */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwkxduz8A.woff2') format('woff2');\n    unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n\n/* greek-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmxduz8A.woff2') format('woff2');\n    unicode-range: U+1F00-1FFF;\n}\n\n/* greek */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlBduz8A.woff2') format('woff2');\n    unicode-range: U+0370-03FF;\n}\n\n/* vietnamese */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmBduz8A.woff2') format('woff2');\n    unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmRduz8A.woff2') format('woff2');\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n/* latin */\n@font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 600;\n    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlxdu.woff2') format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\nhtml {\n    font-size: 16px;\n}\n\nbody {\n    font-family: Source Sans Pro, Helvetica Neue, Arial, sans-serif !important;\n    color: #34495e;\n    -webkit-font-smoothing: antialiased;\n    line-height: 1.6rem;\n    letter-spacing: 0;\n    margin: 0;\n    overflow-x: hidden;\n}\n\n#write {\n    max-width: 860px;\n    margin: 0 auto;\n    padding: 20px 30px 100px;\n}\n\n#write p {\n    line-height: 1.6rem;\n    word-spacing: .05rem;\n}\n\n#write ol li {\n    text-indent: 0.5rem;\n}\n\n#write > ul:first-child,\n#write > ol:first-child {\n    margin-top: 30px;\n}\n\nbody > *:first-child {\n    margin-top: 0 !important;\n}\n\nbody > *:last-child {\n    margin-bottom: 0 !important;\n}\n\na {\n    color: #42b983;\n    font-weight: 600;\n    padding: 0 2px;\n    text-decoration: none;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    position: relative;\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n    font-weight: bold;\n    line-height: 1.4;\n    cursor: text;\n}\n\nh1:hover a.anchor,\nh2:hover a.anchor,\nh3:hover a.anchor,\nh4:hover a.anchor,\nh5:hover a.anchor,\nh6:hover a.anchor {\n    text-decoration: none;\n}\n\nh1 tt,\nh1 code {\n    font-size: inherit !important;\n}\n\nh2 tt,\nh2 code {\n    font-size: inherit !important;\n}\n\nh3 tt,\nh3 code {\n    font-size: inherit !important;\n}\n\nh4 tt,\nh4 code {\n    font-size: inherit !important;\n}\n\nh5 tt,\nh5 code {\n    font-size: inherit !important;\n}\n\nh6 tt,\nh6 code {\n    font-size: inherit !important;\n}\n\nh2 a,\nh3 a {\n    color: #34495e;\n}\n\nh1 {\n   /*padding-bottom:0rem;\n   color:#165f60;*/\n    font-size: 1.5rem;\n    line-height:1.5rem;\n    border-bottom: 1px solid #ddd;\n}\n\nh2 {\n    font-size: 1.4rem;\n    line-height: 1.4rem;\n    /*margin: 35px 0 15px;\n    padding-bottom: 0.5em;\n    border-bottom: 1px solid #ddd;*/\n}\n\nh3 {\n    font-size: 1.2rem;\n    line-height: 1.2rem;\n    /*margin: 20px 0 7px;*/\n}\n\nh4 {\n    font-size: 1rem;\n}\n\nh5 {\n    font-size: 1rem;\n}\n\nh6 {\n    font-size: 1rem;\n    color: #777;\n}\n\np,\nblockquote,\nul,\nol,\ndl,\ntable {\n    margin: 0.8em 0;\n}\n\nli > ol,\nli > ul {\n    margin: 0 0;\n}\n\nhr {\n    height: 2px;\n    padding: 0;\n    margin: 16px 0;\n    background-color: #e7e7e7;\n    border: 0 none;\n    overflow: hidden;\n    box-sizing: content-box;\n}\n\nbody > h2:first-child {\n    margin-top: 0;\n    padding-top: 0;\n}\n\nbody > h1:first-child {\n    margin-top: 0;\n    padding-top: 0;\n}\n\nbody > h1:first-child + h2 {\n    margin-top: 0;\n    padding-top: 0;\n}\n\nbody > h3:first-child,\nbody > h4:first-child,\nbody > h5:first-child,\nbody > h6:first-child {\n    margin-top: 0;\n    padding-top: 0;\n}\n\na:first-child h1,\na:first-child h2,\na:first-child h3,\na:first-child h4,\na:first-child h5,\na:first-child h6 {\n    margin-top: 0;\n    padding-top: 0;\n}\n\nh1 p,\nh2 p,\nh3 p,\nh4 p,\nh5 p,\nh6 p {\n    margin-top: 0;\n}\n\nli p.first {\n    display: inline-block;\n}\n\nul,\nol {\n    padding-left: 30px;\n}\n\nul:first-child,\nol:first-child {\n    margin-top: 0;\n}\n\nul:last-child,\nol:last-child {\n    margin-bottom: 0;\n}\n\nblockquote {\n    border-left: 4px solid #42b983;\n    padding: 10px 15px;\n    color: #777;\n    background-color: rgba(66, 185, 131, .1);\n}\n\ntable {\n    padding: 0;\n    word-break: initial;\n}\n\ntable tr {\n    border-top: 1px solid #dfe2e5;\n    margin: 0;\n    padding: 0;\n}\n\ntable tr:nth-child(2n),\nthead {\n    background-color: #fafafa;\n}\n\ntable tr th {\n    font-weight: bold;\n    border: 1px solid #dfe2e5;\n    border-bottom: 0;\n    text-align: left;\n    margin: 0;\n    padding: 6px 13px;\n}\n\ntable tr td {\n    border: 1px solid #dfe2e5;\n    text-align: left;\n    margin: 0;\n    padding: 6px 13px;\n}\n\ntable tr th:first-child,\ntable tr td:first-child {\n    margin-top: 0;\n}\n\ntable tr th:last-child,\ntable tr td:last-child {\n    margin-bottom: 0;\n}\n\n#write strong {\n    padding: 0 1px;\n}\n\n#write em {\n    padding: 0 5px 0 2px;\n}\n\n#write table thead th {\n    background-color: #f2f2f2;\n}\n\n#write .CodeMirror-gutters {\n    border-right: none;\n}\n\n#write .md-fences {\n    border: 1px solid #F4F4F4;\n    -webkit-font-smoothing: initial;\n    margin: 0.8rem 0 !important;\n    padding: 0.3rem 0 !important;\n    line-height: 1.43rem;\n    background-color: #F8F8F8 !important;\n    border-radius: 2px;\n    font-family: Roboto Mono, Source Sans Pro, Monaco, courier, monospace !important;\n    font-size: 0.85rem;\n    word-wrap: normal;\n}\n\n#write .CodeMirror-wrap .CodeMirror-code pre {\n    padding-left: 12px;\n}\n\n#write code, tt {\n    margin: 0 2px;\n    padding: 2px 4px;\n    border-radius: 2px;\n    font-family: Roboto Mono, Source Sans Pro, Monaco, courier, monospace !important;\n    font-size: 0.92rem;\n    color: #e96900;\n    background-color: #f8f8f8;\n}\n\n#write .md-footnote {\n    background-color: #f8f8f8;\n    color: #e96900;\n}\n\n/* heighlight. */\n#write mark {\n    background-color: #EBFFEB;\n    border-radius: 2px;\n    padding: 2px 4px;\n    margin: 0 2px;\n    color: #222;\n    font-weight: 500;\n}\n\n#write del {\n    padding: 1px 2px;\n}\n\n.cm-s-inner .cm-link,\n.cm-s-inner.cm-link {\n    color: #22a2c9;\n}\n\n.cm-s-inner .cm-string {\n    color: #22a2c9;\n}\n\n.md-task-list-item > input {\n    margin-left: -1.3em;\n}\n\n@media print {\n    html {\n        font-size: 13px;\n    }\n\n    table,\n    pre {\n        page-break-inside: avoid;\n    }\n\n    pre {\n        word-wrap: break-word;\n    }\n}\n\n.md-fences {\n    background-color: #f8f8f8;\n}\n\n#write pre.md-meta-block {\n    padding: 1rem;\n    font-size: 85%;\n    line-height: 1.45;\n    background-color: #f7f7f7;\n    border: 0;\n    border-radius: 3px;\n    color: #777777;\n    margin-top: 0 !important;\n}\n\n.mathjax-block > .code-tooltip {\n    bottom: .375rem;\n}\n\n#write > h3.md-focus:before {\n    left: -1.5625rem;\n    top: .375rem;\n}\n\n#write > h4.md-focus:before {\n    left: -1.5625rem;\n    top: .285714286rem;\n}\n\n#write > h5.md-focus:before {\n    left: -1.5625rem;\n    top: .285714286rem;\n}\n\n#write > h6.md-focus:before {\n    left: -1.5625rem;\n    top: .285714286rem;\n}\n\n.md-image > .md-meta {\n    border-radius: 3px;\n    font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n    padding: 2px 0 0 4px;\n    font-size: 0.9em;\n    color: inherit;\n}\n\n.md-tag {\n    color: inherit;\n}\n\n.md-toc {\n    margin-top: 20px;\n    padding-bottom: 20px;\n}\n\n.sidebar-tabs {\n    border-bottom: none;\n}\n\n#typora-quick-open {\n    border: 1px solid #ddd;\n    background-color: #f8f8f8;\n}\n\n#typora-quick-open-item {\n    background-color: #FAFAFA;\n    border-color: #FEFEFE #e5e5e5 #e5e5e5 #eee;\n    border-style: solid;\n    border-width: 1px;\n}\n\n#md-notification:before {\n    top: 10px;\n}\n\n/**************************************\n * Header Counters in TOC\n **************************************/\n\n/* No link underlines in TOC */\n.md-toc-inner {\n    text-decoration: none;\n}\n\n.md-toc-content {\n    counter-reset: h1toc\n}\n\n.md-toc-h1 {\n\n    counter-reset: h2toc\n}\n\n.md-toc-h2 {\nmargin-left: 2rem;\n    counter-reset: h3toc\n}\n\n.md-toc-h3 {\nmargin-left: 3rem;\n    counter-reset: h4toc\n}\n\n.md-toc-h4 {\n    margin-left: 4rem;\n\n    counter-reset: h5toc\n}\n\n.md-toc-h5 {\n    margin-left: 5rem;\n\n    counter-reset: h6toc\n}\n\n.md-toc-h6 {\n    margin-left: 6rem;\n\n}\n\n.md-toc-h1:before {\n    color: black;\n    counter-increment: h1toc;\n    content: counter(h1toc) \".\"\n}\n\n.md-toc-h1 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h2:before {\n    color: black;\n    counter-increment: h2toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\"\n}\n\n.md-toc-h2 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h3:before {\n    color: black;\n    counter-increment: h3toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\" counter(h3toc) \".\"\n}\n\n.md-toc-h3 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h4:before {\n    color: black;\n    counter-increment: h4toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\" counter(h3toc) \".\" counter(h4toc) \".\"\n}\n\n.md-toc-h4 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h5:before {\n    color: black;\n    counter-increment: h5toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\" counter(h3toc) \".\" counter(h4toc) \".\" counter(h5toc) \".\"\n}\n\n.md-toc-h5 .md-toc-inner {\n    margin-left: 0;\n}\n\n.md-toc-h6:before {\n    color: black;\n    counter-increment: h6toc;\n    content: counter(h1toc) \".\" counter(h2toc) \".\" counter(h3toc) \".\" counter(h4toc) \".\" counter(h5toc) \".\" counter(h6toc) \".\"\n}\n\n.md-toc-h6 .md-toc-inner {\n    margin-left: 0;\n}\n\n\n\n\n\n\n\n/** focus mode */\n\n.on-focus-mode blockquote {\n    border-left-color: rgba(85, 85, 85, 0.12);\n}\n\nheader,\n.context-menu,\n.megamenu-content,\nfooter {\n    font-family: \"Segoe UI\", \"Arial\", sans-serif;\n}\n\n.file-node-content:hover .file-node-icon,\n.file-node-content:hover .file-node-open-state {\n    visibility: visible;\n}\n\n.mac-seamless-mode #typora-sidebar {\n    background-color: var(--side-bar-bg-color);\n}\n\n.md-lang {\n    color: #b4654d;\n}\n\n.html-for-mac .context-menu {\n    --item-hover-bg-color: #E6F0FE;\n}\n\n/** initialize css counter */\n#write {\ncounter-reset: h1\n}\nh1 {\ncounter-reset: h2\n}\nh2 {\ncounter-reset: h3\n}\nh3 {\ncounter-reset: h4\n}\nh4 {\ncounter-reset: h5\n}\nh5 {\ncounter-reset: h6\n}\n/** put counter result into headings */\n#write h1:before {\ncounter-increment: h1;\ncontent: counter(h1) \". \"\n}\n#write h2:before {\ncounter-increment: h2;\ncontent: counter(h1) \".\" counter(h2) \". \"\n}\n#write h3:before,\nh3.md-focus.md-heading:before /** override the default style for focused headings */ {\ncounter-increment: h3;\ncontent: counter(h1) \".\" counter(h2) \".\" counter(h3) \". \"\n}\n#write h4:before,\nh4.md-focus.md-heading:before {\ncounter-increment: h4;\ncontent: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"\n}\n#write h5:before,\nh5.md-focus.md-heading:before {\ncounter-increment: h5;\ncontent: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"}\n#write h6:before,\nh6.md-focus.md-heading:before {\ncounter-increment: h6;\ncontent: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \".\n\"}\n/** override the default style for focused headings */\n#write>h3.md-focus:before,\n#write>h4.md-focus:before,\n#write>h5.md-focus:before,\n#write>h6.md-focus:before,\nh3.md-focus:before,\nh4.md-focus:before,\nh5.md-focus:before,\nh6.md-focus:before {\ncolor: inherit;\nborder: inherit;\nborder-radius: inherit;\nposition: inherit;\nleft:initial;\nfloat: none;\ntop:initial;\nfont-size: inherit;\npadding-left: inherit;\npadding-right: inherit;\nvertical-align: inherit;\nfont-weight: inherit;\nline-height: inherit;\n}\n/***                           TOC                       */\n\n```\n\n# 内容自动编号\n\n```css\n/** initialize css counter */\n#write {\n    counter-reset: h1\n}\n\nh1 {\n    counter-reset: h2\n}\n\nh2 {\n    counter-reset: h3\n}\n\nh3 {\n    counter-reset: h4\n}\n\nh4 {\n    counter-reset: h5\n}\n\nh5 {\n    counter-reset: h6\n}\n\n/** put counter result into headings */\n#write h1:before {\n    counter-increment: h1;\n    content: counter(h1) \". \"\n}\n\n#write h2:before {\n    counter-increment: h2;\n    content: counter(h1) \".\" counter(h2) \". \"\n}\n\n#write h3:before,\nh3.md-focus.md-heading:before /** override the default style for focused headings */ {\n    counter-increment: h3;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \". \"\n}\n\n#write h4:before,\nh4.md-focus.md-heading:before {\n    counter-increment: h4;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"\n}\n\n#write h5:before,\nh5.md-focus.md-heading:before {\n    counter-increment: h5;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"\n}\n\n#write h6:before,\nh6.md-focus.md-heading:before {\n    counter-increment: h6;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"\n}\n\n/** override the default style for focused headings */\n#write>h3.md-focus:before,\n#write>h4.md-focus:before,\n#write>h5.md-focus:before,\n#write>h6.md-focus:before,\nh3.md-focus:before,\nh4.md-focus:before,\nh5.md-focus:before,\nh6.md-focus:before {\n    color: inherit;\n    border: inherit;\n    border-radius: inherit;\n    position: inherit;\n    left:initial;\n    float: none;\n    top:initial;\n    font-size: inherit;\n    padding-left: inherit;\n    padding-right: inherit;\n    vertical-align: inherit;\n    font-weight: inherit;\n    line-height: inherit;\n}\n```\n\n# 目录自动编号\n\n```css\n/**************************************\n * Header Counters in TOC\n **************************************/\n \n/* No link underlines in TOC */\n.md-toc-inner {\n    text-decoration: none;\n}\n \n.md-toc-content {\n    counter-reset: h1toc\n}\n \n.md-toc-h1 {\n    margin-left: 0;\n    font-size: 1.5rem;\n    counter-reset: h2toc\n}\n \n.md-toc-h2 {\n    font-size: 1.1rem;\n    margin-left: 2rem;\n    counter-reset: h3toc\n}\n \n.md-toc-h3 {\n    margin-left: 3rem;\n    font-size: .9rem;\n    counter-reset: h4toc\n}\n \n.md-toc-h4 {\n    margin-left: 4rem;\n    font-size: .85rem;\n    counter-reset: h5toc\n}\n \n.md-toc-h5 {\n    margin-left: 5rem;\n    font-size: .8rem;\n    counter-reset: h6toc\n}\n \n.md-toc-h6 {\n    margin-left: 6rem;\n    font-size: .75rem;\n}\n \n.md-toc-h1:before {\n    color: black;\n    counter-increment: h1toc;\n    content: counter(h1toc) \". \"\n}\n \n.md-toc-h1 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h2:before {\n    color: black;\n    counter-increment: h2toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \"\n}\n \n.md-toc-h2 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h3:before {\n    color: black;\n    counter-increment: h3toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \"\n}\n \n.md-toc-h3 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h4:before {\n    color: black;\n    counter-increment: h4toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \" counter(h4toc) \". \"\n}\n \n.md-toc-h4 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h5:before {\n    color: black;\n    counter-increment: h5toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \" counter(h4toc) \". \" counter(h5toc) \". \"\n}\n \n.md-toc-h5 .md-toc-inner {\n    margin-left: 0;\n}\n \n.md-toc-h6:before {\n    color: black;\n    counter-increment: h6toc;\n    content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \" counter(h4toc) \". \" counter(h5toc) \". \" counter(h6toc) \". \"\n}\n \n.md-toc-h6 .md-toc-inner {\n    margin-left: 0;\n}\n \n/**************************************\n * Header Counters in Content\n **************************************/\n \n/** initialize css counter */\n#write {\n    counter-reset: h1\n}\n \nh1 {\n    counter-reset: h2\n}\n \nh2 {\n    counter-reset: h3\n}\n \nh3 {\n    counter-reset: h4\n}\n \nh4 {\n    counter-reset: h5\n}\n \nh5 {\n    counter-reset: h6\n}\n \n/** put counter result into headings */\n#write h1:before {\n    counter-increment: h1;\n    content: counter(h1) \". \"\n}\n \n#write h2:before {\n    counter-increment: h2;\n    content: counter(h1) \".\" counter(h2) \". \"\n}\n \n#write h3:before, h3.md-focus.md-heading:before { /*override the default style for focused headings */\n    counter-increment: h3;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \". \"\n}\n \n#write h4:before, h4.md-focus.md-heading:before {\n    counter-increment: h4;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"\n}\n \n#write h5:before, h5.md-focus.md-heading:before {\n    counter-increment: h5;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"\n}\n \n#write h6:before, h6.md-focus.md-heading:before {\n    counter-increment: h6;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"\n}\n \n/** override the default style for focused headings */\n#write>h3.md-focus:before, #write>h4.md-focus:before, #write>h5.md-focus:before, #write>h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before {\n    color: inherit;\n    border: inherit;\n    border-radius: inherit;\n    position: inherit;\n    left: initial;\n    float: none;\n    top: initial;\n    font-size: inherit;\n    padding-left: inherit;\n    padding-right: inherit;\n    vertical-align: inherit;\n    font-weight: inherit;\n    line-height: inherit;\n}\n```\n\nter-increment: h4;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"\n}\n\n#write h5:before, h5.md-focus.md-heading:before {\n    counter-increment: h5;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"\n}\n\n#write h6:before, h6.md-focus.md-heading:before {\n    counter-increment: h6;\n    content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"\n}\n\n/** override the default style for focused headings */\n#write>h3.md-focus:before, #write>h4.md-focus:before, #write>h5.md-focus:before, #write>h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before {\n    color: inherit;\n    border: inherit;\n    border-radius: inherit;\n    position: inherit;\n    left: initial;\n    float: none;\n    top: initial;\n    font-size: inherit;\n    padding-left: inherit;\n    padding-right: inherit;\n    vertical-align: inherit;\n    font-weight: inherit;\n    line-height: inherit;\n}\n```\n\n","slug":"0_代码相关/typora主题","published":1,"updated":"2022-03-01T03:54:45.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly53004h8s32h1vfg6d7","content":"<p>typora主题自动编号配置</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<p><a href=\"https://pastebin.com/NYugSbXk\">https://pastebin.com/NYugSbXk</a></p>\n<h1 id=\"typora主题\"><a href=\"#typora主题\" class=\"headerlink\" title=\"typora主题\"></a>typora主题</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">    --side-bar-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    --control-text-<span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhGq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0460</span>-<span class=\"number\">052</span>F, U+<span class=\"number\">1</span>C80-<span class=\"number\">1</span>C88, U+<span class=\"number\">20</span>B4, U+<span class=\"number\">2</span>DE0-<span class=\"number\">2</span>DFF, U+A640-A69F, U+FE2E-FE2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhPq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0400</span>-<span class=\"number\">045</span>F, U+<span class=\"number\">0490</span>-<span class=\"number\">0491</span>, U+<span class=\"number\">04</span>B0-<span class=\"number\">04</span>B1, U+<span class=\"number\">2116</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhHq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">1</span>F00-<span class=\"number\">1</span>FFF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhIq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0370</span>-<span class=\"number\">03</span>FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vietnamese */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhEq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0102</span>-<span class=\"number\">0103</span>, U+<span class=\"number\">0110</span>-<span class=\"number\">0111</span>, U+<span class=\"number\">1</span>EA0-<span class=\"number\">1</span>EF9, U+<span class=\"number\">20</span>AB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhFq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0100</span>-<span class=\"number\">024</span>F, U+<span class=\"number\">0259</span>, U+<span class=\"number\">1</span>E00-<span class=\"number\">1</span>EFF, U+<span class=\"number\">2020</span>, U+<span class=\"number\">20</span>A0-<span class=\"number\">20</span>AB, U+<span class=\"number\">20</span>AD-<span class=\"number\">20</span>CF, U+<span class=\"number\">2113</span>, U+<span class=\"number\">2</span>C60-<span class=\"number\">2</span>C7F, U+A720-A7FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhLq3-cXbKD.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0000</span>-<span class=\"number\">00</span>FF, U+<span class=\"number\">0131</span>, U+<span class=\"number\">0152</span>-<span class=\"number\">0153</span>, U+<span class=\"number\">02</span>BB-<span class=\"number\">02</span>BC, U+<span class=\"number\">02</span>C6, U+<span class=\"number\">02</span>DA, U+<span class=\"number\">02</span>DC, U+<span class=\"number\">2000</span>-<span class=\"number\">206</span>F, U+<span class=\"number\">2074</span>, U+<span class=\"number\">20</span>AC, U+<span class=\"number\">2122</span>, U+<span class=\"number\">2191</span>, U+<span class=\"number\">2193</span>, U+<span class=\"number\">2212</span>, U+<span class=\"number\">2215</span>, U+FEFF, U+FFFD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmhduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0460</span>-<span class=\"number\">052</span>F, U+<span class=\"number\">1</span>C80-<span class=\"number\">1</span>C88, U+<span class=\"number\">20</span>B4, U+<span class=\"number\">2</span>DE0-<span class=\"number\">2</span>DFF, U+A640-A69F, U+FE2E-FE2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwkxduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0400</span>-<span class=\"number\">045</span>F, U+<span class=\"number\">0490</span>-<span class=\"number\">0491</span>, U+<span class=\"number\">04</span>B0-<span class=\"number\">04</span>B1, U+<span class=\"number\">2116</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmxduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">1</span>F00-<span class=\"number\">1</span>FFF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlBduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0370</span>-<span class=\"number\">03</span>FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vietnamese */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmBduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0102</span>-<span class=\"number\">0103</span>, U+<span class=\"number\">0110</span>-<span class=\"number\">0111</span>, U+<span class=\"number\">1</span>EA0-<span class=\"number\">1</span>EF9, U+<span class=\"number\">20</span>AB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmRduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0100</span>-<span class=\"number\">024</span>F, U+<span class=\"number\">0259</span>, U+<span class=\"number\">1</span>E00-<span class=\"number\">1</span>EFF, U+<span class=\"number\">2020</span>, U+<span class=\"number\">20</span>A0-<span class=\"number\">20</span>AB, U+<span class=\"number\">20</span>AD-<span class=\"number\">20</span>CF, U+<span class=\"number\">2113</span>, U+<span class=\"number\">2</span>C60-<span class=\"number\">2</span>C7F, U+A720-A7FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlxdu.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0000</span>-<span class=\"number\">00</span>FF, U+<span class=\"number\">0131</span>, U+<span class=\"number\">0152</span>-<span class=\"number\">0153</span>, U+<span class=\"number\">02</span>BB-<span class=\"number\">02</span>BC, U+<span class=\"number\">02</span>C6, U+<span class=\"number\">02</span>DA, U+<span class=\"number\">02</span>DC, U+<span class=\"number\">2000</span>-<span class=\"number\">206</span>F, U+<span class=\"number\">2074</span>, U+<span class=\"number\">20</span>AC, U+<span class=\"number\">2122</span>, U+<span class=\"number\">2191</span>, U+<span class=\"number\">2193</span>, U+<span class=\"number\">2212</span>, U+<span class=\"number\">2215</span>, U+FEFF, U+FFFD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNa7lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0460</span>-<span class=\"number\">052</span>F, U+<span class=\"number\">1</span>C80-<span class=\"number\">1</span>C88, U+<span class=\"number\">20</span>B4, U+<span class=\"number\">2</span>DE0-<span class=\"number\">2</span>DFF, U+A640-A69F, U+FE2E-FE2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qPK7lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0400</span>-<span class=\"number\">045</span>F, U+<span class=\"number\">0490</span>-<span class=\"number\">0491</span>, U+<span class=\"number\">04</span>B0-<span class=\"number\">04</span>B1, U+<span class=\"number\">2116</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNK7lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">1</span>F00-<span class=\"number\">1</span>FFF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qO67lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0370</span>-<span class=\"number\">03</span>FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vietnamese */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qN67lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0102</span>-<span class=\"number\">0103</span>, U+<span class=\"number\">0110</span>-<span class=\"number\">0111</span>, U+<span class=\"number\">1</span>EA0-<span class=\"number\">1</span>EF9, U+<span class=\"number\">20</span>AB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNq7lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0100</span>-<span class=\"number\">024</span>F, U+<span class=\"number\">0259</span>, U+<span class=\"number\">1</span>E00-<span class=\"number\">1</span>EFF, U+<span class=\"number\">2020</span>, U+<span class=\"number\">20</span>A0-<span class=\"number\">20</span>AB, U+<span class=\"number\">20</span>AD-<span class=\"number\">20</span>CF, U+<span class=\"number\">2113</span>, U+<span class=\"number\">2</span>C60-<span class=\"number\">2</span>C7F, U+A720-A7FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qOK7l.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0000</span>-<span class=\"number\">00</span>FF, U+<span class=\"number\">0131</span>, U+<span class=\"number\">0152</span>-<span class=\"number\">0153</span>, U+<span class=\"number\">02</span>BB-<span class=\"number\">02</span>BC, U+<span class=\"number\">02</span>C6, U+<span class=\"number\">02</span>DA, U+<span class=\"number\">02</span>DC, U+<span class=\"number\">2000</span>-<span class=\"number\">206</span>F, U+<span class=\"number\">2074</span>, U+<span class=\"number\">20</span>AC, U+<span class=\"number\">2122</span>, U+<span class=\"number\">2191</span>, U+<span class=\"number\">2193</span>, U+<span class=\"number\">2212</span>, U+<span class=\"number\">2215</span>, U+FEFF, U+FFFD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmhduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0460</span>-<span class=\"number\">052</span>F, U+<span class=\"number\">1</span>C80-<span class=\"number\">1</span>C88, U+<span class=\"number\">20</span>B4, U+<span class=\"number\">2</span>DE0-<span class=\"number\">2</span>DFF, U+A640-A69F, U+FE2E-FE2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwkxduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0400</span>-<span class=\"number\">045</span>F, U+<span class=\"number\">0490</span>-<span class=\"number\">0491</span>, U+<span class=\"number\">04</span>B0-<span class=\"number\">04</span>B1, U+<span class=\"number\">2116</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmxduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">1</span>F00-<span class=\"number\">1</span>FFF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlBduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0370</span>-<span class=\"number\">03</span>FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vietnamese */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmBduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0102</span>-<span class=\"number\">0103</span>, U+<span class=\"number\">0110</span>-<span class=\"number\">0111</span>, U+<span class=\"number\">1</span>EA0-<span class=\"number\">1</span>EF9, U+<span class=\"number\">20</span>AB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmRduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0100</span>-<span class=\"number\">024</span>F, U+<span class=\"number\">0259</span>, U+<span class=\"number\">1</span>E00-<span class=\"number\">1</span>EFF, U+<span class=\"number\">2020</span>, U+<span class=\"number\">20</span>A0-<span class=\"number\">20</span>AB, U+<span class=\"number\">20</span>AD-<span class=\"number\">20</span>CF, U+<span class=\"number\">2113</span>, U+<span class=\"number\">2</span>C60-<span class=\"number\">2</span>C7F, U+A720-A7FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlxdu.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0000</span>-<span class=\"number\">00</span>FF, U+<span class=\"number\">0131</span>, U+<span class=\"number\">0152</span>-<span class=\"number\">0153</span>, U+<span class=\"number\">02</span>BB-<span class=\"number\">02</span>BC, U+<span class=\"number\">02</span>C6, U+<span class=\"number\">02</span>DA, U+<span class=\"number\">02</span>DC, U+<span class=\"number\">2000</span>-<span class=\"number\">206</span>F, U+<span class=\"number\">2074</span>, U+<span class=\"number\">20</span>AC, U+<span class=\"number\">2122</span>, U+<span class=\"number\">2191</span>, U+<span class=\"number\">2193</span>, U+<span class=\"number\">2212</span>, U+<span class=\"number\">2215</span>, U+FEFF, U+FFFD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Source Sans Pro, Helvetica Neue, Arial, sans-serif <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#34495e</span>;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.6rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">860px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> <span class=\"number\">30px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.6rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: .<span class=\"number\">05rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">ol</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-indent</span>: <span class=\"number\">0.5rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; *<span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; *<span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#42b983</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> <span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#34495e</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/*padding-bottom:0rem;</span></span><br><span class=\"line\"><span class=\"comment\">   color:#165f60;*/</span></span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.4rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.4rem</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*margin: 35px 0 15px;</span></span><br><span class=\"line\"><span class=\"comment\">    padding-bottom: 0.5em;</span></span><br><span class=\"line\"><span class=\"comment\">    border-bottom: 1px solid #ddd;*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*margin: 20px 0 7px;*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dl</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0.8em</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &gt; <span class=\"selector-tag\">ol</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &gt; <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hr &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">16px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e7e7e7</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span> none;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h2</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:first</span>-child + <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h3</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h4</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h5</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h6</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h4</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h5</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span> <span class=\"selector-tag\">p</span><span class=\"selector-class\">.first</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:last-child</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">4px</span> solid <span class=\"number\">#42b983</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">66</span>, <span class=\"number\">185</span>, <span class=\"number\">131</span>, .<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-break</span>: initial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dfe2e5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>n),</span><br><span class=\"line\"><span class=\"selector-tag\">thead</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fafafa</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dfe2e5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dfe2e5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">th</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">td</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">th</span><span class=\"selector-pseudo\">:last-child</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">td</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">strong</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">em</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">table</span> <span class=\"selector-tag\">thead</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.CodeMirror-gutters</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.md-fences</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#F4F4F4</span>;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">font-smoothing</span>: initial;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0.8rem</span> <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.3rem</span> <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.43rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#F8F8F8</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Roboto Mono, Source Sans Pro, Monaco, courier, monospace <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.85rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-wrap</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.CodeMirror-wrap</span> <span class=\"selector-class\">.CodeMirror-code</span> pre &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">code</span>, tt &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Roboto Mono, Source Sans Pro, Monaco, courier, monospace <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.92rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#e96900</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f8f8</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.md-footnote</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f8f8</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#e96900</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* heighlight. */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">mark</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#EBFFEB</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#222</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">del</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1px</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-link</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span><span class=\"selector-class\">.cm-link</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#22a2c9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-string</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#22a2c9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-task-list-item</span> &gt; <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">1.3em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> print &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">table</span>,</span><br><span class=\"line\">    pre &#123;</span><br><span class=\"line\">        <span class=\"attribute\">page-break-inside</span>: avoid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pre &#123;</span><br><span class=\"line\">        <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-fences</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f8f8</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> pre<span class=\"selector-class\">.md-meta-block</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">85%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.45</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f7f7f7</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#777777</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.mathjax-block</span> &gt; <span class=\"selector-class\">.code-tooltip</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: .<span class=\"number\">375rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">h3</span><span class=\"selector-class\">.md-focus</span>:before &#123;</span><br><span class=\"line\">    left: -<span class=\"number\">1.5625rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: .<span class=\"number\">375rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">h4</span><span class=\"selector-class\">.md-focus</span>:before &#123;</span><br><span class=\"line\">    left: -<span class=\"number\">1.5625rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: .<span class=\"number\">285714286rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">h5</span><span class=\"selector-class\">.md-focus</span>:before &#123;</span><br><span class=\"line\">    left: -<span class=\"number\">1.5625rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: .<span class=\"number\">285714286rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">h6</span><span class=\"selector-class\">.md-focus</span>:before &#123;</span><br><span class=\"line\">    left: -<span class=\"number\">1.5625rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: .<span class=\"number\">285714286rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-image</span> &gt; <span class=\"selector-class\">.md-meta</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Consolas, <span class=\"string\">&quot;Liberation Mono&quot;</span>, Courier, monospace;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.9em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-tag</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar-tabs</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#typora-quick-open</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f8f8</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#typora-quick-open-item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#FAFAFA</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#FEFEFE</span> <span class=\"number\">#e5e5e5</span> <span class=\"number\">#e5e5e5</span> <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#md-notification</span>:before &#123;</span><br><span class=\"line\">    top: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * Header Counters in TOC</span></span><br><span class=\"line\"><span class=\"comment\"> **************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* No link underlines in TOC */</span></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h1toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h2toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">margin-left</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h3toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">margin-left</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h4toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">4rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h5toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h6toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">6rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h1toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h2toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h3toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h4toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h5toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h6toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h6toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** focus mode */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.on-focus-mode</span> <span class=\"selector-tag\">blockquote</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-left-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">85</span>, <span class=\"number\">85</span>, <span class=\"number\">85</span>, <span class=\"number\">0.12</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">header</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.context-menu</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.megamenu-content</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;Segoe UI&quot;</span>, <span class=\"string\">&quot;Arial&quot;</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.file-node-content</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.file-node-icon</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.file-node-content</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.file-node-open-state</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: visible;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.mac-seamless-mode</span> <span class=\"selector-id\">#typora-sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--side-bar-bg-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-lang</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#b4654d</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.html-for-mac</span> <span class=\"selector-class\">.context-menu</span> &#123;</span><br><span class=\"line\">    --item-hover-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#E6F0FE</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** initialize css counter */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** put counter result into headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h1</span>:before &#123;</span><br><span class=\"line\">counter-increment: h1;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h2</span>:before &#123;</span><br><span class=\"line\">counter-increment: h2;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h3</span>:before,</span><br><span class=\"line\">h3.md-focus.md-heading:before /** override the default style for focused headings */ &#123;</span><br><span class=\"line\">counter-increment: h3;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h4</span>:before,</span><br><span class=\"line\">h4.md-focus.md-heading:before &#123;</span><br><span class=\"line\">counter-increment: h4;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h5</span>:before,</span><br><span class=\"line\">h5.md-focus.md-heading:before &#123;</span><br><span class=\"line\">counter-increment: h5;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;. &quot;</span>&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h6</span>:before,</span><br><span class=\"line\">h6.md-focus.md-heading:before &#123;</span><br><span class=\"line\">counter-increment: h6;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h6) <span class=\"string\">&quot;.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">/** override the default style for focused headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span>&gt;<span class=\"selector-tag\">h3</span><span class=\"selector-class\">.md-focus</span>:before,</span><br><span class=\"line\">#write&gt;h4.md-focus:before,</span><br><span class=\"line\">#write&gt;h5.md-focus:before,</span><br><span class=\"line\">#write&gt;h6.md-focus:before,</span><br><span class=\"line\">h3.md-focus:before,</span><br><span class=\"line\">h4.md-focus:before,</span><br><span class=\"line\">h5.md-focus:before,</span><br><span class=\"line\">h6.md-focus:before &#123;</span><br><span class=\"line\">color: inherit;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">position</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">left</span>:initial;</span><br><span class=\"line\"><span class=\"attribute\">float</span>: none;</span><br><span class=\"line\"><span class=\"attribute\">top</span>:initial;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">padding-left</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">padding-right</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***                           TOC                       */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"内容自动编号\"><a href=\"#内容自动编号\" class=\"headerlink\" title=\"内容自动编号\"></a>内容自动编号</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** initialize css counter */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** put counter result into headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h1</span>:before &#123;</span><br><span class=\"line\">    counter-increment: h1;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h2</span>:before &#123;</span><br><span class=\"line\">    counter-increment: h2;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h3</span>:before,</span><br><span class=\"line\">h3.md-focus.md-heading:before /** override the default style for focused headings */ &#123;</span><br><span class=\"line\">    counter-increment: h3;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h4</span>:before,</span><br><span class=\"line\">h4.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h4;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h5</span>:before,</span><br><span class=\"line\">h5.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h5;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h6</span>:before,</span><br><span class=\"line\">h6.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h6;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h6) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** override the default style for focused headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span>&gt;<span class=\"selector-tag\">h3</span><span class=\"selector-class\">.md-focus</span>:before,</span><br><span class=\"line\">#write&gt;h4.md-focus:before,</span><br><span class=\"line\">#write&gt;h5.md-focus:before,</span><br><span class=\"line\">#write&gt;h6.md-focus:before,</span><br><span class=\"line\">h3.md-focus:before,</span><br><span class=\"line\">h4.md-focus:before,</span><br><span class=\"line\">h5.md-focus:before,</span><br><span class=\"line\">h6.md-focus:before &#123;</span><br><span class=\"line\">    color: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:initial;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:initial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"目录自动编号\"><a href=\"#目录自动编号\" class=\"headerlink\" title=\"目录自动编号\"></a>目录自动编号</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * Header Counters in TOC</span></span><br><span class=\"line\"><span class=\"comment\"> **************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* No link underlines in TOC */</span></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h1toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h2toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h3toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: .<span class=\"number\">9rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h4toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">4rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: .<span class=\"number\">85rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h5toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: .<span class=\"number\">8rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h6toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">6rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: .<span class=\"number\">75rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h1toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h2toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h3toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h4toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h5toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h5toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h6toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h5toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h6toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * Header Counters in Content</span></span><br><span class=\"line\"><span class=\"comment\"> **************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/** initialize css counter */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/** put counter result into headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h1</span>:before &#123;</span><br><span class=\"line\">    counter-increment: h1;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h2</span>:before &#123;</span><br><span class=\"line\">    counter-increment: h2;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h3</span>:before, h3.md-focus.md-heading:before &#123; /*override the default style for focused headings */</span><br><span class=\"line\">    counter-increment: h3;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h4</span>:before, h4.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h4;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h5</span>:before, h5.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h5;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h6</span>:before, h6.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h6;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h6) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/** override the default style for focused headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span>&gt;<span class=\"selector-tag\">h3</span><span class=\"selector-class\">.md-focus</span>:before, #write&gt;h4.md-focus:before, #write&gt;h5.md-focus:before, #write&gt;h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before &#123;</span><br><span class=\"line\">    color: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: initial;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: initial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ter-increment: h4;<br>    content: counter(h1) “.” counter(h2) “.” counter(h3) “.” counter(h4) “. “<br>}</p>\n<h1 id=\"write-h5-before-h5-md-focus-md-heading-before\"><a href=\"#write-h5-before-h5-md-focus-md-heading-before\" class=\"headerlink\" title=\"write h5:before, h5.md-focus.md-heading:before {\"></a>write h5:before, h5.md-focus.md-heading:before {</h1><pre><code>counter-increment: h5;\ncontent: counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;.&quot; counter(h4) &quot;.&quot; counter(h5) &quot;. &quot;\n</code></pre><p>}</p>\n<h1 id=\"write-h6-before-h6-md-focus-md-heading-before\"><a href=\"#write-h6-before-h6-md-focus-md-heading-before\" class=\"headerlink\" title=\"write h6:before, h6.md-focus.md-heading:before {\"></a>write h6:before, h6.md-focus.md-heading:before {</h1><pre><code>counter-increment: h6;\ncontent: counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;.&quot; counter(h4) &quot;.&quot; counter(h5) &quot;.&quot; counter(h6) &quot;. &quot;\n</code></pre><p>}</p>\n<p>/<em>* override the default style for focused headings </em>/</p>\n<h1 id=\"write-gt-h3-md-focus-before-write-gt-h4-md-focus-before-write-gt-h5-md-focus-before-write-gt-h6-md-focus-before-h3-md-focus-before-h4-md-focus-before-h5-md-focus-before-h6-md-focus-before\"><a href=\"#write-gt-h3-md-focus-before-write-gt-h4-md-focus-before-write-gt-h5-md-focus-before-write-gt-h6-md-focus-before-h3-md-focus-before-h4-md-focus-before-h5-md-focus-before-h6-md-focus-before\" class=\"headerlink\" title=\"write&gt;h3.md-focus:before, #write&gt;h4.md-focus:before, #write&gt;h5.md-focus:before, #write&gt;h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before {\"></a>write&gt;h3.md-focus:before, #write&gt;h4.md-focus:before, #write&gt;h5.md-focus:before, #write&gt;h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before {</h1><pre><code>color: inherit;\nborder: inherit;\nborder-radius: inherit;\nposition: inherit;\nleft: initial;\nfloat: none;\ntop: initial;\nfont-size: inherit;\npadding-left: inherit;\npadding-right: inherit;\nvertical-align: inherit;\nfont-weight: inherit;\nline-height: inherit;\n</code></pre><p>}<br>```</p>\n","site":{"data":{}},"excerpt":"<p>typora主题自动编号配置</p>","more":"<p>[TOC]</p>\n<p><a href=\"https://pastebin.com/NYugSbXk\">https://pastebin.com/NYugSbXk</a></p>\n<h1 id=\"typora主题\"><a href=\"#typora主题\" class=\"headerlink\" title=\"typora主题\"></a>typora主题</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">    --side-bar-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    --control-text-<span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhGq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0460</span>-<span class=\"number\">052</span>F, U+<span class=\"number\">1</span>C80-<span class=\"number\">1</span>C88, U+<span class=\"number\">20</span>B4, U+<span class=\"number\">2</span>DE0-<span class=\"number\">2</span>DFF, U+A640-A69F, U+FE2E-FE2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhPq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0400</span>-<span class=\"number\">045</span>F, U+<span class=\"number\">0490</span>-<span class=\"number\">0491</span>, U+<span class=\"number\">04</span>B0-<span class=\"number\">04</span>B1, U+<span class=\"number\">2116</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhHq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">1</span>F00-<span class=\"number\">1</span>FFF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhIq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0370</span>-<span class=\"number\">03</span>FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vietnamese */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhEq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0102</span>-<span class=\"number\">0103</span>, U+<span class=\"number\">0110</span>-<span class=\"number\">0111</span>, U+<span class=\"number\">1</span>EA0-<span class=\"number\">1</span>EF9, U+<span class=\"number\">20</span>AB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhFq3-cXbKDO1w.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0100</span>-<span class=\"number\">024</span>F, U+<span class=\"number\">0259</span>, U+<span class=\"number\">1</span>E00-<span class=\"number\">1</span>EFF, U+<span class=\"number\">2020</span>, U+<span class=\"number\">20</span>A0-<span class=\"number\">20</span>AB, U+<span class=\"number\">20</span>AD-<span class=\"number\">20</span>CF, U+<span class=\"number\">2113</span>, U+<span class=\"number\">2</span>C60-<span class=\"number\">2</span>C7F, U+A720-A7FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Roboto Mono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Roboto Mono&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;RobotoMono-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/L0x5DF4xlVMF-BfR8bXMIjhLq3-cXbKD.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0000</span>-<span class=\"number\">00</span>FF, U+<span class=\"number\">0131</span>, U+<span class=\"number\">0152</span>-<span class=\"number\">0153</span>, U+<span class=\"number\">02</span>BB-<span class=\"number\">02</span>BC, U+<span class=\"number\">02</span>C6, U+<span class=\"number\">02</span>DA, U+<span class=\"number\">02</span>DC, U+<span class=\"number\">2000</span>-<span class=\"number\">206</span>F, U+<span class=\"number\">2074</span>, U+<span class=\"number\">20</span>AC, U+<span class=\"number\">2122</span>, U+<span class=\"number\">2191</span>, U+<span class=\"number\">2193</span>, U+<span class=\"number\">2212</span>, U+<span class=\"number\">2215</span>, U+FEFF, U+FFFD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmhduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0460</span>-<span class=\"number\">052</span>F, U+<span class=\"number\">1</span>C80-<span class=\"number\">1</span>C88, U+<span class=\"number\">20</span>B4, U+<span class=\"number\">2</span>DE0-<span class=\"number\">2</span>DFF, U+A640-A69F, U+FE2E-FE2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwkxduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0400</span>-<span class=\"number\">045</span>F, U+<span class=\"number\">0490</span>-<span class=\"number\">0491</span>, U+<span class=\"number\">04</span>B0-<span class=\"number\">04</span>B1, U+<span class=\"number\">2116</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmxduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">1</span>F00-<span class=\"number\">1</span>FFF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlBduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0370</span>-<span class=\"number\">03</span>FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vietnamese */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmBduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0102</span>-<span class=\"number\">0103</span>, U+<span class=\"number\">0110</span>-<span class=\"number\">0111</span>, U+<span class=\"number\">1</span>EA0-<span class=\"number\">1</span>EF9, U+<span class=\"number\">20</span>AB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmRduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0100</span>-<span class=\"number\">024</span>F, U+<span class=\"number\">0259</span>, U+<span class=\"number\">1</span>E00-<span class=\"number\">1</span>EFF, U+<span class=\"number\">2020</span>, U+<span class=\"number\">20</span>A0-<span class=\"number\">20</span>AB, U+<span class=\"number\">20</span>AD-<span class=\"number\">20</span>CF, U+<span class=\"number\">2113</span>, U+<span class=\"number\">2</span>C60-<span class=\"number\">2</span>C7F, U+A720-A7FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Light&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Light&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlxdu.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0000</span>-<span class=\"number\">00</span>FF, U+<span class=\"number\">0131</span>, U+<span class=\"number\">0152</span>-<span class=\"number\">0153</span>, U+<span class=\"number\">02</span>BB-<span class=\"number\">02</span>BC, U+<span class=\"number\">02</span>C6, U+<span class=\"number\">02</span>DA, U+<span class=\"number\">02</span>DC, U+<span class=\"number\">2000</span>-<span class=\"number\">206</span>F, U+<span class=\"number\">2074</span>, U+<span class=\"number\">20</span>AC, U+<span class=\"number\">2122</span>, U+<span class=\"number\">2191</span>, U+<span class=\"number\">2193</span>, U+<span class=\"number\">2212</span>, U+<span class=\"number\">2215</span>, U+FEFF, U+FFFD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNa7lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0460</span>-<span class=\"number\">052</span>F, U+<span class=\"number\">1</span>C80-<span class=\"number\">1</span>C88, U+<span class=\"number\">20</span>B4, U+<span class=\"number\">2</span>DE0-<span class=\"number\">2</span>DFF, U+A640-A69F, U+FE2E-FE2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qPK7lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0400</span>-<span class=\"number\">045</span>F, U+<span class=\"number\">0490</span>-<span class=\"number\">0491</span>, U+<span class=\"number\">04</span>B0-<span class=\"number\">04</span>B1, U+<span class=\"number\">2116</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNK7lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">1</span>F00-<span class=\"number\">1</span>FFF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qO67lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0370</span>-<span class=\"number\">03</span>FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vietnamese */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qN67lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0102</span>-<span class=\"number\">0103</span>, U+<span class=\"number\">0110</span>-<span class=\"number\">0111</span>, U+<span class=\"number\">1</span>EA0-<span class=\"number\">1</span>EF9, U+<span class=\"number\">20</span>AB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNq7lqDY.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0100</span>-<span class=\"number\">024</span>F, U+<span class=\"number\">0259</span>, U+<span class=\"number\">1</span>E00-<span class=\"number\">1</span>EFF, U+<span class=\"number\">2020</span>, U+<span class=\"number\">20</span>A0-<span class=\"number\">20</span>AB, U+<span class=\"number\">20</span>AD-<span class=\"number\">20</span>CF, U+<span class=\"number\">2113</span>, U+<span class=\"number\">2</span>C60-<span class=\"number\">2</span>C7F, U+A720-A7FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro Regular&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-Regular&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xK3dSBYKcSV-LCoeQqfX1RYOo3qOK7l.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0000</span>-<span class=\"number\">00</span>FF, U+<span class=\"number\">0131</span>, U+<span class=\"number\">0152</span>-<span class=\"number\">0153</span>, U+<span class=\"number\">02</span>BB-<span class=\"number\">02</span>BC, U+<span class=\"number\">02</span>C6, U+<span class=\"number\">02</span>DA, U+<span class=\"number\">02</span>DC, U+<span class=\"number\">2000</span>-<span class=\"number\">206</span>F, U+<span class=\"number\">2074</span>, U+<span class=\"number\">20</span>AC, U+<span class=\"number\">2122</span>, U+<span class=\"number\">2191</span>, U+<span class=\"number\">2193</span>, U+<span class=\"number\">2212</span>, U+<span class=\"number\">2215</span>, U+FEFF, U+FFFD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmhduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0460</span>-<span class=\"number\">052</span>F, U+<span class=\"number\">1</span>C80-<span class=\"number\">1</span>C88, U+<span class=\"number\">20</span>B4, U+<span class=\"number\">2</span>DE0-<span class=\"number\">2</span>DFF, U+A640-A69F, U+FE2E-FE2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* cyrillic */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwkxduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0400</span>-<span class=\"number\">045</span>F, U+<span class=\"number\">0490</span>-<span class=\"number\">0491</span>, U+<span class=\"number\">04</span>B0-<span class=\"number\">04</span>B1, U+<span class=\"number\">2116</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmxduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">1</span>F00-<span class=\"number\">1</span>FFF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* greek */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlBduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0370</span>-<span class=\"number\">03</span>FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vietnamese */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmBduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0102</span>-<span class=\"number\">0103</span>, U+<span class=\"number\">0110</span>-<span class=\"number\">0111</span>, U+<span class=\"number\">1</span>EA0-<span class=\"number\">1</span>EF9, U+<span class=\"number\">20</span>AB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin-ext */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmRduz8A.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0100</span>-<span class=\"number\">024</span>F, U+<span class=\"number\">0259</span>, U+<span class=\"number\">1</span>E00-<span class=\"number\">1</span>EFF, U+<span class=\"number\">2020</span>, U+<span class=\"number\">20</span>A0-<span class=\"number\">20</span>AB, U+<span class=\"number\">20</span>AD-<span class=\"number\">20</span>CF, U+<span class=\"number\">2113</span>, U+<span class=\"number\">2</span>C60-<span class=\"number\">2</span>C7F, U+A720-A7FF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* latin */</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Source Sans Pro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;Source Sans Pro SemiBold&#x27;</span>), <span class=\"built_in\">local</span>(<span class=\"string\">&#x27;SourceSansPro-SemiBold&#x27;</span>), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlxdu.woff2&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">    unicode-range: U+<span class=\"number\">0000</span>-<span class=\"number\">00</span>FF, U+<span class=\"number\">0131</span>, U+<span class=\"number\">0152</span>-<span class=\"number\">0153</span>, U+<span class=\"number\">02</span>BB-<span class=\"number\">02</span>BC, U+<span class=\"number\">02</span>C6, U+<span class=\"number\">02</span>DA, U+<span class=\"number\">02</span>DC, U+<span class=\"number\">2000</span>-<span class=\"number\">206</span>F, U+<span class=\"number\">2074</span>, U+<span class=\"number\">20</span>AC, U+<span class=\"number\">2122</span>, U+<span class=\"number\">2191</span>, U+<span class=\"number\">2193</span>, U+<span class=\"number\">2212</span>, U+<span class=\"number\">2215</span>, U+FEFF, U+FFFD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Source Sans Pro, Helvetica Neue, Arial, sans-serif <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#34495e</span>;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.6rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">860px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> <span class=\"number\">30px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.6rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: .<span class=\"number\">05rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">ol</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-indent</span>: <span class=\"number\">0.5rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; *<span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; *<span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#42b983</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.anchor</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> tt,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> <span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> <span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#34495e</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/*padding-bottom:0rem;</span></span><br><span class=\"line\"><span class=\"comment\">   color:#165f60;*/</span></span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.4rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.4rem</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*margin: 35px 0 15px;</span></span><br><span class=\"line\"><span class=\"comment\">    padding-bottom: 0.5em;</span></span><br><span class=\"line\"><span class=\"comment\">    border-bottom: 1px solid #ddd;*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*margin: 20px 0 7px;*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dl</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0.8em</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &gt; <span class=\"selector-tag\">ol</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &gt; <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hr &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">16px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e7e7e7</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span> none;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h2</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:first</span>-child + <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h3</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h4</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h5</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">h6</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h4</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h5</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:first</span>-child <span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> <span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span> <span class=\"selector-tag\">p</span><span class=\"selector-class\">.first</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:last-child</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">4px</span> solid <span class=\"number\">#42b983</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">66</span>, <span class=\"number\">185</span>, <span class=\"number\">131</span>, .<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-break</span>: initial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dfe2e5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>n),</span><br><span class=\"line\"><span class=\"selector-tag\">thead</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fafafa</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dfe2e5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dfe2e5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">th</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">td</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">th</span><span class=\"selector-pseudo\">:last-child</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">td</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">strong</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">em</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">table</span> <span class=\"selector-tag\">thead</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.CodeMirror-gutters</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.md-fences</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#F4F4F4</span>;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">font-smoothing</span>: initial;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0.8rem</span> <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.3rem</span> <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.43rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#F8F8F8</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Roboto Mono, Source Sans Pro, Monaco, courier, monospace <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.85rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-wrap</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.CodeMirror-wrap</span> <span class=\"selector-class\">.CodeMirror-code</span> pre &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">code</span>, tt &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Roboto Mono, Source Sans Pro, Monaco, courier, monospace <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.92rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#e96900</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f8f8</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.md-footnote</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f8f8</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#e96900</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* heighlight. */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">mark</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#EBFFEB</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#222</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">del</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1px</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-link</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span><span class=\"selector-class\">.cm-link</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#22a2c9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-string</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#22a2c9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-task-list-item</span> &gt; <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">1.3em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> print &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">table</span>,</span><br><span class=\"line\">    pre &#123;</span><br><span class=\"line\">        <span class=\"attribute\">page-break-inside</span>: avoid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pre &#123;</span><br><span class=\"line\">        <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-fences</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f8f8</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> pre<span class=\"selector-class\">.md-meta-block</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">85%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.45</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f7f7f7</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#777777</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.mathjax-block</span> &gt; <span class=\"selector-class\">.code-tooltip</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: .<span class=\"number\">375rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">h3</span><span class=\"selector-class\">.md-focus</span>:before &#123;</span><br><span class=\"line\">    left: -<span class=\"number\">1.5625rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: .<span class=\"number\">375rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">h4</span><span class=\"selector-class\">.md-focus</span>:before &#123;</span><br><span class=\"line\">    left: -<span class=\"number\">1.5625rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: .<span class=\"number\">285714286rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">h5</span><span class=\"selector-class\">.md-focus</span>:before &#123;</span><br><span class=\"line\">    left: -<span class=\"number\">1.5625rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: .<span class=\"number\">285714286rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &gt; <span class=\"selector-tag\">h6</span><span class=\"selector-class\">.md-focus</span>:before &#123;</span><br><span class=\"line\">    left: -<span class=\"number\">1.5625rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: .<span class=\"number\">285714286rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-image</span> &gt; <span class=\"selector-class\">.md-meta</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Consolas, <span class=\"string\">&quot;Liberation Mono&quot;</span>, Courier, monospace;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.9em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-tag</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar-tabs</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#typora-quick-open</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f8f8</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#typora-quick-open-item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#FAFAFA</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#FEFEFE</span> <span class=\"number\">#e5e5e5</span> <span class=\"number\">#e5e5e5</span> <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#md-notification</span>:before &#123;</span><br><span class=\"line\">    top: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * Header Counters in TOC</span></span><br><span class=\"line\"><span class=\"comment\"> **************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* No link underlines in TOC */</span></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h1toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h2toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">margin-left</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h3toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">margin-left</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h4toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">4rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h5toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h6toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">6rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h1toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h2toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h3toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h4toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h5toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h6toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5toc) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h6toc) <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** focus mode */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.on-focus-mode</span> <span class=\"selector-tag\">blockquote</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-left-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">85</span>, <span class=\"number\">85</span>, <span class=\"number\">85</span>, <span class=\"number\">0.12</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">header</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.context-menu</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.megamenu-content</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;Segoe UI&quot;</span>, <span class=\"string\">&quot;Arial&quot;</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.file-node-content</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.file-node-icon</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.file-node-content</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.file-node-open-state</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: visible;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.mac-seamless-mode</span> <span class=\"selector-id\">#typora-sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--side-bar-bg-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-lang</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#b4654d</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.html-for-mac</span> <span class=\"selector-class\">.context-menu</span> &#123;</span><br><span class=\"line\">    --item-hover-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#E6F0FE</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** initialize css counter */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">counter-reset</span>: h6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** put counter result into headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h1</span>:before &#123;</span><br><span class=\"line\">counter-increment: h1;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h2</span>:before &#123;</span><br><span class=\"line\">counter-increment: h2;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h3</span>:before,</span><br><span class=\"line\">h3.md-focus.md-heading:before /** override the default style for focused headings */ &#123;</span><br><span class=\"line\">counter-increment: h3;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h4</span>:before,</span><br><span class=\"line\">h4.md-focus.md-heading:before &#123;</span><br><span class=\"line\">counter-increment: h4;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h5</span>:before,</span><br><span class=\"line\">h5.md-focus.md-heading:before &#123;</span><br><span class=\"line\">counter-increment: h5;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;. &quot;</span>&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h6</span>:before,</span><br><span class=\"line\">h6.md-focus.md-heading:before &#123;</span><br><span class=\"line\">counter-increment: h6;</span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h6) <span class=\"string\">&quot;.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">/** override the default style for focused headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span>&gt;<span class=\"selector-tag\">h3</span><span class=\"selector-class\">.md-focus</span>:before,</span><br><span class=\"line\">#write&gt;h4.md-focus:before,</span><br><span class=\"line\">#write&gt;h5.md-focus:before,</span><br><span class=\"line\">#write&gt;h6.md-focus:before,</span><br><span class=\"line\">h3.md-focus:before,</span><br><span class=\"line\">h4.md-focus:before,</span><br><span class=\"line\">h5.md-focus:before,</span><br><span class=\"line\">h6.md-focus:before &#123;</span><br><span class=\"line\">color: inherit;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">position</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">left</span>:initial;</span><br><span class=\"line\"><span class=\"attribute\">float</span>: none;</span><br><span class=\"line\"><span class=\"attribute\">top</span>:initial;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">padding-left</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">padding-right</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***                           TOC                       */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"内容自动编号\"><a href=\"#内容自动编号\" class=\"headerlink\" title=\"内容自动编号\"></a>内容自动编号</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** initialize css counter */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** put counter result into headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h1</span>:before &#123;</span><br><span class=\"line\">    counter-increment: h1;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h2</span>:before &#123;</span><br><span class=\"line\">    counter-increment: h2;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h3</span>:before,</span><br><span class=\"line\">h3.md-focus.md-heading:before /** override the default style for focused headings */ &#123;</span><br><span class=\"line\">    counter-increment: h3;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h4</span>:before,</span><br><span class=\"line\">h4.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h4;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h5</span>:before,</span><br><span class=\"line\">h5.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h5;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h6</span>:before,</span><br><span class=\"line\">h6.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h6;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h6) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** override the default style for focused headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span>&gt;<span class=\"selector-tag\">h3</span><span class=\"selector-class\">.md-focus</span>:before,</span><br><span class=\"line\">#write&gt;h4.md-focus:before,</span><br><span class=\"line\">#write&gt;h5.md-focus:before,</span><br><span class=\"line\">#write&gt;h6.md-focus:before,</span><br><span class=\"line\">h3.md-focus:before,</span><br><span class=\"line\">h4.md-focus:before,</span><br><span class=\"line\">h5.md-focus:before,</span><br><span class=\"line\">h6.md-focus:before &#123;</span><br><span class=\"line\">    color: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:initial;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:initial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"目录自动编号\"><a href=\"#目录自动编号\" class=\"headerlink\" title=\"目录自动编号\"></a>目录自动编号</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * Header Counters in TOC</span></span><br><span class=\"line\"><span class=\"comment\"> **************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* No link underlines in TOC */</span></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h1toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h2toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h3toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: .<span class=\"number\">9rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h4toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">4rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: .<span class=\"number\">85rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h5toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: .<span class=\"number\">8rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h6toc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">6rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: .<span class=\"number\">75rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h1toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h1</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h2toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h2</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h3toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h3</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h4toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h4</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h5toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h5toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h5</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span>:before &#123;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">    <span class=\"attribute\">counter-increment</span>: h6toc;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h2toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h3toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h4toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h5toc) <span class=\"string\">&quot;. &quot;</span> <span class=\"built_in\">counter</span>(h6toc) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.md-toc-h6</span> <span class=\"selector-class\">.md-toc-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * Header Counters in Content</span></span><br><span class=\"line\"><span class=\"comment\"> **************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/** initialize css counter */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">counter-reset</span>: h6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/** put counter result into headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h1</span>:before &#123;</span><br><span class=\"line\">    counter-increment: h1;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h2</span>:before &#123;</span><br><span class=\"line\">    counter-increment: h2;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h3</span>:before, h3.md-focus.md-heading:before &#123; /*override the default style for focused headings */</span><br><span class=\"line\">    counter-increment: h3;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h4</span>:before, h4.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h4;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h5</span>:before, h5.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h5;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">h6</span>:before, h6.md-focus.md-heading:before &#123;</span><br><span class=\"line\">    counter-increment: h6;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(h1) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h2) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h3) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h4) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h5) <span class=\"string\">&quot;.&quot;</span> <span class=\"built_in\">counter</span>(h6) <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/** override the default style for focused headings */</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span>&gt;<span class=\"selector-tag\">h3</span><span class=\"selector-class\">.md-focus</span>:before, #write&gt;h4.md-focus:before, #write&gt;h5.md-focus:before, #write&gt;h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before &#123;</span><br><span class=\"line\">    color: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: initial;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: initial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ter-increment: h4;<br>    content: counter(h1) “.” counter(h2) “.” counter(h3) “.” counter(h4) “. “<br>}</p>\n<h1 id=\"write-h5-before-h5-md-focus-md-heading-before\"><a href=\"#write-h5-before-h5-md-focus-md-heading-before\" class=\"headerlink\" title=\"write h5:before, h5.md-focus.md-heading:before {\"></a>write h5:before, h5.md-focus.md-heading:before {</h1><pre><code>counter-increment: h5;\ncontent: counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;.&quot; counter(h4) &quot;.&quot; counter(h5) &quot;. &quot;\n</code></pre><p>}</p>\n<h1 id=\"write-h6-before-h6-md-focus-md-heading-before\"><a href=\"#write-h6-before-h6-md-focus-md-heading-before\" class=\"headerlink\" title=\"write h6:before, h6.md-focus.md-heading:before {\"></a>write h6:before, h6.md-focus.md-heading:before {</h1><pre><code>counter-increment: h6;\ncontent: counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;.&quot; counter(h4) &quot;.&quot; counter(h5) &quot;.&quot; counter(h6) &quot;. &quot;\n</code></pre><p>}</p>\n<p>/<em>* override the default style for focused headings </em>/</p>\n<h1 id=\"write-gt-h3-md-focus-before-write-gt-h4-md-focus-before-write-gt-h5-md-focus-before-write-gt-h6-md-focus-before-h3-md-focus-before-h4-md-focus-before-h5-md-focus-before-h6-md-focus-before\"><a href=\"#write-gt-h3-md-focus-before-write-gt-h4-md-focus-before-write-gt-h5-md-focus-before-write-gt-h6-md-focus-before-h3-md-focus-before-h4-md-focus-before-h5-md-focus-before-h6-md-focus-before\" class=\"headerlink\" title=\"write&gt;h3.md-focus:before, #write&gt;h4.md-focus:before, #write&gt;h5.md-focus:before, #write&gt;h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before {\"></a>write&gt;h3.md-focus:before, #write&gt;h4.md-focus:before, #write&gt;h5.md-focus:before, #write&gt;h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before {</h1><pre><code>color: inherit;\nborder: inherit;\nborder-radius: inherit;\nposition: inherit;\nleft: initial;\nfloat: none;\ntop: initial;\nfont-size: inherit;\npadding-left: inherit;\npadding-right: inherit;\nvertical-align: inherit;\nfont-weight: inherit;\nline-height: inherit;\n</code></pre><p>}<br>```</p>"},{"title":"xgboost包","date":"2022-03-01T03:32:38.000Z","_content":"\nxgb模型的保存与调用\n\n<!-- more -->\n\n\n[TOC]\n\n# 模型的保存与restore\n\n常用的模型文件有dump, pickle,model三种格式，其中dump文件是可读文件，pickle和model文件是二进制文件。model文件是xgb官方支持的文件，适合所有版本，pickle文件使用第三方pickle包进行序列化。\n\nxgb接口有xgboost.Booster()和xgboost.sklearn.XGBClassifier两个接口，xgboost.Booster()只能使用DMatrix形式数据进行训练，dmatrix数据可通过csv,txt,libsvm,dataframe得到，见https://xgboost.readthedocs.io/en/latest/python/python_intro.html\n\nXGBClassifier可使用Grid Search 和并行处理\n\n![image-20201026101441254](./pics/xgboost包.assets/image-20201026101441254.png)\n\nxgboost.sklearn.XGBClassifier可直接读dataframe数据\n\n```python\n# xgboost.Booster()版本模型restore和预测\nimport xgboost as xgb\ndtrain = xgb.DMatrix(x,label=df['y_flag'],feature_names=df.columns[2:]) #x: dataframe;feature_names可指定特征名，取决于训练时是否有特征名\nm1 = xgb.Booster(model_file='test.model') \n# 或者\nm1 = xgb.Booster()\nm1.load_model(f_model)\nscore = m1.predict(dtrain)\n\n```\n\n```python\n# xgboost.sklearn.XGBClassifier版本restore和预测\nm2 = XGBClassifier()\nm2.load_model(f_model)  \na = m2.predict_proba(x)[:,1]\n```\n\n# 模型的训练与保存\n\n```python\n# XGBClassifier 版本\nfrom xgboost.sklearn import XGBClassifier\nimport xgboost as xgb\nimport pickle\nmodel=XGBClassifier(params) #params：dict,模型参数\nwatchlist=[(x_train, y_train), (x_test, y_test)]\nmodel.fit(x,y, eval_set=watchlist)\n#模型保存\nmodel.get_booster().dump_model(f_model + '.dump') #可读文件\nmodel.get_booster().save_model(f_model + '.model') #model二进制文件\npickle.dump(model, open(f_model + '.pickle.dat', \"wb\")) #pickl二进制文件\n```\n\n```python\n# xgboost.Booster 版本\nimport xgboost as xgb\nmodel = xgb.train(param, dtrain, num_round)  # dtrain是训练数据集\nscores = bst.predict(dtrain)    \n\n```\n\n","source":"_posts/0_代码相关/xgboost包.md","raw":"---\ntitle: xgboost包\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nxgb模型的保存与调用\n\n<!-- more -->\n\n\n[TOC]\n\n# 模型的保存与restore\n\n常用的模型文件有dump, pickle,model三种格式，其中dump文件是可读文件，pickle和model文件是二进制文件。model文件是xgb官方支持的文件，适合所有版本，pickle文件使用第三方pickle包进行序列化。\n\nxgb接口有xgboost.Booster()和xgboost.sklearn.XGBClassifier两个接口，xgboost.Booster()只能使用DMatrix形式数据进行训练，dmatrix数据可通过csv,txt,libsvm,dataframe得到，见https://xgboost.readthedocs.io/en/latest/python/python_intro.html\n\nXGBClassifier可使用Grid Search 和并行处理\n\n![image-20201026101441254](./pics/xgboost包.assets/image-20201026101441254.png)\n\nxgboost.sklearn.XGBClassifier可直接读dataframe数据\n\n```python\n# xgboost.Booster()版本模型restore和预测\nimport xgboost as xgb\ndtrain = xgb.DMatrix(x,label=df['y_flag'],feature_names=df.columns[2:]) #x: dataframe;feature_names可指定特征名，取决于训练时是否有特征名\nm1 = xgb.Booster(model_file='test.model') \n# 或者\nm1 = xgb.Booster()\nm1.load_model(f_model)\nscore = m1.predict(dtrain)\n\n```\n\n```python\n# xgboost.sklearn.XGBClassifier版本restore和预测\nm2 = XGBClassifier()\nm2.load_model(f_model)  \na = m2.predict_proba(x)[:,1]\n```\n\n# 模型的训练与保存\n\n```python\n# XGBClassifier 版本\nfrom xgboost.sklearn import XGBClassifier\nimport xgboost as xgb\nimport pickle\nmodel=XGBClassifier(params) #params：dict,模型参数\nwatchlist=[(x_train, y_train), (x_test, y_test)]\nmodel.fit(x,y, eval_set=watchlist)\n#模型保存\nmodel.get_booster().dump_model(f_model + '.dump') #可读文件\nmodel.get_booster().save_model(f_model + '.model') #model二进制文件\npickle.dump(model, open(f_model + '.pickle.dat', \"wb\")) #pickl二进制文件\n```\n\n```python\n# xgboost.Booster 版本\nimport xgboost as xgb\nmodel = xgb.train(param, dtrain, num_round)  # dtrain是训练数据集\nscores = bst.predict(dtrain)    \n\n```\n\n","slug":"0_代码相关/xgboost包","published":1,"updated":"2022-03-01T03:55:28.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly54004k8s3252cz9dr4","content":"<p>xgb模型的保存与调用</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"模型的保存与restore\"><a href=\"#模型的保存与restore\" class=\"headerlink\" title=\"模型的保存与restore\"></a>模型的保存与restore</h1><p>常用的模型文件有dump, pickle,model三种格式，其中dump文件是可读文件，pickle和model文件是二进制文件。model文件是xgb官方支持的文件，适合所有版本，pickle文件使用第三方pickle包进行序列化。</p>\n<p>xgb接口有xgboost.Booster()和xgboost.sklearn.XGBClassifier两个接口，xgboost.Booster()只能使用DMatrix形式数据进行训练，dmatrix数据可通过csv,txt,libsvm,dataframe得到，见<a href=\"https://xgboost.readthedocs.io/en/latest/python/python_intro.html\">https://xgboost.readthedocs.io/en/latest/python/python_intro.html</a></p>\n<p>XGBClassifier可使用Grid Search 和并行处理</p>\n<p><img src=\"./pics/xgboost包.assets/image-20201026101441254.png\" alt=\"image-20201026101441254\"></p>\n<p>xgboost.sklearn.XGBClassifier可直接读dataframe数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xgboost.Booster()版本模型restore和预测</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\">dtrain = xgb.DMatrix(x,label=df[<span class=\"string\">&#x27;y_flag&#x27;</span>],feature_names=df.columns[<span class=\"number\">2</span>:]) <span class=\"comment\">#x: dataframe;feature_names可指定特征名，取决于训练时是否有特征名</span></span><br><span class=\"line\">m1 = xgb.Booster(model_file=<span class=\"string\">&#x27;test.model&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">m1 = xgb.Booster()</span><br><span class=\"line\">m1.load_model(f_model)</span><br><span class=\"line\">score = m1.predict(dtrain)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xgboost.sklearn.XGBClassifier版本restore和预测</span></span><br><span class=\"line\">m2 = XGBClassifier()</span><br><span class=\"line\">m2.load_model(f_model)  </span><br><span class=\"line\">a = m2.predict_proba(x)[:,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<h1 id=\"模型的训练与保存\"><a href=\"#模型的训练与保存\" class=\"headerlink\" title=\"模型的训练与保存\"></a>模型的训练与保存</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># XGBClassifier 版本</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> xgboost.sklearn <span class=\"keyword\">import</span> XGBClassifier</span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">model=XGBClassifier(params) <span class=\"comment\">#params：dict,模型参数</span></span><br><span class=\"line\">watchlist=[(x_train, y_train), (x_test, y_test)]</span><br><span class=\"line\">model.fit(x,y, eval_set=watchlist)</span><br><span class=\"line\"><span class=\"comment\">#模型保存</span></span><br><span class=\"line\">model.get_booster().dump_model(f_model + <span class=\"string\">&#x27;.dump&#x27;</span>) <span class=\"comment\">#可读文件</span></span><br><span class=\"line\">model.get_booster().save_model(f_model + <span class=\"string\">&#x27;.model&#x27;</span>) <span class=\"comment\">#model二进制文件</span></span><br><span class=\"line\">pickle.dump(model, <span class=\"built_in\">open</span>(f_model + <span class=\"string\">&#x27;.pickle.dat&#x27;</span>, <span class=\"string\">&quot;wb&quot;</span>)) <span class=\"comment\">#pickl二进制文件</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xgboost.Booster 版本</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\">model = xgb.train(param, dtrain, num_round)  <span class=\"comment\"># dtrain是训练数据集</span></span><br><span class=\"line\">scores = bst.predict(dtrain)    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>xgb模型的保存与调用</p>","more":"<p>[TOC]</p>\n<h1 id=\"模型的保存与restore\"><a href=\"#模型的保存与restore\" class=\"headerlink\" title=\"模型的保存与restore\"></a>模型的保存与restore</h1><p>常用的模型文件有dump, pickle,model三种格式，其中dump文件是可读文件，pickle和model文件是二进制文件。model文件是xgb官方支持的文件，适合所有版本，pickle文件使用第三方pickle包进行序列化。</p>\n<p>xgb接口有xgboost.Booster()和xgboost.sklearn.XGBClassifier两个接口，xgboost.Booster()只能使用DMatrix形式数据进行训练，dmatrix数据可通过csv,txt,libsvm,dataframe得到，见<a href=\"https://xgboost.readthedocs.io/en/latest/python/python_intro.html\">https://xgboost.readthedocs.io/en/latest/python/python_intro.html</a></p>\n<p>XGBClassifier可使用Grid Search 和并行处理</p>\n<p><img src=\"./pics/xgboost包.assets/image-20201026101441254.png\" alt=\"image-20201026101441254\"></p>\n<p>xgboost.sklearn.XGBClassifier可直接读dataframe数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xgboost.Booster()版本模型restore和预测</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\">dtrain = xgb.DMatrix(x,label=df[<span class=\"string\">&#x27;y_flag&#x27;</span>],feature_names=df.columns[<span class=\"number\">2</span>:]) <span class=\"comment\">#x: dataframe;feature_names可指定特征名，取决于训练时是否有特征名</span></span><br><span class=\"line\">m1 = xgb.Booster(model_file=<span class=\"string\">&#x27;test.model&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">m1 = xgb.Booster()</span><br><span class=\"line\">m1.load_model(f_model)</span><br><span class=\"line\">score = m1.predict(dtrain)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xgboost.sklearn.XGBClassifier版本restore和预测</span></span><br><span class=\"line\">m2 = XGBClassifier()</span><br><span class=\"line\">m2.load_model(f_model)  </span><br><span class=\"line\">a = m2.predict_proba(x)[:,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<h1 id=\"模型的训练与保存\"><a href=\"#模型的训练与保存\" class=\"headerlink\" title=\"模型的训练与保存\"></a>模型的训练与保存</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># XGBClassifier 版本</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> xgboost.sklearn <span class=\"keyword\">import</span> XGBClassifier</span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">model=XGBClassifier(params) <span class=\"comment\">#params：dict,模型参数</span></span><br><span class=\"line\">watchlist=[(x_train, y_train), (x_test, y_test)]</span><br><span class=\"line\">model.fit(x,y, eval_set=watchlist)</span><br><span class=\"line\"><span class=\"comment\">#模型保存</span></span><br><span class=\"line\">model.get_booster().dump_model(f_model + <span class=\"string\">&#x27;.dump&#x27;</span>) <span class=\"comment\">#可读文件</span></span><br><span class=\"line\">model.get_booster().save_model(f_model + <span class=\"string\">&#x27;.model&#x27;</span>) <span class=\"comment\">#model二进制文件</span></span><br><span class=\"line\">pickle.dump(model, <span class=\"built_in\">open</span>(f_model + <span class=\"string\">&#x27;.pickle.dat&#x27;</span>, <span class=\"string\">&quot;wb&quot;</span>)) <span class=\"comment\">#pickl二进制文件</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xgboost.Booster 版本</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\">model = xgb.train(param, dtrain, num_round)  <span class=\"comment\"># dtrain是训练数据集</span></span><br><span class=\"line\">scores = bst.predict(dtrain)    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"作业，进程，线程管道梳理","date":"2022-03-01T03:32:38.000Z","_content":"\n进程-线程科普\n\n<!-- more -->\n\n\n作业，进程，线程，管程，管道梳理\n\n[TOC]\n\n# 基础概念 \n\n进程（process）：程序在一个数据集上的一次运行过程。是操作系统资源分配的基本单位。\n\n 线程（thread）：是进程中的一个实体，是被操作系统独立调度和执行的基本单位。一个进程包含一个或多个线程。\n\n>多线程间是共用内存空间的，但有的内存只能同时被一个线程访问，有的内存只能同时被有限个线程访问。所以每个内存会有一个锁，当超额的线程访问此内存时就需要排队。当一个线程长时间占用内存时就会导致“锁死”\n\n![image-20200331114405031](.\\pics\\作业，进程，线程管道梳理.assets\\image-20200331114405031.png)\n\n# shell中多进程管理\n\n# python中多进程管理\n\n- 单进程：\n\n```python\nimport time\nimport os\n\ndef long_time_task():\n    print('当前进程: {}'.format(os.getpid()))\n    time.sleep(2)\n    print(\"结果: {}\".format(8 ** 20))\n\nif __name__ == \"__main__\":\n    print('当前母进程: {}'.format(os.getpid()))\n    start = time.time()\n    for i in range(2):\n        long_time_task()\n\n    end = time.time()\n    print(\"用时{}秒\".format((end-start)))\n```\n\n输出：\n\n```\n当前母进程: 14236\n当前进程: 14236\n结果: 1152921504606846976\n当前进程: 14236\n结果: 1152921504606846976\n用时4.01080060005188秒\n```\n\n- 多进程后：\n\nProcess方法接收两个参数, 第一个是target，一般指向函数名，第二个时args，需要向函数传递的参数。对于创建的新进程，调用start()方法即可让其开始。我们可以使用os.getpid()打印出当前进程的名字。之所以我们使用join()方法就是为了让母进程阻塞，等待子进程都完成后才打印出总共耗时，否则输出时间只是母进程执行的时间。\n\n```python\nfrom multiprocessing import Process\nimport os\nimport time\n\n\ndef long_time_task(i):\n    print('子进程: {} - 任务{}'.format(os.getpid(), i))\n    time.sleep(2)\n    print(\"结果: {}\".format(8 ** 20))\n\n\nif __name__=='__main__':\n    print('当前母进程: {}'.format(os.getpid()))\n    start = time.time()\n    p1 = Process(target=long_time_task, args=(1,))\n    p2 = Process(target=long_time_task, args=(2,))\n    print('等待所有子进程完成。')\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    end = time.time()\n    print(\"总共用时{}秒\".format((end - start)))\n\n```\n\n输出：\n\n```\n当前母进程: 6920\n等待所有子进程完成。\n子进程: 17020 - 任务1\n子进程: 5904 - 任务2\n结果: 1152921504606846976\n结果: 1152921504606846976\n总共用时2.131091356277466秒\n```\n\n# python调用shell的方法\n\n## os.system（cmd）\n\n返回值：shell运行指令后的状态码，int，0表示运行成功，256表示未找到。**适用于shell不需要输出内容的场景**\n\n```python\nimport os\nval = os.system('ls -al')\nprint('val')\n```\n\n\n\n## os.popen()\n\n返回值：文件的形式返回shell指令运行后的结果，需要获取内容时可使用read()或readlines（）方法\n\n\n\n\n\n## commands\n\n## subprocess\n\n","source":"_posts/0_代码相关/作业，进程，线程管道梳理.md","raw":"---\ntitle: 作业，进程，线程管道梳理\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n进程-线程科普\n\n<!-- more -->\n\n\n作业，进程，线程，管程，管道梳理\n\n[TOC]\n\n# 基础概念 \n\n进程（process）：程序在一个数据集上的一次运行过程。是操作系统资源分配的基本单位。\n\n 线程（thread）：是进程中的一个实体，是被操作系统独立调度和执行的基本单位。一个进程包含一个或多个线程。\n\n>多线程间是共用内存空间的，但有的内存只能同时被一个线程访问，有的内存只能同时被有限个线程访问。所以每个内存会有一个锁，当超额的线程访问此内存时就需要排队。当一个线程长时间占用内存时就会导致“锁死”\n\n![image-20200331114405031](.\\pics\\作业，进程，线程管道梳理.assets\\image-20200331114405031.png)\n\n# shell中多进程管理\n\n# python中多进程管理\n\n- 单进程：\n\n```python\nimport time\nimport os\n\ndef long_time_task():\n    print('当前进程: {}'.format(os.getpid()))\n    time.sleep(2)\n    print(\"结果: {}\".format(8 ** 20))\n\nif __name__ == \"__main__\":\n    print('当前母进程: {}'.format(os.getpid()))\n    start = time.time()\n    for i in range(2):\n        long_time_task()\n\n    end = time.time()\n    print(\"用时{}秒\".format((end-start)))\n```\n\n输出：\n\n```\n当前母进程: 14236\n当前进程: 14236\n结果: 1152921504606846976\n当前进程: 14236\n结果: 1152921504606846976\n用时4.01080060005188秒\n```\n\n- 多进程后：\n\nProcess方法接收两个参数, 第一个是target，一般指向函数名，第二个时args，需要向函数传递的参数。对于创建的新进程，调用start()方法即可让其开始。我们可以使用os.getpid()打印出当前进程的名字。之所以我们使用join()方法就是为了让母进程阻塞，等待子进程都完成后才打印出总共耗时，否则输出时间只是母进程执行的时间。\n\n```python\nfrom multiprocessing import Process\nimport os\nimport time\n\n\ndef long_time_task(i):\n    print('子进程: {} - 任务{}'.format(os.getpid(), i))\n    time.sleep(2)\n    print(\"结果: {}\".format(8 ** 20))\n\n\nif __name__=='__main__':\n    print('当前母进程: {}'.format(os.getpid()))\n    start = time.time()\n    p1 = Process(target=long_time_task, args=(1,))\n    p2 = Process(target=long_time_task, args=(2,))\n    print('等待所有子进程完成。')\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    end = time.time()\n    print(\"总共用时{}秒\".format((end - start)))\n\n```\n\n输出：\n\n```\n当前母进程: 6920\n等待所有子进程完成。\n子进程: 17020 - 任务1\n子进程: 5904 - 任务2\n结果: 1152921504606846976\n结果: 1152921504606846976\n总共用时2.131091356277466秒\n```\n\n# python调用shell的方法\n\n## os.system（cmd）\n\n返回值：shell运行指令后的状态码，int，0表示运行成功，256表示未找到。**适用于shell不需要输出内容的场景**\n\n```python\nimport os\nval = os.system('ls -al')\nprint('val')\n```\n\n\n\n## os.popen()\n\n返回值：文件的形式返回shell指令运行后的结果，需要获取内容时可使用read()或readlines（）方法\n\n\n\n\n\n## commands\n\n## subprocess\n\n","slug":"0_代码相关/作业，进程，线程管道梳理","published":1,"updated":"2022-03-01T03:55:51.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly54004n8s32bhhie4dz","content":"<p>进程-线程科普</p>\n<span id=\"more\"></span>\n<p>作业，进程，线程，管程，管道梳理</p>\n<p>[TOC]</p>\n<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><p>进程（process）：程序在一个数据集上的一次运行过程。是操作系统资源分配的基本单位。</p>\n<p> 线程（thread）：是进程中的一个实体，是被操作系统独立调度和执行的基本单位。一个进程包含一个或多个线程。</p>\n<blockquote>\n<p>多线程间是共用内存空间的，但有的内存只能同时被一个线程访问，有的内存只能同时被有限个线程访问。所以每个内存会有一个锁，当超额的线程访问此内存时就需要排队。当一个线程长时间占用内存时就会导致“锁死”</p>\n</blockquote>\n<p><img src=\".\\pics\\作业，进程，线程管道梳理.assets\\image-20200331114405031.png\" alt=\"image-20200331114405031\"></p>\n<h1 id=\"shell中多进程管理\"><a href=\"#shell中多进程管理\" class=\"headerlink\" title=\"shell中多进程管理\"></a>shell中多进程管理</h1><h1 id=\"python中多进程管理\"><a href=\"#python中多进程管理\" class=\"headerlink\" title=\"python中多进程管理\"></a>python中多进程管理</h1><ul>\n<li>单进程：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_time_task</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;当前进程: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(os.getpid()))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结果: &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">8</span> ** <span class=\"number\">20</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;当前母进程: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(os.getpid()))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">        long_time_task()</span><br><span class=\"line\"></span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;用时&#123;&#125;秒&quot;</span>.<span class=\"built_in\">format</span>((end-start)))</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前母进程: 14236</span><br><span class=\"line\">当前进程: 14236</span><br><span class=\"line\">结果: 1152921504606846976</span><br><span class=\"line\">当前进程: 14236</span><br><span class=\"line\">结果: 1152921504606846976</span><br><span class=\"line\">用时4.01080060005188秒</span><br></pre></td></tr></table></figure>\n<ul>\n<li>多进程后：</li>\n</ul>\n<p>Process方法接收两个参数, 第一个是target，一般指向函数名，第二个时args，需要向函数传递的参数。对于创建的新进程，调用start()方法即可让其开始。我们可以使用os.getpid()打印出当前进程的名字。之所以我们使用join()方法就是为了让母进程阻塞，等待子进程都完成后才打印出总共耗时，否则输出时间只是母进程执行的时间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_time_task</span>(<span class=\"params\">i</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;子进程: &#123;&#125; - 任务&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(os.getpid(), i))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结果: &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">8</span> ** <span class=\"number\">20</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;当前母进程: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(os.getpid()))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    p1 = Process(target=long_time_task, args=(<span class=\"number\">1</span>,))</span><br><span class=\"line\">    p2 = Process(target=long_time_task, args=(<span class=\"number\">2</span>,))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;等待所有子进程完成。&#x27;</span>)</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;总共用时&#123;&#125;秒&quot;</span>.<span class=\"built_in\">format</span>((end - start)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前母进程: 6920</span><br><span class=\"line\">等待所有子进程完成。</span><br><span class=\"line\">子进程: 17020 - 任务1</span><br><span class=\"line\">子进程: 5904 - 任务2</span><br><span class=\"line\">结果: 1152921504606846976</span><br><span class=\"line\">结果: 1152921504606846976</span><br><span class=\"line\">总共用时2.131091356277466秒</span><br></pre></td></tr></table></figure>\n<h1 id=\"python调用shell的方法\"><a href=\"#python调用shell的方法\" class=\"headerlink\" title=\"python调用shell的方法\"></a>python调用shell的方法</h1><h2 id=\"os-system（cmd）\"><a href=\"#os-system（cmd）\" class=\"headerlink\" title=\"os.system（cmd）\"></a>os.system（cmd）</h2><p>返回值：shell运行指令后的状态码，int，0表示运行成功，256表示未找到。<strong>适用于shell不需要输出内容的场景</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">val = os.system(<span class=\"string\">&#x27;ls -al&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;val&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"os-popen\"><a href=\"#os-popen\" class=\"headerlink\" title=\"os.popen()\"></a>os.popen()</h2><p>返回值：文件的形式返回shell指令运行后的结果，需要获取内容时可使用read()或readlines（）方法</p>\n<h2 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h2><h2 id=\"subprocess\"><a href=\"#subprocess\" class=\"headerlink\" title=\"subprocess\"></a>subprocess</h2>","site":{"data":{}},"excerpt":"<p>进程-线程科普</p>","more":"<p>作业，进程，线程，管程，管道梳理</p>\n<p>[TOC]</p>\n<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><p>进程（process）：程序在一个数据集上的一次运行过程。是操作系统资源分配的基本单位。</p>\n<p> 线程（thread）：是进程中的一个实体，是被操作系统独立调度和执行的基本单位。一个进程包含一个或多个线程。</p>\n<blockquote>\n<p>多线程间是共用内存空间的，但有的内存只能同时被一个线程访问，有的内存只能同时被有限个线程访问。所以每个内存会有一个锁，当超额的线程访问此内存时就需要排队。当一个线程长时间占用内存时就会导致“锁死”</p>\n</blockquote>\n<p><img src=\".\\pics\\作业，进程，线程管道梳理.assets\\image-20200331114405031.png\" alt=\"image-20200331114405031\"></p>\n<h1 id=\"shell中多进程管理\"><a href=\"#shell中多进程管理\" class=\"headerlink\" title=\"shell中多进程管理\"></a>shell中多进程管理</h1><h1 id=\"python中多进程管理\"><a href=\"#python中多进程管理\" class=\"headerlink\" title=\"python中多进程管理\"></a>python中多进程管理</h1><ul>\n<li>单进程：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_time_task</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;当前进程: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(os.getpid()))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结果: &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">8</span> ** <span class=\"number\">20</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;当前母进程: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(os.getpid()))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">        long_time_task()</span><br><span class=\"line\"></span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;用时&#123;&#125;秒&quot;</span>.<span class=\"built_in\">format</span>((end-start)))</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前母进程: 14236</span><br><span class=\"line\">当前进程: 14236</span><br><span class=\"line\">结果: 1152921504606846976</span><br><span class=\"line\">当前进程: 14236</span><br><span class=\"line\">结果: 1152921504606846976</span><br><span class=\"line\">用时4.01080060005188秒</span><br></pre></td></tr></table></figure>\n<ul>\n<li>多进程后：</li>\n</ul>\n<p>Process方法接收两个参数, 第一个是target，一般指向函数名，第二个时args，需要向函数传递的参数。对于创建的新进程，调用start()方法即可让其开始。我们可以使用os.getpid()打印出当前进程的名字。之所以我们使用join()方法就是为了让母进程阻塞，等待子进程都完成后才打印出总共耗时，否则输出时间只是母进程执行的时间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_time_task</span>(<span class=\"params\">i</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;子进程: &#123;&#125; - 任务&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(os.getpid(), i))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结果: &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">8</span> ** <span class=\"number\">20</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;当前母进程: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(os.getpid()))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    p1 = Process(target=long_time_task, args=(<span class=\"number\">1</span>,))</span><br><span class=\"line\">    p2 = Process(target=long_time_task, args=(<span class=\"number\">2</span>,))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;等待所有子进程完成。&#x27;</span>)</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;总共用时&#123;&#125;秒&quot;</span>.<span class=\"built_in\">format</span>((end - start)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前母进程: 6920</span><br><span class=\"line\">等待所有子进程完成。</span><br><span class=\"line\">子进程: 17020 - 任务1</span><br><span class=\"line\">子进程: 5904 - 任务2</span><br><span class=\"line\">结果: 1152921504606846976</span><br><span class=\"line\">结果: 1152921504606846976</span><br><span class=\"line\">总共用时2.131091356277466秒</span><br></pre></td></tr></table></figure>\n<h1 id=\"python调用shell的方法\"><a href=\"#python调用shell的方法\" class=\"headerlink\" title=\"python调用shell的方法\"></a>python调用shell的方法</h1><h2 id=\"os-system（cmd）\"><a href=\"#os-system（cmd）\" class=\"headerlink\" title=\"os.system（cmd）\"></a>os.system（cmd）</h2><p>返回值：shell运行指令后的状态码，int，0表示运行成功，256表示未找到。<strong>适用于shell不需要输出内容的场景</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">val = os.system(<span class=\"string\">&#x27;ls -al&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;val&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"os-popen\"><a href=\"#os-popen\" class=\"headerlink\" title=\"os.popen()\"></a>os.popen()</h2><p>返回值：文件的形式返回shell指令运行后的结果，需要获取内容时可使用read()或readlines（）方法</p>\n<h2 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h2><h2 id=\"subprocess\"><a href=\"#subprocess\" class=\"headerlink\" title=\"subprocess\"></a>subprocess</h2>"},{"title":"初识Thrift","date":"2022-03-01T03:32:38.000Z","_content":"\nthrift入门\n\n<!-- more -->\n\n\n[TOC]\n\nRPC（远程服务调用）\n\n- thrift框架是什么，Thrift是一套包含序列化功能和支持服务通信的RPC（远程服务调用）框架，也是一种微服务框架。其主要特点是可以跨语言使用，这也是这个框架最吸引人的地方。\n- IDL(Interface Definition Language)即接口定义语言，是CORBA规范的一部分，是跨平台开发的基础。IDL提供一套通用的数据类型，并以这些数据类型来定义更为复杂的数 据类型\n\n- pipline （以java为例）\n\n1. help.thrift---文件定义抽象service\n\n   ```shell\n   namespace java tutorial\n   namespace py tutorial\n   \n   typedef i32 int // We can use typedef to get pretty names for the types we are using\n   service MultiplicationService\n   {\n           int multiply(1:int n1, 2:int n2),\n   }\n   ```\n\n2. 编译thrift文件得到service抽象类，类中定义了接口方法 public interface Iface\n\n   ```shell\n   thrift --gen java help.thrift  #生成MultiplicationService类，有虚方法 Iface\n   ```\n\n3. 自定义handler，实现（implements）service的interface（接口）\n\n   ```java\n   import org.apache.thrift.TException;\n   import tutorial.MultiplicationService;\n   \n   public class MultiplicationHandler implements MultiplicationService.Iface { //实现方法\n   \n       @Override\n       public int multiply(int n1, int n2) throws TException {\n           System.out.println(\"Multiply(\" + n1 + \",\" + n2 + \")\");\n           return n1 * n2;\n       }\n   }\n   ```\n\n4. 定义server","source":"_posts/0_代码相关/初识Thrift.md","raw":"---\ntitle: 初识Thrift\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\nthrift入门\n\n<!-- more -->\n\n\n[TOC]\n\nRPC（远程服务调用）\n\n- thrift框架是什么，Thrift是一套包含序列化功能和支持服务通信的RPC（远程服务调用）框架，也是一种微服务框架。其主要特点是可以跨语言使用，这也是这个框架最吸引人的地方。\n- IDL(Interface Definition Language)即接口定义语言，是CORBA规范的一部分，是跨平台开发的基础。IDL提供一套通用的数据类型，并以这些数据类型来定义更为复杂的数 据类型\n\n- pipline （以java为例）\n\n1. help.thrift---文件定义抽象service\n\n   ```shell\n   namespace java tutorial\n   namespace py tutorial\n   \n   typedef i32 int // We can use typedef to get pretty names for the types we are using\n   service MultiplicationService\n   {\n           int multiply(1:int n1, 2:int n2),\n   }\n   ```\n\n2. 编译thrift文件得到service抽象类，类中定义了接口方法 public interface Iface\n\n   ```shell\n   thrift --gen java help.thrift  #生成MultiplicationService类，有虚方法 Iface\n   ```\n\n3. 自定义handler，实现（implements）service的interface（接口）\n\n   ```java\n   import org.apache.thrift.TException;\n   import tutorial.MultiplicationService;\n   \n   public class MultiplicationHandler implements MultiplicationService.Iface { //实现方法\n   \n       @Override\n       public int multiply(int n1, int n2) throws TException {\n           System.out.println(\"Multiply(\" + n1 + \",\" + n2 + \")\");\n           return n1 * n2;\n       }\n   }\n   ```\n\n4. 定义server","slug":"0_代码相关/初识Thrift","published":1,"updated":"2022-03-01T03:56:00.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly56004q8s32dzfm67jq","content":"<p>thrift入门</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<p>RPC（远程服务调用）</p>\n<ul>\n<li>thrift框架是什么，Thrift是一套包含序列化功能和支持服务通信的RPC（远程服务调用）框架，也是一种微服务框架。其主要特点是可以跨语言使用，这也是这个框架最吸引人的地方。</li>\n<li><p>IDL(Interface Definition Language)即接口定义语言，是CORBA规范的一部分，是跨平台开发的基础。IDL提供一套通用的数据类型，并以这些数据类型来定义更为复杂的数 据类型</p>\n</li>\n<li><p>pipline （以java为例）</p>\n</li>\n</ul>\n<ol>\n<li><p>help.thrift—-文件定义抽象service</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace java tutorial</span><br><span class=\"line\">namespace py tutorial</span><br><span class=\"line\"></span><br><span class=\"line\">typedef i32 int // We can use typedef to get pretty names for the types we are using</span><br><span class=\"line\">service MultiplicationService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        int multiply(1:int n1, 2:int n2),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译thrift文件得到service抽象类，类中定义了接口方法 public interface Iface</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thrift --gen java help.thrift  #生成MultiplicationService类，有虚方法 Iface</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义handler，实现（implements）service的interface（接口）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.TException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tutorial.MultiplicationService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiplicationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">MultiplicationService</span>.<span class=\"title\">Iface</span> </span>&#123; <span class=\"comment\">//实现方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">multiply</span><span class=\"params\">(<span class=\"keyword\">int</span> n1, <span class=\"keyword\">int</span> n2)</span> <span class=\"keyword\">throws</span> TException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Multiply(&quot;</span> + n1 + <span class=\"string\">&quot;,&quot;</span> + n2 + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n1 * n2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义server</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>thrift入门</p>","more":"<p>[TOC]</p>\n<p>RPC（远程服务调用）</p>\n<ul>\n<li>thrift框架是什么，Thrift是一套包含序列化功能和支持服务通信的RPC（远程服务调用）框架，也是一种微服务框架。其主要特点是可以跨语言使用，这也是这个框架最吸引人的地方。</li>\n<li><p>IDL(Interface Definition Language)即接口定义语言，是CORBA规范的一部分，是跨平台开发的基础。IDL提供一套通用的数据类型，并以这些数据类型来定义更为复杂的数 据类型</p>\n</li>\n<li><p>pipline （以java为例）</p>\n</li>\n</ul>\n<ol>\n<li><p>help.thrift—-文件定义抽象service</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace java tutorial</span><br><span class=\"line\">namespace py tutorial</span><br><span class=\"line\"></span><br><span class=\"line\">typedef i32 int // We can use typedef to get pretty names for the types we are using</span><br><span class=\"line\">service MultiplicationService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        int multiply(1:int n1, 2:int n2),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译thrift文件得到service抽象类，类中定义了接口方法 public interface Iface</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thrift --gen java help.thrift  #生成MultiplicationService类，有虚方法 Iface</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义handler，实现（implements）service的interface（接口）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.TException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tutorial.MultiplicationService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiplicationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">MultiplicationService</span>.<span class=\"title\">Iface</span> </span>&#123; <span class=\"comment\">//实现方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">multiply</span><span class=\"params\">(<span class=\"keyword\">int</span> n1, <span class=\"keyword\">int</span> n2)</span> <span class=\"keyword\">throws</span> TException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Multiply(&quot;</span> + n1 + <span class=\"string\">&quot;,&quot;</span> + n2 + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n1 * n2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义server</p>\n</li>\n</ol>"},{"title":"单机模型的Spark分布式预测","date":"2022-03-01T03:32:38.000Z","_content":"\n单机模型spark分布式预测\n\n<!-- more -->\n\n\n[TOC]\n\n# 单机模型的Spark分布式预测\n\n## 1. 背景\n目前京东体系内的月活跃用户是3亿左右，在推荐、广告、营销等场景下，需要每天对这些活跃用户做不同的业务预测。单机训练的Python模型在对3亿用户预测时，需要自己写代码对数据进行拆分并用并行程序来处理，即便如此，复杂模型也往往需要几个小时甚至十几个小时的时间才能预测完。这个时长可能是用户不能忍受的。\n\n此外，代码改写和调试过程也比较繁琐和费时。\n\n基于此，我们需要有一个能把单机训练的Python模型转换成分布式预测的高效方案。\n\n## 2. 方案\n经过调研及测试，我们找到一个利用PySpark`GROUPED_MAP`类型的`pandas_udf`来对单机训练的Python模型做分布式预测的方案。\n\n`GROUPED_MAP`类型的`pandas_udf`会从`Grouped DataFrame`中取到一个group的所有数据并加载如内存中转化为`pandas.DataFrame`。所以我们在调用udf之前需要对数据进行显式分组，每个分组的所有数据应该能加载进Executor上Task的内存中。\n\n此外，借助Apache Arrow，Spark和Python之间的数据交换效率会更高。\n\n### step 1：定义pandas_udf用于预测\n定义一个`GROUPED_MAP`类型的`pandas_udf`。\n`pandas_udf`的输入参数是`pandas.DataFrame`，要求的返回也是`pandas.DataFrame`。所以写udf的过程跟写单机预测程序相同。\n\n* `pandas_udf`从main里获得model对象，适用于model是可以pickle的python对象\n```python\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\nimport pandas as pd\nimport joblib\n\nwith open('model_file_path', 'rb') as f:\n    model = joblib.load(f)\n\npredictors = ['feature1', 'feature2']\n@pandas_udf(\"pin string, class int\", PandasUDFType.GROUPED_MAP)\ndef predict_udf(pdf):\n    pred = model.predict(pdf[predictors])\n    rdf = pd.DataFrame({'pin': pdf['pin'], 'class': pred}, columns=['pin', 'class'])\n    return rdf\n```\n\n* 使用sc.addFile()分发模型文件，`pandas_udf`每次从文件加载模型，适用于不能被pickle的模型对象\n\n```python\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\nimport pandas as pd\nimport joblib\nfrom pyspark import SparkFiles\nsc = spark.sparkContext\n\nsc.addFile('model_file_path/model.pkl')\n\npredictors = ['feature1', 'feature2']\n@pandas_udf(\"pin string, class int\", PandasUDFType.GROUPED_MAP)\ndef predict_udf(pdf):\n    with open(SparkFiles.get('model.pkl'), 'rb') as f:\n        model = joblib.load(f)\n    pred = model.predict(pdf[predictors])\n    rdf = pd.DataFrame({'pin': pdf['pin'], 'class': pred}, columns=['pin', 'class'])\n    return rdf\n```\n\n* 使用sc.addPyFile()分发模型文件到executor的工作目录，`pandas_udf`每次从文件加载模型，适用于不能被pickle的模型对象\n\n```python\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\nimport pandas as pd\nimport joblib\nfrom pyspark import SparkFiles\nsc = spark.sparkContext\n\nsc.addPyFile('model_file_path/model.pkl')\n\npredictors = ['feature1', 'feature2']\n@pandas_udf(\"pin string, class int\", PandasUDFType.GROUPED_MAP)\ndef predict_udf(pdf):\n    with open('model.pkl', 'rb') as f:\n        model = joblib.load(f)\n    pred = model.predict(pdf[predictors])\n    rdf = pd.DataFrame({'pin': pdf['pin'], 'class': pred}, columns=['pin', 'class'])\n    return rdf\n```\n\n### step 2: 分组执行udf函数\n这里给出了一个做分组的方法，具体的分组大小需要根据自己的数据（特征数量及类型）和配置的Executor内存大小来确定。可以在单机上加载不同数据量进内存，看下大小，再给预测时的中间变量预留些空间，可以大致估计出来Executor上的数据量，根据这个数据量以及全部数据量计算出分组个数。\n```python\nnparts = 1000\noutput = data_df.select(\"pin\", *predictors, (f.ceil(f.rand()*nparts)).alias('grouper'))\\\n    .groupby(\"grouper\")\\\n    .apply(predict_udf)\n```\n\n## 3. 基本原理\n利用PySpark的`pandas_udf`函数的功能，将待预测的数据从分布式文件系统读取出来并划分成很多小数据集，分发给不同的节点去预测，预测之后再把结果以分布式文件的方式保存到集群上。其中`pandas_udf`函数负责`Spark DataFrame`和`pandas DataFrame`之间的转换。`pandas_udf`的执行可以分成三个阶段：\n\n* 第一个阶段：在预测之前，pandas_udf接收到Spark DataFrame，然后把它转换成pandas的DataFrame；\n* 第二个阶段：在python进程中执行udf的逻辑，并以pandas DataFrame的类型返回预测结果；\n* 第三个阶段：pandas_udf把返回的pandas DataFrame转换成Spark DataFrame\n\n其他环节跟普通的Spark程序的执行逻辑一样。\n\n（+架构图）\n\n单机并行程序的时间消耗主要在数据IO上，单机预测需要先把数据从Hive中读取出来保存到磁盘文件中，然后python再把文件载入内存做预测，预测结果写到磁盘文件中，最后把结果文件导入到Hive中。整个过程有大量的磁盘IO消耗。而改为PySpark的`pandas_udf`函数之后，省掉了从Hive到磁盘、从磁盘到python内存和最后的从磁盘到Hive的过程，剩余的IO由Spark控制和优化，从而在效率上会有很大提升。\n\n\n\n## 4. 实践\n在KuAI上使用5K集群Spark环境实现上述方案时需要额外配置一下Python环境。此处以Notebook里运行为例，Spark-submit的方式使用可以参考KuAI帮助文档的5K-Spark使用部分。\n\n### Step 1：安装python包\n\n在py35环境下安装所需要的python包\n```shell\nconda deactivate\ncodna activate py35\npip install pkg_name\n```\n\n### Step 2：压缩py35安装文件夹\n\n切换到/opt/conda/envs文件夹下，压缩py35文件夹\n\n```shell\ncd /opt/conda/envs/py35\nzip -r py35.zip *\n```\n\n### Step 3：上传到hdfs上\n在hdfs上以你的域名（邮箱前缀）建个文件夹，把py35.zip上传至该文件夹下：\n```shell\nhadoop fs -mkdir /tmp/user_name\nhadoop fs -put py35.zip /tmp/user_name/\n```\n\n### Step 4：重启pyspark kernel\n\n### Step 5：案例\n以用户的一个真实模型为例，代码如下，可以作为参考。\n\n该案例中使用的模型和数据均由量化中台部的算法工程师庞伟栋提供，在此表示感谢！\n\n```python\nimport os\nfrom pyspark.conf import SparkConf\nfrom pyspark.context import SparkContext\nfrom pyspark.sql import SparkSession \n\nsparkConf = SparkConf()\n# 设置driver及executor上的python环境\nos.environ[\"PYSPARK_PYTHON\"] = \"py35/bin/python\"\nsparkConf.set(\"spark.pyspark.python\", \"py35/bin/python\")\nsparkConf.set(\"spark.yarn.dist.archives\", \"hdfs://ns1/tmp/user_name/py35.zip#py35\")  # user_name替换成您自己的域名\n\n# 设置Driver进程的内存\nsparkConf.set('spark.driver.memory', '8G')\n# 设置Driver的CPU core数量\nsparkConf.set('spark.driver.cores', '4')\n# 设置Spark作业总共要用多少个Executor进程来执行\nsparkConf.set(\"spark.executor.instances\", \"10\")\n# 设置每个Executor进程的CPU core数量\nsparkConf.set(\"spark.executor.cores\", \"2\")\n# 设置每个Executor进程的内存\nsparkConf.set(\"spark.executor.memory\", \"9124m\")\n# 设置Spark应用的名称\nsparkConf.set(\"spark.app.name\", \"app-name\")\nsparkConf.set(\"spark.shuffle.service.enabled\", \"true\")\nsparkConf.set(\"spark.dynamicAllocation.enabled\", \"true\")\nsparkConf.set(\"spark.dynamicAllocation.executorIdleTimeout\", \"600s\")\nsparkConf.set(\"spark.driver.maxResultSize\", \"10g\")\n# 打开pyarrow\nsparkConf.set(\"spark.sql.execution.arrow.enabled\", \"true\")\n\nspark = SparkSession.builder.config(conf=sparkConf).enableHiveSupport().getOrCreate()\nsc = spark.sparkContext\n\ntx_date='2019-12-01'\ndata_df = spark.sql(\"select * from dmc_qm.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d where dt='{tx_date}'\".format(tx_date=tx_date))\n\nimport joblib\nwith open('model_100feats.pkl', 'rb') as f:\n    bestModel=joblib.load(f)\n\n# 加载模型解析函数并注册\nxgbfeatureCols = bestModel.feature_names\n# 定义打分结果表的列\nresult_key_col=['pin'] # 关键字列\nresult_prob_col='score' # 输出的打分名称\n# biz_nm\nbiz_nm={'0.0':'运营型产品','1.0':'小金库','2.0':'金条','3.0':'基金理财','4.0':'小白',\n        '5.0':'借钱业务','6.0':'产品众筹','7.0':'金融机构服务（零售）','8.0':'产险',\n        '9.0':'黄金理财','10.0':'小金卡','11.0':'固收理财','12.0':'寿险','13.0':'小白卡',\n        '14.0':'出众','15.0':'车险','16.0':'汽车金融'}\n\nfrom pyspark.sql import functions as fn\n# 转换类型\nexpr=[fn.col(c) for c in result_key_col]+[fn.col(c).cast(\"float\") for c in xgbfeatureCols]\ndata_df = data_df.select(*expr)\ndata_df=data_df.na.fill(999999)\n\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\nimport xgboost as xgb\nimport numpy as np\nimport pandas as pd\n# 定义返回的结果结构，传入的df会带着grouper字段\ntype_all = \"\"\"pin string, class int\"\"\"\n@pandas_udf(type_all, PandasUDFType.GROUPED_MAP)\ndef predict_udf(pdf):\n    # pdf is a pandas.DataFrame\n    xgb_dmatrix = xgb.DMatrix(pdf[xgbfeatureCols], feature_names=xgbfeatureCols)\n    probs = bestModel.predict(xgb_dmatrix)\n    re = np.argmax(probs, axis=1)\n    # pdf = pdf.assign(probs=probs)\n    # rdf = pd.DataFrame({'pin':pdf['pin'], 'class': re})\n    # rdf = rdf.ix[:, ['pin', 'class']]\n    rdf = pd.DataFrame({'pin':pdf['pin'], 'class': re}, columns=['pin', 'class'])\n    \n    return rdf\n\nimport pyspark.sql.functions as f\nnparts = 7670\n# 划分成nparts个group，每个task在处理一个group时，把对应的dataframe完全加载如内存中\noutput = data_df.select(\"pin\", *xgbfeatureCols, (f.ceil(f.rand()*nparts)).alias('grouper'))\\\n    .groupby(\"grouper\")\\\n    .apply(predict_udf)\n\nspark.sql('use dmr_dev')\nspark.sql('drop table if exists dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result')\nspark.sql(\"\"\"create table if not exists dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result(\npin string comment '',\nclass string comment ''\n)\"\"\")\noutput.registerTempTable('result_table')\nspark.sql('use dmr_dev')\nspark.sql('insert overwrite table dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result select * from result_table')\n```\n\n\n## 5.当变量个数超过255\n当模型的变量个数超过255时，`GROUPED_MAP`类型的`pandas_udf`会报错:\n```shell\norg.apache.spark.api.python.PythonException: Traceback (most recent call last):\nFile \"path/to/lib/spark2/python/lib/pyspark.zip/pyspark/worker.py\", line 219, in main\nfunc, profiler, deserializer, serializer = read_udfs(pickleSer, infile, eval_type)\nFile \"path/to/lib/spark2/python/lib/pyspark.zip/pyspark/worker.py\", line 148, in read_udfs\nmapper = eval(mapper_str, udfs)\nFile \"<string>\", line 1\nSyntaxError: more than 255 arguments\n```\n\n可以由两种方法来解决：\n* 升级Spark到2.4以上，但在yarn环境下，几乎不可能随时升级\n* 升级Python到3.7以上\n\n很显然，我们应该使用Python 3.7来解决这个问题。如何在5K Spark上使用Python 3.7？请移步[《5K Spark Notes -- Use Python 3.7》](http://git.jd.com/gongjuntai/sparkbasket/blob/master/5KSparkNotes-UsePython37.md)。\n\n------\n参考：https://issues.apache.org/jira/browse/SPARK-25801","source":"_posts/0_代码相关/单机模型的Spark分布式预测.md","raw":"---\ntitle: 单机模型的Spark分布式预测\ndate: 2022-03-01 11:32:38\ntags:\n    - 代码相关\n    - default\ncategories: \n    - 代码相关\n---\n\n单机模型spark分布式预测\n\n<!-- more -->\n\n\n[TOC]\n\n# 单机模型的Spark分布式预测\n\n## 1. 背景\n目前京东体系内的月活跃用户是3亿左右，在推荐、广告、营销等场景下，需要每天对这些活跃用户做不同的业务预测。单机训练的Python模型在对3亿用户预测时，需要自己写代码对数据进行拆分并用并行程序来处理，即便如此，复杂模型也往往需要几个小时甚至十几个小时的时间才能预测完。这个时长可能是用户不能忍受的。\n\n此外，代码改写和调试过程也比较繁琐和费时。\n\n基于此，我们需要有一个能把单机训练的Python模型转换成分布式预测的高效方案。\n\n## 2. 方案\n经过调研及测试，我们找到一个利用PySpark`GROUPED_MAP`类型的`pandas_udf`来对单机训练的Python模型做分布式预测的方案。\n\n`GROUPED_MAP`类型的`pandas_udf`会从`Grouped DataFrame`中取到一个group的所有数据并加载如内存中转化为`pandas.DataFrame`。所以我们在调用udf之前需要对数据进行显式分组，每个分组的所有数据应该能加载进Executor上Task的内存中。\n\n此外，借助Apache Arrow，Spark和Python之间的数据交换效率会更高。\n\n### step 1：定义pandas_udf用于预测\n定义一个`GROUPED_MAP`类型的`pandas_udf`。\n`pandas_udf`的输入参数是`pandas.DataFrame`，要求的返回也是`pandas.DataFrame`。所以写udf的过程跟写单机预测程序相同。\n\n* `pandas_udf`从main里获得model对象，适用于model是可以pickle的python对象\n```python\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\nimport pandas as pd\nimport joblib\n\nwith open('model_file_path', 'rb') as f:\n    model = joblib.load(f)\n\npredictors = ['feature1', 'feature2']\n@pandas_udf(\"pin string, class int\", PandasUDFType.GROUPED_MAP)\ndef predict_udf(pdf):\n    pred = model.predict(pdf[predictors])\n    rdf = pd.DataFrame({'pin': pdf['pin'], 'class': pred}, columns=['pin', 'class'])\n    return rdf\n```\n\n* 使用sc.addFile()分发模型文件，`pandas_udf`每次从文件加载模型，适用于不能被pickle的模型对象\n\n```python\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\nimport pandas as pd\nimport joblib\nfrom pyspark import SparkFiles\nsc = spark.sparkContext\n\nsc.addFile('model_file_path/model.pkl')\n\npredictors = ['feature1', 'feature2']\n@pandas_udf(\"pin string, class int\", PandasUDFType.GROUPED_MAP)\ndef predict_udf(pdf):\n    with open(SparkFiles.get('model.pkl'), 'rb') as f:\n        model = joblib.load(f)\n    pred = model.predict(pdf[predictors])\n    rdf = pd.DataFrame({'pin': pdf['pin'], 'class': pred}, columns=['pin', 'class'])\n    return rdf\n```\n\n* 使用sc.addPyFile()分发模型文件到executor的工作目录，`pandas_udf`每次从文件加载模型，适用于不能被pickle的模型对象\n\n```python\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\nimport pandas as pd\nimport joblib\nfrom pyspark import SparkFiles\nsc = spark.sparkContext\n\nsc.addPyFile('model_file_path/model.pkl')\n\npredictors = ['feature1', 'feature2']\n@pandas_udf(\"pin string, class int\", PandasUDFType.GROUPED_MAP)\ndef predict_udf(pdf):\n    with open('model.pkl', 'rb') as f:\n        model = joblib.load(f)\n    pred = model.predict(pdf[predictors])\n    rdf = pd.DataFrame({'pin': pdf['pin'], 'class': pred}, columns=['pin', 'class'])\n    return rdf\n```\n\n### step 2: 分组执行udf函数\n这里给出了一个做分组的方法，具体的分组大小需要根据自己的数据（特征数量及类型）和配置的Executor内存大小来确定。可以在单机上加载不同数据量进内存，看下大小，再给预测时的中间变量预留些空间，可以大致估计出来Executor上的数据量，根据这个数据量以及全部数据量计算出分组个数。\n```python\nnparts = 1000\noutput = data_df.select(\"pin\", *predictors, (f.ceil(f.rand()*nparts)).alias('grouper'))\\\n    .groupby(\"grouper\")\\\n    .apply(predict_udf)\n```\n\n## 3. 基本原理\n利用PySpark的`pandas_udf`函数的功能，将待预测的数据从分布式文件系统读取出来并划分成很多小数据集，分发给不同的节点去预测，预测之后再把结果以分布式文件的方式保存到集群上。其中`pandas_udf`函数负责`Spark DataFrame`和`pandas DataFrame`之间的转换。`pandas_udf`的执行可以分成三个阶段：\n\n* 第一个阶段：在预测之前，pandas_udf接收到Spark DataFrame，然后把它转换成pandas的DataFrame；\n* 第二个阶段：在python进程中执行udf的逻辑，并以pandas DataFrame的类型返回预测结果；\n* 第三个阶段：pandas_udf把返回的pandas DataFrame转换成Spark DataFrame\n\n其他环节跟普通的Spark程序的执行逻辑一样。\n\n（+架构图）\n\n单机并行程序的时间消耗主要在数据IO上，单机预测需要先把数据从Hive中读取出来保存到磁盘文件中，然后python再把文件载入内存做预测，预测结果写到磁盘文件中，最后把结果文件导入到Hive中。整个过程有大量的磁盘IO消耗。而改为PySpark的`pandas_udf`函数之后，省掉了从Hive到磁盘、从磁盘到python内存和最后的从磁盘到Hive的过程，剩余的IO由Spark控制和优化，从而在效率上会有很大提升。\n\n\n\n## 4. 实践\n在KuAI上使用5K集群Spark环境实现上述方案时需要额外配置一下Python环境。此处以Notebook里运行为例，Spark-submit的方式使用可以参考KuAI帮助文档的5K-Spark使用部分。\n\n### Step 1：安装python包\n\n在py35环境下安装所需要的python包\n```shell\nconda deactivate\ncodna activate py35\npip install pkg_name\n```\n\n### Step 2：压缩py35安装文件夹\n\n切换到/opt/conda/envs文件夹下，压缩py35文件夹\n\n```shell\ncd /opt/conda/envs/py35\nzip -r py35.zip *\n```\n\n### Step 3：上传到hdfs上\n在hdfs上以你的域名（邮箱前缀）建个文件夹，把py35.zip上传至该文件夹下：\n```shell\nhadoop fs -mkdir /tmp/user_name\nhadoop fs -put py35.zip /tmp/user_name/\n```\n\n### Step 4：重启pyspark kernel\n\n### Step 5：案例\n以用户的一个真实模型为例，代码如下，可以作为参考。\n\n该案例中使用的模型和数据均由量化中台部的算法工程师庞伟栋提供，在此表示感谢！\n\n```python\nimport os\nfrom pyspark.conf import SparkConf\nfrom pyspark.context import SparkContext\nfrom pyspark.sql import SparkSession \n\nsparkConf = SparkConf()\n# 设置driver及executor上的python环境\nos.environ[\"PYSPARK_PYTHON\"] = \"py35/bin/python\"\nsparkConf.set(\"spark.pyspark.python\", \"py35/bin/python\")\nsparkConf.set(\"spark.yarn.dist.archives\", \"hdfs://ns1/tmp/user_name/py35.zip#py35\")  # user_name替换成您自己的域名\n\n# 设置Driver进程的内存\nsparkConf.set('spark.driver.memory', '8G')\n# 设置Driver的CPU core数量\nsparkConf.set('spark.driver.cores', '4')\n# 设置Spark作业总共要用多少个Executor进程来执行\nsparkConf.set(\"spark.executor.instances\", \"10\")\n# 设置每个Executor进程的CPU core数量\nsparkConf.set(\"spark.executor.cores\", \"2\")\n# 设置每个Executor进程的内存\nsparkConf.set(\"spark.executor.memory\", \"9124m\")\n# 设置Spark应用的名称\nsparkConf.set(\"spark.app.name\", \"app-name\")\nsparkConf.set(\"spark.shuffle.service.enabled\", \"true\")\nsparkConf.set(\"spark.dynamicAllocation.enabled\", \"true\")\nsparkConf.set(\"spark.dynamicAllocation.executorIdleTimeout\", \"600s\")\nsparkConf.set(\"spark.driver.maxResultSize\", \"10g\")\n# 打开pyarrow\nsparkConf.set(\"spark.sql.execution.arrow.enabled\", \"true\")\n\nspark = SparkSession.builder.config(conf=sparkConf).enableHiveSupport().getOrCreate()\nsc = spark.sparkContext\n\ntx_date='2019-12-01'\ndata_df = spark.sql(\"select * from dmc_qm.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d where dt='{tx_date}'\".format(tx_date=tx_date))\n\nimport joblib\nwith open('model_100feats.pkl', 'rb') as f:\n    bestModel=joblib.load(f)\n\n# 加载模型解析函数并注册\nxgbfeatureCols = bestModel.feature_names\n# 定义打分结果表的列\nresult_key_col=['pin'] # 关键字列\nresult_prob_col='score' # 输出的打分名称\n# biz_nm\nbiz_nm={'0.0':'运营型产品','1.0':'小金库','2.0':'金条','3.0':'基金理财','4.0':'小白',\n        '5.0':'借钱业务','6.0':'产品众筹','7.0':'金融机构服务（零售）','8.0':'产险',\n        '9.0':'黄金理财','10.0':'小金卡','11.0':'固收理财','12.0':'寿险','13.0':'小白卡',\n        '14.0':'出众','15.0':'车险','16.0':'汽车金融'}\n\nfrom pyspark.sql import functions as fn\n# 转换类型\nexpr=[fn.col(c) for c in result_key_col]+[fn.col(c).cast(\"float\") for c in xgbfeatureCols]\ndata_df = data_df.select(*expr)\ndata_df=data_df.na.fill(999999)\n\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\nimport xgboost as xgb\nimport numpy as np\nimport pandas as pd\n# 定义返回的结果结构，传入的df会带着grouper字段\ntype_all = \"\"\"pin string, class int\"\"\"\n@pandas_udf(type_all, PandasUDFType.GROUPED_MAP)\ndef predict_udf(pdf):\n    # pdf is a pandas.DataFrame\n    xgb_dmatrix = xgb.DMatrix(pdf[xgbfeatureCols], feature_names=xgbfeatureCols)\n    probs = bestModel.predict(xgb_dmatrix)\n    re = np.argmax(probs, axis=1)\n    # pdf = pdf.assign(probs=probs)\n    # rdf = pd.DataFrame({'pin':pdf['pin'], 'class': re})\n    # rdf = rdf.ix[:, ['pin', 'class']]\n    rdf = pd.DataFrame({'pin':pdf['pin'], 'class': re}, columns=['pin', 'class'])\n    \n    return rdf\n\nimport pyspark.sql.functions as f\nnparts = 7670\n# 划分成nparts个group，每个task在处理一个group时，把对应的dataframe完全加载如内存中\noutput = data_df.select(\"pin\", *xgbfeatureCols, (f.ceil(f.rand()*nparts)).alias('grouper'))\\\n    .groupby(\"grouper\")\\\n    .apply(predict_udf)\n\nspark.sql('use dmr_dev')\nspark.sql('drop table if exists dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result')\nspark.sql(\"\"\"create table if not exists dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result(\npin string comment '',\nclass string comment ''\n)\"\"\")\noutput.registerTempTable('result_table')\nspark.sql('use dmr_dev')\nspark.sql('insert overwrite table dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result select * from result_table')\n```\n\n\n## 5.当变量个数超过255\n当模型的变量个数超过255时，`GROUPED_MAP`类型的`pandas_udf`会报错:\n```shell\norg.apache.spark.api.python.PythonException: Traceback (most recent call last):\nFile \"path/to/lib/spark2/python/lib/pyspark.zip/pyspark/worker.py\", line 219, in main\nfunc, profiler, deserializer, serializer = read_udfs(pickleSer, infile, eval_type)\nFile \"path/to/lib/spark2/python/lib/pyspark.zip/pyspark/worker.py\", line 148, in read_udfs\nmapper = eval(mapper_str, udfs)\nFile \"<string>\", line 1\nSyntaxError: more than 255 arguments\n```\n\n可以由两种方法来解决：\n* 升级Spark到2.4以上，但在yarn环境下，几乎不可能随时升级\n* 升级Python到3.7以上\n\n很显然，我们应该使用Python 3.7来解决这个问题。如何在5K Spark上使用Python 3.7？请移步[《5K Spark Notes -- Use Python 3.7》](http://git.jd.com/gongjuntai/sparkbasket/blob/master/5KSparkNotes-UsePython37.md)。\n\n------\n参考：https://issues.apache.org/jira/browse/SPARK-25801","slug":"0_代码相关/单机模型的Spark分布式预测","published":1,"updated":"2022-03-01T03:56:16.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly56004t8s323vuo1l8n","content":"<p>单机模型spark分布式预测</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"单机模型的Spark分布式预测\"><a href=\"#单机模型的Spark分布式预测\" class=\"headerlink\" title=\"单机模型的Spark分布式预测\"></a>单机模型的Spark分布式预测</h1><h2 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h2><p>目前京东体系内的月活跃用户是3亿左右，在推荐、广告、营销等场景下，需要每天对这些活跃用户做不同的业务预测。单机训练的Python模型在对3亿用户预测时，需要自己写代码对数据进行拆分并用并行程序来处理，即便如此，复杂模型也往往需要几个小时甚至十几个小时的时间才能预测完。这个时长可能是用户不能忍受的。</p>\n<p>此外，代码改写和调试过程也比较繁琐和费时。</p>\n<p>基于此，我们需要有一个能把单机训练的Python模型转换成分布式预测的高效方案。</p>\n<h2 id=\"2-方案\"><a href=\"#2-方案\" class=\"headerlink\" title=\"2. 方案\"></a>2. 方案</h2><p>经过调研及测试，我们找到一个利用PySpark<code>GROUPED_MAP</code>类型的<code>pandas_udf</code>来对单机训练的Python模型做分布式预测的方案。</p>\n<p><code>GROUPED_MAP</code>类型的<code>pandas_udf</code>会从<code>Grouped DataFrame</code>中取到一个group的所有数据并加载如内存中转化为<code>pandas.DataFrame</code>。所以我们在调用udf之前需要对数据进行显式分组，每个分组的所有数据应该能加载进Executor上Task的内存中。</p>\n<p>此外，借助Apache Arrow，Spark和Python之间的数据交换效率会更高。</p>\n<h3 id=\"step-1：定义pandas-udf用于预测\"><a href=\"#step-1：定义pandas-udf用于预测\" class=\"headerlink\" title=\"step 1：定义pandas_udf用于预测\"></a>step 1：定义pandas_udf用于预测</h3><p>定义一个<code>GROUPED_MAP</code>类型的<code>pandas_udf</code>。<br><code>pandas_udf</code>的输入参数是<code>pandas.DataFrame</code>，要求的返回也是<code>pandas.DataFrame</code>。所以写udf的过程跟写单机预测程序相同。</p>\n<ul>\n<li><p><code>pandas_udf</code>从main里获得model对象，适用于model是可以pickle的python对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.functions <span class=\"keyword\">import</span> pandas_udf, PandasUDFType</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;model_file_path&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    model = joblib.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\">predictors = [<span class=\"string\">&#x27;feature1&#x27;</span>, <span class=\"string\">&#x27;feature2&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">@pandas_udf(<span class=\"params\"><span class=\"string\">&quot;pin string, class int&quot;</span>, PandasUDFType.GROUPED_MAP</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_udf</span>(<span class=\"params\">pdf</span>):</span></span><br><span class=\"line\">    pred = model.predict(pdf[predictors])</span><br><span class=\"line\">    rdf = pd.DataFrame(&#123;<span class=\"string\">&#x27;pin&#x27;</span>: pdf[<span class=\"string\">&#x27;pin&#x27;</span>], <span class=\"string\">&#x27;class&#x27;</span>: pred&#125;, columns=[<span class=\"string\">&#x27;pin&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用sc.addFile()分发模型文件，<code>pandas_udf</code>每次从文件加载模型，适用于不能被pickle的模型对象</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.functions <span class=\"keyword\">import</span> pandas_udf, PandasUDFType</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkFiles</span><br><span class=\"line\">sc = spark.sparkContext</span><br><span class=\"line\"></span><br><span class=\"line\">sc.addFile(<span class=\"string\">&#x27;model_file_path/model.pkl&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">predictors = [<span class=\"string\">&#x27;feature1&#x27;</span>, <span class=\"string\">&#x27;feature2&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">@pandas_udf(<span class=\"params\"><span class=\"string\">&quot;pin string, class int&quot;</span>, PandasUDFType.GROUPED_MAP</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_udf</span>(<span class=\"params\">pdf</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(SparkFiles.get(<span class=\"string\">&#x27;model.pkl&#x27;</span>), <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        model = joblib.load(f)</span><br><span class=\"line\">    pred = model.predict(pdf[predictors])</span><br><span class=\"line\">    rdf = pd.DataFrame(&#123;<span class=\"string\">&#x27;pin&#x27;</span>: pdf[<span class=\"string\">&#x27;pin&#x27;</span>], <span class=\"string\">&#x27;class&#x27;</span>: pred&#125;, columns=[<span class=\"string\">&#x27;pin&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdf</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用sc.addPyFile()分发模型文件到executor的工作目录，<code>pandas_udf</code>每次从文件加载模型，适用于不能被pickle的模型对象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.functions <span class=\"keyword\">import</span> pandas_udf, PandasUDFType</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkFiles</span><br><span class=\"line\">sc = spark.sparkContext</span><br><span class=\"line\"></span><br><span class=\"line\">sc.addPyFile(<span class=\"string\">&#x27;model_file_path/model.pkl&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">predictors = [<span class=\"string\">&#x27;feature1&#x27;</span>, <span class=\"string\">&#x27;feature2&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">@pandas_udf(<span class=\"params\"><span class=\"string\">&quot;pin string, class int&quot;</span>, PandasUDFType.GROUPED_MAP</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_udf</span>(<span class=\"params\">pdf</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;model.pkl&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        model = joblib.load(f)</span><br><span class=\"line\">    pred = model.predict(pdf[predictors])</span><br><span class=\"line\">    rdf = pd.DataFrame(&#123;<span class=\"string\">&#x27;pin&#x27;</span>: pdf[<span class=\"string\">&#x27;pin&#x27;</span>], <span class=\"string\">&#x27;class&#x27;</span>: pred&#125;, columns=[<span class=\"string\">&#x27;pin&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdf</span><br></pre></td></tr></table></figure>\n<h3 id=\"step-2-分组执行udf函数\"><a href=\"#step-2-分组执行udf函数\" class=\"headerlink\" title=\"step 2: 分组执行udf函数\"></a>step 2: 分组执行udf函数</h3><p>这里给出了一个做分组的方法，具体的分组大小需要根据自己的数据（特征数量及类型）和配置的Executor内存大小来确定。可以在单机上加载不同数据量进内存，看下大小，再给预测时的中间变量预留些空间，可以大致估计出来Executor上的数据量，根据这个数据量以及全部数据量计算出分组个数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nparts = <span class=\"number\">1000</span></span><br><span class=\"line\">output = data_df.select(<span class=\"string\">&quot;pin&quot;</span>, *predictors, (f.ceil(f.rand()*nparts)).alias(<span class=\"string\">&#x27;grouper&#x27;</span>))\\</span><br><span class=\"line\">    .groupby(<span class=\"string\">&quot;grouper&quot;</span>)\\</span><br><span class=\"line\">    .apply(predict_udf)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-基本原理\"><a href=\"#3-基本原理\" class=\"headerlink\" title=\"3. 基本原理\"></a>3. 基本原理</h2><p>利用PySpark的<code>pandas_udf</code>函数的功能，将待预测的数据从分布式文件系统读取出来并划分成很多小数据集，分发给不同的节点去预测，预测之后再把结果以分布式文件的方式保存到集群上。其中<code>pandas_udf</code>函数负责<code>Spark DataFrame</code>和<code>pandas DataFrame</code>之间的转换。<code>pandas_udf</code>的执行可以分成三个阶段：</p>\n<ul>\n<li>第一个阶段：在预测之前，pandas_udf接收到Spark DataFrame，然后把它转换成pandas的DataFrame；</li>\n<li>第二个阶段：在python进程中执行udf的逻辑，并以pandas DataFrame的类型返回预测结果；</li>\n<li>第三个阶段：pandas_udf把返回的pandas DataFrame转换成Spark DataFrame</li>\n</ul>\n<p>其他环节跟普通的Spark程序的执行逻辑一样。</p>\n<p>（+架构图）</p>\n<p>单机并行程序的时间消耗主要在数据IO上，单机预测需要先把数据从Hive中读取出来保存到磁盘文件中，然后python再把文件载入内存做预测，预测结果写到磁盘文件中，最后把结果文件导入到Hive中。整个过程有大量的磁盘IO消耗。而改为PySpark的<code>pandas_udf</code>函数之后，省掉了从Hive到磁盘、从磁盘到python内存和最后的从磁盘到Hive的过程，剩余的IO由Spark控制和优化，从而在效率上会有很大提升。</p>\n<h2 id=\"4-实践\"><a href=\"#4-实践\" class=\"headerlink\" title=\"4. 实践\"></a>4. 实践</h2><p>在KuAI上使用5K集群Spark环境实现上述方案时需要额外配置一下Python环境。此处以Notebook里运行为例，Spark-submit的方式使用可以参考KuAI帮助文档的5K-Spark使用部分。</p>\n<h3 id=\"Step-1：安装python包\"><a href=\"#Step-1：安装python包\" class=\"headerlink\" title=\"Step 1：安装python包\"></a>Step 1：安装python包</h3><p>在py35环境下安装所需要的python包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda deactivate</span><br><span class=\"line\">codna activate py35</span><br><span class=\"line\">pip install pkg_name</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Step-2：压缩py35安装文件夹\"><a href=\"#Step-2：压缩py35安装文件夹\" class=\"headerlink\" title=\"Step 2：压缩py35安装文件夹\"></a>Step 2：压缩py35安装文件夹</h3><p>切换到/opt/conda/envs文件夹下，压缩py35文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/conda/envs/py35</span><br><span class=\"line\">zip -r py35.zip *</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3：上传到hdfs上\"><a href=\"#Step-3：上传到hdfs上\" class=\"headerlink\" title=\"Step 3：上传到hdfs上\"></a>Step 3：上传到hdfs上</h3><p>在hdfs上以你的域名（邮箱前缀）建个文件夹，把py35.zip上传至该文件夹下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -mkdir /tmp/user_name</span><br><span class=\"line\">hadoop fs -put py35.zip /tmp/user_name/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Step-4：重启pyspark-kernel\"><a href=\"#Step-4：重启pyspark-kernel\" class=\"headerlink\" title=\"Step 4：重启pyspark kernel\"></a>Step 4：重启pyspark kernel</h3><h3 id=\"Step-5：案例\"><a href=\"#Step-5：案例\" class=\"headerlink\" title=\"Step 5：案例\"></a>Step 5：案例</h3><p>以用户的一个真实模型为例，代码如下，可以作为参考。</p>\n<p>该案例中使用的模型和数据均由量化中台部的算法工程师庞伟栋提供，在此表示感谢！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.conf <span class=\"keyword\">import</span> SparkConf</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.context <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> SparkSession </span><br><span class=\"line\"></span><br><span class=\"line\">sparkConf = SparkConf()</span><br><span class=\"line\"><span class=\"comment\"># 设置driver及executor上的python环境</span></span><br><span class=\"line\">os.environ[<span class=\"string\">&quot;PYSPARK_PYTHON&quot;</span>] = <span class=\"string\">&quot;py35/bin/python&quot;</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.pyspark.python&quot;</span>, <span class=\"string\">&quot;py35/bin/python&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.yarn.dist.archives&quot;</span>, <span class=\"string\">&quot;hdfs://ns1/tmp/user_name/py35.zip#py35&quot;</span>)  <span class=\"comment\"># user_name替换成您自己的域名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置Driver进程的内存</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;spark.driver.memory&#x27;</span>, <span class=\"string\">&#x27;8G&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置Driver的CPU core数量</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;spark.driver.cores&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置Spark作业总共要用多少个Executor进程来执行</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.executor.instances&quot;</span>, <span class=\"string\">&quot;10&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置每个Executor进程的CPU core数量</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.executor.cores&quot;</span>, <span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置每个Executor进程的内存</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.executor.memory&quot;</span>, <span class=\"string\">&quot;9124m&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置Spark应用的名称</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.app.name&quot;</span>, <span class=\"string\">&quot;app-name&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.shuffle.service.enabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.dynamicAllocation.enabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.dynamicAllocation.executorIdleTimeout&quot;</span>, <span class=\"string\">&quot;600s&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.driver.maxResultSize&quot;</span>, <span class=\"string\">&quot;10g&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 打开pyarrow</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.sql.execution.arrow.enabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">spark = SparkSession.builder.config(conf=sparkConf).enableHiveSupport().getOrCreate()</span><br><span class=\"line\">sc = spark.sparkContext</span><br><span class=\"line\"></span><br><span class=\"line\">tx_date=<span class=\"string\">&#x27;2019-12-01&#x27;</span></span><br><span class=\"line\">data_df = spark.sql(<span class=\"string\">&quot;select * from dmc_qm.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d where dt=&#x27;&#123;tx_date&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(tx_date=tx_date))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;model_100feats.pkl&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    bestModel=joblib.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载模型解析函数并注册</span></span><br><span class=\"line\">xgbfeatureCols = bestModel.feature_names</span><br><span class=\"line\"><span class=\"comment\"># 定义打分结果表的列</span></span><br><span class=\"line\">result_key_col=[<span class=\"string\">&#x27;pin&#x27;</span>] <span class=\"comment\"># 关键字列</span></span><br><span class=\"line\">result_prob_col=<span class=\"string\">&#x27;score&#x27;</span> <span class=\"comment\"># 输出的打分名称</span></span><br><span class=\"line\"><span class=\"comment\"># biz_nm</span></span><br><span class=\"line\">biz_nm=&#123;<span class=\"string\">&#x27;0.0&#x27;</span>:<span class=\"string\">&#x27;运营型产品&#x27;</span>,<span class=\"string\">&#x27;1.0&#x27;</span>:<span class=\"string\">&#x27;小金库&#x27;</span>,<span class=\"string\">&#x27;2.0&#x27;</span>:<span class=\"string\">&#x27;金条&#x27;</span>,<span class=\"string\">&#x27;3.0&#x27;</span>:<span class=\"string\">&#x27;基金理财&#x27;</span>,<span class=\"string\">&#x27;4.0&#x27;</span>:<span class=\"string\">&#x27;小白&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;5.0&#x27;</span>:<span class=\"string\">&#x27;借钱业务&#x27;</span>,<span class=\"string\">&#x27;6.0&#x27;</span>:<span class=\"string\">&#x27;产品众筹&#x27;</span>,<span class=\"string\">&#x27;7.0&#x27;</span>:<span class=\"string\">&#x27;金融机构服务（零售）&#x27;</span>,<span class=\"string\">&#x27;8.0&#x27;</span>:<span class=\"string\">&#x27;产险&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;9.0&#x27;</span>:<span class=\"string\">&#x27;黄金理财&#x27;</span>,<span class=\"string\">&#x27;10.0&#x27;</span>:<span class=\"string\">&#x27;小金卡&#x27;</span>,<span class=\"string\">&#x27;11.0&#x27;</span>:<span class=\"string\">&#x27;固收理财&#x27;</span>,<span class=\"string\">&#x27;12.0&#x27;</span>:<span class=\"string\">&#x27;寿险&#x27;</span>,<span class=\"string\">&#x27;13.0&#x27;</span>:<span class=\"string\">&#x27;小白卡&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;14.0&#x27;</span>:<span class=\"string\">&#x27;出众&#x27;</span>,<span class=\"string\">&#x27;15.0&#x27;</span>:<span class=\"string\">&#x27;车险&#x27;</span>,<span class=\"string\">&#x27;16.0&#x27;</span>:<span class=\"string\">&#x27;汽车金融&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> functions <span class=\"keyword\">as</span> fn</span><br><span class=\"line\"><span class=\"comment\"># 转换类型</span></span><br><span class=\"line\">expr=[fn.col(c) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> result_key_col]+[fn.col(c).cast(<span class=\"string\">&quot;float&quot;</span>) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> xgbfeatureCols]</span><br><span class=\"line\">data_df = data_df.select(*expr)</span><br><span class=\"line\">data_df=data_df.na.fill(<span class=\"number\">999999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.functions <span class=\"keyword\">import</span> pandas_udf, PandasUDFType</span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"comment\"># 定义返回的结果结构，传入的df会带着grouper字段</span></span><br><span class=\"line\">type_all = <span class=\"string\">&quot;&quot;&quot;pin string, class int&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">@pandas_udf(<span class=\"params\">type_all, PandasUDFType.GROUPED_MAP</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_udf</span>(<span class=\"params\">pdf</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># pdf is a pandas.DataFrame</span></span><br><span class=\"line\">    xgb_dmatrix = xgb.DMatrix(pdf[xgbfeatureCols], feature_names=xgbfeatureCols)</span><br><span class=\"line\">    probs = bestModel.predict(xgb_dmatrix)</span><br><span class=\"line\">    re = np.argmax(probs, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># pdf = pdf.assign(probs=probs)</span></span><br><span class=\"line\">    <span class=\"comment\"># rdf = pd.DataFrame(&#123;&#x27;pin&#x27;:pdf[&#x27;pin&#x27;], &#x27;class&#x27;: re&#125;)</span></span><br><span class=\"line\">    <span class=\"comment\"># rdf = rdf.ix[:, [&#x27;pin&#x27;, &#x27;class&#x27;]]</span></span><br><span class=\"line\">    rdf = pd.DataFrame(&#123;<span class=\"string\">&#x27;pin&#x27;</span>:pdf[<span class=\"string\">&#x27;pin&#x27;</span>], <span class=\"string\">&#x27;class&#x27;</span>: re&#125;, columns=[<span class=\"string\">&#x27;pin&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pyspark.sql.functions <span class=\"keyword\">as</span> f</span><br><span class=\"line\">nparts = <span class=\"number\">7670</span></span><br><span class=\"line\"><span class=\"comment\"># 划分成nparts个group，每个task在处理一个group时，把对应的dataframe完全加载如内存中</span></span><br><span class=\"line\">output = data_df.select(<span class=\"string\">&quot;pin&quot;</span>, *xgbfeatureCols, (f.ceil(f.rand()*nparts)).alias(<span class=\"string\">&#x27;grouper&#x27;</span>))\\</span><br><span class=\"line\">    .groupby(<span class=\"string\">&quot;grouper&quot;</span>)\\</span><br><span class=\"line\">    .apply(predict_udf)</span><br><span class=\"line\"></span><br><span class=\"line\">spark.sql(<span class=\"string\">&#x27;use dmr_dev&#x27;</span>)</span><br><span class=\"line\">spark.sql(<span class=\"string\">&#x27;drop table if exists dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result&#x27;</span>)</span><br><span class=\"line\">spark.sql(<span class=\"string\">&quot;&quot;&quot;create table if not exists dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result(</span></span><br><span class=\"line\"><span class=\"string\">pin string comment &#x27;&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">class string comment &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">)&quot;&quot;&quot;</span>)</span><br><span class=\"line\">output.registerTempTable(<span class=\"string\">&#x27;result_table&#x27;</span>)</span><br><span class=\"line\">spark.sql(<span class=\"string\">&#x27;use dmr_dev&#x27;</span>)</span><br><span class=\"line\">spark.sql(<span class=\"string\">&#x27;insert overwrite table dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result select * from result_table&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-当变量个数超过255\"><a href=\"#5-当变量个数超过255\" class=\"headerlink\" title=\"5.当变量个数超过255\"></a>5.当变量个数超过255</h2><p>当模型的变量个数超过255时，<code>GROUPED_MAP</code>类型的<code>pandas_udf</code>会报错:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.spark.api.python.PythonException: Traceback (most recent call last):</span><br><span class=\"line\">File &quot;path/to/lib/spark2/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 219, in main</span><br><span class=\"line\">func, profiler, deserializer, serializer = read_udfs(pickleSer, infile, eval_type)</span><br><span class=\"line\">File &quot;path/to/lib/spark2/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 148, in read_udfs</span><br><span class=\"line\">mapper = eval(mapper_str, udfs)</span><br><span class=\"line\">File &quot;&lt;string&gt;&quot;, line 1</span><br><span class=\"line\">SyntaxError: more than 255 arguments</span><br></pre></td></tr></table></figure></p>\n<p>可以由两种方法来解决：</p>\n<ul>\n<li>升级Spark到2.4以上，但在yarn环境下，几乎不可能随时升级</li>\n<li>升级Python到3.7以上</li>\n</ul>\n<p>很显然，我们应该使用Python 3.7来解决这个问题。如何在5K Spark上使用Python 3.7？请移步<a href=\"http://git.jd.com/gongjuntai/sparkbasket/blob/master/5KSparkNotes-UsePython37.md\">《5K Spark Notes — Use Python 3.7》</a>。</p>\n<hr>\n<p>参考：<a href=\"https://issues.apache.org/jira/browse/SPARK-25801\">https://issues.apache.org/jira/browse/SPARK-25801</a></p>\n","site":{"data":{}},"excerpt":"<p>单机模型spark分布式预测</p>","more":"<p>[TOC]</p>\n<h1 id=\"单机模型的Spark分布式预测\"><a href=\"#单机模型的Spark分布式预测\" class=\"headerlink\" title=\"单机模型的Spark分布式预测\"></a>单机模型的Spark分布式预测</h1><h2 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h2><p>目前京东体系内的月活跃用户是3亿左右，在推荐、广告、营销等场景下，需要每天对这些活跃用户做不同的业务预测。单机训练的Python模型在对3亿用户预测时，需要自己写代码对数据进行拆分并用并行程序来处理，即便如此，复杂模型也往往需要几个小时甚至十几个小时的时间才能预测完。这个时长可能是用户不能忍受的。</p>\n<p>此外，代码改写和调试过程也比较繁琐和费时。</p>\n<p>基于此，我们需要有一个能把单机训练的Python模型转换成分布式预测的高效方案。</p>\n<h2 id=\"2-方案\"><a href=\"#2-方案\" class=\"headerlink\" title=\"2. 方案\"></a>2. 方案</h2><p>经过调研及测试，我们找到一个利用PySpark<code>GROUPED_MAP</code>类型的<code>pandas_udf</code>来对单机训练的Python模型做分布式预测的方案。</p>\n<p><code>GROUPED_MAP</code>类型的<code>pandas_udf</code>会从<code>Grouped DataFrame</code>中取到一个group的所有数据并加载如内存中转化为<code>pandas.DataFrame</code>。所以我们在调用udf之前需要对数据进行显式分组，每个分组的所有数据应该能加载进Executor上Task的内存中。</p>\n<p>此外，借助Apache Arrow，Spark和Python之间的数据交换效率会更高。</p>\n<h3 id=\"step-1：定义pandas-udf用于预测\"><a href=\"#step-1：定义pandas-udf用于预测\" class=\"headerlink\" title=\"step 1：定义pandas_udf用于预测\"></a>step 1：定义pandas_udf用于预测</h3><p>定义一个<code>GROUPED_MAP</code>类型的<code>pandas_udf</code>。<br><code>pandas_udf</code>的输入参数是<code>pandas.DataFrame</code>，要求的返回也是<code>pandas.DataFrame</code>。所以写udf的过程跟写单机预测程序相同。</p>\n<ul>\n<li><p><code>pandas_udf</code>从main里获得model对象，适用于model是可以pickle的python对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.functions <span class=\"keyword\">import</span> pandas_udf, PandasUDFType</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;model_file_path&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    model = joblib.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\">predictors = [<span class=\"string\">&#x27;feature1&#x27;</span>, <span class=\"string\">&#x27;feature2&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">@pandas_udf(<span class=\"params\"><span class=\"string\">&quot;pin string, class int&quot;</span>, PandasUDFType.GROUPED_MAP</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_udf</span>(<span class=\"params\">pdf</span>):</span></span><br><span class=\"line\">    pred = model.predict(pdf[predictors])</span><br><span class=\"line\">    rdf = pd.DataFrame(&#123;<span class=\"string\">&#x27;pin&#x27;</span>: pdf[<span class=\"string\">&#x27;pin&#x27;</span>], <span class=\"string\">&#x27;class&#x27;</span>: pred&#125;, columns=[<span class=\"string\">&#x27;pin&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用sc.addFile()分发模型文件，<code>pandas_udf</code>每次从文件加载模型，适用于不能被pickle的模型对象</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.functions <span class=\"keyword\">import</span> pandas_udf, PandasUDFType</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkFiles</span><br><span class=\"line\">sc = spark.sparkContext</span><br><span class=\"line\"></span><br><span class=\"line\">sc.addFile(<span class=\"string\">&#x27;model_file_path/model.pkl&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">predictors = [<span class=\"string\">&#x27;feature1&#x27;</span>, <span class=\"string\">&#x27;feature2&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">@pandas_udf(<span class=\"params\"><span class=\"string\">&quot;pin string, class int&quot;</span>, PandasUDFType.GROUPED_MAP</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_udf</span>(<span class=\"params\">pdf</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(SparkFiles.get(<span class=\"string\">&#x27;model.pkl&#x27;</span>), <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        model = joblib.load(f)</span><br><span class=\"line\">    pred = model.predict(pdf[predictors])</span><br><span class=\"line\">    rdf = pd.DataFrame(&#123;<span class=\"string\">&#x27;pin&#x27;</span>: pdf[<span class=\"string\">&#x27;pin&#x27;</span>], <span class=\"string\">&#x27;class&#x27;</span>: pred&#125;, columns=[<span class=\"string\">&#x27;pin&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdf</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用sc.addPyFile()分发模型文件到executor的工作目录，<code>pandas_udf</code>每次从文件加载模型，适用于不能被pickle的模型对象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.functions <span class=\"keyword\">import</span> pandas_udf, PandasUDFType</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkFiles</span><br><span class=\"line\">sc = spark.sparkContext</span><br><span class=\"line\"></span><br><span class=\"line\">sc.addPyFile(<span class=\"string\">&#x27;model_file_path/model.pkl&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">predictors = [<span class=\"string\">&#x27;feature1&#x27;</span>, <span class=\"string\">&#x27;feature2&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">@pandas_udf(<span class=\"params\"><span class=\"string\">&quot;pin string, class int&quot;</span>, PandasUDFType.GROUPED_MAP</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_udf</span>(<span class=\"params\">pdf</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;model.pkl&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        model = joblib.load(f)</span><br><span class=\"line\">    pred = model.predict(pdf[predictors])</span><br><span class=\"line\">    rdf = pd.DataFrame(&#123;<span class=\"string\">&#x27;pin&#x27;</span>: pdf[<span class=\"string\">&#x27;pin&#x27;</span>], <span class=\"string\">&#x27;class&#x27;</span>: pred&#125;, columns=[<span class=\"string\">&#x27;pin&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdf</span><br></pre></td></tr></table></figure>\n<h3 id=\"step-2-分组执行udf函数\"><a href=\"#step-2-分组执行udf函数\" class=\"headerlink\" title=\"step 2: 分组执行udf函数\"></a>step 2: 分组执行udf函数</h3><p>这里给出了一个做分组的方法，具体的分组大小需要根据自己的数据（特征数量及类型）和配置的Executor内存大小来确定。可以在单机上加载不同数据量进内存，看下大小，再给预测时的中间变量预留些空间，可以大致估计出来Executor上的数据量，根据这个数据量以及全部数据量计算出分组个数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nparts = <span class=\"number\">1000</span></span><br><span class=\"line\">output = data_df.select(<span class=\"string\">&quot;pin&quot;</span>, *predictors, (f.ceil(f.rand()*nparts)).alias(<span class=\"string\">&#x27;grouper&#x27;</span>))\\</span><br><span class=\"line\">    .groupby(<span class=\"string\">&quot;grouper&quot;</span>)\\</span><br><span class=\"line\">    .apply(predict_udf)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-基本原理\"><a href=\"#3-基本原理\" class=\"headerlink\" title=\"3. 基本原理\"></a>3. 基本原理</h2><p>利用PySpark的<code>pandas_udf</code>函数的功能，将待预测的数据从分布式文件系统读取出来并划分成很多小数据集，分发给不同的节点去预测，预测之后再把结果以分布式文件的方式保存到集群上。其中<code>pandas_udf</code>函数负责<code>Spark DataFrame</code>和<code>pandas DataFrame</code>之间的转换。<code>pandas_udf</code>的执行可以分成三个阶段：</p>\n<ul>\n<li>第一个阶段：在预测之前，pandas_udf接收到Spark DataFrame，然后把它转换成pandas的DataFrame；</li>\n<li>第二个阶段：在python进程中执行udf的逻辑，并以pandas DataFrame的类型返回预测结果；</li>\n<li>第三个阶段：pandas_udf把返回的pandas DataFrame转换成Spark DataFrame</li>\n</ul>\n<p>其他环节跟普通的Spark程序的执行逻辑一样。</p>\n<p>（+架构图）</p>\n<p>单机并行程序的时间消耗主要在数据IO上，单机预测需要先把数据从Hive中读取出来保存到磁盘文件中，然后python再把文件载入内存做预测，预测结果写到磁盘文件中，最后把结果文件导入到Hive中。整个过程有大量的磁盘IO消耗。而改为PySpark的<code>pandas_udf</code>函数之后，省掉了从Hive到磁盘、从磁盘到python内存和最后的从磁盘到Hive的过程，剩余的IO由Spark控制和优化，从而在效率上会有很大提升。</p>\n<h2 id=\"4-实践\"><a href=\"#4-实践\" class=\"headerlink\" title=\"4. 实践\"></a>4. 实践</h2><p>在KuAI上使用5K集群Spark环境实现上述方案时需要额外配置一下Python环境。此处以Notebook里运行为例，Spark-submit的方式使用可以参考KuAI帮助文档的5K-Spark使用部分。</p>\n<h3 id=\"Step-1：安装python包\"><a href=\"#Step-1：安装python包\" class=\"headerlink\" title=\"Step 1：安装python包\"></a>Step 1：安装python包</h3><p>在py35环境下安装所需要的python包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda deactivate</span><br><span class=\"line\">codna activate py35</span><br><span class=\"line\">pip install pkg_name</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Step-2：压缩py35安装文件夹\"><a href=\"#Step-2：压缩py35安装文件夹\" class=\"headerlink\" title=\"Step 2：压缩py35安装文件夹\"></a>Step 2：压缩py35安装文件夹</h3><p>切换到/opt/conda/envs文件夹下，压缩py35文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/conda/envs/py35</span><br><span class=\"line\">zip -r py35.zip *</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3：上传到hdfs上\"><a href=\"#Step-3：上传到hdfs上\" class=\"headerlink\" title=\"Step 3：上传到hdfs上\"></a>Step 3：上传到hdfs上</h3><p>在hdfs上以你的域名（邮箱前缀）建个文件夹，把py35.zip上传至该文件夹下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -mkdir /tmp/user_name</span><br><span class=\"line\">hadoop fs -put py35.zip /tmp/user_name/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Step-4：重启pyspark-kernel\"><a href=\"#Step-4：重启pyspark-kernel\" class=\"headerlink\" title=\"Step 4：重启pyspark kernel\"></a>Step 4：重启pyspark kernel</h3><h3 id=\"Step-5：案例\"><a href=\"#Step-5：案例\" class=\"headerlink\" title=\"Step 5：案例\"></a>Step 5：案例</h3><p>以用户的一个真实模型为例，代码如下，可以作为参考。</p>\n<p>该案例中使用的模型和数据均由量化中台部的算法工程师庞伟栋提供，在此表示感谢！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.conf <span class=\"keyword\">import</span> SparkConf</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.context <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> SparkSession </span><br><span class=\"line\"></span><br><span class=\"line\">sparkConf = SparkConf()</span><br><span class=\"line\"><span class=\"comment\"># 设置driver及executor上的python环境</span></span><br><span class=\"line\">os.environ[<span class=\"string\">&quot;PYSPARK_PYTHON&quot;</span>] = <span class=\"string\">&quot;py35/bin/python&quot;</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.pyspark.python&quot;</span>, <span class=\"string\">&quot;py35/bin/python&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.yarn.dist.archives&quot;</span>, <span class=\"string\">&quot;hdfs://ns1/tmp/user_name/py35.zip#py35&quot;</span>)  <span class=\"comment\"># user_name替换成您自己的域名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置Driver进程的内存</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;spark.driver.memory&#x27;</span>, <span class=\"string\">&#x27;8G&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置Driver的CPU core数量</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;spark.driver.cores&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置Spark作业总共要用多少个Executor进程来执行</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.executor.instances&quot;</span>, <span class=\"string\">&quot;10&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置每个Executor进程的CPU core数量</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.executor.cores&quot;</span>, <span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置每个Executor进程的内存</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.executor.memory&quot;</span>, <span class=\"string\">&quot;9124m&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置Spark应用的名称</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.app.name&quot;</span>, <span class=\"string\">&quot;app-name&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.shuffle.service.enabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.dynamicAllocation.enabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.dynamicAllocation.executorIdleTimeout&quot;</span>, <span class=\"string\">&quot;600s&quot;</span>)</span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.driver.maxResultSize&quot;</span>, <span class=\"string\">&quot;10g&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 打开pyarrow</span></span><br><span class=\"line\">sparkConf.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;spark.sql.execution.arrow.enabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">spark = SparkSession.builder.config(conf=sparkConf).enableHiveSupport().getOrCreate()</span><br><span class=\"line\">sc = spark.sparkContext</span><br><span class=\"line\"></span><br><span class=\"line\">tx_date=<span class=\"string\">&#x27;2019-12-01&#x27;</span></span><br><span class=\"line\">data_df = spark.sql(<span class=\"string\">&quot;select * from dmc_qm.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d where dt=&#x27;&#123;tx_date&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(tx_date=tx_date))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;model_100feats.pkl&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    bestModel=joblib.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载模型解析函数并注册</span></span><br><span class=\"line\">xgbfeatureCols = bestModel.feature_names</span><br><span class=\"line\"><span class=\"comment\"># 定义打分结果表的列</span></span><br><span class=\"line\">result_key_col=[<span class=\"string\">&#x27;pin&#x27;</span>] <span class=\"comment\"># 关键字列</span></span><br><span class=\"line\">result_prob_col=<span class=\"string\">&#x27;score&#x27;</span> <span class=\"comment\"># 输出的打分名称</span></span><br><span class=\"line\"><span class=\"comment\"># biz_nm</span></span><br><span class=\"line\">biz_nm=&#123;<span class=\"string\">&#x27;0.0&#x27;</span>:<span class=\"string\">&#x27;运营型产品&#x27;</span>,<span class=\"string\">&#x27;1.0&#x27;</span>:<span class=\"string\">&#x27;小金库&#x27;</span>,<span class=\"string\">&#x27;2.0&#x27;</span>:<span class=\"string\">&#x27;金条&#x27;</span>,<span class=\"string\">&#x27;3.0&#x27;</span>:<span class=\"string\">&#x27;基金理财&#x27;</span>,<span class=\"string\">&#x27;4.0&#x27;</span>:<span class=\"string\">&#x27;小白&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;5.0&#x27;</span>:<span class=\"string\">&#x27;借钱业务&#x27;</span>,<span class=\"string\">&#x27;6.0&#x27;</span>:<span class=\"string\">&#x27;产品众筹&#x27;</span>,<span class=\"string\">&#x27;7.0&#x27;</span>:<span class=\"string\">&#x27;金融机构服务（零售）&#x27;</span>,<span class=\"string\">&#x27;8.0&#x27;</span>:<span class=\"string\">&#x27;产险&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;9.0&#x27;</span>:<span class=\"string\">&#x27;黄金理财&#x27;</span>,<span class=\"string\">&#x27;10.0&#x27;</span>:<span class=\"string\">&#x27;小金卡&#x27;</span>,<span class=\"string\">&#x27;11.0&#x27;</span>:<span class=\"string\">&#x27;固收理财&#x27;</span>,<span class=\"string\">&#x27;12.0&#x27;</span>:<span class=\"string\">&#x27;寿险&#x27;</span>,<span class=\"string\">&#x27;13.0&#x27;</span>:<span class=\"string\">&#x27;小白卡&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;14.0&#x27;</span>:<span class=\"string\">&#x27;出众&#x27;</span>,<span class=\"string\">&#x27;15.0&#x27;</span>:<span class=\"string\">&#x27;车险&#x27;</span>,<span class=\"string\">&#x27;16.0&#x27;</span>:<span class=\"string\">&#x27;汽车金融&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> functions <span class=\"keyword\">as</span> fn</span><br><span class=\"line\"><span class=\"comment\"># 转换类型</span></span><br><span class=\"line\">expr=[fn.col(c) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> result_key_col]+[fn.col(c).cast(<span class=\"string\">&quot;float&quot;</span>) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> xgbfeatureCols]</span><br><span class=\"line\">data_df = data_df.select(*expr)</span><br><span class=\"line\">data_df=data_df.na.fill(<span class=\"number\">999999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.functions <span class=\"keyword\">import</span> pandas_udf, PandasUDFType</span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"comment\"># 定义返回的结果结构，传入的df会带着grouper字段</span></span><br><span class=\"line\">type_all = <span class=\"string\">&quot;&quot;&quot;pin string, class int&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">@pandas_udf(<span class=\"params\">type_all, PandasUDFType.GROUPED_MAP</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_udf</span>(<span class=\"params\">pdf</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># pdf is a pandas.DataFrame</span></span><br><span class=\"line\">    xgb_dmatrix = xgb.DMatrix(pdf[xgbfeatureCols], feature_names=xgbfeatureCols)</span><br><span class=\"line\">    probs = bestModel.predict(xgb_dmatrix)</span><br><span class=\"line\">    re = np.argmax(probs, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># pdf = pdf.assign(probs=probs)</span></span><br><span class=\"line\">    <span class=\"comment\"># rdf = pd.DataFrame(&#123;&#x27;pin&#x27;:pdf[&#x27;pin&#x27;], &#x27;class&#x27;: re&#125;)</span></span><br><span class=\"line\">    <span class=\"comment\"># rdf = rdf.ix[:, [&#x27;pin&#x27;, &#x27;class&#x27;]]</span></span><br><span class=\"line\">    rdf = pd.DataFrame(&#123;<span class=\"string\">&#x27;pin&#x27;</span>:pdf[<span class=\"string\">&#x27;pin&#x27;</span>], <span class=\"string\">&#x27;class&#x27;</span>: re&#125;, columns=[<span class=\"string\">&#x27;pin&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pyspark.sql.functions <span class=\"keyword\">as</span> f</span><br><span class=\"line\">nparts = <span class=\"number\">7670</span></span><br><span class=\"line\"><span class=\"comment\"># 划分成nparts个group，每个task在处理一个group时，把对应的dataframe完全加载如内存中</span></span><br><span class=\"line\">output = data_df.select(<span class=\"string\">&quot;pin&quot;</span>, *xgbfeatureCols, (f.ceil(f.rand()*nparts)).alias(<span class=\"string\">&#x27;grouper&#x27;</span>))\\</span><br><span class=\"line\">    .groupby(<span class=\"string\">&quot;grouper&quot;</span>)\\</span><br><span class=\"line\">    .apply(predict_udf)</span><br><span class=\"line\"></span><br><span class=\"line\">spark.sql(<span class=\"string\">&#x27;use dmr_dev&#x27;</span>)</span><br><span class=\"line\">spark.sql(<span class=\"string\">&#x27;drop table if exists dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result&#x27;</span>)</span><br><span class=\"line\">spark.sql(<span class=\"string\">&quot;&quot;&quot;create table if not exists dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result(</span></span><br><span class=\"line\"><span class=\"string\">pin string comment &#x27;&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">class string comment &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">)&quot;&quot;&quot;</span>)</span><br><span class=\"line\">output.registerTempTable(<span class=\"string\">&#x27;result_table&#x27;</span>)</span><br><span class=\"line\">spark.sql(<span class=\"string\">&#x27;use dmr_dev&#x27;</span>)</span><br><span class=\"line\">spark.sql(<span class=\"string\">&#x27;insert overwrite table dmr_dev.dmcqm_lhmx_jr_app_biz2_prefer_before_download_s_d_result select * from result_table&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-当变量个数超过255\"><a href=\"#5-当变量个数超过255\" class=\"headerlink\" title=\"5.当变量个数超过255\"></a>5.当变量个数超过255</h2><p>当模型的变量个数超过255时，<code>GROUPED_MAP</code>类型的<code>pandas_udf</code>会报错:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.spark.api.python.PythonException: Traceback (most recent call last):</span><br><span class=\"line\">File &quot;path/to/lib/spark2/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 219, in main</span><br><span class=\"line\">func, profiler, deserializer, serializer = read_udfs(pickleSer, infile, eval_type)</span><br><span class=\"line\">File &quot;path/to/lib/spark2/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 148, in read_udfs</span><br><span class=\"line\">mapper = eval(mapper_str, udfs)</span><br><span class=\"line\">File &quot;&lt;string&gt;&quot;, line 1</span><br><span class=\"line\">SyntaxError: more than 255 arguments</span><br></pre></td></tr></table></figure></p>\n<p>可以由两种方法来解决：</p>\n<ul>\n<li>升级Spark到2.4以上，但在yarn环境下，几乎不可能随时升级</li>\n<li>升级Python到3.7以上</li>\n</ul>\n<p>很显然，我们应该使用Python 3.7来解决这个问题。如何在5K Spark上使用Python 3.7？请移步<a href=\"http://git.jd.com/gongjuntai/sparkbasket/blob/master/5KSparkNotes-UsePython37.md\">《5K Spark Notes — Use Python 3.7》</a>。</p>\n<hr>\n<p>参考：<a href=\"https://issues.apache.org/jira/browse/SPARK-25801\">https://issues.apache.org/jira/browse/SPARK-25801</a></p>"},{"title":"Zotero高效管理文献","date":"2022-03-01T03:32:38.000Z","_content":"\nZotero高效管理文献\n\n<!-- more -->\n\n\n[TOC]\n\n\n\n# 同步\n\n现在 Zotero 有两种主流的同步方式\n\n- WebDAV 方式\n- Zotfile+Onedriver 方式\n\n两种同步方式源于对文件管理的不同：\n\n第一种方式：如果直接把论文文件拖入 Zotero 中，它会在数据文件夹自动拷贝一份并建立无意义的文件夹。而 WebDAV 方式就是直接同步数据文件夹。\n\n第二种方式：由于第一种文件存储方式的原因，拷贝一份浪费空间，也不便查找。因此 Zotfile+Onedriver 同步方式是个人（强迫症）推荐的。Zotfile 用来管理文件的存储路径而 onedriver 则用来同步文件本身。\n\n两者选择一种即可，如何选择呢？\n\n如果你完全使用 Zotero 管理论文不在意本地文件夹，那么 WebDAV 方式同步论文就很方便，同时还可以支持移动端预览。如果你忽略文件夹的问题，你会发现这种方式省心省力。\n\n如果你还想使用本地文件夹管理，zotero 仅仅作为写论文时导入方便那么 Zotfile+Onedrive 的方式最合适（本人也习惯使用这种方式）\n\n## WebDAV 方式\n\n选用坚果云进行同步配置\n\n- 申请坚果云账号 www.jianguoyun.com\n- 在个人网盘页面右上角账户名找到“帐户信息”-“安全选项”\n- 在第三方应用管理中添加应用，应用名称随意\n\nzotero 客户端\n\n- 编辑-首选项-同步\n- 数据同步登录 zotero 账号即可\n- 文件同步中选择 WebDAV\n- URL：使用刚刚坚果云给的服务器地址 dav.jianguoyun.com/dav\n- 用户名：使用坚果云账号\n- 密码：使用刚刚坚果云给的的应用密码\n\n## ZotFile+OneDriver\n\n上文**配置路径**中提到由于 Zotero 下载的文件或者直接通过拖动导入的文件会随机建立文件夹管理。ZotFile 可以转换成正常文件夹。\n\n下载地址：http://zotfile.com/\n\n在“工具”-“插件”中进行安装\n\n### 配置路径\n\n现存的论文文件可以直接通过拖动到 zotero 中，但是 zotero 会拷贝一份论文文件到数据存储路径并且存储文件夹命名是随机字符。不方便本地管理。\n\n因此推荐使用导入文件链接的形式导入论文。在此之前\n\n- 在设置界面选择“高级”-“文件和文件夹”\n- 链接附件的根目录设定为你论文存储的最最最根目录，本人使用的是 onedrive 文件夹“E:\\下载\\OneDrive”。\n- 设定为相对路径（方便同步）\n\n设定完成之后就可以通过链接导入。\n\n如果你在另一台电脑（PC-B）上也是用 onedrive，那么论文文件就可以同步，同时由于我们使用的相对路径，只要在另一台电脑（PC-B）上 zotero 设定“链接附件的根目录”也为这台电脑（PC-B）的 onedrive 根路径，那么 zotero 中也可以直接双击打开附件。\n\n### 分类同步配置\n\n- **“工具”-“zotfile preference”**打开设置界面\n- General Setting 中第一个路径看作你将使用 zotero 下载文件或者拖动文件时的缓存路径\n- 第二个路径就是你常用的论文文件存储的根路径。（“E:\\下载\\OneDrive”）\n- 配置完成后可以测试随意拖动一个文件到 zetero 的分类条目中，zotero 会私自建立乱码文件夹。然后右键条目 Manage attachments-rename attachments 。Zotfile 会自动在刚才设定的根目录根据你的分类建立文件夹并且讲论文文件放置到该目录下并在条目中设定文件链接。\n- 这样就保持了你文件夹存储方式和 zotero 分类标签的同步\n- 即使你在 zotero 移动你的论文分类标签，只需要重新执行 rename attachments 就可以再次整理本地文件夹\n- 你也可以在 Renaming Rules 设定重命名的格式\n\n### 几点注意\n\n- 如果你选用 WebDAV 方式进行同步，那么如果想在移动端（iPad,手机）查看那么使用 **PaperShip**可以直接同步附件文件你可以理解成移动端的 Zotero\n- 如果你使用 ZotFile+ 同步盘的方式，如果想在移动端阅读那么可以直接下载你同步盘的客户端，或者使用 zotero 的 Table 功能，移动端 PDF Expert 同步查看\n\n# 协同\n\n## 与 Word 协同\n\n使用 word 书写论文配合 zotero 可以方便管理引用\n\n- 首先在 zotero 设置界面“引用”-“文字处理软件”安装 word 插件。\n- 在 word 的 zotero 插件选项卡中，在你想插入的文章位置选择 Add/Edit Citation，选择需要的论文样式，如果没有可以在线搜索。选择要引用的论文就可以了。\n- 之后在文章末尾，点击 Add/Edit Bibliography 插入参考文献具体内容。\n\n## 与 GoogleScholar 协同\n\n有时候我们需要找一些参考文献，但是我们不需要下载文件内容只是知道引用格式即可。前提已经安装好 Zotero chrome 插件。\n\n- 在 Google Scholar 设置界面，找到“参考书目管理软件”选择显示导入 EndNotes(必须)，点击保存。\n- 我们随便搜索论文，在每个条目下面有个导入 Endnote 按钮，点击会弹出对话框就可以使用 zotero 保存这篇文章的引用了。\n- 同时你也可以点击 chrome 中的 zotero 插件图标多选保存，如果你在 zotero 设置了保存条目时自动附加 PDF 文档（常规-文字处理），他也会帮你把文件下载下来。\n\n## 与 Tablet 协同\n\n此方法是适用于 ZotFile+ 同步盘文件管理方式。\n\nhttps://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&mid=2650457410&idx=1&sn=1198b535f1624ff63ff2f544c11e801c&chksm=83d1d884b4a65192a238fd3fc2b0c4241b8768c2fc4e6ab927b8b669d99dcdd185278a83b3ee&scene=158#rd\n\n## 与Latex协同\n\n有时候我们用word写完论文需要转为latex格式，其中引用部分很头疼。可以使用下面的工具直接从word中提取引用为bibtex格式，也可以选择在zotero选中引用论文，然后你可以将选中论文拖动到一个单独的分类下面，之后就可以用zotero自带的导出功能生成bibtex文件\n\nhttps://rintze.zelle.me/ref-extractor/\n\n\n\n# 参考文章\n\nhttps://zhuanlan.zhihu.com/p/104848524 ","source":"_posts/6_高效tips/Zotero高效管理文献.md","raw":"---\ntitle: Zotero高效管理文献\ndate: 2022-03-01 11:32:38\ntags:\n    - 高效tips\n    - default\ncategories: \n    - 高效tips\n---\n\nZotero高效管理文献\n\n<!-- more -->\n\n\n[TOC]\n\n\n\n# 同步\n\n现在 Zotero 有两种主流的同步方式\n\n- WebDAV 方式\n- Zotfile+Onedriver 方式\n\n两种同步方式源于对文件管理的不同：\n\n第一种方式：如果直接把论文文件拖入 Zotero 中，它会在数据文件夹自动拷贝一份并建立无意义的文件夹。而 WebDAV 方式就是直接同步数据文件夹。\n\n第二种方式：由于第一种文件存储方式的原因，拷贝一份浪费空间，也不便查找。因此 Zotfile+Onedriver 同步方式是个人（强迫症）推荐的。Zotfile 用来管理文件的存储路径而 onedriver 则用来同步文件本身。\n\n两者选择一种即可，如何选择呢？\n\n如果你完全使用 Zotero 管理论文不在意本地文件夹，那么 WebDAV 方式同步论文就很方便，同时还可以支持移动端预览。如果你忽略文件夹的问题，你会发现这种方式省心省力。\n\n如果你还想使用本地文件夹管理，zotero 仅仅作为写论文时导入方便那么 Zotfile+Onedrive 的方式最合适（本人也习惯使用这种方式）\n\n## WebDAV 方式\n\n选用坚果云进行同步配置\n\n- 申请坚果云账号 www.jianguoyun.com\n- 在个人网盘页面右上角账户名找到“帐户信息”-“安全选项”\n- 在第三方应用管理中添加应用，应用名称随意\n\nzotero 客户端\n\n- 编辑-首选项-同步\n- 数据同步登录 zotero 账号即可\n- 文件同步中选择 WebDAV\n- URL：使用刚刚坚果云给的服务器地址 dav.jianguoyun.com/dav\n- 用户名：使用坚果云账号\n- 密码：使用刚刚坚果云给的的应用密码\n\n## ZotFile+OneDriver\n\n上文**配置路径**中提到由于 Zotero 下载的文件或者直接通过拖动导入的文件会随机建立文件夹管理。ZotFile 可以转换成正常文件夹。\n\n下载地址：http://zotfile.com/\n\n在“工具”-“插件”中进行安装\n\n### 配置路径\n\n现存的论文文件可以直接通过拖动到 zotero 中，但是 zotero 会拷贝一份论文文件到数据存储路径并且存储文件夹命名是随机字符。不方便本地管理。\n\n因此推荐使用导入文件链接的形式导入论文。在此之前\n\n- 在设置界面选择“高级”-“文件和文件夹”\n- 链接附件的根目录设定为你论文存储的最最最根目录，本人使用的是 onedrive 文件夹“E:\\下载\\OneDrive”。\n- 设定为相对路径（方便同步）\n\n设定完成之后就可以通过链接导入。\n\n如果你在另一台电脑（PC-B）上也是用 onedrive，那么论文文件就可以同步，同时由于我们使用的相对路径，只要在另一台电脑（PC-B）上 zotero 设定“链接附件的根目录”也为这台电脑（PC-B）的 onedrive 根路径，那么 zotero 中也可以直接双击打开附件。\n\n### 分类同步配置\n\n- **“工具”-“zotfile preference”**打开设置界面\n- General Setting 中第一个路径看作你将使用 zotero 下载文件或者拖动文件时的缓存路径\n- 第二个路径就是你常用的论文文件存储的根路径。（“E:\\下载\\OneDrive”）\n- 配置完成后可以测试随意拖动一个文件到 zetero 的分类条目中，zotero 会私自建立乱码文件夹。然后右键条目 Manage attachments-rename attachments 。Zotfile 会自动在刚才设定的根目录根据你的分类建立文件夹并且讲论文文件放置到该目录下并在条目中设定文件链接。\n- 这样就保持了你文件夹存储方式和 zotero 分类标签的同步\n- 即使你在 zotero 移动你的论文分类标签，只需要重新执行 rename attachments 就可以再次整理本地文件夹\n- 你也可以在 Renaming Rules 设定重命名的格式\n\n### 几点注意\n\n- 如果你选用 WebDAV 方式进行同步，那么如果想在移动端（iPad,手机）查看那么使用 **PaperShip**可以直接同步附件文件你可以理解成移动端的 Zotero\n- 如果你使用 ZotFile+ 同步盘的方式，如果想在移动端阅读那么可以直接下载你同步盘的客户端，或者使用 zotero 的 Table 功能，移动端 PDF Expert 同步查看\n\n# 协同\n\n## 与 Word 协同\n\n使用 word 书写论文配合 zotero 可以方便管理引用\n\n- 首先在 zotero 设置界面“引用”-“文字处理软件”安装 word 插件。\n- 在 word 的 zotero 插件选项卡中，在你想插入的文章位置选择 Add/Edit Citation，选择需要的论文样式，如果没有可以在线搜索。选择要引用的论文就可以了。\n- 之后在文章末尾，点击 Add/Edit Bibliography 插入参考文献具体内容。\n\n## 与 GoogleScholar 协同\n\n有时候我们需要找一些参考文献，但是我们不需要下载文件内容只是知道引用格式即可。前提已经安装好 Zotero chrome 插件。\n\n- 在 Google Scholar 设置界面，找到“参考书目管理软件”选择显示导入 EndNotes(必须)，点击保存。\n- 我们随便搜索论文，在每个条目下面有个导入 Endnote 按钮，点击会弹出对话框就可以使用 zotero 保存这篇文章的引用了。\n- 同时你也可以点击 chrome 中的 zotero 插件图标多选保存，如果你在 zotero 设置了保存条目时自动附加 PDF 文档（常规-文字处理），他也会帮你把文件下载下来。\n\n## 与 Tablet 协同\n\n此方法是适用于 ZotFile+ 同步盘文件管理方式。\n\nhttps://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&mid=2650457410&idx=1&sn=1198b535f1624ff63ff2f544c11e801c&chksm=83d1d884b4a65192a238fd3fc2b0c4241b8768c2fc4e6ab927b8b669d99dcdd185278a83b3ee&scene=158#rd\n\n## 与Latex协同\n\n有时候我们用word写完论文需要转为latex格式，其中引用部分很头疼。可以使用下面的工具直接从word中提取引用为bibtex格式，也可以选择在zotero选中引用论文，然后你可以将选中论文拖动到一个单独的分类下面，之后就可以用zotero自带的导出功能生成bibtex文件\n\nhttps://rintze.zelle.me/ref-extractor/\n\n\n\n# 参考文章\n\nhttps://zhuanlan.zhihu.com/p/104848524 ","slug":"6_高效tips/Zotero高效管理文献","published":1,"updated":"2022-03-01T04:05:44.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly57004w8s325nan6mh9","content":"<p>Zotero高效管理文献</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h1><p>现在 Zotero 有两种主流的同步方式</p>\n<ul>\n<li>WebDAV 方式</li>\n<li>Zotfile+Onedriver 方式</li>\n</ul>\n<p>两种同步方式源于对文件管理的不同：</p>\n<p>第一种方式：如果直接把论文文件拖入 Zotero 中，它会在数据文件夹自动拷贝一份并建立无意义的文件夹。而 WebDAV 方式就是直接同步数据文件夹。</p>\n<p>第二种方式：由于第一种文件存储方式的原因，拷贝一份浪费空间，也不便查找。因此 Zotfile+Onedriver 同步方式是个人（强迫症）推荐的。Zotfile 用来管理文件的存储路径而 onedriver 则用来同步文件本身。</p>\n<p>两者选择一种即可，如何选择呢？</p>\n<p>如果你完全使用 Zotero 管理论文不在意本地文件夹，那么 WebDAV 方式同步论文就很方便，同时还可以支持移动端预览。如果你忽略文件夹的问题，你会发现这种方式省心省力。</p>\n<p>如果你还想使用本地文件夹管理，zotero 仅仅作为写论文时导入方便那么 Zotfile+Onedrive 的方式最合适（本人也习惯使用这种方式）</p>\n<h2 id=\"WebDAV-方式\"><a href=\"#WebDAV-方式\" class=\"headerlink\" title=\"WebDAV 方式\"></a>WebDAV 方式</h2><p>选用坚果云进行同步配置</p>\n<ul>\n<li>申请坚果云账号 www.jianguoyun.com</li>\n<li>在个人网盘页面右上角账户名找到“帐户信息”-“安全选项”</li>\n<li>在第三方应用管理中添加应用，应用名称随意</li>\n</ul>\n<p>zotero 客户端</p>\n<ul>\n<li>编辑-首选项-同步</li>\n<li>数据同步登录 zotero 账号即可</li>\n<li>文件同步中选择 WebDAV</li>\n<li>URL：使用刚刚坚果云给的服务器地址 dav.jianguoyun.com/dav</li>\n<li>用户名：使用坚果云账号</li>\n<li>密码：使用刚刚坚果云给的的应用密码</li>\n</ul>\n<h2 id=\"ZotFile-OneDriver\"><a href=\"#ZotFile-OneDriver\" class=\"headerlink\" title=\"ZotFile+OneDriver\"></a>ZotFile+OneDriver</h2><p>上文<strong>配置路径</strong>中提到由于 Zotero 下载的文件或者直接通过拖动导入的文件会随机建立文件夹管理。ZotFile 可以转换成正常文件夹。</p>\n<p>下载地址：<a href=\"http://zotfile.com/\">http://zotfile.com/</a></p>\n<p>在“工具”-“插件”中进行安装</p>\n<h3 id=\"配置路径\"><a href=\"#配置路径\" class=\"headerlink\" title=\"配置路径\"></a>配置路径</h3><p>现存的论文文件可以直接通过拖动到 zotero 中，但是 zotero 会拷贝一份论文文件到数据存储路径并且存储文件夹命名是随机字符。不方便本地管理。</p>\n<p>因此推荐使用导入文件链接的形式导入论文。在此之前</p>\n<ul>\n<li>在设置界面选择“高级”-“文件和文件夹”</li>\n<li>链接附件的根目录设定为你论文存储的最最最根目录，本人使用的是 onedrive 文件夹“E:\\下载\\OneDrive”。</li>\n<li>设定为相对路径（方便同步）</li>\n</ul>\n<p>设定完成之后就可以通过链接导入。</p>\n<p>如果你在另一台电脑（PC-B）上也是用 onedrive，那么论文文件就可以同步，同时由于我们使用的相对路径，只要在另一台电脑（PC-B）上 zotero 设定“链接附件的根目录”也为这台电脑（PC-B）的 onedrive 根路径，那么 zotero 中也可以直接双击打开附件。</p>\n<h3 id=\"分类同步配置\"><a href=\"#分类同步配置\" class=\"headerlink\" title=\"分类同步配置\"></a>分类同步配置</h3><ul>\n<li><strong>“工具”-“zotfile preference”</strong>打开设置界面</li>\n<li>General Setting 中第一个路径看作你将使用 zotero 下载文件或者拖动文件时的缓存路径</li>\n<li>第二个路径就是你常用的论文文件存储的根路径。（“E:\\下载\\OneDrive”）</li>\n<li>配置完成后可以测试随意拖动一个文件到 zetero 的分类条目中，zotero 会私自建立乱码文件夹。然后右键条目 Manage attachments-rename attachments 。Zotfile 会自动在刚才设定的根目录根据你的分类建立文件夹并且讲论文文件放置到该目录下并在条目中设定文件链接。</li>\n<li>这样就保持了你文件夹存储方式和 zotero 分类标签的同步</li>\n<li>即使你在 zotero 移动你的论文分类标签，只需要重新执行 rename attachments 就可以再次整理本地文件夹</li>\n<li>你也可以在 Renaming Rules 设定重命名的格式</li>\n</ul>\n<h3 id=\"几点注意\"><a href=\"#几点注意\" class=\"headerlink\" title=\"几点注意\"></a>几点注意</h3><ul>\n<li>如果你选用 WebDAV 方式进行同步，那么如果想在移动端（iPad,手机）查看那么使用 <strong>PaperShip</strong>可以直接同步附件文件你可以理解成移动端的 Zotero</li>\n<li>如果你使用 ZotFile+ 同步盘的方式，如果想在移动端阅读那么可以直接下载你同步盘的客户端，或者使用 zotero 的 Table 功能，移动端 PDF Expert 同步查看</li>\n</ul>\n<h1 id=\"协同\"><a href=\"#协同\" class=\"headerlink\" title=\"协同\"></a>协同</h1><h2 id=\"与-Word-协同\"><a href=\"#与-Word-协同\" class=\"headerlink\" title=\"与 Word 协同\"></a>与 Word 协同</h2><p>使用 word 书写论文配合 zotero 可以方便管理引用</p>\n<ul>\n<li>首先在 zotero 设置界面“引用”-“文字处理软件”安装 word 插件。</li>\n<li>在 word 的 zotero 插件选项卡中，在你想插入的文章位置选择 Add/Edit Citation，选择需要的论文样式，如果没有可以在线搜索。选择要引用的论文就可以了。</li>\n<li>之后在文章末尾，点击 Add/Edit Bibliography 插入参考文献具体内容。</li>\n</ul>\n<h2 id=\"与-GoogleScholar-协同\"><a href=\"#与-GoogleScholar-协同\" class=\"headerlink\" title=\"与 GoogleScholar 协同\"></a>与 GoogleScholar 协同</h2><p>有时候我们需要找一些参考文献，但是我们不需要下载文件内容只是知道引用格式即可。前提已经安装好 Zotero chrome 插件。</p>\n<ul>\n<li>在 Google Scholar 设置界面，找到“参考书目管理软件”选择显示导入 EndNotes(必须)，点击保存。</li>\n<li>我们随便搜索论文，在每个条目下面有个导入 Endnote 按钮，点击会弹出对话框就可以使用 zotero 保存这篇文章的引用了。</li>\n<li>同时你也可以点击 chrome 中的 zotero 插件图标多选保存，如果你在 zotero 设置了保存条目时自动附加 PDF 文档（常规-文字处理），他也会帮你把文件下载下来。</li>\n</ul>\n<h2 id=\"与-Tablet-协同\"><a href=\"#与-Tablet-协同\" class=\"headerlink\" title=\"与 Tablet 协同\"></a>与 Tablet 协同</h2><p>此方法是适用于 ZotFile+ 同步盘文件管理方式。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&amp;mid=2650457410&amp;idx=1&amp;sn=1198b535f1624ff63ff2f544c11e801c&amp;chksm=83d1d884b4a65192a238fd3fc2b0c4241b8768c2fc4e6ab927b8b669d99dcdd185278a83b3ee&amp;scene=158#rd\">https://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&amp;mid=2650457410&amp;idx=1&amp;sn=1198b535f1624ff63ff2f544c11e801c&amp;chksm=83d1d884b4a65192a238fd3fc2b0c4241b8768c2fc4e6ab927b8b669d99dcdd185278a83b3ee&amp;scene=158#rd</a></p>\n<h2 id=\"与Latex协同\"><a href=\"#与Latex协同\" class=\"headerlink\" title=\"与Latex协同\"></a>与Latex协同</h2><p>有时候我们用word写完论文需要转为latex格式，其中引用部分很头疼。可以使用下面的工具直接从word中提取引用为bibtex格式，也可以选择在zotero选中引用论文，然后你可以将选中论文拖动到一个单独的分类下面，之后就可以用zotero自带的导出功能生成bibtex文件</p>\n<p><a href=\"https://rintze.zelle.me/ref-extractor/\">https://rintze.zelle.me/ref-extractor/</a></p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://zhuanlan.zhihu.com/p/104848524\">https://zhuanlan.zhihu.com/p/104848524</a> </p>\n","site":{"data":{}},"excerpt":"<p>Zotero高效管理文献</p>","more":"<p>[TOC]</p>\n<h1 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h1><p>现在 Zotero 有两种主流的同步方式</p>\n<ul>\n<li>WebDAV 方式</li>\n<li>Zotfile+Onedriver 方式</li>\n</ul>\n<p>两种同步方式源于对文件管理的不同：</p>\n<p>第一种方式：如果直接把论文文件拖入 Zotero 中，它会在数据文件夹自动拷贝一份并建立无意义的文件夹。而 WebDAV 方式就是直接同步数据文件夹。</p>\n<p>第二种方式：由于第一种文件存储方式的原因，拷贝一份浪费空间，也不便查找。因此 Zotfile+Onedriver 同步方式是个人（强迫症）推荐的。Zotfile 用来管理文件的存储路径而 onedriver 则用来同步文件本身。</p>\n<p>两者选择一种即可，如何选择呢？</p>\n<p>如果你完全使用 Zotero 管理论文不在意本地文件夹，那么 WebDAV 方式同步论文就很方便，同时还可以支持移动端预览。如果你忽略文件夹的问题，你会发现这种方式省心省力。</p>\n<p>如果你还想使用本地文件夹管理，zotero 仅仅作为写论文时导入方便那么 Zotfile+Onedrive 的方式最合适（本人也习惯使用这种方式）</p>\n<h2 id=\"WebDAV-方式\"><a href=\"#WebDAV-方式\" class=\"headerlink\" title=\"WebDAV 方式\"></a>WebDAV 方式</h2><p>选用坚果云进行同步配置</p>\n<ul>\n<li>申请坚果云账号 www.jianguoyun.com</li>\n<li>在个人网盘页面右上角账户名找到“帐户信息”-“安全选项”</li>\n<li>在第三方应用管理中添加应用，应用名称随意</li>\n</ul>\n<p>zotero 客户端</p>\n<ul>\n<li>编辑-首选项-同步</li>\n<li>数据同步登录 zotero 账号即可</li>\n<li>文件同步中选择 WebDAV</li>\n<li>URL：使用刚刚坚果云给的服务器地址 dav.jianguoyun.com/dav</li>\n<li>用户名：使用坚果云账号</li>\n<li>密码：使用刚刚坚果云给的的应用密码</li>\n</ul>\n<h2 id=\"ZotFile-OneDriver\"><a href=\"#ZotFile-OneDriver\" class=\"headerlink\" title=\"ZotFile+OneDriver\"></a>ZotFile+OneDriver</h2><p>上文<strong>配置路径</strong>中提到由于 Zotero 下载的文件或者直接通过拖动导入的文件会随机建立文件夹管理。ZotFile 可以转换成正常文件夹。</p>\n<p>下载地址：<a href=\"http://zotfile.com/\">http://zotfile.com/</a></p>\n<p>在“工具”-“插件”中进行安装</p>\n<h3 id=\"配置路径\"><a href=\"#配置路径\" class=\"headerlink\" title=\"配置路径\"></a>配置路径</h3><p>现存的论文文件可以直接通过拖动到 zotero 中，但是 zotero 会拷贝一份论文文件到数据存储路径并且存储文件夹命名是随机字符。不方便本地管理。</p>\n<p>因此推荐使用导入文件链接的形式导入论文。在此之前</p>\n<ul>\n<li>在设置界面选择“高级”-“文件和文件夹”</li>\n<li>链接附件的根目录设定为你论文存储的最最最根目录，本人使用的是 onedrive 文件夹“E:\\下载\\OneDrive”。</li>\n<li>设定为相对路径（方便同步）</li>\n</ul>\n<p>设定完成之后就可以通过链接导入。</p>\n<p>如果你在另一台电脑（PC-B）上也是用 onedrive，那么论文文件就可以同步，同时由于我们使用的相对路径，只要在另一台电脑（PC-B）上 zotero 设定“链接附件的根目录”也为这台电脑（PC-B）的 onedrive 根路径，那么 zotero 中也可以直接双击打开附件。</p>\n<h3 id=\"分类同步配置\"><a href=\"#分类同步配置\" class=\"headerlink\" title=\"分类同步配置\"></a>分类同步配置</h3><ul>\n<li><strong>“工具”-“zotfile preference”</strong>打开设置界面</li>\n<li>General Setting 中第一个路径看作你将使用 zotero 下载文件或者拖动文件时的缓存路径</li>\n<li>第二个路径就是你常用的论文文件存储的根路径。（“E:\\下载\\OneDrive”）</li>\n<li>配置完成后可以测试随意拖动一个文件到 zetero 的分类条目中，zotero 会私自建立乱码文件夹。然后右键条目 Manage attachments-rename attachments 。Zotfile 会自动在刚才设定的根目录根据你的分类建立文件夹并且讲论文文件放置到该目录下并在条目中设定文件链接。</li>\n<li>这样就保持了你文件夹存储方式和 zotero 分类标签的同步</li>\n<li>即使你在 zotero 移动你的论文分类标签，只需要重新执行 rename attachments 就可以再次整理本地文件夹</li>\n<li>你也可以在 Renaming Rules 设定重命名的格式</li>\n</ul>\n<h3 id=\"几点注意\"><a href=\"#几点注意\" class=\"headerlink\" title=\"几点注意\"></a>几点注意</h3><ul>\n<li>如果你选用 WebDAV 方式进行同步，那么如果想在移动端（iPad,手机）查看那么使用 <strong>PaperShip</strong>可以直接同步附件文件你可以理解成移动端的 Zotero</li>\n<li>如果你使用 ZotFile+ 同步盘的方式，如果想在移动端阅读那么可以直接下载你同步盘的客户端，或者使用 zotero 的 Table 功能，移动端 PDF Expert 同步查看</li>\n</ul>\n<h1 id=\"协同\"><a href=\"#协同\" class=\"headerlink\" title=\"协同\"></a>协同</h1><h2 id=\"与-Word-协同\"><a href=\"#与-Word-协同\" class=\"headerlink\" title=\"与 Word 协同\"></a>与 Word 协同</h2><p>使用 word 书写论文配合 zotero 可以方便管理引用</p>\n<ul>\n<li>首先在 zotero 设置界面“引用”-“文字处理软件”安装 word 插件。</li>\n<li>在 word 的 zotero 插件选项卡中，在你想插入的文章位置选择 Add/Edit Citation，选择需要的论文样式，如果没有可以在线搜索。选择要引用的论文就可以了。</li>\n<li>之后在文章末尾，点击 Add/Edit Bibliography 插入参考文献具体内容。</li>\n</ul>\n<h2 id=\"与-GoogleScholar-协同\"><a href=\"#与-GoogleScholar-协同\" class=\"headerlink\" title=\"与 GoogleScholar 协同\"></a>与 GoogleScholar 协同</h2><p>有时候我们需要找一些参考文献，但是我们不需要下载文件内容只是知道引用格式即可。前提已经安装好 Zotero chrome 插件。</p>\n<ul>\n<li>在 Google Scholar 设置界面，找到“参考书目管理软件”选择显示导入 EndNotes(必须)，点击保存。</li>\n<li>我们随便搜索论文，在每个条目下面有个导入 Endnote 按钮，点击会弹出对话框就可以使用 zotero 保存这篇文章的引用了。</li>\n<li>同时你也可以点击 chrome 中的 zotero 插件图标多选保存，如果你在 zotero 设置了保存条目时自动附加 PDF 文档（常规-文字处理），他也会帮你把文件下载下来。</li>\n</ul>\n<h2 id=\"与-Tablet-协同\"><a href=\"#与-Tablet-协同\" class=\"headerlink\" title=\"与 Tablet 协同\"></a>与 Tablet 协同</h2><p>此方法是适用于 ZotFile+ 同步盘文件管理方式。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&amp;mid=2650457410&amp;idx=1&amp;sn=1198b535f1624ff63ff2f544c11e801c&amp;chksm=83d1d884b4a65192a238fd3fc2b0c4241b8768c2fc4e6ab927b8b669d99dcdd185278a83b3ee&amp;scene=158#rd\">https://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&amp;mid=2650457410&amp;idx=1&amp;sn=1198b535f1624ff63ff2f544c11e801c&amp;chksm=83d1d884b4a65192a238fd3fc2b0c4241b8768c2fc4e6ab927b8b669d99dcdd185278a83b3ee&amp;scene=158#rd</a></p>\n<h2 id=\"与Latex协同\"><a href=\"#与Latex协同\" class=\"headerlink\" title=\"与Latex协同\"></a>与Latex协同</h2><p>有时候我们用word写完论文需要转为latex格式，其中引用部分很头疼。可以使用下面的工具直接从word中提取引用为bibtex格式，也可以选择在zotero选中引用论文，然后你可以将选中论文拖动到一个单独的分类下面，之后就可以用zotero自带的导出功能生成bibtex文件</p>\n<p><a href=\"https://rintze.zelle.me/ref-extractor/\">https://rintze.zelle.me/ref-extractor/</a></p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://zhuanlan.zhihu.com/p/104848524\">https://zhuanlan.zhihu.com/p/104848524</a> </p>"},{"title":"大话数据结构笔记","date":"2022-03-01T03:32:38.000Z","_content":"\n大话数据结构笔记\n\n<!-- more -->\n\n\n大话数据结构\n\n[TOC]\n\n# 数据结构绪论\n\n## 基本概念\n\n数据项 -> 数据元素 -> 数据对象 -> 数据结构\n\n## 逻辑结构与物理结构\n\n> 逻辑结构：集合，线性结构（1对1），树形结构（1对多），图形结构（多对多）\n>\n> 物理结构：\n>\n>  - 顺序储存结构：元素放在连续的储存单元\n>  - 链式储存结构：元素放在任意单元，用指针存放数据地址\n\n# 算法\n\n## 算法时间复杂度\n\n###线性阶 O(n)\n\n```c++\nint i;\nfor(i=0,i<n;i++)\n```\n\n### 对数阶 O(lodn)\n\n```c++\nint count=1;\nwhile (count<n)\n{\n    counc =count*2\n}\n```\n\n### 平方阶\n\n```c\nint i,j;\nfor (i=0,i<n;i++)\n{\n    for (j=0,j<n;j++)\n    {\n        .....\n    }\n}\n```\n\n**循环的时间复杂度=循环体的时间复杂度*循环运行时的次数**\n\n### 常见时间复杂度\n\n> O(1)<O(logn) < O(n) < O(n^2) < O(n!) <O(n^n)\n\n## 空间复杂度\n\n> S(n)=O(f(n)) 其中f(n)是n所占空间\n\n# 线性表（List）\n\n## 顺序储存\n\n一维数组来实现顺序储存结构\n\n>顺序储存结构的三个属性：\n>\n>1. 起始位置：数组储存的地方\n>2. 线性表最大储存容量：数组长度\n>3. 线性表当前长度：length（任意时刻线性表长度应小于等于数组长度）\n\n- 地址计算方法：储存器中每个单元都有自己的编号，且编号是连续的，这个编号称为地址，假设一个元素占用c个储存空间(一个储存空间就是一个0/1)，LOC表示获得储存位置的函数，则$LOC(a_{i+1})=LOC(a-i)+c$\n- 存取时间复杂度是O(1) ，即跟数据规模无关；插入删除时间复杂度是O(n)\n\n# 栈（Stack）\n\n仅在表尾插入和删除元素：后进先出的线性表\n\n# 串（string）\n\n> ASCII编码：8位二进制，一共能表示256个字符\n>\n> Unicode编码：16位二进制\n\n# 树\n\n> 度（degree）:结点中子树的数目\n\n## 树的储存结构\n\n","source":"_posts/3_数理统计/大话数据结构笔记.md","raw":"---\ntitle: 大话数据结构笔记\ndate: 2022-03-01 11:32:38\ntags:\n    - 数理统计\n    - default\ncategories: \n    - 数理统计\n---\n\n大话数据结构笔记\n\n<!-- more -->\n\n\n大话数据结构\n\n[TOC]\n\n# 数据结构绪论\n\n## 基本概念\n\n数据项 -> 数据元素 -> 数据对象 -> 数据结构\n\n## 逻辑结构与物理结构\n\n> 逻辑结构：集合，线性结构（1对1），树形结构（1对多），图形结构（多对多）\n>\n> 物理结构：\n>\n>  - 顺序储存结构：元素放在连续的储存单元\n>  - 链式储存结构：元素放在任意单元，用指针存放数据地址\n\n# 算法\n\n## 算法时间复杂度\n\n###线性阶 O(n)\n\n```c++\nint i;\nfor(i=0,i<n;i++)\n```\n\n### 对数阶 O(lodn)\n\n```c++\nint count=1;\nwhile (count<n)\n{\n    counc =count*2\n}\n```\n\n### 平方阶\n\n```c\nint i,j;\nfor (i=0,i<n;i++)\n{\n    for (j=0,j<n;j++)\n    {\n        .....\n    }\n}\n```\n\n**循环的时间复杂度=循环体的时间复杂度*循环运行时的次数**\n\n### 常见时间复杂度\n\n> O(1)<O(logn) < O(n) < O(n^2) < O(n!) <O(n^n)\n\n## 空间复杂度\n\n> S(n)=O(f(n)) 其中f(n)是n所占空间\n\n# 线性表（List）\n\n## 顺序储存\n\n一维数组来实现顺序储存结构\n\n>顺序储存结构的三个属性：\n>\n>1. 起始位置：数组储存的地方\n>2. 线性表最大储存容量：数组长度\n>3. 线性表当前长度：length（任意时刻线性表长度应小于等于数组长度）\n\n- 地址计算方法：储存器中每个单元都有自己的编号，且编号是连续的，这个编号称为地址，假设一个元素占用c个储存空间(一个储存空间就是一个0/1)，LOC表示获得储存位置的函数，则$LOC(a_{i+1})=LOC(a-i)+c$\n- 存取时间复杂度是O(1) ，即跟数据规模无关；插入删除时间复杂度是O(n)\n\n# 栈（Stack）\n\n仅在表尾插入和删除元素：后进先出的线性表\n\n# 串（string）\n\n> ASCII编码：8位二进制，一共能表示256个字符\n>\n> Unicode编码：16位二进制\n\n# 树\n\n> 度（degree）:结点中子树的数目\n\n## 树的储存结构\n\n","slug":"3_数理统计/大话数据结构笔记","published":1,"updated":"2022-03-01T04:05:00.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly57004z8s3255t71sox","content":"<p>大话数据结构笔记</p>\n<span id=\"more\"></span>\n<p>大话数据结构</p>\n<p>[TOC]</p>\n<h1 id=\"数据结构绪论\"><a href=\"#数据结构绪论\" class=\"headerlink\" title=\"数据结构绪论\"></a>数据结构绪论</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>数据项 -&gt; 数据元素 -&gt; 数据对象 -&gt; 数据结构</p>\n<h2 id=\"逻辑结构与物理结构\"><a href=\"#逻辑结构与物理结构\" class=\"headerlink\" title=\"逻辑结构与物理结构\"></a>逻辑结构与物理结构</h2><blockquote>\n<p>逻辑结构：集合，线性结构（1对1），树形结构（1对多），图形结构（多对多）</p>\n<p>物理结构：</p>\n<ul>\n<li>顺序储存结构：元素放在连续的储存单元</li>\n<li>链式储存结构：元素放在任意单元，用指针存放数据地址</li>\n</ul>\n</blockquote>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"算法时间复杂度\"><a href=\"#算法时间复杂度\" class=\"headerlink\" title=\"算法时间复杂度\"></a>算法时间复杂度</h2><h3 id=\"线性阶-O-n\"><a href=\"#线性阶-O-n\" class=\"headerlink\" title=\"线性阶 O(n)\"></a>线性阶 O(n)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>,i&lt;n;i++)</span><br></pre></td></tr></table></figure>\n<h3 id=\"对数阶-O-lodn\"><a href=\"#对数阶-O-lodn\" class=\"headerlink\" title=\"对数阶 O(lodn)\"></a>对数阶 O(lodn)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (count&lt;n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    counc =count*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>,i&lt;n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>,j&lt;n;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>循环的时间复杂度=循环体的时间复杂度*循环运行时的次数</strong></p>\n<h3 id=\"常见时间复杂度\"><a href=\"#常见时间复杂度\" class=\"headerlink\" title=\"常见时间复杂度\"></a>常见时间复杂度</h3><blockquote>\n<p>O(1)&lt;O(logn) &lt; O(n) &lt; O(n^2) &lt; O(n!) &lt;O(n^n)</p>\n</blockquote>\n<h2 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h2><blockquote>\n<p>S(n)=O(f(n)) 其中f(n)是n所占空间</p>\n</blockquote>\n<h1 id=\"线性表（List）\"><a href=\"#线性表（List）\" class=\"headerlink\" title=\"线性表（List）\"></a>线性表（List）</h1><h2 id=\"顺序储存\"><a href=\"#顺序储存\" class=\"headerlink\" title=\"顺序储存\"></a>顺序储存</h2><p>一维数组来实现顺序储存结构</p>\n<blockquote>\n<p>顺序储存结构的三个属性：</p>\n<ol>\n<li>起始位置：数组储存的地方</li>\n<li>线性表最大储存容量：数组长度</li>\n<li>线性表当前长度：length（任意时刻线性表长度应小于等于数组长度）</li>\n</ol>\n</blockquote>\n<ul>\n<li>地址计算方法：储存器中每个单元都有自己的编号，且编号是连续的，这个编号称为地址，假设一个元素占用c个储存空间(一个储存空间就是一个0/1)，LOC表示获得储存位置的函数，则$LOC(a_{i+1})=LOC(a-i)+c$</li>\n<li>存取时间复杂度是O(1) ，即跟数据规模无关；插入删除时间复杂度是O(n)</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>仅在表尾插入和删除元素：后进先出的线性表</p>\n<h1 id=\"串（string）\"><a href=\"#串（string）\" class=\"headerlink\" title=\"串（string）\"></a>串（string）</h1><blockquote>\n<p>ASCII编码：8位二进制，一共能表示256个字符</p>\n<p>Unicode编码：16位二进制</p>\n</blockquote>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><blockquote>\n<p>度（degree）:结点中子树的数目</p>\n</blockquote>\n<h2 id=\"树的储存结构\"><a href=\"#树的储存结构\" class=\"headerlink\" title=\"树的储存结构\"></a>树的储存结构</h2>","site":{"data":{}},"excerpt":"<p>大话数据结构笔记</p>","more":"<p>大话数据结构</p>\n<p>[TOC]</p>\n<h1 id=\"数据结构绪论\"><a href=\"#数据结构绪论\" class=\"headerlink\" title=\"数据结构绪论\"></a>数据结构绪论</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>数据项 -&gt; 数据元素 -&gt; 数据对象 -&gt; 数据结构</p>\n<h2 id=\"逻辑结构与物理结构\"><a href=\"#逻辑结构与物理结构\" class=\"headerlink\" title=\"逻辑结构与物理结构\"></a>逻辑结构与物理结构</h2><blockquote>\n<p>逻辑结构：集合，线性结构（1对1），树形结构（1对多），图形结构（多对多）</p>\n<p>物理结构：</p>\n<ul>\n<li>顺序储存结构：元素放在连续的储存单元</li>\n<li>链式储存结构：元素放在任意单元，用指针存放数据地址</li>\n</ul>\n</blockquote>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"算法时间复杂度\"><a href=\"#算法时间复杂度\" class=\"headerlink\" title=\"算法时间复杂度\"></a>算法时间复杂度</h2><h3 id=\"线性阶-O-n\"><a href=\"#线性阶-O-n\" class=\"headerlink\" title=\"线性阶 O(n)\"></a>线性阶 O(n)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>,i&lt;n;i++)</span><br></pre></td></tr></table></figure>\n<h3 id=\"对数阶-O-lodn\"><a href=\"#对数阶-O-lodn\" class=\"headerlink\" title=\"对数阶 O(lodn)\"></a>对数阶 O(lodn)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (count&lt;n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    counc =count*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>,i&lt;n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>,j&lt;n;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>循环的时间复杂度=循环体的时间复杂度*循环运行时的次数</strong></p>\n<h3 id=\"常见时间复杂度\"><a href=\"#常见时间复杂度\" class=\"headerlink\" title=\"常见时间复杂度\"></a>常见时间复杂度</h3><blockquote>\n<p>O(1)&lt;O(logn) &lt; O(n) &lt; O(n^2) &lt; O(n!) &lt;O(n^n)</p>\n</blockquote>\n<h2 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h2><blockquote>\n<p>S(n)=O(f(n)) 其中f(n)是n所占空间</p>\n</blockquote>\n<h1 id=\"线性表（List）\"><a href=\"#线性表（List）\" class=\"headerlink\" title=\"线性表（List）\"></a>线性表（List）</h1><h2 id=\"顺序储存\"><a href=\"#顺序储存\" class=\"headerlink\" title=\"顺序储存\"></a>顺序储存</h2><p>一维数组来实现顺序储存结构</p>\n<blockquote>\n<p>顺序储存结构的三个属性：</p>\n<ol>\n<li>起始位置：数组储存的地方</li>\n<li>线性表最大储存容量：数组长度</li>\n<li>线性表当前长度：length（任意时刻线性表长度应小于等于数组长度）</li>\n</ol>\n</blockquote>\n<ul>\n<li>地址计算方法：储存器中每个单元都有自己的编号，且编号是连续的，这个编号称为地址，假设一个元素占用c个储存空间(一个储存空间就是一个0/1)，LOC表示获得储存位置的函数，则$LOC(a_{i+1})=LOC(a-i)+c$</li>\n<li>存取时间复杂度是O(1) ，即跟数据规模无关；插入删除时间复杂度是O(n)</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>仅在表尾插入和删除元素：后进先出的线性表</p>\n<h1 id=\"串（string）\"><a href=\"#串（string）\" class=\"headerlink\" title=\"串（string）\"></a>串（string）</h1><blockquote>\n<p>ASCII编码：8位二进制，一共能表示256个字符</p>\n<p>Unicode编码：16位二进制</p>\n</blockquote>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><blockquote>\n<p>度（degree）:结点中子树的数目</p>\n</blockquote>\n<h2 id=\"树的储存结构\"><a href=\"#树的储存结构\" class=\"headerlink\" title=\"树的储存结构\"></a>树的储存结构</h2>"},{"title":"marginnote","date":"2022-03-01T03:32:38.000Z","_content":"\nmarginnote\n\n<!-- more -->\n\n\n导出word的大纲，用word打开，完美！","source":"_posts/6_高效tips/marginnote.md","raw":"---\ntitle: marginnote\ndate: 2022-03-01 11:32:38\ntags:\n    - 高效tips\n    - default\ncategories: \n    - 高效tips\n---\n\nmarginnote\n\n<!-- more -->\n\n\n导出word的大纲，用word打开，完美！","slug":"6_高效tips/marginnote","published":1,"updated":"2022-03-01T04:05:44.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly5800548s326h0n74rf","content":"<p>marginnote</p>\n<span id=\"more\"></span>\n<p>导出word的大纲，用word打开，完美！</p>\n","site":{"data":{}},"excerpt":"<p>marginnote</p>","more":"<p>导出word的大纲，用word打开，完美！</p>"},{"title":"拉普拉斯矩阵映射","date":"2022-03-01T03:32:38.000Z","_content":"\n拉普拉斯矩阵映射\n\n<!-- more -->\n\n\n# 专业词汇\n\n- **边（edge）**：$W_{ij}$ 特点：对称矩阵\n- **digree**: $D=dig(d);d=rowSum(W_{i,j]})$ 特点：对角阵\n- **拉普拉斯矩阵**：$L=D-W$ \n\n- **拉普拉斯特征映射**：将处于流形上的数据，在尽量保留原数据间相似度的情况下，映射到低维下表示\n\n","source":"_posts/3_数理统计/拉普拉斯矩阵映射.md","raw":"---\ntitle: 拉普拉斯矩阵映射\ndate: 2022-03-01 11:32:38\ntags:\n    - 数理统计\n    - default\ncategories: \n    - 数理统计\n---\n\n拉普拉斯矩阵映射\n\n<!-- more -->\n\n\n# 专业词汇\n\n- **边（edge）**：$W_{ij}$ 特点：对称矩阵\n- **digree**: $D=dig(d);d=rowSum(W_{i,j]})$ 特点：对角阵\n- **拉普拉斯矩阵**：$L=D-W$ \n\n- **拉普拉斯特征映射**：将处于流形上的数据，在尽量保留原数据间相似度的情况下，映射到低维下表示\n\n","slug":"3_数理统计/拉普拉斯矩阵映射","published":1,"updated":"2022-03-01T04:05:05.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly5800578s322rmv7mlr","content":"<p>拉普拉斯矩阵映射</p>\n<span id=\"more\"></span>\n<h1 id=\"专业词汇\"><a href=\"#专业词汇\" class=\"headerlink\" title=\"专业词汇\"></a>专业词汇</h1><ul>\n<li><strong>边（edge）</strong>：$W_{ij}$ 特点：对称矩阵</li>\n<li><strong>digree</strong>: $D=dig(d);d=rowSum(W_{i,j]})$ 特点：对角阵</li>\n<li><p><strong>拉普拉斯矩阵</strong>：$L=D-W$ </p>\n</li>\n<li><p><strong>拉普拉斯特征映射</strong>：将处于流形上的数据，在尽量保留原数据间相似度的情况下，映射到低维下表示</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>拉普拉斯矩阵映射</p>","more":"<h1 id=\"专业词汇\"><a href=\"#专业词汇\" class=\"headerlink\" title=\"专业词汇\"></a>专业词汇</h1><ul>\n<li><strong>边（edge）</strong>：$W_{ij}$ 特点：对称矩阵</li>\n<li><strong>digree</strong>: $D=dig(d);d=rowSum(W_{i,j]})$ 特点：对角阵</li>\n<li><p><strong>拉普拉斯矩阵</strong>：$L=D-W$ </p>\n</li>\n<li><p><strong>拉普拉斯特征映射</strong>：将处于流形上的数据，在尽量保留原数据间相似度的情况下，映射到低维下表示</p>\n</li>\n</ul>"},{"title":"拉格朗日乘子法","date":"2022-03-01T03:32:38.000Z","_content":"\n拉格朗日乘子法\n\n<!-- more -->\n\n\n# 原始问题\n\n$f(x),c_i(x),h_i(x)$是在$R^n$上的`连续可微`函数，考虑约束最优化问题：\n$$\n\\begin{align}\nmin \\quad f(x) \\quad st \\quad c_i(x)<0,i &=1,2...k  \\\\, \nh_j(x)=0,j &=1,2...l\n\\end{align}\n$$\n\n此问题我们成为原始问题。\n\n为了方便解决此问题，我们引入**`广义拉格朗日函数`**L，可证明原始问题等价于拉格朗日函数的极小极大值问题。拉格朗日函数构造如下：\n$$\nL(x,\\alpha_i,\\beta_j)=f(x)+\\sum_{i=1}^k\\alpha_ic_i(x)+\\sum_{j=1}^l\\beta_jh_j(x)，其中 x\\in R^n,\\alpha_i>0,\\beta_j>0\n$$\n我们考虑x的函数：\n$$\n\\theta_p(x)=max \\quad L(x,\\alpha_i,\\beta_j),其中 x\\in R^n,\\alpha_i>0,\\beta_j>0\n$$\n可以证明  $min(\\theta_p(x)) $等价于原始问题,即约束下的优化问题转化为了广义拉格朗日的极小极大值问题。\n\n【证明】约束下的优化问题转化为了广义拉格朗日的极小极大值问题\n\n满足$c_i(x)<0,i =1,2...k ,h_j(x)=0,j =1,2...l$时， $max(L(x,\\alpha_i,\\beta_j)) = f(x)$,即$\\theta_p(x)=f(x)$。\n\n不满足$c_i(x)<0,i =1,2...k ,h_j(x)=0,j =1,2...l$时，可通过设置$\\alpha_i 和\\beta_j$ 使得$\\theta_p(x)=+\\infin $\n\n所以\n$$\n\\theta_p=\\begin{cases}f(x),x满足原始问题条件 \\\\ \n+\\infin , x不满足原始问题条件\n\\end{cases}\n$$\n\n\n\n","source":"_posts/3_数理统计/拉格朗日乘子法.md","raw":"---\ntitle: 拉格朗日乘子法\ndate: 2022-03-01 11:32:38\ntags:\n    - 数理统计\n    - default\ncategories: \n    - 数理统计\n---\n\n拉格朗日乘子法\n\n<!-- more -->\n\n\n# 原始问题\n\n$f(x),c_i(x),h_i(x)$是在$R^n$上的`连续可微`函数，考虑约束最优化问题：\n$$\n\\begin{align}\nmin \\quad f(x) \\quad st \\quad c_i(x)<0,i &=1,2...k  \\\\, \nh_j(x)=0,j &=1,2...l\n\\end{align}\n$$\n\n此问题我们成为原始问题。\n\n为了方便解决此问题，我们引入**`广义拉格朗日函数`**L，可证明原始问题等价于拉格朗日函数的极小极大值问题。拉格朗日函数构造如下：\n$$\nL(x,\\alpha_i,\\beta_j)=f(x)+\\sum_{i=1}^k\\alpha_ic_i(x)+\\sum_{j=1}^l\\beta_jh_j(x)，其中 x\\in R^n,\\alpha_i>0,\\beta_j>0\n$$\n我们考虑x的函数：\n$$\n\\theta_p(x)=max \\quad L(x,\\alpha_i,\\beta_j),其中 x\\in R^n,\\alpha_i>0,\\beta_j>0\n$$\n可以证明  $min(\\theta_p(x)) $等价于原始问题,即约束下的优化问题转化为了广义拉格朗日的极小极大值问题。\n\n【证明】约束下的优化问题转化为了广义拉格朗日的极小极大值问题\n\n满足$c_i(x)<0,i =1,2...k ,h_j(x)=0,j =1,2...l$时， $max(L(x,\\alpha_i,\\beta_j)) = f(x)$,即$\\theta_p(x)=f(x)$。\n\n不满足$c_i(x)<0,i =1,2...k ,h_j(x)=0,j =1,2...l$时，可通过设置$\\alpha_i 和\\beta_j$ 使得$\\theta_p(x)=+\\infin $\n\n所以\n$$\n\\theta_p=\\begin{cases}f(x),x满足原始问题条件 \\\\ \n+\\infin , x不满足原始问题条件\n\\end{cases}\n$$\n\n\n\n","slug":"3_数理统计/拉格朗日乘子法","published":1,"updated":"2022-03-01T04:05:10.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly59005a8s32g8wp6iwh","content":"<p>拉格朗日乘子法</p>\n<span id=\"more\"></span>\n<h1 id=\"原始问题\"><a href=\"#原始问题\" class=\"headerlink\" title=\"原始问题\"></a>原始问题</h1><p>$f(x),c_i(x),h_i(x)$是在$R^n$上的<code>连续可微</code>函数，考虑约束最优化问题：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\nmin \\quad f(x) \\quad st \\quad c_i(x)<0,i &=1,2...k  \\\\, \nh_j(x)=0,j &=1,2...l\n\\end{align}</script><p>此问题我们成为原始问题。</p>\n<p>为了方便解决此问题，我们引入<strong><code>广义拉格朗日函数</code></strong>L，可证明原始问题等价于拉格朗日函数的极小极大值问题。拉格朗日函数构造如下：</p>\n<script type=\"math/tex; mode=display\">\nL(x,\\alpha_i,\\beta_j)=f(x)+\\sum_{i=1}^k\\alpha_ic_i(x)+\\sum_{j=1}^l\\beta_jh_j(x)，其中 x\\in R^n,\\alpha_i>0,\\beta_j>0</script><p>我们考虑x的函数：</p>\n<script type=\"math/tex; mode=display\">\n\\theta_p(x)=max \\quad L(x,\\alpha_i,\\beta_j),其中 x\\in R^n,\\alpha_i>0,\\beta_j>0</script><p>可以证明  $min(\\theta_p(x)) $等价于原始问题,即约束下的优化问题转化为了广义拉格朗日的极小极大值问题。</p>\n<p>【证明】约束下的优化问题转化为了广义拉格朗日的极小极大值问题</p>\n<p>满足$c_i(x)&lt;0,i =1,2…k ,h_j(x)=0,j =1,2…l$时， $max(L(x,\\alpha_i,\\beta_j)) = f(x)$,即$\\theta_p(x)=f(x)$。</p>\n<p>不满足$c_i(x)&lt;0,i =1,2…k ,h_j(x)=0,j =1,2…l$时，可通过设置$\\alpha_i 和\\beta_j$ 使得$\\theta_p(x)=+\\infin $</p>\n<p>所以</p>\n<script type=\"math/tex; mode=display\">\n\\theta_p=\\begin{cases}f(x),x满足原始问题条件 \\\\ \n+\\infin , x不满足原始问题条件\n\\end{cases}</script>","site":{"data":{}},"excerpt":"<p>拉格朗日乘子法</p>","more":"<h1 id=\"原始问题\"><a href=\"#原始问题\" class=\"headerlink\" title=\"原始问题\"></a>原始问题</h1><p>$f(x),c_i(x),h_i(x)$是在$R^n$上的<code>连续可微</code>函数，考虑约束最优化问题：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\nmin \\quad f(x) \\quad st \\quad c_i(x)<0,i &=1,2...k  \\\\, \nh_j(x)=0,j &=1,2...l\n\\end{align}</script><p>此问题我们成为原始问题。</p>\n<p>为了方便解决此问题，我们引入<strong><code>广义拉格朗日函数</code></strong>L，可证明原始问题等价于拉格朗日函数的极小极大值问题。拉格朗日函数构造如下：</p>\n<script type=\"math/tex; mode=display\">\nL(x,\\alpha_i,\\beta_j)=f(x)+\\sum_{i=1}^k\\alpha_ic_i(x)+\\sum_{j=1}^l\\beta_jh_j(x)，其中 x\\in R^n,\\alpha_i>0,\\beta_j>0</script><p>我们考虑x的函数：</p>\n<script type=\"math/tex; mode=display\">\n\\theta_p(x)=max \\quad L(x,\\alpha_i,\\beta_j),其中 x\\in R^n,\\alpha_i>0,\\beta_j>0</script><p>可以证明  $min(\\theta_p(x)) $等价于原始问题,即约束下的优化问题转化为了广义拉格朗日的极小极大值问题。</p>\n<p>【证明】约束下的优化问题转化为了广义拉格朗日的极小极大值问题</p>\n<p>满足$c_i(x)&lt;0,i =1,2…k ,h_j(x)=0,j =1,2…l$时， $max(L(x,\\alpha_i,\\beta_j)) = f(x)$,即$\\theta_p(x)=f(x)$。</p>\n<p>不满足$c_i(x)&lt;0,i =1,2…k ,h_j(x)=0,j =1,2…l$时，可通过设置$\\alpha_i 和\\beta_j$ 使得$\\theta_p(x)=+\\infin $</p>\n<p>所以</p>\n<script type=\"math/tex; mode=display\">\n\\theta_p=\\begin{cases}f(x),x满足原始问题条件 \\\\ \n+\\infin , x不满足原始问题条件\n\\end{cases}</script>"},{"title":"概率论与数理统计--浙大","date":"2022-03-01T03:32:38.000Z","_content":"\n概率论与数理统计--浙大\n\n<!-- more -->\n\n\n[TOC]\n\n概率论与数理统计--浙大\n\n#期望\n##离散期望\n\n$$\n   E(X)=\\sum_1^{\\infty}x_kp_k\n$$\n\n##连续数学期望\n\n$$\n   E(X) = \\int_{-\\infty}^{\\infty}xf(s)\n$$\n\n## 函数的数学期望\n\n\n$$\nZ=g(X<Y),二维随机变量的概率密度(X,Y)为f(x,y),则Z的期望：\n$$\n\n\n$$\n   E(Z) = E(g(Z)) = \\int_{-\\infty}^{+\\infty}g(x,y)f(x,y)dxdy\n$$\n\n   \n\n   若（X，Y）为离散型随机变量，则：\n\n$$\n   E(Z) = E(g(X,Y)) = \\sum_{j=1}^{\\infty}\\sum_{i=1}^{\\infty}g(x_i,y_j)p_{ij}\n$$\n\n# 方差\n\n$$\nD(X)=E([X-E(X)]^2)\n$$\n\n\n\n## 均方差/标准差 \n\n$$\n   \\sqrt{(D(X))}\n$$\n\n## 离散方差\n\n$$\n   D(X) =\\sum_{k=1}^{\\infty}[x-E(x)]^2p_k\n$$\n\n## 连续方差\n\n$$\n   D(X)=\\int_{-\\infty}^{\\infty}[x-E(X)]^2f(x)dx\n$$\n\n$$\n   D(X) = E(X^2)-(E(X))^2\n$$\n\n   \n\n## 标准化变换\n\n$$\n   X^* = \\frac{X-\\mu}{\\sigma}\n$$\n   $X^*$均值为1，方差为0，是X的标准化变量\n\n# 切比雪夫不等式\n\n估计未知概率分布的变量取期望附近区间的概率，这个估计是粗糙的\n\n对于任意正数$\\epsilon$:\n\n$P{|X-\\mu|>=\\epsilon} <=\\frac{\\sigma^2}{\\epsilon^2}$\n\n# 协方差\n\n   $Cov(X,Y) = E{[X-E(X)][Y-E(Y)]}$ 称为X，Y的协方差\n\n   $\\rho_{XY} = \\frac{Cov(X,Y)}{\\sqrt{D(X)}\\sqrt{D(Y)}}$  称为X，Y的相关系数。\n\n   ## 性质\n\n两个随机变量X，Y相互独立的充要条件是$Cove(X,Y)\\neq0$\n\n  - $Cov(X,X) = D(X)$\n  - $Cov(X,Y) = E(XY) - E(X)E(Y)$\n  - $Cov(aX,bY) = abCov(X,Y)$\n  - $Cov(X_1+X_2,Y) = Cov(X_1,Y)+Cov(X_2,Y)$\n  - $|\\rho_{xy}|\\le1$\n  - $|\\rho|=1$ 的充要条件是存在常数a,b 使得\n  - $P\\{Y=aX+b\\}=1$\n\n\n\n# 似然函数\n\n若总体X属于离散型，其分布规律$P\\{X=x\\} = p(x;\\theta)$形式已知，参数未知，事件$\\{X_1=x_1,X_2=x_2 ...\\}$的联合概率：\n\n$L(\\theta) = L(x_1,x_2…;\\theta) = \\prod_{i=1}^{n}p(x_1;\\theta)$\n\n$L(\\theta)$为样本的似然函数\n\n  - 若总体X属于连续型\n\n$L(\\theta) = \\prod_{i=1}^{n}f(x_1;\\theta)$\n\n- 对数似然方程\n\n   $\\frac{d}{d\\theta}lnL(\\theta)=0$\n\n- 无偏估计\n\n   估计值的期望和实际值期望相同","source":"_posts/3_数理统计/概率论与数理统计--浙大.md","raw":"---\ntitle: 概率论与数理统计--浙大\ndate: 2022-03-01 11:32:38\ntags:\n    - 数理统计\n    - default\ncategories: \n    - 数理统计\n---\n\n概率论与数理统计--浙大\n\n<!-- more -->\n\n\n[TOC]\n\n概率论与数理统计--浙大\n\n#期望\n##离散期望\n\n$$\n   E(X)=\\sum_1^{\\infty}x_kp_k\n$$\n\n##连续数学期望\n\n$$\n   E(X) = \\int_{-\\infty}^{\\infty}xf(s)\n$$\n\n## 函数的数学期望\n\n\n$$\nZ=g(X<Y),二维随机变量的概率密度(X,Y)为f(x,y),则Z的期望：\n$$\n\n\n$$\n   E(Z) = E(g(Z)) = \\int_{-\\infty}^{+\\infty}g(x,y)f(x,y)dxdy\n$$\n\n   \n\n   若（X，Y）为离散型随机变量，则：\n\n$$\n   E(Z) = E(g(X,Y)) = \\sum_{j=1}^{\\infty}\\sum_{i=1}^{\\infty}g(x_i,y_j)p_{ij}\n$$\n\n# 方差\n\n$$\nD(X)=E([X-E(X)]^2)\n$$\n\n\n\n## 均方差/标准差 \n\n$$\n   \\sqrt{(D(X))}\n$$\n\n## 离散方差\n\n$$\n   D(X) =\\sum_{k=1}^{\\infty}[x-E(x)]^2p_k\n$$\n\n## 连续方差\n\n$$\n   D(X)=\\int_{-\\infty}^{\\infty}[x-E(X)]^2f(x)dx\n$$\n\n$$\n   D(X) = E(X^2)-(E(X))^2\n$$\n\n   \n\n## 标准化变换\n\n$$\n   X^* = \\frac{X-\\mu}{\\sigma}\n$$\n   $X^*$均值为1，方差为0，是X的标准化变量\n\n# 切比雪夫不等式\n\n估计未知概率分布的变量取期望附近区间的概率，这个估计是粗糙的\n\n对于任意正数$\\epsilon$:\n\n$P{|X-\\mu|>=\\epsilon} <=\\frac{\\sigma^2}{\\epsilon^2}$\n\n# 协方差\n\n   $Cov(X,Y) = E{[X-E(X)][Y-E(Y)]}$ 称为X，Y的协方差\n\n   $\\rho_{XY} = \\frac{Cov(X,Y)}{\\sqrt{D(X)}\\sqrt{D(Y)}}$  称为X，Y的相关系数。\n\n   ## 性质\n\n两个随机变量X，Y相互独立的充要条件是$Cove(X,Y)\\neq0$\n\n  - $Cov(X,X) = D(X)$\n  - $Cov(X,Y) = E(XY) - E(X)E(Y)$\n  - $Cov(aX,bY) = abCov(X,Y)$\n  - $Cov(X_1+X_2,Y) = Cov(X_1,Y)+Cov(X_2,Y)$\n  - $|\\rho_{xy}|\\le1$\n  - $|\\rho|=1$ 的充要条件是存在常数a,b 使得\n  - $P\\{Y=aX+b\\}=1$\n\n\n\n# 似然函数\n\n若总体X属于离散型，其分布规律$P\\{X=x\\} = p(x;\\theta)$形式已知，参数未知，事件$\\{X_1=x_1,X_2=x_2 ...\\}$的联合概率：\n\n$L(\\theta) = L(x_1,x_2…;\\theta) = \\prod_{i=1}^{n}p(x_1;\\theta)$\n\n$L(\\theta)$为样本的似然函数\n\n  - 若总体X属于连续型\n\n$L(\\theta) = \\prod_{i=1}^{n}f(x_1;\\theta)$\n\n- 对数似然方程\n\n   $\\frac{d}{d\\theta}lnL(\\theta)=0$\n\n- 无偏估计\n\n   估计值的期望和实际值期望相同","slug":"3_数理统计/概率论与数理统计--浙大","published":1,"updated":"2022-03-01T04:05:14.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly5a005f8s32hhaibwb2","content":"<p>概率论与数理统计—浙大</p>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<p>概率论与数理统计—浙大</p>\n<h1 id=\"期望\"><a href=\"#期望\" class=\"headerlink\" title=\"期望\"></a>期望</h1><h2 id=\"离散期望\"><a href=\"#离散期望\" class=\"headerlink\" title=\"离散期望\"></a>离散期望</h2><script type=\"math/tex; mode=display\">\n   E(X)=\\sum_1^{\\infty}x_kp_k</script><h2 id=\"连续数学期望\"><a href=\"#连续数学期望\" class=\"headerlink\" title=\"连续数学期望\"></a>连续数学期望</h2><script type=\"math/tex; mode=display\">\n   E(X) = \\int_{-\\infty}^{\\infty}xf(s)</script><h2 id=\"函数的数学期望\"><a href=\"#函数的数学期望\" class=\"headerlink\" title=\"函数的数学期望\"></a>函数的数学期望</h2><script type=\"math/tex; mode=display\">\nZ=g(X<Y),二维随机变量的概率密度(X,Y)为f(x,y),则Z的期望：</script><script type=\"math/tex; mode=display\">\n   E(Z) = E(g(Z)) = \\int_{-\\infty}^{+\\infty}g(x,y)f(x,y)dxdy</script><p>   若（X，Y）为离散型随机变量，则：</p>\n<script type=\"math/tex; mode=display\">\n   E(Z) = E(g(X,Y)) = \\sum_{j=1}^{\\infty}\\sum_{i=1}^{\\infty}g(x_i,y_j)p_{ij}</script><h1 id=\"方差\"><a href=\"#方差\" class=\"headerlink\" title=\"方差\"></a>方差</h1><script type=\"math/tex; mode=display\">\nD(X)=E([X-E(X)]^2)</script><h2 id=\"均方差-标准差\"><a href=\"#均方差-标准差\" class=\"headerlink\" title=\"均方差/标准差\"></a>均方差/标准差</h2><script type=\"math/tex; mode=display\">\n   \\sqrt{(D(X))}</script><h2 id=\"离散方差\"><a href=\"#离散方差\" class=\"headerlink\" title=\"离散方差\"></a>离散方差</h2><script type=\"math/tex; mode=display\">\n   D(X) =\\sum_{k=1}^{\\infty}[x-E(x)]^2p_k</script><h2 id=\"连续方差\"><a href=\"#连续方差\" class=\"headerlink\" title=\"连续方差\"></a>连续方差</h2><script type=\"math/tex; mode=display\">\n   D(X)=\\int_{-\\infty}^{\\infty}[x-E(X)]^2f(x)dx</script><script type=\"math/tex; mode=display\">\n   D(X) = E(X^2)-(E(X))^2</script><h2 id=\"标准化变换\"><a href=\"#标准化变换\" class=\"headerlink\" title=\"标准化变换\"></a>标准化变换</h2><script type=\"math/tex; mode=display\">\n   X^* = \\frac{X-\\mu}{\\sigma}</script><p>   $X^*$均值为1，方差为0，是X的标准化变量</p>\n<h1 id=\"切比雪夫不等式\"><a href=\"#切比雪夫不等式\" class=\"headerlink\" title=\"切比雪夫不等式\"></a>切比雪夫不等式</h1><p>估计未知概率分布的变量取期望附近区间的概率，这个估计是粗糙的</p>\n<p>对于任意正数$\\epsilon$:</p>\n<p>$P{|X-\\mu|&gt;=\\epsilon} &lt;=\\frac{\\sigma^2}{\\epsilon^2}$</p>\n<h1 id=\"协方差\"><a href=\"#协方差\" class=\"headerlink\" title=\"协方差\"></a>协方差</h1><p>   $Cov(X,Y) = E{[X-E(X)][Y-E(Y)]}$ 称为X，Y的协方差</p>\n<p>   $\\rho_{XY} = \\frac{Cov(X,Y)}{\\sqrt{D(X)}\\sqrt{D(Y)}}$  称为X，Y的相关系数。</p>\n<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><p>两个随机变量X，Y相互独立的充要条件是$Cove(X,Y)\\neq0$</p>\n<ul>\n<li>$Cov(X,X) = D(X)$</li>\n<li>$Cov(X,Y) = E(XY) - E(X)E(Y)$</li>\n<li>$Cov(aX,bY) = abCov(X,Y)$</li>\n<li>$Cov(X_1+X_2,Y) = Cov(X_1,Y)+Cov(X_2,Y)$</li>\n<li>$|\\rho_{xy}|\\le1$</li>\n<li>$|\\rho|=1$ 的充要条件是存在常数a,b 使得</li>\n<li>$P\\{Y=aX+b\\}=1$</li>\n</ul>\n<h1 id=\"似然函数\"><a href=\"#似然函数\" class=\"headerlink\" title=\"似然函数\"></a>似然函数</h1><p>若总体X属于离散型，其分布规律$P\\{X=x\\} = p(x;\\theta)$形式已知，参数未知，事件$\\{X_1=x_1,X_2=x_2 …\\}$的联合概率：</p>\n<p>$L(\\theta) = L(x_1,x_2…;\\theta) = \\prod_{i=1}^{n}p(x_1;\\theta)$</p>\n<p>$L(\\theta)$为样本的似然函数</p>\n<ul>\n<li>若总体X属于连续型</li>\n</ul>\n<p>$L(\\theta) = \\prod_{i=1}^{n}f(x_1;\\theta)$</p>\n<ul>\n<li><p>对数似然方程</p>\n<p> $\\frac{d}{d\\theta}lnL(\\theta)=0$</p>\n</li>\n<li><p>无偏估计</p>\n<p> 估计值的期望和实际值期望相同</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>概率论与数理统计—浙大</p>","more":"<p>[TOC]</p>\n<p>概率论与数理统计—浙大</p>\n<h1 id=\"期望\"><a href=\"#期望\" class=\"headerlink\" title=\"期望\"></a>期望</h1><h2 id=\"离散期望\"><a href=\"#离散期望\" class=\"headerlink\" title=\"离散期望\"></a>离散期望</h2><script type=\"math/tex; mode=display\">\n   E(X)=\\sum_1^{\\infty}x_kp_k</script><h2 id=\"连续数学期望\"><a href=\"#连续数学期望\" class=\"headerlink\" title=\"连续数学期望\"></a>连续数学期望</h2><script type=\"math/tex; mode=display\">\n   E(X) = \\int_{-\\infty}^{\\infty}xf(s)</script><h2 id=\"函数的数学期望\"><a href=\"#函数的数学期望\" class=\"headerlink\" title=\"函数的数学期望\"></a>函数的数学期望</h2><script type=\"math/tex; mode=display\">\nZ=g(X<Y),二维随机变量的概率密度(X,Y)为f(x,y),则Z的期望：</script><script type=\"math/tex; mode=display\">\n   E(Z) = E(g(Z)) = \\int_{-\\infty}^{+\\infty}g(x,y)f(x,y)dxdy</script><p>   若（X，Y）为离散型随机变量，则：</p>\n<script type=\"math/tex; mode=display\">\n   E(Z) = E(g(X,Y)) = \\sum_{j=1}^{\\infty}\\sum_{i=1}^{\\infty}g(x_i,y_j)p_{ij}</script><h1 id=\"方差\"><a href=\"#方差\" class=\"headerlink\" title=\"方差\"></a>方差</h1><script type=\"math/tex; mode=display\">\nD(X)=E([X-E(X)]^2)</script><h2 id=\"均方差-标准差\"><a href=\"#均方差-标准差\" class=\"headerlink\" title=\"均方差/标准差\"></a>均方差/标准差</h2><script type=\"math/tex; mode=display\">\n   \\sqrt{(D(X))}</script><h2 id=\"离散方差\"><a href=\"#离散方差\" class=\"headerlink\" title=\"离散方差\"></a>离散方差</h2><script type=\"math/tex; mode=display\">\n   D(X) =\\sum_{k=1}^{\\infty}[x-E(x)]^2p_k</script><h2 id=\"连续方差\"><a href=\"#连续方差\" class=\"headerlink\" title=\"连续方差\"></a>连续方差</h2><script type=\"math/tex; mode=display\">\n   D(X)=\\int_{-\\infty}^{\\infty}[x-E(X)]^2f(x)dx</script><script type=\"math/tex; mode=display\">\n   D(X) = E(X^2)-(E(X))^2</script><h2 id=\"标准化变换\"><a href=\"#标准化变换\" class=\"headerlink\" title=\"标准化变换\"></a>标准化变换</h2><script type=\"math/tex; mode=display\">\n   X^* = \\frac{X-\\mu}{\\sigma}</script><p>   $X^*$均值为1，方差为0，是X的标准化变量</p>\n<h1 id=\"切比雪夫不等式\"><a href=\"#切比雪夫不等式\" class=\"headerlink\" title=\"切比雪夫不等式\"></a>切比雪夫不等式</h1><p>估计未知概率分布的变量取期望附近区间的概率，这个估计是粗糙的</p>\n<p>对于任意正数$\\epsilon$:</p>\n<p>$P{|X-\\mu|&gt;=\\epsilon} &lt;=\\frac{\\sigma^2}{\\epsilon^2}$</p>\n<h1 id=\"协方差\"><a href=\"#协方差\" class=\"headerlink\" title=\"协方差\"></a>协方差</h1><p>   $Cov(X,Y) = E{[X-E(X)][Y-E(Y)]}$ 称为X，Y的协方差</p>\n<p>   $\\rho_{XY} = \\frac{Cov(X,Y)}{\\sqrt{D(X)}\\sqrt{D(Y)}}$  称为X，Y的相关系数。</p>\n<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><p>两个随机变量X，Y相互独立的充要条件是$Cove(X,Y)\\neq0$</p>\n<ul>\n<li>$Cov(X,X) = D(X)$</li>\n<li>$Cov(X,Y) = E(XY) - E(X)E(Y)$</li>\n<li>$Cov(aX,bY) = abCov(X,Y)$</li>\n<li>$Cov(X_1+X_2,Y) = Cov(X_1,Y)+Cov(X_2,Y)$</li>\n<li>$|\\rho_{xy}|\\le1$</li>\n<li>$|\\rho|=1$ 的充要条件是存在常数a,b 使得</li>\n<li>$P\\{Y=aX+b\\}=1$</li>\n</ul>\n<h1 id=\"似然函数\"><a href=\"#似然函数\" class=\"headerlink\" title=\"似然函数\"></a>似然函数</h1><p>若总体X属于离散型，其分布规律$P\\{X=x\\} = p(x;\\theta)$形式已知，参数未知，事件$\\{X_1=x_1,X_2=x_2 …\\}$的联合概率：</p>\n<p>$L(\\theta) = L(x_1,x_2…;\\theta) = \\prod_{i=1}^{n}p(x_1;\\theta)$</p>\n<p>$L(\\theta)$为样本的似然函数</p>\n<ul>\n<li>若总体X属于连续型</li>\n</ul>\n<p>$L(\\theta) = \\prod_{i=1}^{n}f(x_1;\\theta)$</p>\n<ul>\n<li><p>对数似然方程</p>\n<p> $\\frac{d}{d\\theta}lnL(\\theta)=0$</p>\n</li>\n<li><p>无偏估计</p>\n<p> 估计值的期望和实际值期望相同</p>\n</li>\n</ul>"},{"title":"股价问题动态规划","date":"2022-03-01T03:32:38.000Z","_content":"\n股价问题动态规划\n\n<!-- more -->\n\n\n很多读者抱怨股票系列问题奇技淫巧太多，如果面试真的遇到这类问题，基本不会想到那些巧妙的办法，怎么办？所以本文拒绝奇技淫巧，而是稳扎稳打，只用一种通用方法解决所用问题，以不变应万变。\n\n这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。\n\n先随便抽出一道题，看看别人的解法：\n\nint maxProfit(vector<int>& prices) {\n    if(prices.empty()) return 0;\n    int s1=-prices[0],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;\n        \n    for(int i=1;i<prices.size();++i) {            \n        s1 = max(s1, -prices[i]);\n        s2 = max(s2, s1+prices[i]);\n        s3 = max(s3, s2-prices[i]);\n        s4 = max(s4, s3+prices[i]);\n    }\n    return max(0,s4);\n}\n能看懂吧？会做了吗？不可能的，你看不懂，这才正常。就算你勉强看懂了，下一个问题你还是做不出来。为什么别人能写出这么诡异却又高效的解法呢？因为这类问题是有框架的，但是人家不会告诉你的，因为一旦告诉你，你五分钟就学会了，该算法题就不再神秘，变得不堪一击了。\n\n本文就来告诉你这个框架，然后带着你一道一道秒杀。\n\n这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。\n\n第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。\n\n一、穷举框架\n首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。\n\n递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。\n\n而这里，我们不用递归思想进行穷举，而是利用「状态」进行穷举。我们具体到每一天，看看总共有几种可能的「状态」，再找出每个「状态」对应的「选择」。我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象，你只要记住「状态」和「选择」两个词就行，下面实操一下就很容易明白了。\n\nfor 状态1 in 状态1的所有取值：\n    for 状态2 in 状态2的所有取值：\n        for ...\n            dp[状态1][状态2][...] = 择优(选择1，选择2...)\n比如说这个问题，每天都有三种「选择」：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k > 0 的前提下操作。\n\n很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：\n\ndp[i][k][0 or 1]\n0 <= i <= n-1, 1 <= k <= K\nn 为天数，大 K 为最多交易数\n此问题共 n × K × 2 种状态，全部穷举就能搞定。\n\nfor 0 <= i < n:\n    for 1 <= k <= K:\n        for s in {0, 1}:\n            dp[i][k][s] = max(buy, sell, rest)\n而且我们可以用自然语言描述出每一个状态的含义，比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？\n\n我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。\n\n记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。\n\n二、状态转移框架\n现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。\n\n\n\n通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，我们来写一下状态转移方程：\n\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\n              max(   选择 rest  ,           选择 sell      )\n\n解释：今天我没有持有股票，有两种可能：\n要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；\n要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。\n\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\n              max(   选择 rest  ,           选择 buy         )\n\n解释：今天我持有着股票，有两种可能：\n要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；\n要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。\n这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。\n\n现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。不过还差最后一点点，就是定义 base case，即最简单的情况。\n\ndp[-1][k][0] = 0\n解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。\ndp[-1][k][1] = -infinity\n解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。\ndp[i][0][0] = 0\n解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。\ndp[i][0][1] = -infinity\n解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。\n把上面的状态转移方程总结一下：\n\nbase case：\ndp[-1][k][0] = dp[i][0][0] = 0\ndp[-1][k][1] = dp[i][0][1] = -infinity\n\n状态转移方程：\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\n读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。\n\n三、秒杀题目\n第一题，k = 1\n\n直接套状态转移方程，根据 base case，可以做一些化简：\n\ndp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])\ndp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) \n            = max(dp[i-1][1][1], -prices[i])\n解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。\n\n现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。\n可以进行进一步化简去掉所有 k：\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\ndp[i][1] = max(dp[i-1][1], -prices[i])\n直接写出代码：\n\nint n = prices.length;\nint[][] dp = new int[n][2];\nfor (int i = 0; i < n; i++) {\n    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);\n    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);\n}\nreturn dp[n - 1][0];\n显然 i = 0 时 dp[i-1] 是不合法的。这是因为我们没有对 i 的 base case 进行处理。可以这样处理：\n\nfor (int i = 0; i < n; i++) {\n    if (i - 1 == -1) {\n        dp[i][0] = 0;\n        // 解释：\n        //   dp[i][0] \n        // = max(dp[-1][0], dp[-1][1] + prices[i])\n        // = max(0, -infinity + prices[i]) = 0\n        dp[i][1] = -prices[i];\n        //解释：\n        //   dp[i][1] \n        // = max(dp[-1][1], dp[-1][0] - prices[i])\n        // = max(-infinity, 0 - prices[i]) \n        // = -prices[i]\n        continue;\n    }\n    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);\n    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);\n}\nreturn dp[n - 1][0];\n第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，新状态只和相邻的一个状态有关，其实不用整个 dp 数组，只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):\n\n// k == 1\nint maxProfit_k_1(int[] prices) {\n    int n = prices.length;\n    // base case: dp[-1][0] = 0, dp[-1][1] = -infinity\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n        // dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\n        // dp[i][1] = max(dp[i-1][1], -prices[i])\n        dp_i_1 = Math.max(dp_i_1, -prices[i]);\n    }\n    return dp_i_0;\n}\n两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。\n\n第二题，k = +infinity\n\n如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。可以这样改写框架：\n\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\n            = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])\n\n我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\ndp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n直接翻译成代码：\n\nint maxProfit_k_inf(int[] prices) {\n    int n = prices.length;\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n        int temp = dp_i_0;\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\n        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);\n    }\n    return dp_i_0;\n}\n第三题，k = +infinity with cooldown\n\n每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：\n\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\ndp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。\n翻译成代码：\n\nint maxProfit_with_cool(int[] prices) {\n    int n = prices.length;\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\n    int dp_pre_0 = 0; // 代表 dp[i-2][0]\n    for (int i = 0; i < n; i++) {\n        int temp = dp_i_0;\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\n        dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);\n        dp_pre_0 = temp;\n    }\n    return dp_i_0;\n}\n第四题，k = +infinity with fee\n\n每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：\n\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\ndp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)\n解释：相当于买入股票的价格升高了。\n在第一个式子里减也是一样的，相当于卖出股票的价格减小了。\n直接翻译成代码：\n\nint maxProfit_with_fee(int[] prices, int fee) {\n    int n = prices.length;\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n        int temp = dp_i_0;\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\n        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);\n    }\n    return dp_i_0;\n}\n第五题，k = 2\n\nk = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。\n\n这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了。我们直接写代码，边写边分析原因。\n\n原始的动态转移方程，没有可化简的地方\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\n按照之前的代码，我们可能想当然这样写代码（错误的）：\n\nint k = 2;\nint[][][] dp = new int[n][k + 1][2];\nfor (int i = 0; i < n; i++)\n    if (i - 1 == -1) { /* 处理一下 base case*/ }\n    dp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\n    dp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);\n}\nreturn dp[n - 1][k][0];\n为什么错误？我这不是照着状态转移方程写的吗？\n\n还记得前面总结的「穷举框架」吗？就是说我们必须穷举所有状态。其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：\n\nint max_k = 2;\nint[][][] dp = new int[n][max_k + 1][2];\nfor (int i = 0; i < n; i++) {\n    for (int k = max_k; k >= 1; k--) {\n        if (i - 1 == -1) { \n            /* 处理 base case */\n            dp[i][k][0] = 0;\n            dp[i][k][1] = -prices[i];\n            continue;\n        }\n        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\n        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);\n    }\n}\n// 穷举了 n × max_k × 2 个状态，正确。\nreturn dp[n - 1][max_k][0];\n如果你不理解，可以返回第一点「穷举框架」重新阅读体会一下。\n\n这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况手动列举出来也可以：\n\ndp[i][2][0] = max(dp[i-1][2][0], dp[i-1][2][1] + prices[i])\ndp[i][2][1] = max(dp[i-1][2][1], dp[i-1][1][0] - prices[i])\ndp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])\ndp[i][1][1] = max(dp[i-1][1][1], -prices[i])\n\nint maxProfit_k_2(int[] prices) {\n    int dp_i10 = 0, dp_i11 = Integer.MIN_VALUE;\n    int dp_i20 = 0, dp_i21 = Integer.MIN_VALUE;\n    for (int price : prices) {\n        dp_i20 = Math.max(dp_i20, dp_i21 + price);\n        dp_i21 = Math.max(dp_i21, dp_i10 - price);\n        dp_i10 = Math.max(dp_i10, dp_i11 + price);\n        dp_i11 = Math.max(dp_i11, -price);\n    }\n    return dp_i20;\n}\n有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会一头雾水，大惊失色，不得不对你肃然起敬。\n\n第六题，k = any integer\n\n有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？\n\n一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。\n\n直接把之前的代码重用：\n\nint maxProfit_k_any(int max_k, int[] prices) {\n    int n = prices.length;\n    if (max_k > n / 2) \n        return maxProfit_k_inf(prices);\n\n    int[][][] dp = new int[n][max_k + 1][2];\n    for (int i = 0; i < n; i++) \n        for (int k = max_k; k >= 1; k--) {\n            if (i - 1 == -1) { \n                /* 处理 base case */\n                dp[i][k][0] = 0;\n                dp[i][k][1] = -prices[i];\n                continue;\n            }\n            dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\n            dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);     \n        }\n    return dp[n - 1][max_k][0];\n}\n至此，6 道题目通过一个状态转移方程全部解决。\n\n四、最后总结\n本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。\n\n关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？\n\n具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「三维 DP」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有。\n\n所以，大家不要被各种高大上的名词吓到，再多的困难问题，奇技淫巧，也不过是基本套路的不断升级组合产生的。只要把住算法的底层原理，即可举一反三，逐个击破。\n\n作者：labuladong\n链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/3_数理统计/股价问题动态规划.md","raw":"---\ntitle: 股价问题动态规划\ndate: 2022-03-01 11:32:38\ntags:\n    - 数理统计\n    - default\ncategories: \n    - 数理统计\n---\n\n股价问题动态规划\n\n<!-- more -->\n\n\n很多读者抱怨股票系列问题奇技淫巧太多，如果面试真的遇到这类问题，基本不会想到那些巧妙的办法，怎么办？所以本文拒绝奇技淫巧，而是稳扎稳打，只用一种通用方法解决所用问题，以不变应万变。\n\n这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。\n\n先随便抽出一道题，看看别人的解法：\n\nint maxProfit(vector<int>& prices) {\n    if(prices.empty()) return 0;\n    int s1=-prices[0],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;\n        \n    for(int i=1;i<prices.size();++i) {            \n        s1 = max(s1, -prices[i]);\n        s2 = max(s2, s1+prices[i]);\n        s3 = max(s3, s2-prices[i]);\n        s4 = max(s4, s3+prices[i]);\n    }\n    return max(0,s4);\n}\n能看懂吧？会做了吗？不可能的，你看不懂，这才正常。就算你勉强看懂了，下一个问题你还是做不出来。为什么别人能写出这么诡异却又高效的解法呢？因为这类问题是有框架的，但是人家不会告诉你的，因为一旦告诉你，你五分钟就学会了，该算法题就不再神秘，变得不堪一击了。\n\n本文就来告诉你这个框架，然后带着你一道一道秒杀。\n\n这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。\n\n第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。\n\n一、穷举框架\n首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。\n\n递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。\n\n而这里，我们不用递归思想进行穷举，而是利用「状态」进行穷举。我们具体到每一天，看看总共有几种可能的「状态」，再找出每个「状态」对应的「选择」。我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象，你只要记住「状态」和「选择」两个词就行，下面实操一下就很容易明白了。\n\nfor 状态1 in 状态1的所有取值：\n    for 状态2 in 状态2的所有取值：\n        for ...\n            dp[状态1][状态2][...] = 择优(选择1，选择2...)\n比如说这个问题，每天都有三种「选择」：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k > 0 的前提下操作。\n\n很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：\n\ndp[i][k][0 or 1]\n0 <= i <= n-1, 1 <= k <= K\nn 为天数，大 K 为最多交易数\n此问题共 n × K × 2 种状态，全部穷举就能搞定。\n\nfor 0 <= i < n:\n    for 1 <= k <= K:\n        for s in {0, 1}:\n            dp[i][k][s] = max(buy, sell, rest)\n而且我们可以用自然语言描述出每一个状态的含义，比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？\n\n我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。\n\n记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。\n\n二、状态转移框架\n现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。\n\n\n\n通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，我们来写一下状态转移方程：\n\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\n              max(   选择 rest  ,           选择 sell      )\n\n解释：今天我没有持有股票，有两种可能：\n要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；\n要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。\n\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\n              max(   选择 rest  ,           选择 buy         )\n\n解释：今天我持有着股票，有两种可能：\n要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；\n要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。\n这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。\n\n现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。不过还差最后一点点，就是定义 base case，即最简单的情况。\n\ndp[-1][k][0] = 0\n解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。\ndp[-1][k][1] = -infinity\n解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。\ndp[i][0][0] = 0\n解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。\ndp[i][0][1] = -infinity\n解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。\n把上面的状态转移方程总结一下：\n\nbase case：\ndp[-1][k][0] = dp[i][0][0] = 0\ndp[-1][k][1] = dp[i][0][1] = -infinity\n\n状态转移方程：\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\n读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。\n\n三、秒杀题目\n第一题，k = 1\n\n直接套状态转移方程，根据 base case，可以做一些化简：\n\ndp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])\ndp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) \n            = max(dp[i-1][1][1], -prices[i])\n解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。\n\n现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。\n可以进行进一步化简去掉所有 k：\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\ndp[i][1] = max(dp[i-1][1], -prices[i])\n直接写出代码：\n\nint n = prices.length;\nint[][] dp = new int[n][2];\nfor (int i = 0; i < n; i++) {\n    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);\n    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);\n}\nreturn dp[n - 1][0];\n显然 i = 0 时 dp[i-1] 是不合法的。这是因为我们没有对 i 的 base case 进行处理。可以这样处理：\n\nfor (int i = 0; i < n; i++) {\n    if (i - 1 == -1) {\n        dp[i][0] = 0;\n        // 解释：\n        //   dp[i][0] \n        // = max(dp[-1][0], dp[-1][1] + prices[i])\n        // = max(0, -infinity + prices[i]) = 0\n        dp[i][1] = -prices[i];\n        //解释：\n        //   dp[i][1] \n        // = max(dp[-1][1], dp[-1][0] - prices[i])\n        // = max(-infinity, 0 - prices[i]) \n        // = -prices[i]\n        continue;\n    }\n    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);\n    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);\n}\nreturn dp[n - 1][0];\n第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，新状态只和相邻的一个状态有关，其实不用整个 dp 数组，只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):\n\n// k == 1\nint maxProfit_k_1(int[] prices) {\n    int n = prices.length;\n    // base case: dp[-1][0] = 0, dp[-1][1] = -infinity\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n        // dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\n        // dp[i][1] = max(dp[i-1][1], -prices[i])\n        dp_i_1 = Math.max(dp_i_1, -prices[i]);\n    }\n    return dp_i_0;\n}\n两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。\n\n第二题，k = +infinity\n\n如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。可以这样改写框架：\n\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\n            = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])\n\n我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\ndp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n直接翻译成代码：\n\nint maxProfit_k_inf(int[] prices) {\n    int n = prices.length;\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n        int temp = dp_i_0;\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\n        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);\n    }\n    return dp_i_0;\n}\n第三题，k = +infinity with cooldown\n\n每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：\n\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\ndp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。\n翻译成代码：\n\nint maxProfit_with_cool(int[] prices) {\n    int n = prices.length;\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\n    int dp_pre_0 = 0; // 代表 dp[i-2][0]\n    for (int i = 0; i < n; i++) {\n        int temp = dp_i_0;\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\n        dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);\n        dp_pre_0 = temp;\n    }\n    return dp_i_0;\n}\n第四题，k = +infinity with fee\n\n每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：\n\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\ndp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)\n解释：相当于买入股票的价格升高了。\n在第一个式子里减也是一样的，相当于卖出股票的价格减小了。\n直接翻译成代码：\n\nint maxProfit_with_fee(int[] prices, int fee) {\n    int n = prices.length;\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n        int temp = dp_i_0;\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\n        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);\n    }\n    return dp_i_0;\n}\n第五题，k = 2\n\nk = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。\n\n这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了。我们直接写代码，边写边分析原因。\n\n原始的动态转移方程，没有可化简的地方\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\n按照之前的代码，我们可能想当然这样写代码（错误的）：\n\nint k = 2;\nint[][][] dp = new int[n][k + 1][2];\nfor (int i = 0; i < n; i++)\n    if (i - 1 == -1) { /* 处理一下 base case*/ }\n    dp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\n    dp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);\n}\nreturn dp[n - 1][k][0];\n为什么错误？我这不是照着状态转移方程写的吗？\n\n还记得前面总结的「穷举框架」吗？就是说我们必须穷举所有状态。其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：\n\nint max_k = 2;\nint[][][] dp = new int[n][max_k + 1][2];\nfor (int i = 0; i < n; i++) {\n    for (int k = max_k; k >= 1; k--) {\n        if (i - 1 == -1) { \n            /* 处理 base case */\n            dp[i][k][0] = 0;\n            dp[i][k][1] = -prices[i];\n            continue;\n        }\n        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\n        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);\n    }\n}\n// 穷举了 n × max_k × 2 个状态，正确。\nreturn dp[n - 1][max_k][0];\n如果你不理解，可以返回第一点「穷举框架」重新阅读体会一下。\n\n这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况手动列举出来也可以：\n\ndp[i][2][0] = max(dp[i-1][2][0], dp[i-1][2][1] + prices[i])\ndp[i][2][1] = max(dp[i-1][2][1], dp[i-1][1][0] - prices[i])\ndp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])\ndp[i][1][1] = max(dp[i-1][1][1], -prices[i])\n\nint maxProfit_k_2(int[] prices) {\n    int dp_i10 = 0, dp_i11 = Integer.MIN_VALUE;\n    int dp_i20 = 0, dp_i21 = Integer.MIN_VALUE;\n    for (int price : prices) {\n        dp_i20 = Math.max(dp_i20, dp_i21 + price);\n        dp_i21 = Math.max(dp_i21, dp_i10 - price);\n        dp_i10 = Math.max(dp_i10, dp_i11 + price);\n        dp_i11 = Math.max(dp_i11, -price);\n    }\n    return dp_i20;\n}\n有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会一头雾水，大惊失色，不得不对你肃然起敬。\n\n第六题，k = any integer\n\n有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？\n\n一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。\n\n直接把之前的代码重用：\n\nint maxProfit_k_any(int max_k, int[] prices) {\n    int n = prices.length;\n    if (max_k > n / 2) \n        return maxProfit_k_inf(prices);\n\n    int[][][] dp = new int[n][max_k + 1][2];\n    for (int i = 0; i < n; i++) \n        for (int k = max_k; k >= 1; k--) {\n            if (i - 1 == -1) { \n                /* 处理 base case */\n                dp[i][k][0] = 0;\n                dp[i][k][1] = -prices[i];\n                continue;\n            }\n            dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\n            dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);     \n        }\n    return dp[n - 1][max_k][0];\n}\n至此，6 道题目通过一个状态转移方程全部解决。\n\n四、最后总结\n本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。\n\n关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？\n\n具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「三维 DP」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有。\n\n所以，大家不要被各种高大上的名词吓到，再多的困难问题，奇技淫巧，也不过是基本套路的不断升级组合产生的。只要把住算法的底层原理，即可举一反三，逐个击破。\n\n作者：labuladong\n链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"3_数理统计/股价问题动态规划","published":1,"updated":"2022-03-01T04:05:20.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07mly5h007q8s32cqk7go1q","content":"<p>股价问题动态规划</p>\n<span id=\"more\"></span>\n<p>很多读者抱怨股票系列问题奇技淫巧太多，如果面试真的遇到这类问题，基本不会想到那些巧妙的办法，怎么办？所以本文拒绝奇技淫巧，而是稳扎稳打，只用一种通用方法解决所用问题，以不变应万变。</p>\n<p>这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。</p>\n<p>先随便抽出一道题，看看别人的解法：</p>\n<p>int maxProfit(vector<int>&amp; prices) {<br>    if(prices.empty()) return 0;<br>    int s1=-prices[0],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;</p>\n<pre><code>for(int i=1;i&lt;prices.size();++i) &#123;            \n    s1 = max(s1, -prices[i]);\n    s2 = max(s2, s1+prices[i]);\n    s3 = max(s3, s2-prices[i]);\n    s4 = max(s4, s3+prices[i]);\n&#125;\nreturn max(0,s4);\n</code></pre><p>}<br>能看懂吧？会做了吗？不可能的，你看不懂，这才正常。就算你勉强看懂了，下一个问题你还是做不出来。为什么别人能写出这么诡异却又高效的解法呢？因为这类问题是有框架的，但是人家不会告诉你的，因为一旦告诉你，你五分钟就学会了，该算法题就不再神秘，变得不堪一击了。</p>\n<p>本文就来告诉你这个框架，然后带着你一道一道秒杀。</p>\n<p>这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。</p>\n<p>第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。</p>\n<p>一、穷举框架<br>首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。</p>\n<p>递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。</p>\n<p>而这里，我们不用递归思想进行穷举，而是利用「状态」进行穷举。我们具体到每一天，看看总共有几种可能的「状态」，再找出每个「状态」对应的「选择」。我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象，你只要记住「状态」和「选择」两个词就行，下面实操一下就很容易明白了。</p>\n<p>for 状态1 in 状态1的所有取值：<br>    for 状态2 in 状态2的所有取值：<br>        for …<br>            dp[状态1][状态2][…] = 择优(选择1，选择2…)<br>比如说这个问题，每天都有三种「选择」：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k &gt; 0 的前提下操作。</p>\n<p>很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：</p>\n<p>dp[i][k][0 or 1]<br>0 &lt;= i &lt;= n-1, 1 &lt;= k &lt;= K<br>n 为天数，大 K 为最多交易数<br>此问题共 n × K × 2 种状态，全部穷举就能搞定。</p>\n<p>for 0 &lt;= i &lt; n:<br>    for 1 &lt;= k &lt;= K:<br>        for s in {0, 1}:<br>            dp[i][k][s] = max(buy, sell, rest)<br>而且我们可以用自然语言描述出每一个状态的含义，比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？</p>\n<p>我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。</p>\n<p>记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。</p>\n<p>二、状态转移框架<br>现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。</p>\n<p>通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，我们来写一下状态转移方程：</p>\n<p>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>              max(   选择 rest  ,           选择 sell      )</p>\n<p>解释：今天我没有持有股票，有两种可能：<br>要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；<br>要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。</p>\n<p>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>              max(   选择 rest  ,           选择 buy         )</p>\n<p>解释：今天我持有着股票，有两种可能：<br>要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；<br>要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。<br>这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。</p>\n<p>现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。不过还差最后一点点，就是定义 base case，即最简单的情况。</p>\n<p>dp[-1][k][0] = 0<br>解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。<br>dp[-1][k][1] = -infinity<br>解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。<br>dp[i][0][0] = 0<br>解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。<br>dp[i][0][1] = -infinity<br>解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。<br>把上面的状态转移方程总结一下：</p>\n<p>base case：<br>dp[-1][k][0] = dp[i][0][0] = 0<br>dp[-1][k][1] = dp[i][0][1] = -infinity</p>\n<p>状态转移方程：<br>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。</p>\n<p>三、秒杀题目<br>第一题，k = 1</p>\n<p>直接套状态转移方程，根据 base case，可以做一些化简：</p>\n<p>dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])<br>dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i])<br>            = max(dp[i-1][1][1], -prices[i])<br>解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。</p>\n<p>现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。<br>可以进行进一步化简去掉所有 k：<br>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], -prices[i])<br>直接写出代码：</p>\n<p>int n = prices.length;<br>int[][] dp = new int[n][2];<br>for (int i = 0; i &lt; n; i++) {<br>    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);<br>    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);<br>}<br>return dp[n - 1][0];<br>显然 i = 0 时 dp[i-1] 是不合法的。这是因为我们没有对 i 的 base case 进行处理。可以这样处理：</p>\n<p>for (int i = 0; i &lt; n; i++) {<br>    if (i - 1 == -1) {<br>        dp[i][0] = 0;<br>        // 解释：<br>        //   dp[i][0]<br>        // = max(dp[-1][0], dp[-1][1] + prices[i])<br>        // = max(0, -infinity + prices[i]) = 0<br>        dp[i][1] = -prices[i];<br>        //解释：<br>        //   dp[i][1]<br>        // = max(dp[-1][1], dp[-1][0] - prices[i])<br>        // = max(-infinity, 0 - prices[i])<br>        // = -prices[i]<br>        continue;<br>    }<br>    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);<br>    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);<br>}<br>return dp[n - 1][0];<br>第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，新状态只和相邻的一个状态有关，其实不用整个 dp 数组，只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):</p>\n<p>// k == 1<br>int maxProfit_k_1(int[] prices) {<br>    int n = prices.length;<br>    // base case: dp[-1][0] = 0, dp[-1][1] = -infinity<br>    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;<br>    for (int i = 0; i &lt; n; i++) {<br>        // dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        // dp[i][1] = max(dp[i-1][1], -prices[i])<br>        dp_i_1 = Math.max(dp_i_1, -prices[i]);<br>    }<br>    return dp_i_0;<br>}<br>两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。</p>\n<p>第二题，k = +infinity</p>\n<p>如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。可以这样改写框架：</p>\n<p>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>            = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])</p>\n<p>我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：<br>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])<br>直接翻译成代码：</p>\n<p>int maxProfit_k_inf(int[] prices) {<br>    int n = prices.length;<br>    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;<br>    for (int i = 0; i &lt; n; i++) {<br>        int temp = dp_i_0;<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);<br>    }<br>    return dp_i_0;<br>}<br>第三题，k = +infinity with cooldown</p>\n<p>每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：</p>\n<p>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])<br>解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。<br>翻译成代码：</p>\n<p>int maxProfit_with_cool(int[] prices) {<br>    int n = prices.length;<br>    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;<br>    int dp_pre_0 = 0; // 代表 dp[i-2][0]<br>    for (int i = 0; i &lt; n; i++) {<br>        int temp = dp_i_0;<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);<br>        dp_pre_0 = temp;<br>    }<br>    return dp_i_0;<br>}<br>第四题，k = +infinity with fee</p>\n<p>每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：</p>\n<p>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)<br>解释：相当于买入股票的价格升高了。<br>在第一个式子里减也是一样的，相当于卖出股票的价格减小了。<br>直接翻译成代码：</p>\n<p>int maxProfit_with_fee(int[] prices, int fee) {<br>    int n = prices.length;<br>    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;<br>    for (int i = 0; i &lt; n; i++) {<br>        int temp = dp_i_0;<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);<br>    }<br>    return dp_i_0;<br>}<br>第五题，k = 2</p>\n<p>k = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。</p>\n<p>这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了。我们直接写代码，边写边分析原因。</p>\n<p>原始的动态转移方程，没有可化简的地方<br>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>按照之前的代码，我们可能想当然这样写代码（错误的）：</p>\n<p>int k = 2;<br>int[][][] dp = new int[n][k + 1][2];<br>for (int i = 0; i &lt; n; i++)<br>    if (i - 1 == -1) { /<em> 处理一下 base case</em>/ }<br>    dp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);<br>    dp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);<br>}<br>return dp[n - 1][k][0];<br>为什么错误？我这不是照着状态转移方程写的吗？</p>\n<p>还记得前面总结的「穷举框架」吗？就是说我们必须穷举所有状态。其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：</p>\n<p>int max_k = 2;<br>int[][][] dp = new int[n][max_k + 1][2];<br>for (int i = 0; i &lt; n; i++) {<br>    for (int k = max_k; k &gt;= 1; k—) {<br>        if (i - 1 == -1) {<br>            /<em> 处理 base case </em>/<br>            dp[i][k][0] = 0;<br>            dp[i][k][1] = -prices[i];<br>            continue;<br>        }<br>        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);<br>        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);<br>    }<br>}<br>// 穷举了 n × max_k × 2 个状态，正确。<br>return dp[n - 1][max_k][0];<br>如果你不理解，可以返回第一点「穷举框架」重新阅读体会一下。</p>\n<p>这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况手动列举出来也可以：</p>\n<p>dp[i][2][0] = max(dp[i-1][2][0], dp[i-1][2][1] + prices[i])<br>dp[i][2][1] = max(dp[i-1][2][1], dp[i-1][1][0] - prices[i])<br>dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])<br>dp[i][1][1] = max(dp[i-1][1][1], -prices[i])</p>\n<p>int maxProfit_k_2(int[] prices) {<br>    int dp_i10 = 0, dp_i11 = Integer.MIN_VALUE;<br>    int dp_i20 = 0, dp_i21 = Integer.MIN_VALUE;<br>    for (int price : prices) {<br>        dp_i20 = Math.max(dp_i20, dp_i21 + price);<br>        dp_i21 = Math.max(dp_i21, dp_i10 - price);<br>        dp_i10 = Math.max(dp_i10, dp_i11 + price);<br>        dp_i11 = Math.max(dp_i11, -price);<br>    }<br>    return dp_i20;<br>}<br>有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会一头雾水，大惊失色，不得不对你肃然起敬。</p>\n<p>第六题，k = any integer</p>\n<p>有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？</p>\n<p>一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。</p>\n<p>直接把之前的代码重用：</p>\n<p>int maxProfit_k_any(int max_k, int[] prices) {<br>    int n = prices.length;<br>    if (max_k &gt; n / 2)<br>        return maxProfit_k_inf(prices);</p>\n<pre><code>int[][][] dp = new int[n][max_k + 1][2];\nfor (int i = 0; i &lt; n; i++) \n    for (int k = max_k; k &gt;= 1; k--) &#123;\n        if (i - 1 == -1) &#123; \n            /* 处理 base case */\n            dp[i][k][0] = 0;\n            dp[i][k][1] = -prices[i];\n            continue;\n        &#125;\n        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\n        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);     \n    &#125;\nreturn dp[n - 1][max_k][0];\n</code></pre><p>}<br>至此，6 道题目通过一个状态转移方程全部解决。</p>\n<p>四、最后总结<br>本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。</p>\n<p>关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？</p>\n<p>具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「三维 DP」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有。</p>\n<p>所以，大家不要被各种高大上的名词吓到，再多的困难问题，奇技淫巧，也不过是基本套路的不断升级组合产生的。只要把住算法的底层原理，即可举一反三，逐个击破。</p>\n<p>作者：labuladong<br>链接：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"<p>股价问题动态规划</p>","more":"<p>很多读者抱怨股票系列问题奇技淫巧太多，如果面试真的遇到这类问题，基本不会想到那些巧妙的办法，怎么办？所以本文拒绝奇技淫巧，而是稳扎稳打，只用一种通用方法解决所用问题，以不变应万变。</p>\n<p>这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。</p>\n<p>先随便抽出一道题，看看别人的解法：</p>\n<p>int maxProfit(vector<int>&amp; prices) {<br>    if(prices.empty()) return 0;<br>    int s1=-prices[0],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;</p>\n<pre><code>for(int i=1;i&lt;prices.size();++i) &#123;            \n    s1 = max(s1, -prices[i]);\n    s2 = max(s2, s1+prices[i]);\n    s3 = max(s3, s2-prices[i]);\n    s4 = max(s4, s3+prices[i]);\n&#125;\nreturn max(0,s4);\n</code></pre><p>}<br>能看懂吧？会做了吗？不可能的，你看不懂，这才正常。就算你勉强看懂了，下一个问题你还是做不出来。为什么别人能写出这么诡异却又高效的解法呢？因为这类问题是有框架的，但是人家不会告诉你的，因为一旦告诉你，你五分钟就学会了，该算法题就不再神秘，变得不堪一击了。</p>\n<p>本文就来告诉你这个框架，然后带着你一道一道秒杀。</p>\n<p>这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。</p>\n<p>第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。</p>\n<p>一、穷举框架<br>首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。</p>\n<p>递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。</p>\n<p>而这里，我们不用递归思想进行穷举，而是利用「状态」进行穷举。我们具体到每一天，看看总共有几种可能的「状态」，再找出每个「状态」对应的「选择」。我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象，你只要记住「状态」和「选择」两个词就行，下面实操一下就很容易明白了。</p>\n<p>for 状态1 in 状态1的所有取值：<br>    for 状态2 in 状态2的所有取值：<br>        for …<br>            dp[状态1][状态2][…] = 择优(选择1，选择2…)<br>比如说这个问题，每天都有三种「选择」：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k &gt; 0 的前提下操作。</p>\n<p>很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：</p>\n<p>dp[i][k][0 or 1]<br>0 &lt;= i &lt;= n-1, 1 &lt;= k &lt;= K<br>n 为天数，大 K 为最多交易数<br>此问题共 n × K × 2 种状态，全部穷举就能搞定。</p>\n<p>for 0 &lt;= i &lt; n:<br>    for 1 &lt;= k &lt;= K:<br>        for s in {0, 1}:<br>            dp[i][k][s] = max(buy, sell, rest)<br>而且我们可以用自然语言描述出每一个状态的含义，比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？</p>\n<p>我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。</p>\n<p>记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。</p>\n<p>二、状态转移框架<br>现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。</p>\n<p>通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，我们来写一下状态转移方程：</p>\n<p>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>              max(   选择 rest  ,           选择 sell      )</p>\n<p>解释：今天我没有持有股票，有两种可能：<br>要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；<br>要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。</p>\n<p>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>              max(   选择 rest  ,           选择 buy         )</p>\n<p>解释：今天我持有着股票，有两种可能：<br>要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；<br>要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。<br>这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。</p>\n<p>现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。不过还差最后一点点，就是定义 base case，即最简单的情况。</p>\n<p>dp[-1][k][0] = 0<br>解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。<br>dp[-1][k][1] = -infinity<br>解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。<br>dp[i][0][0] = 0<br>解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。<br>dp[i][0][1] = -infinity<br>解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。<br>把上面的状态转移方程总结一下：</p>\n<p>base case：<br>dp[-1][k][0] = dp[i][0][0] = 0<br>dp[-1][k][1] = dp[i][0][1] = -infinity</p>\n<p>状态转移方程：<br>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。</p>\n<p>三、秒杀题目<br>第一题，k = 1</p>\n<p>直接套状态转移方程，根据 base case，可以做一些化简：</p>\n<p>dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])<br>dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i])<br>            = max(dp[i-1][1][1], -prices[i])<br>解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。</p>\n<p>现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。<br>可以进行进一步化简去掉所有 k：<br>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], -prices[i])<br>直接写出代码：</p>\n<p>int n = prices.length;<br>int[][] dp = new int[n][2];<br>for (int i = 0; i &lt; n; i++) {<br>    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);<br>    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);<br>}<br>return dp[n - 1][0];<br>显然 i = 0 时 dp[i-1] 是不合法的。这是因为我们没有对 i 的 base case 进行处理。可以这样处理：</p>\n<p>for (int i = 0; i &lt; n; i++) {<br>    if (i - 1 == -1) {<br>        dp[i][0] = 0;<br>        // 解释：<br>        //   dp[i][0]<br>        // = max(dp[-1][0], dp[-1][1] + prices[i])<br>        // = max(0, -infinity + prices[i]) = 0<br>        dp[i][1] = -prices[i];<br>        //解释：<br>        //   dp[i][1]<br>        // = max(dp[-1][1], dp[-1][0] - prices[i])<br>        // = max(-infinity, 0 - prices[i])<br>        // = -prices[i]<br>        continue;<br>    }<br>    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);<br>    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);<br>}<br>return dp[n - 1][0];<br>第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，新状态只和相邻的一个状态有关，其实不用整个 dp 数组，只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):</p>\n<p>// k == 1<br>int maxProfit_k_1(int[] prices) {<br>    int n = prices.length;<br>    // base case: dp[-1][0] = 0, dp[-1][1] = -infinity<br>    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;<br>    for (int i = 0; i &lt; n; i++) {<br>        // dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        // dp[i][1] = max(dp[i-1][1], -prices[i])<br>        dp_i_1 = Math.max(dp_i_1, -prices[i]);<br>    }<br>    return dp_i_0;<br>}<br>两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。</p>\n<p>第二题，k = +infinity</p>\n<p>如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。可以这样改写框架：</p>\n<p>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>            = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])</p>\n<p>我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：<br>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])<br>直接翻译成代码：</p>\n<p>int maxProfit_k_inf(int[] prices) {<br>    int n = prices.length;<br>    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;<br>    for (int i = 0; i &lt; n; i++) {<br>        int temp = dp_i_0;<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);<br>    }<br>    return dp_i_0;<br>}<br>第三题，k = +infinity with cooldown</p>\n<p>每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：</p>\n<p>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])<br>解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。<br>翻译成代码：</p>\n<p>int maxProfit_with_cool(int[] prices) {<br>    int n = prices.length;<br>    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;<br>    int dp_pre_0 = 0; // 代表 dp[i-2][0]<br>    for (int i = 0; i &lt; n; i++) {<br>        int temp = dp_i_0;<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);<br>        dp_pre_0 = temp;<br>    }<br>    return dp_i_0;<br>}<br>第四题，k = +infinity with fee</p>\n<p>每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：</p>\n<p>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)<br>解释：相当于买入股票的价格升高了。<br>在第一个式子里减也是一样的，相当于卖出股票的价格减小了。<br>直接翻译成代码：</p>\n<p>int maxProfit_with_fee(int[] prices, int fee) {<br>    int n = prices.length;<br>    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;<br>    for (int i = 0; i &lt; n; i++) {<br>        int temp = dp_i_0;<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);<br>    }<br>    return dp_i_0;<br>}<br>第五题，k = 2</p>\n<p>k = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。</p>\n<p>这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了。我们直接写代码，边写边分析原因。</p>\n<p>原始的动态转移方程，没有可化简的地方<br>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>按照之前的代码，我们可能想当然这样写代码（错误的）：</p>\n<p>int k = 2;<br>int[][][] dp = new int[n][k + 1][2];<br>for (int i = 0; i &lt; n; i++)<br>    if (i - 1 == -1) { /<em> 处理一下 base case</em>/ }<br>    dp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);<br>    dp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);<br>}<br>return dp[n - 1][k][0];<br>为什么错误？我这不是照着状态转移方程写的吗？</p>\n<p>还记得前面总结的「穷举框架」吗？就是说我们必须穷举所有状态。其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：</p>\n<p>int max_k = 2;<br>int[][][] dp = new int[n][max_k + 1][2];<br>for (int i = 0; i &lt; n; i++) {<br>    for (int k = max_k; k &gt;= 1; k—) {<br>        if (i - 1 == -1) {<br>            /<em> 处理 base case </em>/<br>            dp[i][k][0] = 0;<br>            dp[i][k][1] = -prices[i];<br>            continue;<br>        }<br>        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);<br>        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);<br>    }<br>}<br>// 穷举了 n × max_k × 2 个状态，正确。<br>return dp[n - 1][max_k][0];<br>如果你不理解，可以返回第一点「穷举框架」重新阅读体会一下。</p>\n<p>这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况手动列举出来也可以：</p>\n<p>dp[i][2][0] = max(dp[i-1][2][0], dp[i-1][2][1] + prices[i])<br>dp[i][2][1] = max(dp[i-1][2][1], dp[i-1][1][0] - prices[i])<br>dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])<br>dp[i][1][1] = max(dp[i-1][1][1], -prices[i])</p>\n<p>int maxProfit_k_2(int[] prices) {<br>    int dp_i10 = 0, dp_i11 = Integer.MIN_VALUE;<br>    int dp_i20 = 0, dp_i21 = Integer.MIN_VALUE;<br>    for (int price : prices) {<br>        dp_i20 = Math.max(dp_i20, dp_i21 + price);<br>        dp_i21 = Math.max(dp_i21, dp_i10 - price);<br>        dp_i10 = Math.max(dp_i10, dp_i11 + price);<br>        dp_i11 = Math.max(dp_i11, -price);<br>    }<br>    return dp_i20;<br>}<br>有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会一头雾水，大惊失色，不得不对你肃然起敬。</p>\n<p>第六题，k = any integer</p>\n<p>有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？</p>\n<p>一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。</p>\n<p>直接把之前的代码重用：</p>\n<p>int maxProfit_k_any(int max_k, int[] prices) {<br>    int n = prices.length;<br>    if (max_k &gt; n / 2)<br>        return maxProfit_k_inf(prices);</p>\n<pre><code>int[][][] dp = new int[n][max_k + 1][2];\nfor (int i = 0; i &lt; n; i++) \n    for (int k = max_k; k &gt;= 1; k--) &#123;\n        if (i - 1 == -1) &#123; \n            /* 处理 base case */\n            dp[i][k][0] = 0;\n            dp[i][k][1] = -prices[i];\n            continue;\n        &#125;\n        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\n        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);     \n    &#125;\nreturn dp[n - 1][max_k][0];\n</code></pre><p>}<br>至此，6 道题目通过一个状态转移方程全部解决。</p>\n<p>四、最后总结<br>本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。</p>\n<p>关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？</p>\n<p>具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「三维 DP」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有。</p>\n<p>所以，大家不要被各种高大上的名词吓到，再多的困难问题，奇技淫巧，也不过是基本套路的不断升级组合产生的。只要把住算法的底层原理，即可举一反三，逐个击破。</p>\n<p>作者：labuladong<br>链接：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl07mly4300088s3239l6gki5","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly48000e8s326w2b9fzo"},{"post_id":"cl07mly3w00018s32dqy33yek","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly49000j8s3209m22q4u"},{"post_id":"cl07mly4400098s323ywe9x9j","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4a000m8s325cpbch5l"},{"post_id":"cl07mly47000c8s3212ls4zsc","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4b000q8s320v3x5fhv"},{"post_id":"cl07mly3z00038s32c7bz0c5n","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4c000t8s328aoo03bf"},{"post_id":"cl07mly47000d8s328ccy2p03","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4d000x8s32b0673ixd"},{"post_id":"cl07mly49000i8s3221xpb5aq","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4e00108s32g8l8513z"},{"post_id":"cl07mly4200078s32cbgq5djx","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4e00148s32eh6vfkre"},{"post_id":"cl07mly49000l8s32fnsb5qh3","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4f00178s32eso32azg"},{"post_id":"cl07mly4b000p8s323do46gqq","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4g001b8s326soxgg8e"},{"post_id":"cl07mly4c000s8s32e3861njh","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4g001e8s32ad5d331c"},{"post_id":"cl07mly4d000w8s326kktbaod","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4h001i8s3267spfg0s"},{"post_id":"cl07mly4d000z8s32dmij1ci8","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4i001l8s3225oi812u"},{"post_id":"cl07mly4e00138s32cwvj2y9k","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4i001o8s324q5hh4gi"},{"post_id":"cl07mly4f00168s32e15w1gyv","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4j001r8s32gv0p9hhc"},{"post_id":"cl07mly4f001a8s329odne3wl","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4j001u8s328cr9dlud"},{"post_id":"cl07mly4g001d8s32eu9d5r08","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4k001x8s3254rwc1vd"},{"post_id":"cl07mly4h001h8s323whcc0dh","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4m00208s327iree0me"},{"post_id":"cl07mly4h001k8s325kvm50pl","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4n00238s3273ipcr3c"},{"post_id":"cl07mly4i001n8s322jh56ybk","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4o00268s326jvw2fpv"},{"post_id":"cl07mly4i001q8s32d0hubev2","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4p002b8s328ingczbv"},{"post_id":"cl07mly4j001t8s320vfaf9hv","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4p002e8s3207gg7mji"},{"post_id":"cl07mly4k001w8s32ai0qfep5","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4q002j8s3240tvc3ug"},{"post_id":"cl07mly4k001z8s32c4vw3zu1","category_id":"cl07mly4000048s32a1vn1x43","_id":"cl07mly4r002m8s328pgph10k"},{"post_id":"cl07mly4p002d8s323p88bhjm","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4s002q8s322hdlftz6"},{"post_id":"cl07mly4n00228s327j3u6f68","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4s002u8s326xvgfaow"},{"post_id":"cl07mly4p002g8s32h4iec0jr","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4t002x8s320cjxbjlb"},{"post_id":"cl07mly4q002l8s32b3742amb","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4u00308s32c95u6k7m"},{"post_id":"cl07mly4n00258s322bob8ndf","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4u00338s326c7n1dqx"},{"post_id":"cl07mly4r002o8s322if3ca2x","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4v00368s32fzt5c8zn"},{"post_id":"cl07mly4s002t8s3258hn0izk","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4w00398s323zzlf54r"},{"post_id":"cl07mly4o002a8s329fqk4nrq","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4w003c8s32djxfdu7g"},{"post_id":"cl07mly4t002w8s3255f2b726","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4x003f8s327wg5a6av"},{"post_id":"cl07mly4t002z8s32090z0zk7","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4x003i8s32dtjf76h6"},{"post_id":"cl07mly4u00328s32c9at28u4","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4y003l8s3288s4afbr"},{"post_id":"cl07mly4u00358s32bx7e1zcf","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4y003o8s32827vhuo3"},{"post_id":"cl07mly4v00388s3266se60k4","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4z003r8s32dga63mfv"},{"post_id":"cl07mly4w003b8s3226ca0op9","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly4z003u8s320h9p6omm"},{"post_id":"cl07mly4w003e8s328lquactd","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly50003x8s32fmggf0rq"},{"post_id":"cl07mly4x003h8s3215sa7djd","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly5000408s32ch1p7n2h"},{"post_id":"cl07mly4x003k8s32hed3f7ie","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly5100438s322wet1507"},{"post_id":"cl07mly4y003n8s328qnydfnv","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly5100468s32ebyb2fva"},{"post_id":"cl07mly4z003q8s32362gcadd","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly5200498s3299z3cbha"},{"post_id":"cl07mly4z003t8s32cf6l3p7n","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly52004c8s321lj4dcqt"},{"post_id":"cl07mly50003w8s327v7f6tw1","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly53004f8s325pvmbpj7"},{"post_id":"cl07mly50003z8s32b0h3f2yf","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly53004i8s320hekc2w4"},{"post_id":"cl07mly5100428s32bukx42x8","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly54004l8s3299vkh9di"},{"post_id":"cl07mly5100458s32918feu1s","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly55004o8s32ati5go9t"},{"post_id":"cl07mly5200488s329q79cqe7","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly56004r8s327w0if11f"},{"post_id":"cl07mly52004b8s32bnne2cmn","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly57004u8s32e2ax7aly"},{"post_id":"cl07mly53004e8s32a53l0wmd","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly57004x8s32atrtbydz"},{"post_id":"cl07mly53004h8s32h1vfg6d7","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly5800508s32fkhc5r1t"},{"post_id":"cl07mly54004k8s3252cz9dr4","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly5800558s3218cfa7fx"},{"post_id":"cl07mly54004n8s32bhhie4dz","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly5900588s322phyf9y2"},{"post_id":"cl07mly56004q8s32dzfm67jq","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly5a005d8s324ops0g6u"},{"post_id":"cl07mly56004t8s323vuo1l8n","category_id":"cl07mly4o00278s328de4c5f0","_id":"cl07mly5a005g8s3235s5hvk4"},{"post_id":"cl07mly57004w8s325nan6mh9","category_id":"cl07mly5800518s3229sv9chk","_id":"cl07mly5a005i8s3260fh9hvj"},{"post_id":"cl07mly5a005f8s32hhaibwb2","category_id":"cl07mly59005b8s32ekpzccbg","_id":"cl07mly5b005n8s326d8y975d"},{"post_id":"cl07mly57004z8s3255t71sox","category_id":"cl07mly59005b8s32ekpzccbg","_id":"cl07mly5b005r8s324x6e93cg"},{"post_id":"cl07mly5800548s326h0n74rf","category_id":"cl07mly5800518s3229sv9chk","_id":"cl07mly5c005u8s3226341m6n"},{"post_id":"cl07mly5800578s322rmv7mlr","category_id":"cl07mly59005b8s32ekpzccbg","_id":"cl07mly5c005y8s325rpy0oi7"},{"post_id":"cl07mly59005a8s32g8wp6iwh","category_id":"cl07mly59005b8s32ekpzccbg","_id":"cl07mly5c00618s324btxc065"},{"post_id":"cl07mly5h007q8s32cqk7go1q","category_id":"cl07mly59005b8s32ekpzccbg","_id":"cl07mly5i007t8s32gqbpbkvz"}],"PostTag":[{"post_id":"cl07mly47000c8s3212ls4zsc","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly49000h8s325cv3gqa1"},{"post_id":"cl07mly47000c8s3212ls4zsc","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly49000k8s32aeyw19tc"},{"post_id":"cl07mly3w00018s32dqy33yek","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4b000o8s321wokej2g"},{"post_id":"cl07mly3w00018s32dqy33yek","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4c000r8s326smc4y6q"},{"post_id":"cl07mly47000d8s328ccy2p03","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4c000v8s32fm6t89nj"},{"post_id":"cl07mly47000d8s328ccy2p03","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4d000y8s32fyk2edt5"},{"post_id":"cl07mly49000i8s3221xpb5aq","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4e00128s32fnbi2gmo"},{"post_id":"cl07mly49000i8s3221xpb5aq","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4f00158s32bmfi8p79"},{"post_id":"cl07mly49000l8s32fnsb5qh3","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4f00198s324xrb7tbj"},{"post_id":"cl07mly49000l8s32fnsb5qh3","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4g001c8s326q6j2t42"},{"post_id":"cl07mly4b000p8s323do46gqq","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4h001g8s32065838kw"},{"post_id":"cl07mly4b000p8s323do46gqq","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4h001j8s32f0y78ur7"},{"post_id":"cl07mly3z00038s32c7bz0c5n","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4i001m8s32bzsf2hpo"},{"post_id":"cl07mly3z00038s32c7bz0c5n","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4i001p8s32cwflcmqz"},{"post_id":"cl07mly4c000s8s32e3861njh","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4j001s8s32f36s5ti4"},{"post_id":"cl07mly4c000s8s32e3861njh","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4j001v8s326tz9bnlf"},{"post_id":"cl07mly4d000w8s326kktbaod","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4k001y8s32bjon9fx2"},{"post_id":"cl07mly4d000w8s326kktbaod","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4n00218s323gl331zb"},{"post_id":"cl07mly4d000z8s32dmij1ci8","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4n00248s32d7e8ghmb"},{"post_id":"cl07mly4d000z8s32dmij1ci8","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4o00298s32gcsw0jdq"},{"post_id":"cl07mly4e00138s32cwvj2y9k","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4p002c8s3216ocexfr"},{"post_id":"cl07mly4e00138s32cwvj2y9k","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4p002f8s32c8v703bi"},{"post_id":"cl07mly4200078s32cbgq5djx","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4q002k8s32921dcr4e"},{"post_id":"cl07mly4200078s32cbgq5djx","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4r002n8s321lxj9me3"},{"post_id":"cl07mly4f00168s32e15w1gyv","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4s002s8s325x755g69"},{"post_id":"cl07mly4f00168s32e15w1gyv","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4t002v8s329f2d38lv"},{"post_id":"cl07mly4f001a8s329odne3wl","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4t002y8s32e0ss97ua"},{"post_id":"cl07mly4f001a8s329odne3wl","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4u00318s32hkzf9up3"},{"post_id":"cl07mly4300088s3239l6gki5","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4u00348s3290shajc5"},{"post_id":"cl07mly4300088s3239l6gki5","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4v00378s32h8av1baf"},{"post_id":"cl07mly4g001d8s32eu9d5r08","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4w003a8s32217whik2"},{"post_id":"cl07mly4g001d8s32eu9d5r08","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4w003d8s326av3ebz1"},{"post_id":"cl07mly4h001h8s323whcc0dh","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4x003g8s321i0uet3m"},{"post_id":"cl07mly4h001h8s323whcc0dh","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4x003j8s32hnjm2t1f"},{"post_id":"cl07mly4400098s323ywe9x9j","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4y003m8s322ssw6thm"},{"post_id":"cl07mly4400098s323ywe9x9j","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly4y003p8s32cvr54bpx"},{"post_id":"cl07mly4h001k8s325kvm50pl","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly4z003s8s326ddddqk6"},{"post_id":"cl07mly4h001k8s325kvm50pl","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly50003v8s32hzd88xpb"},{"post_id":"cl07mly4i001n8s322jh56ybk","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly50003y8s326o5m7jdx"},{"post_id":"cl07mly4i001n8s322jh56ybk","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5100418s32cym5fphn"},{"post_id":"cl07mly4i001q8s32d0hubev2","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly5100448s32hm9ldb3s"},{"post_id":"cl07mly4i001q8s32d0hubev2","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5200478s32dlawg6ai"},{"post_id":"cl07mly4j001t8s320vfaf9hv","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly52004a8s3203us7807"},{"post_id":"cl07mly4j001t8s320vfaf9hv","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly53004d8s32g72u6t7d"},{"post_id":"cl07mly4k001w8s32ai0qfep5","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly53004g8s323qm35w8d"},{"post_id":"cl07mly4k001w8s32ai0qfep5","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly54004j8s32b7nc5d3u"},{"post_id":"cl07mly4k001z8s32c4vw3zu1","tag_id":"cl07mly4100058s32982v3j6a","_id":"cl07mly54004m8s32b6klek8z"},{"post_id":"cl07mly4k001z8s32c4vw3zu1","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly56004p8s32an6scelf"},{"post_id":"cl07mly4p002d8s323p88bhjm","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly56004s8s323o6zbdlz"},{"post_id":"cl07mly4p002d8s323p88bhjm","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly57004v8s32d7h4d0n2"},{"post_id":"cl07mly4n00228s327j3u6f68","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly57004y8s320ea97jai"},{"post_id":"cl07mly4n00228s327j3u6f68","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5800538s323a0id85u"},{"post_id":"cl07mly4p002g8s32h4iec0jr","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5800568s322tgnee8v"},{"post_id":"cl07mly4p002g8s32h4iec0jr","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5900598s3240az6owx"},{"post_id":"cl07mly4q002l8s32b3742amb","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5a005e8s3262iefks5"},{"post_id":"cl07mly4q002l8s32b3742amb","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5a005h8s324wchcuz6"},{"post_id":"cl07mly4n00258s322bob8ndf","tag_id":"cl07mly4q002i8s32har18y7m","_id":"cl07mly5b005l8s3270ice7ix"},{"post_id":"cl07mly4n00258s322bob8ndf","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5b005m8s328e0c0xef"},{"post_id":"cl07mly4r002o8s322if3ca2x","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5b005q8s321o8l4qwr"},{"post_id":"cl07mly4r002o8s322if3ca2x","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5c005s8s32bf2r8lhm"},{"post_id":"cl07mly4s002t8s3258hn0izk","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5c005w8s321q964oiy"},{"post_id":"cl07mly4s002t8s3258hn0izk","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5c005x8s326f59461n"},{"post_id":"cl07mly4o002a8s329fqk4nrq","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5c005z8s320x8q1cnm"},{"post_id":"cl07mly4o002a8s329fqk4nrq","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5c00608s32097ugsoo"},{"post_id":"cl07mly4t002w8s3255f2b726","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5c00628s322zdy5ywj"},{"post_id":"cl07mly4t002w8s3255f2b726","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5c00638s320lecdq1l"},{"post_id":"cl07mly4t002z8s32090z0zk7","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5c00648s326tmi5sqb"},{"post_id":"cl07mly4t002z8s32090z0zk7","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d00658s3239raaxa6"},{"post_id":"cl07mly4u00328s32c9at28u4","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d00668s32g3im651t"},{"post_id":"cl07mly4u00328s32c9at28u4","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d00678s325t90ghq5"},{"post_id":"cl07mly4u00358s32bx7e1zcf","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d00688s32c4o8bwtg"},{"post_id":"cl07mly4u00358s32bx7e1zcf","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d00698s32gh7zhxj6"},{"post_id":"cl07mly4v00388s3266se60k4","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006a8s32f7yjc1k8"},{"post_id":"cl07mly4v00388s3266se60k4","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006b8s3225r90bha"},{"post_id":"cl07mly4w003b8s3226ca0op9","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006c8s328vv76830"},{"post_id":"cl07mly4w003b8s3226ca0op9","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006d8s32h38d8wim"},{"post_id":"cl07mly4w003e8s328lquactd","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006e8s32f9s18dd0"},{"post_id":"cl07mly4w003e8s328lquactd","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006f8s32e5ql3p3r"},{"post_id":"cl07mly4x003h8s3215sa7djd","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006g8s32bbctbhgm"},{"post_id":"cl07mly4x003h8s3215sa7djd","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006h8s3286ed747k"},{"post_id":"cl07mly4x003k8s32hed3f7ie","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006i8s320rz7hcv8"},{"post_id":"cl07mly4x003k8s32hed3f7ie","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006j8s32caehg7jt"},{"post_id":"cl07mly4y003n8s328qnydfnv","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006k8s32btducd1o"},{"post_id":"cl07mly4y003n8s328qnydfnv","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006l8s32bl4ydrdb"},{"post_id":"cl07mly4z003q8s32362gcadd","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006m8s32huiu5s63"},{"post_id":"cl07mly4z003q8s32362gcadd","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006n8s32brnldljs"},{"post_id":"cl07mly4z003t8s32cf6l3p7n","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006o8s3246wif8h7"},{"post_id":"cl07mly4z003t8s32cf6l3p7n","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006p8s32aa9a3rdq"},{"post_id":"cl07mly50003w8s327v7f6tw1","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006q8s32539102lr"},{"post_id":"cl07mly50003w8s327v7f6tw1","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006r8s32ehpue26w"},{"post_id":"cl07mly50003z8s32b0h3f2yf","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006s8s32b73698yf"},{"post_id":"cl07mly50003z8s32b0h3f2yf","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006t8s325e8iddti"},{"post_id":"cl07mly5100428s32bukx42x8","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006u8s32adzbag11"},{"post_id":"cl07mly5100428s32bukx42x8","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006v8s32e60zgfzw"},{"post_id":"cl07mly5100458s32918feu1s","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5d006w8s323qw2foo4"},{"post_id":"cl07mly5100458s32918feu1s","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5d006x8s323tnp3o3s"},{"post_id":"cl07mly5200488s329q79cqe7","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5e006y8s329kit2t8m"},{"post_id":"cl07mly5200488s329q79cqe7","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e006z8s32ct16cd5m"},{"post_id":"cl07mly52004b8s32bnne2cmn","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5e00708s32d1p94yzm"},{"post_id":"cl07mly52004b8s32bnne2cmn","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e00718s32ehfeae78"},{"post_id":"cl07mly53004e8s32a53l0wmd","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5e00728s320mz3dckn"},{"post_id":"cl07mly53004e8s32a53l0wmd","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e00738s32hxlg8r6t"},{"post_id":"cl07mly53004h8s32h1vfg6d7","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5e00748s32e7mmhca4"},{"post_id":"cl07mly53004h8s32h1vfg6d7","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e00758s320rke5691"},{"post_id":"cl07mly54004k8s3252cz9dr4","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5e00768s327n2l76o7"},{"post_id":"cl07mly54004k8s3252cz9dr4","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e00778s324dg0ahsd"},{"post_id":"cl07mly54004n8s32bhhie4dz","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5e00788s32hrvrhge4"},{"post_id":"cl07mly54004n8s32bhhie4dz","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e00798s327yyxgrq9"},{"post_id":"cl07mly56004q8s32dzfm67jq","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5e007a8s32a8iid1pe"},{"post_id":"cl07mly56004q8s32dzfm67jq","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e007b8s32gsl84vri"},{"post_id":"cl07mly56004t8s323vuo1l8n","tag_id":"cl07mly4o00288s328f43epz9","_id":"cl07mly5e007c8s32fm5ee0lf"},{"post_id":"cl07mly56004t8s323vuo1l8n","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e007d8s32h3ssfkhg"},{"post_id":"cl07mly57004w8s325nan6mh9","tag_id":"cl07mly5800528s32folg5wmp","_id":"cl07mly5e007e8s327cp7a5qd"},{"post_id":"cl07mly57004w8s325nan6mh9","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e007f8s3253ycgdeb"},{"post_id":"cl07mly5a005f8s32hhaibwb2","tag_id":"cl07mly59005c8s3277y52d8p","_id":"cl07mly5e007g8s326zxmaq7c"},{"post_id":"cl07mly5a005f8s32hhaibwb2","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5e007h8s32g8z92qgj"},{"post_id":"cl07mly57004z8s3255t71sox","tag_id":"cl07mly59005c8s3277y52d8p","_id":"cl07mly5e007i8s327mabb33h"},{"post_id":"cl07mly57004z8s3255t71sox","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5f007j8s320t4lg0sl"},{"post_id":"cl07mly5800548s326h0n74rf","tag_id":"cl07mly5800528s32folg5wmp","_id":"cl07mly5f007k8s32511h30yo"},{"post_id":"cl07mly5800548s326h0n74rf","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5f007l8s32cnwwdrin"},{"post_id":"cl07mly5800578s322rmv7mlr","tag_id":"cl07mly59005c8s3277y52d8p","_id":"cl07mly5f007m8s320l6998uv"},{"post_id":"cl07mly5800578s322rmv7mlr","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5f007n8s32b2adgr5v"},{"post_id":"cl07mly59005a8s32g8wp6iwh","tag_id":"cl07mly59005c8s3277y52d8p","_id":"cl07mly5f007o8s32atqqb5q3"},{"post_id":"cl07mly59005a8s32g8wp6iwh","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5f007p8s3298m69i2v"},{"post_id":"cl07mly5h007q8s32cqk7go1q","tag_id":"cl07mly59005c8s3277y52d8p","_id":"cl07mly5i007r8s325m8z3txq"},{"post_id":"cl07mly5h007q8s32cqk7go1q","tag_id":"cl07mly45000b8s329j86cwpy","_id":"cl07mly5i007s8s322q2a0sbz"}],"Tag":[{"name":"算法相关","_id":"cl07mly4100058s32982v3j6a"},{"name":"default","_id":"cl07mly45000b8s329j86cwpy"},{"name":"代码相关","_id":"cl07mly4o00288s328f43epz9"},{"name":"配置环境&安装工具","_id":"cl07mly4q002i8s32har18y7m"},{"name":"高效tips","_id":"cl07mly5800528s32folg5wmp"},{"name":"数理统计","_id":"cl07mly59005c8s3277y52d8p"}]}}