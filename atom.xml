<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天气桑的blog</title>
  
  <subtitle>这个人很懒，还没写介绍</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tessiehe.github.io/"/>
  <updated>2022-03-31T08:02:09.669Z</updated>
  <id>http://tessiehe.github.io/</id>
  
  <author>
    <name>Tenki San</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tensorflow常用函数</title>
    <link href="http://tessiehe.github.io/2022/03/24/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/tensorflow%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://tessiehe.github.io/2022/03/24/0_代码相关/tensorflow常用函数/</id>
    <published>2022-03-24T03:32:38.000Z</published>
    <updated>2022-03-31T08:02:09.669Z</updated>
    
    <content type="html"><![CDATA[<p>tensorflow常用的一些函数</p><span id="more"></span><h2 id="mask和padding"><a href="#mask和padding" class="headerlink" title="mask和padding"></a>mask和padding</h2><h2 id="矩阵分割与合并"><a href="#矩阵分割与合并" class="headerlink" title="矩阵分割与合并"></a>矩阵分割与合并</h2><h3 id="tf-split"><a href="#tf-split" class="headerlink" title="tf.split()"></a>tf.split()</h3><h3 id="tf-stack"><a href="#tf-stack" class="headerlink" title="tf.stack()"></a>tf.stack()</h3><h3 id="tf-reshape"><a href="#tf-reshape" class="headerlink" title="tf.reshape()"></a>tf.reshape()</h3><h3 id="tf-contrib-lookup-index-table-from-file"><a href="#tf-contrib-lookup-index-table-from-file" class="headerlink" title="tf.contrib.lookup.index_table_from_file()"></a>tf.contrib.lookup.index_table_from_file()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//vocab.tags.txt</span><br><span class="line">poi</span><br><span class="line">query</span><br><span class="line">spu</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">features = tf.constant([<span class="string">&#x27;poi&#x27;</span>, <span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;spu&#x27;</span>,<span class="string">&#x27;haha&#x27;</span>])</span><br><span class="line">reverse_vocab_tags = tf.contrib.lookup.index_table_from_file(</span><br><span class="line">  <span class="string">&#x27;vocab.tags.txt&#x27;</span>, key_dtype=tf.string</span><br><span class="line">  , num_oov_buckets=<span class="number">100</span>,)</span><br><span class="line"></span><br><span class="line">values = reverse_vocab_tags.lookup(features)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  tf.tables_initializer().run()</span><br><span class="line">  <span class="built_in">print</span>(values.<span class="built_in">eval</span>())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tensorflow常用的一些函数&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>hexo_test</title>
    <link href="http://tessiehe.github.io/2022/03/04/hexo-test/"/>
    <id>http://tessiehe.github.io/2022/03/04/hexo-test/</id>
    <published>2022-03-04T04:05:18.000Z</published>
    <updated>2022-03-04T04:05:18.608Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搜广推技术调研</title>
    <link href="http://tessiehe.github.io/2022/03/04/2_%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E6%90%9C%E5%B9%BF%E6%8E%A8%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94/"/>
    <id>http://tessiehe.github.io/2022/03/04/2_算法相关/搜广推技术调研/</id>
    <published>2022-03-04T03:32:38.000Z</published>
    <updated>2022-03-04T03:55:39.021Z</updated>
    
    <content type="html"><![CDATA[<p>开始前的一些思考：</p><p>搜广推近年来模型越来越复杂，但收益越来越小，可能原因是什么？</p><ol><li>技术水位提高带来的边际收益的降低</li><li>数据处理时的的信息折损。从原始log数据生成各个场景的数据（序列、特征）过程是存在很大的信息折损的，原始数据的信息量是最大的，所以未来的发展模型的输入数据会想原始的方式靠拢。纵观搜广推的技术发展路线，从特征工程到序列建模也是符合这个思路的。</li><li>模型结构和信息传播方式不匹配，导致信息提取的低效。也就是说应该根据业务特征更精巧的设计模型结构，依照先验显式的提取数据中的一些结构化信息，提高信息提取效率，而不是粗暴的加参数加数据。</li></ol><p>第一点确实存在，预估没有ground truth，难以判断天花板在哪。2和3中更偏向于2，因为数据直接决定了模型的天花板，而近年大量paper都是模型方面的工作，数据端的工作是比较被忽视的。</p><span id="more"></span><p>[TOC]</p><h1 id="技术调研"><a href="#技术调研" class="headerlink" title="技术调研"></a>技术调研</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>深度学习的赋能下，推荐领域主要有<strong>特征交叉、序列建模</strong>两个技术方向，特征交叉以CAN为代表交叉粒度越来越细，向笛卡尔积靠拢。序列建模以阿里的一些列工作为代表，主要有<strong>序列增强</strong>和<strong>模糊序列</strong>两个方向。NLP技术的赋能下越来越多的序列模型落地在推荐领域，受到业界的认可。我们不禁要问，Then what’s next?</p><p>可以参考CV和NLP的发展，各自领域的重大突破都是基于<strong>对数据产生过程的深刻理解</strong>的。CNN捕捉的是图像的平移不变性；bert捕捉的是上下文的交互特点。</p><p>搜索和推荐不同于NLP和CV这些”自然”的数据生成方式，而是人类交互行为产生的数据。这天然决定了数据中存在大量噪音（隐反馈，bias），例如：一个用户点了一个品牌不一定是他就偏好这个品牌，有可能是整个页面都是这个品牌；推荐item同质的场景下点不点击很随机。历史的工作更多的是粗暴的通过大幅度增加数据量，增加模型复杂度来进行低效的<strong>交互和去噪</strong>（基于的假设是噪音数据出现的频率远低于非噪音数据）。业务初期这种方式能快速迭代产生效果，但随着技术水位的提高，这条路边际收益越来越低，需要考虑更高效的数据处理和信息提取形式。推荐场景序列建模是一个比较大的突破，符合用户时间维度的行为模式，一定程度刻画了用户的偏好。</p><p>纵观推荐技术演化方向，我认为未来会<strong>由深度加工数据向原始数据形式（用户反馈数据流）靠拢，更“自然”的融合用户多域/多形式的反馈，且更“柔和”的处理用户的反馈</strong>（而不是非黑即白，如点击就是感兴趣，不点击就是不感兴趣）</p><p><img src alt="draw.io"></p><h2 id="近期工作"><a href="#近期工作" class="headerlink" title="近期工作"></a>近期工作</h2><div class="table-container"><table><thead><tr><th>出处</th><th>要解决的问题</th><th>关键词</th><th>借鉴点</th><th>模型结构</th><th>comment</th></tr></thead><tbody><tr><td>阿里GIN：Graph Intention Network for Click-through Rate Prediction in Sponsored Search，SIGIR19,alibaba</td><td>CTR预估中用户行为稀疏; 跳出用户历史行为的限制探索更多的兴趣</td><td>信息嵌入</td><td>graph&amp;ctr端到端训练可以通过引入各种共现信息来提高信息的流动性</td><td><img src alt="image.jpeg"><img src alt="image.jpeg"></td><td>共现信息生成异构图对用户点击序列的每个item进行邻近节点查找和embed聚合</td></tr><tr><td>阿里Res-embedding for Deep Learning Based Click-Through Rate Prediction Modeling，2019</td><td>现有embedding方式容易产生过拟合。</td><td>信息嵌入</td><td>1、 每个POI的embedding是不是可以表征为区域embedding和独立embedding的和？？</td><td><img src alt="image.jpeg"></td><td>用图中相邻节点的central embedding + 当前item的bias embedding来表征当前item，提高泛化性。\</td><td>\</td><td>bias embed\</td><td>\</td><td>= 0.1*\</td><td>\</td><td>central embed时效果最好\</td><td>\</td><td>量化分析了影响模型泛化能力的变量是GIN的升级版，GIN相当于只用centra embedding</td></tr><tr><td>第四范式TabGNN: Multiplex Graph Neural Network for Tabular Data Prediction,KDD2021,</td><td>通过多重图来建模样本间关系</td><td>信息嵌入</td><td>样本间的关系可以通过图的方式构建图除了通过共现方式构建，也可以通过特征的方式构建（适用于分客群之类的场景）</td><td><img src alt="image.jpeg"></td><td>对于表格特征通过离散化构建多重图。可以理解为每一维特征都可以生成一个 graph layer</td></tr><tr><td>阿里DSGL:Dynamic Sequential Graph Learning for Click-Through Rate Prediction ,2021,aliba,</td><td>用户行为序列受曝光影响动态序列图捕捉用户兴趣变化</td><td>信息嵌入</td><td></td><td><img src alt="image.jpeg"></td><td>1、 图中带时间戳，捕捉时间维度的兴趣变化</td></tr><tr><td>阿里CAN: Feature Co-Action for Click-Through Rate Prediction</td><td>attention等特征交叉方式都是在embed空间的隐式交叉，共现关系不如cartesian方法，但后者参数量太大</td><td>信息融合</td><td></td><td><img src alt="image.jpeg"></td><td>提出一种显示的特征交叉，加入特征笛卡尔积信息，又不会增加太多参数量。用户历史点击过的item的embedding在不同的candidate下有不同的值其实是DIN中attention unit变换成co-action unit，由相似度计算变成了融合的MLP。FM可以看成co-action unit的一种特殊形式。</td></tr><tr><td>新浪FiBiNet ：Feature Importance and Bilinear feature Interaction</td><td>提出通过使用SENET结构动态学习特征的重要性使用双线性函数来更好的建模交叉特征</td><td>信息嵌入</td><td>可通增加embed通道并通过SENET融合各通道。</td><td><img src alt="image.jpeg"><img src alt="image.jpeg"></td><td>结构动态学习特征的重要性以及使用一个双线性函数来更好的建模交叉特征</td></tr><tr><td>腾讯Masked Transformer for Neighhourhood-aware Click-Through Rate Prediction</td><td>主流的CTR模型都是通过用户显示交互的item学习特征的交互和用户兴趣。然而交互行为受推荐系统曝光、用户活跃度限制，简而言之就是信息量不够。通过构建异构图引入邻接节点信息增强信息表征</td><td></td><td></td><td><img src alt="image.jpeg"></td><td>本质上还是通过图的方式引入邻域信息。mask不mask的感觉不重要</td></tr><tr><td>阿里RACP:Modeling Users’ Contextualized Page-wise Feedback for Click-Through Rate Prediction in E-commerce Search</td><td>本文通过加入历史<strong>页面维度的曝光和反馈</strong>做一位用户历史行为序列，提出了一种新的上下文感知的用户行为建模方式。。通过<strong>page-context aware attention</strong> 学习页面内的关系。<strong>recurrent attention</strong>学习页面间的关系</td><td></td><td></td><td><img src alt="image.jpeg"></td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始前的一些思考：&lt;/p&gt;
&lt;p&gt;搜广推近年来模型越来越复杂，但收益越来越小，可能原因是什么？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;技术水位提高带来的边际收益的降低&lt;/li&gt;
&lt;li&gt;数据处理时的的信息折损。从原始log数据生成各个场景的数据（序列、特征）过程是存在很大的信息折损的，原始数据的信息量是最大的，所以未来的发展模型的输入数据会想原始的方式靠拢。纵观搜广推的技术发展路线，从特征工程到序列建模也是符合这个思路的。&lt;/li&gt;
&lt;li&gt;模型结构和信息传播方式不匹配，导致信息提取的低效。也就是说应该根据业务特征更精巧的设计模型结构，依照先验显式的提取数据中的一些结构化信息，提高信息提取效率，而不是粗暴的加参数加数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一点确实存在，预估没有ground truth，难以判断天花板在哪。2和3中更偏向于2，因为数据直接决定了模型的天花板，而近年大量paper都是模型方面的工作，数据端的工作是比较被忽视的。&lt;/p&gt;
    
    </summary>
    
      <category term="算法相关" scheme="http://tessiehe.github.io/categories/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="算法相关" scheme="http://tessiehe.github.io/tags/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/"/>
    
      <category term="调研" scheme="http://tessiehe.github.io/tags/%E8%B0%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>marginnote</title>
    <link href="http://tessiehe.github.io/2022/03/01/%E6%96%87%E7%8C%AE%E6%9F%A5%E6%89%BETIPS/"/>
    <id>http://tessiehe.github.io/2022/03/01/文献查找TIPS/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-17T03:41:00.884Z</updated>
    
    <content type="html"><![CDATA[<p>文献查找的方法</p><span id="more"></span><h1 id="connected-paper"><a href="#connected-paper" class="headerlink" title="connected paper"></a>connected paper</h1><ol><li>网址：connected paper</li><li>输入文献名称，点击build graph,页面将分为三个部分</li><li>Prior work引用的共同的，之前开创性的文章；  </li><li>derivative work 一些派生文献。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.bilibili.com/video/BV1m34y1C72y?-Arouter=story&amp;p=1&amp;share_medium=iphone&amp;share_plat=ios&amp;share_session_id=E531219F-B84B-452C-89A5-F92C67A3C5E7&amp;share_source=WEIXIN&amp;share_tag=s_i&amp;timestamp=1646010472&amp;unique_k=8pBkf0t&amp;share_times=1">AI帮你找文献，让你效率翻倍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文献查找的方法&lt;/p&gt;
    
    </summary>
    
      <category term="高效tips" scheme="http://tessiehe.github.io/categories/%E9%AB%98%E6%95%88tips/"/>
    
    
      <category term="高效tips" scheme="http://tessiehe.github.io/tags/%E9%AB%98%E6%95%88tips/"/>
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/C语言学习/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:49:44.240Z</updated>
    
    <content type="html"><![CDATA[<p>C语言入门</p><span id="more"></span><p>[TOC]</p><h1 id="环境与入门"><a href="#环境与入门" class="headerlink" title="环境与入门"></a>环境与入门</h1><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 我的第一个 C 程序 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Hello, World! \n&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>程序的第一行 <em>#include <stdio.h></stdio.h></em> 是<strong>预处理器指令</strong>，告诉 C 编译器在实际编译之前要包含 stdio.h 文件。</li><li>下一行 <em>int main()</em> 是主函数，程序从这里开始执行。</li><li>下一行 /<em>…</em>/ 将会被编译器忽略，这里放置程序的注释内容。它们被称为程序的注释。</li><li>下一行 <em>printf(…)</em> 是 C 中另一个可用的函数，会在屏幕上显示消息 “Hello, World!”。</li><li>下一行 <strong>return 0;</strong> 终止 main() 函数，并返回值 0。</li></ol><h2 id="编译-amp-执行C程序"><a href="#编译-amp-执行C程序" class="headerlink" title="编译&amp;执行C程序"></a>编译&amp;执行C程序</h2><ol><li>开一个文本编辑器，添加上述代码。</li><li>保存文件为 <em>hello.c</em>。</li><li>打开命令提示符，进入到保存文件所在的目录。</li><li>键入 <em>gcc hello.c</em>，输入回车，编译代码。</li><li>如果代码中没有错误，命令提示符会跳到下一行，并生成 <em>a.out</em> 可执行文件。</li><li>现在，键入 <em>a.out</em> 来执行程序。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure><p>如果是多个 c 代码的源码文件，编译方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcc test1.c test2.c -o main.out</span><br><span class="line">$ ./main.out</span><br></pre></td></tr></table></figure><p>test1.c 与 test2.c 是两个源代码文件</p><h1 id="C语言基本语法"><a href="#C语言基本语法" class="headerlink" title="C语言基本语法"></a>C语言基本语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/* 单行注释 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>必须以分号结尾</p><h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打印整数 ： %d \n&quot;</span>,<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">格式字符</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:left">d</td><td style="text-align:left">以十进制形式输出带符号整数(正数不输出符号)</td></tr><tr><td style="text-align:left">o</td><td style="text-align:left">以八进制形式输出无符号整数(不输出前缀0)</td></tr><tr><td style="text-align:left">x,X</td><td style="text-align:left">以十六进制形式输出无符号整数(不输出前缀Ox)</td></tr><tr><td style="text-align:left">u</td><td style="text-align:left">以十进制形式输出无符号整数</td></tr><tr><td style="text-align:left">f</td><td style="text-align:left">以小数形式输出单、双精度实数</td></tr><tr><td style="text-align:left">e,E</td><td style="text-align:left">以指数形式输出单、双精度实数</td></tr><tr><td style="text-align:left">g,G</td><td style="text-align:left">以%f或%e中较短的输出宽度输出单、双精度实数</td></tr><tr><td style="text-align:left">c</td><td style="text-align:left">输出单个字符</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">输出字符串</td></tr><tr><td style="text-align:left">p</td><td style="text-align:left">输出指针地址</td></tr><tr><td style="text-align:left">lu</td><td style="text-align:left">32位无符号整数</td></tr><tr><td style="text-align:left">llu</td><td style="text-align:left">64位无符号整数</td></tr></tbody></table></div><h2 id="C数据类型"><a href="#C数据类型" class="headerlink" title="C数据类型"></a>C数据类型</h2><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">类型与描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>基本类型：</strong> 它们是算术类型，包括两种类型：整数类型和浮点类型。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>枚举类型：</strong> 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>void 类型：</strong> 类型说明符 <em>void</em> 表明没有可用的值。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>派生类型：</strong> 它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td></tr></tbody></table></div><p>一个bite占8bit</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">存储大小</th><th style="text-align:left">值范围</th></tr></thead><tbody><tr><td style="text-align:left">char</td><td style="text-align:left">1 字节</td><td style="text-align:left">-128 到 127 或 0 到 255</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">2 或 4 字节</td><td style="text-align:left">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">2 字节</td><td style="text-align:left">-32,768 到 32,767</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">4 字节</td><td style="text-align:left">-2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">4 字节</td><td style="text-align:left">1.2E-38 到 3.4E+38</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">8 字节</td><td style="text-align:left">2.3E-308 到 1.7E+308</td></tr><tr><td style="text-align:left">long double</td><td style="text-align:left">16 字节</td><td style="text-align:left">3.4E-4932 到 1.1E+4932</td></tr></tbody></table></div><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><p>变量只不过是程序可操作性的存储区的名称，每个变量有特定的类型，类型决定了变量存储的大小和布局</p><p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,j,k;</span><br></pre></td></tr></table></figure><h2 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h2><p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i; <span class="comment">//声明，不是定义</span></span><br><span class="line"><span class="keyword">int</span> i; <span class="comment">//声明，也是定义</span></span><br></pre></td></tr></table></figure><p>变量的声明有两种情况：</p><ul><li><p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p></li><li><p>2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。</p><p>除非有extern关键字，否则都是变量的定义。</p></li></ul><blockquote><p>如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。</p></blockquote><ul><li><p>C 中有两种类型的表达式：</p><ol><li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li><li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ol><p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。  </p></li></ul><h2 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h2><p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p><p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意</p><blockquote><p>85         /<em> 十进制 </em>/<br>0213       /<em> 八进制 </em>/<br>0x4b       /<em> 十六进制 </em>/<br>30         /<em> 整数 </em>/<br>30u        /<em> 无符号整数 </em>/<br>30l        /<em> 长整数 </em>/<br>30ul       /<em> 无符号长整数 </em>/</p></blockquote><h2 id="浮点常量"><a href="#浮点常量" class="headerlink" title="浮点常量"></a>浮点常量</h2><h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L1 10; <span class="comment">//使用的覅额与处理器</span></span></span><br><span class="line">count <span class="keyword">int</span> a=<span class="number">10</span> ;</span><br></pre></td></tr></table></figure><h2 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h2><p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：auto , register, static , extern</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="keyword">int</span> mount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="auto-存储类"><a href="#auto-存储类" class="headerlink" title="auto 存储类"></a>auto 存储类</h3><p>auto存储类是所有局部变量默认的存储类，只能修饰局部变量</p><h3 id="register-存储类"><a href="#register-存储类" class="headerlink" title="register 存储类"></a>register 存储类</h3><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p><blockquote><p>寄存器只用于需要快速访问的变量，比如计数器</p></blockquote><h3 id="static-存储类"><a href="#static-存储类" class="headerlink" title="static 存储类"></a>static 存储类</h3><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，</p><blockquote><p>使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。(只初始化一次)</p></blockquote><p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p><blockquote><p>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。</p></blockquote><h3 id="extern-存储类"><a href="#extern-存储类" class="headerlink" title="extern 存储类"></a>extern 存储类</h3><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 <strong>extern</strong> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p><p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，</p><blockquote><p><em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p></blockquote><p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><div class="table-container"><table><thead><tr><th>/</th><th>分子除以分母，向下取整</th><th></th></tr></thead><tbody><tr><td>a++ 先赋值后运算 ； ++ a 先运算后赋值</td><td></td></tr></tbody></table></div><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp;   ， ||  ， ！</p><h3 id="杂项运算符"><a href="#杂项运算符" class="headerlink" title="杂项运算符"></a>杂项运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">sizeof()</td><td style="text-align:left">返回变量的大小。</td><td style="text-align:left">sizeof(a) 将返回 4，其中 a 是整数。</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">返回变量的地址。</td><td style="text-align:left">&a; 将给出变量的实际地址。</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">指向一个变量。</td><td style="text-align:left"><em>a; 将指向一个变量。（a为地址，</em>*a为该地址的变量）</td></tr><tr><td style="text-align:left">? :</td><td style="text-align:left">条件表达式</td><td style="text-align:left">如果条件为真 ? 则值为 X : 否则值为 Y</td></tr></tbody></table></div><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><p>if , if…else ,  switch</p><p>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为 <strong>true</strong>，把<strong>零</strong>或 <strong>null</strong> 假定为 <strong>false</strong>。</p><blockquote><p>运算符(三元运算符):  Exp1 ? Exp2 : Exp3;</p><p>如果exp1为真 则运行exp2，否则运行exp3</p></blockquote><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>while ,  do … while , for</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( init; condition; increment )</span><br><span class="line">&#123;</span><br><span class="line">   statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* for 循环执行 */</span></span><br><span class="line">   <span class="keyword">for</span>( <span class="keyword">int</span> a = <span class="number">10</span>; a &lt; <span class="number">20</span>; a = a + <span class="number">1</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;a 的值： %d\n&quot;</span>, a);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h3><div class="table-container"><table><thead><tr><th style="text-align:left">控制语句</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-break-statement.html">break 语句</a></td><td style="text-align:left">终止<strong>循环</strong>或 <strong>switch</strong> 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-continue-statement.html">continue 语句</a></td><td style="text-align:left">告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-goto-statement.html">goto 语句</a></td><td style="text-align:left">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr></tbody></table></div><p>无限循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;一直执行&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>每个 C 程序都至少有一个函数，即主函数 <strong>main()</strong> </p><p>函数还有很多叫法，比如方法、子例程或程序，等等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter <span class="built_in">list</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   body of the function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>在函数调用之前要进行声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter <span class="built_in">list</span> )</span></span>;</span><br></pre></td></tr></table></figure><p>针对上面定义的函数 max()，以下是函数声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int max(int num1, int num2);</span><br></pre></td></tr></table></figure><p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int max(int, int);</span><br></pre></td></tr></table></figure><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>传值调用，引用调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 局部变量定义 */</span></span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换前，a 的值： %d\n&quot;</span>, a );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换前，b 的值： %d\n&quot;</span>, b );</span><br><span class="line">   <span class="comment">/* 调用函数来交换值</span></span><br><span class="line"><span class="comment">    * &amp;a 表示指向 a 的指针，即变量 a 的地址</span></span><br><span class="line"><span class="comment">    * &amp;b 表示指向 b 的指针，即变量 b 的地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   swap(&amp;a, &amp;b);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换后，a 的值： %d\n&quot;</span>, a );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;交换后，b 的值： %d\n&quot;</span>, b );</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作用域规则"><a href="#作用域规则" class="headerlink" title="作用域规则"></a>作用域规则</h2><p><strong>全局变量与局部变量在内存中的区别</strong>：</p><ul><li>全局变量保存在内存的全局存储区中，占用静态的存储单元；</li><li>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言入门&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>01_日期操作</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/01_%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/01_日期操作/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:47:49.557Z</updated>
    
    <content type="html"><![CDATA[<p>sql相关的日期操作</p><span id="more"></span><h2 id="一、日期运算"><a href="#一、日期运算" class="headerlink" title="一、日期运算"></a>一、日期运算</h2><h3 id="1-date-add"><a href="#1-date-add" class="headerlink" title="1. date_add"></a>1. date_add</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2017-09-15&#x27;</span>,<span class="number">1</span>) ;</span><br></pre></td></tr></table></figure><h3 id="2-date-sub"><a href="#2-date-sub" class="headerlink" title="2. date_sub"></a>2. date_sub</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_sub(<span class="string">&#x27;2017-09-15&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="3-datediff"><a href="#3-datediff" class="headerlink" title="3. datediff"></a>3. datediff</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2017-09-15&#x27;</span>,<span class="string">&#x27;2017-09-01&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-add-months"><a href="#4-add-months" class="headerlink" title="4. add_months"></a>4. add_months</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> add_months(<span class="string">&#x27;2017-02-27&#x27;</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="comment">-- 2017-01-27</span></span><br><span class="line"><span class="keyword">select</span> add_months(<span class="string">&#x27;2017-02-01&#x27;</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="comment">-- 2017-01-01</span></span><br><span class="line"><span class="keyword">select</span> add_months(<span class="string">&#x27;2017-02-28&#x27;</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="comment">-- 2017-01-31</span></span><br></pre></td></tr></table></figure><h3 id="5-last-day"><a href="#5-last-day" class="headerlink" title="5. last_day"></a>5. last_day</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select last_day(&#x27;2018-09-22&#x27;);</span><br></pre></td></tr></table></figure><h3 id="6-months-between"><a href="#6-months-between" class="headerlink" title="6. months_between"></a>6. months_between</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> months_between(<span class="string">&#x27;2018-09-22&#x27;</span>,<span class="string">&#x27;2018-08-02&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="二、日期转换"><a href="#二、日期转换" class="headerlink" title="二、日期转换"></a>二、日期转换</h2><h3 id="1-to-date"><a href="#1-to-date" class="headerlink" title="1. to_date"></a>1. to_date</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> to_date(<span class="string">&#x27;2017-09-15 11:12:00&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-from-unixtime"><a href="#2-from-unixtime" class="headerlink" title="2. from_unixtime"></a>2. from_unixtime</h3><p>时间戳转日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--时间戳转日期</span></span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1505456567</span>); </span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1505456567</span>,<span class="string">&#x27;yyyyMMdd&#x27;</span>); </span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1505456567</span>,<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>); </span><br><span class="line"><span class="keyword">select</span> from_unixtime(unix_timestamp(),<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>); <span class="comment">--获取系统当前时间</span></span><br></pre></td></tr></table></figure><p>方法1: from_unixtime+ unix_timestamp<br>—20171205转成2017-12-05<br>select from_unixtime(unix_timestamp(‘20171205’,’yyyymmdd’),’yyyy-mm-dd’) from dual;</p><p>—2017-12-05转成20171205<br>select from_unixtime(unix_timestamp(‘2017-12-05’,’yyyy-mm-dd’),’yyyymmdd’) from dual;</p><p>方法2: substr + concat<br>—20171205转成2017-12-05<br>select concat(substr(‘20171205’,1,4),’-‘,substr(‘20171205’,5,2),’-‘,substr(‘20171205’,7,2)) from dual;</p><p>—2017-12-05转成20171205<br>select concat(substr(‘2017-12-05’,1,4),substr(‘2017-12-05’,6,2),substr(‘2017-12-05’,9,2)) from dual;</p><p>————————————————<br>版权声明：本文为CSDN博主「开心果汁」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/u013421629/article/details/80068090">https://blog.csdn.net/u013421629/article/details/80068090</a></p><h2 id="三、自动获取日期"><a href="#三、自动获取日期" class="headerlink" title="三、自动获取日期"></a>三、自动获取日期</h2><h3 id="1-current-date"><a href="#1-current-date" class="headerlink" title="1. current_date"></a>1. current_date</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--其他日期函数</span></span><br><span class="line"><span class="comment">--查询当前系统时间(包括毫秒数): </span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_timestamp</span>;  </span><br><span class="line"><span class="comment">-- 查询当月第几天: </span></span><br><span class="line"><span class="keyword">select</span> dayofmonth(<span class="built_in">current_date</span>);</span><br><span class="line"><span class="comment">-- 月末</span></span><br><span class="line"><span class="keyword">select</span> last_day(<span class="built_in">current_date</span>);</span><br><span class="line"><span class="comment">-- 当月第1天</span></span><br><span class="line"><span class="keyword">select</span> date_sub(<span class="built_in">current_date</span>,dayofmonth(<span class="built_in">current_date</span>)<span class="number">-1</span>);</span><br><span class="line"><span class="comment">-- 下个月第1天</span></span><br><span class="line"><span class="keyword">select</span> add_months(date_sub(<span class="built_in">current_date</span>,dayofmonth(<span class="built_in">current_date</span>)<span class="number">-1</span>),<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="2-sysdate"><a href="#2-sysdate" class="headerlink" title="2. sysdate"></a>2. sysdate</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sysdate(<span class="number">-2</span>) ;</span><br></pre></td></tr></table></figure><h3 id="3-unix-timestamp"><a href="#3-unix-timestamp" class="headerlink" title="3. unix_timestamp"></a>3. unix_timestamp</h3><p>时间戳函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--日期转时间戳：从1970-01-01 00:00:00 UTC到指定时间的秒数</span></span><br><span class="line"><span class="keyword">select</span> unix_timestamp(); <span class="comment">--获得当前时区的UNIX时间戳</span></span><br><span class="line"><span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;2017-09-15 14:23:00&#x27;</span>); </span><br><span class="line"><span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;2017-09-15 14:23:00&#x27;</span>,<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;20170915 14:23:00&#x27;</span>,<span class="string">&#x27;yyyyMMdd HH:mm:ss&#x27;</span>); </span><br></pre></td></tr></table></figure><h3 id="4-年月日"><a href="#4-年月日" class="headerlink" title="4. 年月日"></a>4. 年月日</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select year(dt),month(dt),day(dt),hour(dt),minute(dt),second(dt),weekofyear(dt);</span><br></pre></td></tr></table></figure><h3 id="5-trunc"><a href="#5-trunc" class="headerlink" title="5. trunc"></a>5. trunc</h3><p>获取月初、年初</p><p>&gt;</p><blockquote><p>trunc(date,format)  format:MONTH/MON/MM, YEAR/YYYY/YY</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> trunc(<span class="string">&#x27;2018-09-27&#x27;</span>,<span class="string">&#x27;YY&#x27;</span>) <span class="keyword">as</span> date_time,trunc(<span class="string">&#x27;2018-09-27 21:16:13&#x27;</span>,<span class="string">&#x27;MM&#x27;</span>) <span class="keyword">as</span> date_time1;</span><br><span class="line"></span><br><span class="line"><span class="comment">--date_time       date_time1</span></span><br><span class="line"><span class="comment">--2018-01-01      2018-09-01</span></span><br></pre></td></tr></table></figure><h3 id="6-next-day"><a href="#6-next-day" class="headerlink" title="6. next_day"></a>6. next_day</h3><p>当前日期下个星期X的日期</p><p>&gt;</p><blockquote><p>next_day(date,formate) format:英文星期几的缩写或者全拼</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> next_day(<span class="string">&#x27;2018-09-27&#x27;</span>,<span class="string">&#x27;TH&#x27;</span>) <span class="keyword">as</span> date_time,next_day(<span class="string">&#x27;2018-09-27 21:16:13&#x27;</span>,<span class="string">&#x27;TU&#x27;</span>) <span class="keyword">as</span> date_time1;</span><br><span class="line"><span class="comment">-- date_time       date_time1</span></span><br><span class="line"><span class="comment">-- 2018-10-04      2018-10-02</span></span><br></pre></td></tr></table></figure><pre><code> 2018-10-02</code></pre><p>```</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sql相关的日期操作&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>AWK语法</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/awk/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/awk/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:49:35.124Z</updated>
    
    <content type="html"><![CDATA[<p>AWK工具书</p><span id="more"></span><p>[TOC]</p><h1 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h1><h2 id="1-格式"><a href="#1-格式" class="headerlink" title="1. 格式"></a>1. 格式</h2><h3 id="1-命令形式"><a href="#1-命令形式" class="headerlink" title="1). 命令形式"></a>1). 命令形式</h3><p><code>awk [-F|-f|-v] ‘BEGIN&#123;&#125; //&#123;command1; command2&#125; END&#123;&#125;’ file</code></p><blockquote><p>BEGIN{ 这里面放的是执行前的语句 } ，其中的语句只会运行一次<br>END {这里面放的是处理完所有的行后要执行的语句 } 。其中的语句也只会运行一次<br>{这里面放的是处理每一行时要执行的语句} ，这里的语句会读文件的每行都运行一次</p></blockquote><p> [-F|-f|-v]   大参数，-F指定分隔符，-f调用脚本，-v定义变量 var=value</p><p>‘  ‘          引用代码块</p><p>BEGIN   初始化代码块，在对每一行进行处理之前，初始化代码，主要是引用全局变量，设置FS分隔符</p><p>//           匹配代码块，可以是字符串或正则表达式</p><p>{}           命令代码块，包含一条或多条命令</p><p>；          多条命令使用分号分隔</p><p>END      结尾代码块，在对每一行进行处理之后再执行的代码块，主要是进行最终计算或输出结尾摘要信息</p><h3 id="2-特殊要点"><a href="#2-特殊要点" class="headerlink" title="2). 特殊要点"></a>2). 特殊要点</h3><p><a href="https://www.cnblogs.com/chengmo/archive/2010/10/06/1844818.html">linux awk 内置变量使用介绍</a></p><div class="table-container"><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>表示整个当前行</td></tr><tr><td>$1</td><td>每行第一个字段</td></tr><tr><td>NF</td><td>字段数量变量</td></tr><tr><td>NR</td><td>每行的记录号，多文件记录递增</td></tr><tr><td>FNR</td><td>与NR类似，不过多文件记录不递增，每个文件都从1开始</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>FS</td><td>BEGIN时定义分隔符，输入字段分隔符 默认是空格</td></tr><tr><td>RS</td><td>输入的记录分隔符， 默认为换行符(即文本是按一行一行输入)</td></tr><tr><td>~</td><td>匹配，与==相比不是精确比较</td></tr><tr><td>!~</td><td>不匹配，不精确比较</td></tr><tr><td>==</td><td>等于，必须全部相等，精确比较</td></tr><tr><td>!=</td><td>不等于，精确比较</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>\</td><td>\</td><td></td><td>逻辑或</td></tr><tr><td>+</td><td>匹配时表示1个或1个以上</td></tr><tr><td>/[0-9][0-9]+/</td><td>两个或两个以上数字</td></tr><tr><td>/[0-9][0-9]*/</td><td>一个或一个以上数字</td></tr><tr><td>FILENAME</td><td>文件名</td></tr><tr><td>OFS</td><td>输出字段分隔符， 默认也是空格，可以改为制表符等</td></tr><tr><td>ORS</td><td>输出的记录分隔符，默认为换行符,即处理结果也是一行一行输出到屏幕</td></tr><tr><td>-F’[:#/]’</td><td>定义三个分隔符</td></tr></tbody></table></div><h2 id="2-内置函数"><a href="#2-内置函数" class="headerlink" title="2. 内置函数"></a>2. 内置函数</h2><p><a href="https://www.cnblogs.com/chengmo/archive/2010/10/08/1845913.html">linux awk 内置函数详细介绍</a></p><blockquote><p>这篇博客的函数都写在begin{}中</p></blockquote><h3 id="1-算术函数"><a href="#1-算术函数" class="headerlink" title="1). 算术函数"></a>1). 算术函数</h3><div class="table-container"><table><thead><tr><th><strong>函数名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>atan2( y, x )</td><td>返回 y/x 的反正切。</td></tr><tr><td>cos( x )</td><td>返回 x 的余弦；x 是弧度。</td></tr><tr><td>sin( x )</td><td>返回 x 的正弦；x 是弧度。</td></tr><tr><td>exp( x )</td><td>返回 x 幂函数。</td></tr><tr><td>log( x )</td><td>返回 x 的自然对数。</td></tr><tr><td>sqrt( x )</td><td>返回 x 平方根。</td></tr><tr><td>int( x )</td><td>返回 x 的截断至整数的值。</td></tr><tr><td>rand( )</td><td>返回任意数字 n，其中 0 &lt;= n &lt; 1。</td></tr><tr><td>srand( [Expr] )</td><td>将 rand 函数的种子值设置为 Expr 参数的值。返回先前的种子值。</td></tr></tbody></table></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OFMT 设置输出数据格式是保留3位小数</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;OFMT=&quot;%.3f&quot;;fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 0.841 22026.466 2.303 3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获得随机数：</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 78</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串函数"><a href="#2-字符串函数" class="headerlink" title="2). 字符串函数"></a>2). 字符串函数</h3><div class="table-container"><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>gsub( Ere, Repl, [ In ] )</td><td>除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行，。</td></tr><tr><td>sub( Ere, Repl, [ In ] )</td><td>用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere  参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &amp;（和符号）由 In  参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。</td></tr><tr><td>index( String1, String2 )</td><td>在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。</td></tr><tr><td>length [(String)]</td><td>返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td></tr><tr><td>blength [(String)]</td><td>返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td></tr><tr><td>substr( String, M, [ N ] )</td><td>返回具有 N 参数指定的字符数量子串。子串从 String  参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N  参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。</td></tr><tr><td>match( String, Ere )</td><td>在 String 参数指定的字符串（Ere  参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART  特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。</td></tr><tr><td>split( String, A, [Ere] )</td><td>将 String 参数指定的参数分割为数组元素 A[1], A[2], . .  ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS  特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。</td></tr><tr><td>tolower( String )</td><td>返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td></tr><tr><td>toupper( String )</td><td>返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td></tr><tr><td>sprintf(Format, Expr, Expr, . . . )</td><td>根据 Format 参数指定的 <a href="http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/printf.htm#a8zed0gaco">printf</a> 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。</td></tr></tbody></table></div><blockquote><p>Ere都可以是正则表达式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 info中查找满足正则表达式，/[0-9]+/ 用””替换，并且替换后的值，赋值给info 未给info值，默认是$0</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;gsub(/[0-9]+/,&quot;!&quot;,info);print info&#125;&#x27;</span> </span><br><span class="line"><span class="comment"># this is a test!test!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找字符串（index使用）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print index(info,&quot;test&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># ok</span></span><br><span class="line"><span class="comment"># 未找到，返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式匹配查找(match使用）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print match(info,/[0-9]+/)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span>   <span class="comment"># ok </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取字符串(substr使用）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print substr(info,4,10);&#125;&#x27;</span></span><br><span class="line"><span class="comment"># s is a tes</span></span><br><span class="line"><span class="comment"># 从第 4个 字符开始，截取10个长度字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串分割（split使用）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test&quot;;split(info,tA,&quot; &quot;);print length(tA);for(k in tA)&#123;print k,tA[k];&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 4 test</span></span><br><span class="line"><span class="comment"># 1 this</span></span><br><span class="line"><span class="comment"># 2 is</span></span><br><span class="line"><span class="comment"># 3 a</span></span><br><span class="line"><span class="comment"># 分割info,动态创建数组tA,这里比较有意思，awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意。</span></span><br></pre></td></tr></table></figure><blockquote><p>awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意</p><p>应该是因为awk中数组其实是字段。</p></blockquote><p><strong>格式化字符串输出（sprintf使用）</strong></p><p>格式化字符串包括两部分内容: 一部分是正常字符, 这些字符将按原样输出; 另一部分是格式化规定字符, 以”%”开始, 后跟一个或几个规定字符,用来确定输出内容格式。 </p><div class="table-container"><table><thead><tr><th><strong>格式符</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>%d</td><td>十进制有符号整数</td></tr><tr><td>%u</td><td>十进制无符号整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%c</td><td>单个字符</td></tr><tr><td>%p</td><td>指针的值</td></tr><tr><td>%e</td><td>指数形式的浮点数</td></tr><tr><td>%x</td><td>%X 无符号以十六进制表示的整数</td></tr><tr><td>%o</td><td>无符号以八进制表示的整数</td></tr><tr><td>%g</td><td>自动选择合适的表示法</td></tr></tbody></table></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123;n1=124.113;n2=-1.224;n3=1.2345; printf(&quot;%.2f,%.2u,%.2g,%X,%o\n&quot;,n1,n2,n3,n1,n1);&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 124.11,18446744073709551615,1.2,7C,174 </span></span><br></pre></td></tr></table></figure><h3 id="3-时间函数"><a href="#3-时间函数" class="headerlink" title="3). 时间函数"></a>3). 时间函数</h3><div class="table-container"><table><thead><tr><th><strong>函数名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>mktime( YYYY MM DD HH MM SS[ DST])</td><td>生成时间格式</td></tr><tr><td>strftime([format [, timestamp]])</td><td>格式化时间输出，将时间戳转为时间字符串  具体格式，见下表.</td></tr><tr><td>systime()</td><td>得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数</td></tr></tbody></table></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建指定时间(mktime使用）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;tstamp=mktime(&quot;2001 01 01 12 12 12&quot;);print strftime(&quot;%c&quot;,tstamp);&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 2001年01月01日 星期一 12时12分12秒 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求2个时间段中间时间差,介绍了strftime使用方法 </span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;tstamp1=mktime(&quot;2001 01 01 12 12 12&quot;);tstamp2=mktime(&quot;2001 02 01 0 0 0&quot;);print tstamp2-tstamp1;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 2634468 </span></span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;tstamp1=mktime(&quot;2001 01 01 12 12 12&quot;);tstamp2=systime();print tstamp2-tstamp1;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 308201392 </span></span><br></pre></td></tr></table></figure><p><strong>strftime日期和时间格式说明符</strong></p><div class="table-container"><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%a</td><td>星期几的缩写(Sun)</td></tr><tr><td>%A</td><td>星期几的完整写法(Sunday)</td></tr><tr><td>%b</td><td>月名的缩写(Oct)</td></tr><tr><td>%B</td><td>月名的完整写法(October)</td></tr><tr><td>%c</td><td>本地日期和时间</td></tr><tr><td>%d</td><td>十进制日期</td></tr><tr><td>%D</td><td>日期 08/20/99</td></tr><tr><td>%e</td><td>日期，如果只有一位会补上一个空格</td></tr><tr><td>%H</td><td>用十进制表示24小时格式的小时</td></tr><tr><td>%I</td><td>用十进制表示12小时格式的小时</td></tr><tr><td>%j</td><td>从1月1日起一年中的第几天</td></tr><tr><td>%m</td><td>十进制表示的月份</td></tr><tr><td>%M</td><td>十进制表示的分钟</td></tr><tr><td>%p</td><td>12小时表示法(AM/PM)</td></tr><tr><td>%S</td><td>十进制表示的秒</td></tr><tr><td>%U</td><td>十进制表示的一年中的第几个星期(星期天作为一个星期的开始)</td></tr><tr><td>%w</td><td>十进制表示的星期几(星期天是0)</td></tr><tr><td>%W</td><td>十进制表示的一年中的第几个星期(星期一作为一个星期的开始)</td></tr><tr><td>%x</td><td>重新设置本地日期(08/20/99)</td></tr><tr><td>%X</td><td>重新设置本地时间(12：00：00)</td></tr><tr><td>%y</td><td>两位数字表示的年(99)</td></tr><tr><td>%Y</td><td>当前月份</td></tr><tr><td>%Z</td><td>时区(PDT)</td></tr><tr><td>%%</td><td>百分号(%)</td></tr></tbody></table></div><h3 id="4-一般函数"><a href="#4-一般函数" class="headerlink" title="4). 一般函数"></a>4). 一般函数</h3><div class="table-container"><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>close( Expression )</td><td>用同一个带字符串值的 Expression 参数来关闭由 print 或  printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回  0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。</td></tr><tr><td>system(Command )</td><td>执行 Command 参数指定的命令，并返回退出状态。等同于 <a href="http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf2/system.htm#a181929c">system</a> 子例程。</td></tr><tr><td>Expression \</td><td>getline [ Variable ]</td><td>从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 <a href="http://www.cnblogs.com/chengmo/admin/zh_CN/libs/basetrf1/popen.htm#sk62b0shad">popen</a>  子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且  Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0  记录变量和 NF 特殊变量设置为从流读取的记录。</td></tr><tr><td>getline [ Variable ] &lt; Expression</td><td>从 Expression 参数指定的文件读取输入的下一个记录，并将  Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline  函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。</td></tr><tr><td>getline [ Variable ]</td><td>将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。</td></tr></tbody></table></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开外部文件（close用法）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;while(&quot;cat /etc/passwd&quot;|getline)&#123;print $0;&#125;;close(&quot;/etc/passwd&quot;);&#125;&#x27;</span></span><br><span class="line"><span class="comment"># root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="comment"># bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="comment"># daemon:x:2:2:daemon:/sbin:/sbin/nologin </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐行读取外部文件(getline使用方法）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;while(getline &lt; &quot;/etc/passwd&quot;)&#123;print $0;&#125;;close(&quot;/etc/passwd&quot;);&#125;&#x27;</span></span><br><span class="line"><span class="comment"># root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="comment"># bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="comment"># daemon:x:2:2:daemon:/sbin:/sbin/nologin </span></span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;print &quot;Enter your name:&quot;;getline name;print name;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Enter your name:</span></span><br><span class="line"><span class="comment"># wangdongdong</span></span><br><span class="line"><span class="comment"># wangdongdong</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用外部应用程序(system使用方法）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;b=system(&quot;python helloworld.py&quot;);print b;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># helloworld</span></span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h2><p><a href="https://www.cnblogs.com/chengmo/archive/2010/10/08/1846190.html">linux awk数组操作详细介绍</a></p><h2 id="4-案例"><a href="#4-案例" class="headerlink" title="4. 案例"></a>4. 案例</h2><h3 id="1-print"><a href="#1-print" class="headerlink" title="1). print"></a>1). print</h3><p>print 是awk打印指定内容的主要命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print&#125;&#x27;</span> /etc/passwd == awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> /etc/passwd </span><br><span class="line">awk <span class="string">&#x27;&#123;print &quot; &quot;&#125;&#x27;</span> /etc/passwd <span class="comment">#不输出passwd的内容，而是输出相同个数的空行，进一步解释了awk是一行一行处理文本</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print &quot;a&quot;&#125;&#x27;</span> /etc/passwd <span class="comment">#输出相同个数的a行，一行只有一个a字母</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd </span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print $1; print $2&#125;&#x27;</span> /etc/passwd <span class="comment">#将每一行的前二个字段，分行输出，进一步理解一行一行处理文本</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print $1,$3,$6&#125;&#x27;</span> OFS=<span class="string">&quot;\t&quot;</span> /etc/passwd <span class="comment">#输出字段1,3,6，以制表符作为分隔符</span></span><br></pre></td></tr></table></figure><h3 id="2-f指定脚本文件"><a href="#2-f指定脚本文件" class="headerlink" title="2). -f指定脚本文件"></a>2). -f指定脚本文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">awk -f script.awk  file</span><br><span class="line"></span><br><span class="line"><span class="comment"># script.awk内容如下：</span></span><br><span class="line">BEGIN&#123;</span><br><span class="line">FS=<span class="string">&quot;:&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="built_in">print</span> <span class="variable">$1</span>&#125;   <span class="comment">#效果与awk -F&quot;:&quot; &#x27;&#123;print $1&#125;&#x27;相同,只是分隔符使用FS在代码自身中指定</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;X=0&#125; /^$/&#123; X+=1 &#125; END&#123;print &quot;I find&quot;,X,&quot;blank lines.&quot;&#125;&#x27;</span> <span class="built_in">test</span> </span><br><span class="line"><span class="comment"># I find 4 blank lines.</span></span><br><span class="line"></span><br><span class="line">ls -l|awk <span class="string">&#x27;BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print &quot;total size is&quot;,sum&#125;&#x27;</span> <span class="comment">#计算文件大小 </span></span><br><span class="line"><span class="comment">#total size is 17487</span></span><br></pre></td></tr></table></figure><h3 id="3-F指定分隔符"><a href="#3-F指定分隔符" class="headerlink" title="3). -F指定分隔符"></a>3). -F指定分隔符</h3><p>$1 指指定分隔符后，第一个字段，$3第三个字段， \t是制表符</p><p>一个或多个连续的空格或制表符看做一个定界符，即多个空格看做一个空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>  /etc/passwd</span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $1 $3&#125;&#x27;</span>  /etc/passwd <span class="comment">#$1与$3相连输出，不分隔</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $1,$3&#125;&#x27;</span>  /etc/passwd <span class="comment">#多了一个逗号，$1与$3使用空格分隔</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $1 &quot; &quot; $3&#125;&#x27;</span>  /etc/passwd <span class="comment">#$1与$3之间手动添加空格分隔</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print &quot;Username:&quot; $1 &quot;\t\t Uid:&quot; $3 &#125;&#x27;</span> /etc/passwd <span class="comment">#自定义输出  </span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print NF&#125;&#x27;</span> /etc/passwd <span class="comment">#显示每行有多少字段</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span> /etc/passwd <span class="comment">#将每行第NF个字段的值打印出来</span></span><br><span class="line">awk -F: <span class="string">&#x27;NF==4 &#123;print &#125;&#x27;</span> /etc/passwd <span class="comment">#显示只有4个字段的行</span></span><br><span class="line">awk -F: <span class="string">&#x27;NF&gt;2&#123;print $0&#125;&#x27;</span> /etc/passwd <span class="comment">#显示每行字段数量大于2的行</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print NR,$0&#125;&#x27;</span> /etc/passwd <span class="comment">#输出每行的行号</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print NR,NF,$NF,&quot;\t&quot;,$0&#125;&#x27;</span> /etc/passwd <span class="comment">#依次打印行号，字段数，最后字段值，制表符，每行内容</span></span><br><span class="line">awk -F: <span class="string">&#x27;NR==5&#123;print&#125;&#x27;</span>  /etc/passwd <span class="comment">#显示第5行</span></span><br><span class="line">awk -F: <span class="string">&#x27;NR==5 || NR==6&#123;print&#125;&#x27;</span>  /etc/passwd <span class="comment">#显示第5行和第6行</span></span><br><span class="line">route -n|awk <span class="string">&#x27;NR!=1&#123;print&#125;&#x27;</span> <span class="comment">#不显示第一行</span></span><br></pre></td></tr></table></figure><h3 id="4-IF语句"><a href="#4-IF语句" class="headerlink" title="4). IF语句"></a>4). IF语句</h3><p>必须用在{}中，且比较内容用()扩起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;&#123;if($1~/mail/) print $1&#125;&#x27;</span> /etc/passwd <span class="comment">#简写</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;if($1~/mail/) &#123;print $1&#125;&#125;&#x27;</span> /etc/passwd <span class="comment">#全写</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;if($1~/mail/) &#123;print $1&#125; else &#123;print $2&#125;&#125;&#x27;</span> /etc/passwd <span class="comment">#if...else...</span></span><br><span class="line"></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;if($3&gt;100) print &quot;large&quot;; else print &quot;small&quot;&#125;&#x27;</span> /etc/passwd</span><br><span class="line">awk -F: <span class="string">&#x27;BEGIN&#123;A=0;B=0&#125; &#123;if($3&gt;100) &#123;A++; print &quot;large&quot;&#125; else &#123;B++; print &quot;small&quot;&#125;&#125; END&#123;print A,&quot;\t&quot;,B&#125;&#x27;</span> /etc/passwd  <span class="comment">#ID大于100,A加1，否则B加1</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;if($3&lt;100) next; else print&#125;&#x27;</span> /etc/passwd <span class="comment">#小于100跳过，否则显示</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print ($3&gt;100 ? &quot;yes&quot;:&quot;no&quot;)&#125;&#x27;</span>  /etc/passwd </span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print ($3&gt;100 ? $3&quot;:\tyes&quot;:$3&quot;:\tno&quot;)&#125;&#x27;</span>  /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="5-条件表达式"><a href="#5-条件表达式" class="headerlink" title="5). 条件表达式"></a>5). 条件表达式</h3><p><strong>==   !=   &gt;   &gt;=</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;$1==&quot;mysql&quot;&#123;print $3&#125;&#x27;</span> /etc/passwd  </span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;if($1==&quot;mysql&quot;) print $3&#125;&#x27;</span> /etc/passwd <span class="comment">#与上面相同 </span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;$1!=&quot;mysql&quot;&#123;print $3&#125;&#x27;</span> /etc/passwd <span class="comment">#不等于</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;$3&gt;1000&#123;print $3&#125;&#x27;</span> /etc/passwd <span class="comment">#大于</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;$3&gt;=100&#123;print $3&#125;&#x27;</span> /etc/passwd <span class="comment">#大于等于</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;$3&lt;1&#123;print $3&#125;&#x27;</span> /etc/passwd <span class="comment">#小于</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;$3&lt;=1&#123;print $3&#125;&#x27;</span> /etc/passwd <span class="comment">#小于等于</span></span><br></pre></td></tr></table></figure><h3 id="6-逻辑运算符"><a href="#6-逻辑运算符" class="headerlink" title="6). 逻辑运算符"></a>6). 逻辑运算符</h3><p><strong>&amp;&amp;　||</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;$1~/mail/ &amp;&amp; $3&gt;8 &#123;print &#125;&#x27;</span> /etc/passwd <span class="comment">#逻辑与，$1匹配mail，并且$3&gt;8</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;if($1~/mail/ &amp;&amp; $3&gt;8) print &#125;&#x27;</span> /etc/passwd</span><br><span class="line">awk -F: <span class="string">&#x27;$1~/mail/ || $3&gt;1000 &#123;print &#125;&#x27;</span> /etc/passwd <span class="comment">#逻辑或</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;if($1~/mail/ || $3&gt;1000) print &#125;&#x27;</span> /etc/passwd </span><br></pre></td></tr></table></figure><h3 id="7-数值运算"><a href="#7-数值运算" class="headerlink" title="7). 数值运算"></a>7). 数值运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;$3 &gt; 100&#x27;</span> /etc/passwd    </span><br><span class="line">awk -F: <span class="string">&#x27;$3 &gt; 100 || $3 &lt; 5&#x27;</span> /etc/passwd  </span><br><span class="line">awk -F: <span class="string">&#x27;$3+$4 &gt; 200&#x27;</span> /etc/passwd</span><br><span class="line">awk -F: <span class="string">&#x27;/mysql|mail/&#123;print $3+10&#125;&#x27;</span> /etc/passwd <span class="comment">#第三个字段加10打印 </span></span><br><span class="line">awk -F: <span class="string">&#x27;/mysql/&#123;print $3-$4&#125;&#x27;</span> /etc/passwd <span class="comment">#减法</span></span><br><span class="line">awk -F: <span class="string">&#x27;/mysql/&#123;print $3*$4&#125;&#x27;</span> /etc/passwd <span class="comment">#求乘积</span></span><br><span class="line">awk <span class="string">&#x27;/MemFree/&#123;print $2/1024&#125;&#x27;</span> /proc/meminfo <span class="comment">#除法</span></span><br><span class="line">awk <span class="string">&#x27;/MemFree/&#123;print int($2/1024)&#125;&#x27;</span> /proc/meminfo <span class="comment">#取整</span></span><br></pre></td></tr></table></figure><h3 id="8-输出分隔符OFS"><a href="#8-输出分隔符OFS" class="headerlink" title="8). 输出分隔符OFS"></a>8). 输出分隔符OFS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;$6 ~ /FIN/ || NR==1 &#123;print NR,$4,$5,$6&#125;&#x27;</span> OFS=<span class="string">&quot;\t&quot;</span> netstat.txt</span><br><span class="line">awk <span class="string">&#x27;$6 ~ /WAIT/ || NR==1 &#123;print NR,$4,$5,$6&#125;&#x27;</span> OFS=<span class="string">&quot;\t&quot;</span> netstat.txt        </span><br><span class="line"><span class="comment">#输出字段6匹配WAIT的行，其中输出每行行号，字段4，5,6，并使用制表符分割字段</span></span><br></pre></td></tr></table></figure><h3 id="9-输出处理结果到文件"><a href="#9-输出处理结果到文件" class="headerlink" title="9). 输出处理结果到文件"></a>9). 输出处理结果到文件</h3><p>①在命令代码块中直接输出 route -n|awk ‘NR!=1{print &gt; “./fs”}’   </p><p>②使用重定向进行输出  route -n|awk ‘NR!=1{print}’  &gt; ./fs</p><h3 id="10-格式化输出"><a href="#10-格式化输出" class="headerlink" title="10). 格式化输出"></a>10). 格式化输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp|awk <span class="string">&#x27;&#123;printf &quot;%-8s %-8s %-10s\n&quot;,$1,$2,$3&#125;&#x27;</span> </span><br></pre></td></tr></table></figure><p>printf表示格式输出</p><p>%格式化输出分隔符</p><p>-8长度为8个字符</p><p>s表示字符串类型</p><p>打印每行前三个字段，指定第一个字段输出字符串类型(长度为8)，第二个字段输出字符串类型(长度为8),</p><p>第三个字段输出字符串类型(长度为10)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp|awk <span class="string">&#x27;$6==&quot;LISTEN&quot; || NR==1 &#123;printf &quot;%-10s %-10s %-10s \n&quot;,$1,$2,$3&#125;&#x27;</span></span><br><span class="line">netstat -anp|awk <span class="string">&#x27;$6==&quot;LISTEN&quot; || NR==1 &#123;printf &quot;%-3s %-10s %-10s %-10s \n&quot;,NR,$1,$2,$3&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="11-数组"><a href="#11-数组" class="headerlink" title="11). 数组"></a>11). 数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp|awk <span class="string">&#x27;NR!=1&#123;a[$6]++&#125; END&#123;for (i in a) print i,&quot;\t&quot;,a[i]&#125;&#x27;</span></span><br><span class="line">netstat -anp|awk <span class="string">&#x27;NR!=1&#123;a[$6]++&#125; END&#123;for (i in a) \</span></span><br><span class="line"><span class="string">  printf &quot;%-20s %-10s %-5s \n&quot;, i,&quot;\t&quot;,a[i]&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="12-其他应用"><a href="#12-其他应用" class="headerlink" title="12). 其他应用"></a>12). 其他应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;&#123;print NF&#125;&#x27;</span> helloworld.sh <span class="comment">#输出文件每行有多少字段</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print $1,$2,$3,$4,$5&#125;&#x27;</span> helloworld.sh <span class="comment">#输出前5个字段</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print $1,$2,$3,$4,$5&#125;&#x27;</span> OFS=<span class="string">&#x27;\t&#x27;</span> helloworld.sh <span class="comment">#输出前5个字段并使用制表符分隔输出</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print NR,$1,$2,$3,$4,$5&#125;&#x27;</span> OFS=<span class="string">&#x27;\t&#x27;</span> helloworld.sh <span class="comment">#制表符分隔输出前5个字段，并打印行号</span></span><br><span class="line">awk -F<span class="string">&#x27;[:#]&#x27;</span> <span class="string">&#x27;&#123;print NF&#125;&#x27;</span>  helloworld.sh <span class="comment">#指定多个分隔符: #，输出每行多少字段</span></span><br><span class="line">awk -F<span class="string">&#x27;[:#]&#x27;</span> <span class="string">&#x27;&#123;print $1,$2,$3,$4,$5,$6,$7&#125;&#x27;</span> OFS=<span class="string">&#x27;\t&#x27;</span> helloworld.sh <span class="comment">#制表符分隔输出多字段</span></span><br><span class="line">awk -F<span class="string">&#x27;[:#/]&#x27;</span> <span class="string">&#x27;&#123;print NF&#125;&#x27;</span> helloworld.sh <span class="comment">#指定三个分隔符，并输出每行字段数</span></span><br><span class="line">awk -F<span class="string">&#x27;[:#/]&#x27;</span> <span class="string">&#x27;&#123;print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12&#125;&#x27;</span> hi.sh <span class="comment">#制表符分隔输出多字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算/home目录下，普通文件的大小，使用KB作为单位</span></span><br><span class="line">ls -l|awk <span class="string">&#x27;BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print &quot;total size is:&quot;,sum/1024,&quot;KB&quot;&#125;&#x27;</span></span><br><span class="line">ls -l|awk <span class="string">&#x27;BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print &quot;total size is:&quot;,int(sum/1024),&quot;KB&quot;&#125;&#x27;</span> <span class="comment">#int是取整的意思</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计netstat -anp 状态为LISTEN和CONNECT的连接数量分别是多少</span></span><br><span class="line">netstat -anp|awk <span class="string">&#x27;$6~/LISTEN|CONNECTED/&#123;sum[$6]++&#125; END&#123;for (i in sum) printf &quot;%-10s %-6s %-3s \n&quot;, i,&quot; &quot;,sum[i]&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计/home目录下不同用户的普通文件的总数是多少？</span></span><br><span class="line">ls -l|awk <span class="string">&#x27;NR!=1 &amp;&amp; !/^d/&#123;sum[$3]++&#125; END&#123;for (i in sum) printf &quot;%-6s %-5s %-3s \n&quot;,i,&quot; &quot;,sum[i]&#125;&#x27;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#统计/home目录下不同用户的普通文件的大小总size是多少？</span></span><br><span class="line">ls -l|awk <span class="string">&#x27;NR!=1 &amp;&amp; !/^d/&#123;sum[$3]+=$5&#125; END&#123;for (i in sum) printf &quot;%-6s %-5s %-3s %-2s \n&quot;,i,&quot; &quot;,sum[i]/1024/1024,&quot;MB&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出成绩表</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;math=0;eng=0;com=0;printf &quot;Lineno.   Name    No.    Math   English   Computer    Total\n&quot;;printf &quot;------------------------------------------------------------\n&quot;&#125;&#123;math+=$3; eng+=$4; com+=$5;printf &quot;%-8s %-7s %-7s %-7s %-9s %-10s %-7s \n&quot;,NR,$1,$2,$3,$4,$5,$3+$4+$5&#125; END&#123;printf &quot;------------------------------------------------------------\n&quot;;printf &quot;%-24s %-7s %-9s %-20s \n&quot;,&quot;Total:&quot;,math,eng,com;printf &quot;%-24s %-7s %-9s %-20s \n&quot;,&quot;Avg:&quot;,math/NR,eng/NR,com/NR&#125;&#x27;</span> <span class="built_in">test</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="13-Vlookup"><a href="#13-Vlookup" class="headerlink" title="13). Vlookup"></a>13). Vlookup</h3><p><a href="https://www.jianshu.com/p/01906e4b7af7">awk实现excel vlookup</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据</span></span><br><span class="line">$ cat a.txt </span><br><span class="line">1       abc</span><br><span class="line">2       def</span><br><span class="line">3       ghi</span><br><span class="line">4       jlm</span><br><span class="line">$ cat b.txt </span><br><span class="line">3       shit</span><br><span class="line">1       rubb</span><br><span class="line"><span class="comment"># 方法</span></span><br><span class="line">awk <span class="string">&#x27;NR==FNR&#123;a[$1]=$2;next&#125;NR&gt;FNR&#123;if($1 in a)print $0&quot;\t&quot;a[$1]&#125;&#x27;</span> a.txt b.txt </span><br><span class="line"><span class="comment"># 3       shit    ghi</span></span><br><span class="line"><span class="comment"># 1       rubb    abc</span></span><br></pre></td></tr></table></figure><blockquote><p>注：a是一个字典，<code>NR==FNR</code>时在第一个文件，<code>NR&gt;FNR</code>时在读b.txt</p><p><code>NR==FNR&#123;a[$1]=$2;next&#125;</code>是使用第一个文件<code>a.txt</code>初始化字典，将其每行<code>$1</code>作为key，<code>$2</code>作为value</p><p><code>if($1 in a)</code>指序号<code>$1</code>是否在a的key中，如果在打印的<code>a[$1]</code>为key：<code>$1</code>对于的value</p><p>查看字典：<code>awk &#39;NR==FNR&#123;a[$1]=$2;next&#125;END&#123;for(k in a)&#123;print k,a[k]&#125;&#125;&#39; a.txt b.txt</code></p></blockquote><h3 id="14-group-by"><a href="#14-group-by" class="headerlink" title="14). group by"></a>14). group by</h3><p><a href="http://www.cppblog.com/datouwang/articles/45582.html">总结一下awk的group by功能</a></p><p>通过数组的key作为作为on的条件，value进行聚合运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据</span></span><br><span class="line">cat c.txt</span><br><span class="line">06 01 06 30      2.700         81.000</span><br><span class="line">06 01 06 45      3.900        175.500</span><br><span class="line">06 01 07 00      2.400          0.000</span><br><span class="line">06 01 07 15      0.160          2.400</span><br><span class="line">06 01 08 00      0.380          0.000</span><br><span class="line">06 01 08 15      0.300          4.500</span><br><span class="line">06 01 08 30      3.900        117.000</span><br><span class="line">06 01 08 45      5.520        248.400</span><br><span class="line">06 01 09 00      6.600          0.000</span><br><span class="line">06 01 09 15      9.600        144.000</span><br><span class="line">06 01 09 30      3.300         99.000</span><br><span class="line">06 01 09 45      2.300        103.500</span><br><span class="line">06 01 10 15      7.880        118.200</span><br><span class="line">06 01 10 30     10.820        324.600</span><br><span class="line">06 01 10 45      7.360        331.200</span><br><span class="line">06 01 11 00     11.940          0.000</span><br><span class="line">06 01 11 15      4.200         63.000</span><br><span class="line">06 01 11 30      3.180         95.400</span><br><span class="line">06 01 11 45      1.800         81.000</span><br><span class="line">06 01 12 00     30.970          0.000</span><br><span class="line"><span class="comment"># 实现</span></span><br><span class="line"><span class="comment"># 单列group by单列聚合</span></span><br><span class="line">awk <span class="string">&#x27;&#123;a[$2]+=$5&#125;END&#123;for(i in a) printf &quot;%s %10.3f\n&quot;,i,a[i]&#125;&#x27;</span> c.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单列group by多列聚合</span></span><br><span class="line">awk <span class="string">&#x27;&#123;a[$2]+=$5;b[$2]+=$6&#125;END&#123;for(i in a) printf &quot;%s %10.3f %14.3f\n&quot;,i,a[i],b[i]&#125;&#x27;</span> c.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 多列group by单列聚合</span></span><br><span class="line">awk <span class="string">&#x27;&#123;a[$2&quot; &quot;$3]+=$5&#125;END&#123;for(i in a) printf &quot;%s %10.3f\n&quot;,i,a[i]&#125;&#x27;</span> c.txt <span class="comment"># 求和</span></span><br><span class="line">awk <span class="string">&#x27;&#123;a[$2&quot; &quot;$3]+=1&#125;END&#123;for(i in a) printf &quot;%s %10.3f\n&quot;,i,a[i]&#125;&#x27;</span> c.txt <span class="comment"># 计数</span></span><br><span class="line">awk <span class="string">&#x27;&#123;s[$2&quot; &quot;$3]+=$5;n[$2&quot; &quot;$3]+=1&#125;END&#123;for(i in s)&#123;avg_v=s[i]/n[i];printf &quot;%s %10.3f\n&quot;,i,avg_v&#125;&#125;&#x27;</span> c.txt <span class="comment"># 平均</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 多列group by多列聚合：多来一个数组</span></span><br><span class="line">awk <span class="string">&#x27;&#123;a[$2&quot; &quot;$3]+=$5;b[$2&quot; &quot;$3]+=$6&#125;END&#123;for(i in a) printf &quot;%s %14.3f %14.3f\n&quot;,i,a[i],b[i]&#125;&#x27;</span> c.txt</span><br></pre></td></tr></table></figure><p>awk -F’ ‘ ‘/from/{print}’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;for(i=0;++i&lt;=NF;)a[i]=a[i]?a[i] FS $i:$i&#125;END&#123;for(i=0;i++&lt;NF;)printf a[i]&quot;\b \n&quot;&#125;&#x27; </span><br></pre></td></tr></table></figure><h2 id="5-正则表达式"><a href="#5-正则表达式" class="headerlink" title="5. 正则表达式"></a>5. 正则表达式</h2><p><a href="https://www.cnblogs.com/myyan/p/4765683.html">awk 正则表达式、正则运算符详细介绍</a></p><p><a href="https://www.cnblogs.com/chengmo/archive/2010/10/10/1847287.html">linux shell 正则表达式(BREs,EREs,PREs)差异比较</a></p><h3 id="1"><a href="#1" class="headerlink" title="1). +"></a>1). +</h3><p>指定如果<strong>一个或多个字符</strong>或扩展正则表达式的具体值（在 +（加号）前）在这个字符串中，则字符串匹配。</p><p>命令行：<code>awk &#39;/smith+ern/&#39; testfile</code></p><p>将包含字符 smit，后跟一个或多个 h 字符，并以字符 ern 结束的字符串的任何记录打印至标准输出。</p><p>此示例中的输出是：smithern, harry smithhern, anne</p><h3 id="2"><a href="#2" class="headerlink" title="2). ?"></a>2). ?</h3><p>指定如果<strong>零个或一个字符</strong>或扩展正则表达式的具体值（在 ?（问号）之前）在字符串中，则字符串匹配。</p><p>命令行： <code>awk &#39;/smith?/&#39; testfile</code></p><p>将包含字符 <code>smit</code>，后跟零个或一个 <code>h</code> 字符的实例的所有记录打印至标准输出。</p><p>此示例中的输出是：smith, alan smithern, harry smithhern, anne smitters, alexis</p><h3 id="3"><a href="#3" class="headerlink" title="3). |"></a>3). |</h3><p>指定如果以 |（垂直线）隔开的字符串的<strong>任何一个在字符串中</strong>，则字符串匹配。</p><p>命令行：<code>awk &#39;/allen | alan /&#39; testfile</code></p><p>将包含字符串 allen 或 alan 的所有记录打印至标准输出。</p><p>此示例中的输出是：smiley, allen smith, alan</p><h3 id="4"><a href="#4" class="headerlink" title="4). ()"></a>4). ()</h3><p>在正则表达式中将字符串组合在一起。</p><p>命令行： <code>awk &#39;/a(ll)?(nn)?e/&#39; testfile</code></p><p>将具有字符串 <code>ae</code> 或 <code>alle</code> 或 <code>anne</code> 或 <code>allnne</code> 的所有记录打印至标准输出。</p><p>此示例中的输出是：smiley, allen smithhern, anne</p><h3 id="5-m"><a href="#5-m" class="headerlink" title="5). {m}"></a>5). {m}</h3><p>指定如果<strong>正好有 m 个模式的具体值位于字符串中</strong>，则字符串匹配。</p><p>命令行：awk ‘/l{2}/‘ testfile</p><p>打印至标准输出：smiley, allen</p><h3 id="6-m"><a href="#6-m" class="headerlink" title="6). {m,}"></a>6). {m,}</h3><p>指定如果<strong>至少 m 个模式的具体值在字符串中</strong>，则字符串匹配。</p><p>命令行：<code>awk &#39;/t&#123;2,&#125;/&#39; testfile</code></p><p>打印至标准输出：smitters, alexis</p><h3 id="7-m-n"><a href="#7-m-n" class="headerlink" title="7). {m, n}"></a>7). {m, n}</h3><p>指定如果 <strong>m 和 n 之间（包含的 m 和 n）个模式</strong>的具体值在字符串中（其中m&lt;= n），则字符串匹配。</p><p>命令行：<code>awk &#39;/er&#123;1, 2&#125;/&#39; testfile</code></p><p>打印至标准输出：smithern, harry smithern, anne smitters, alexis</p><h3 id="8-String"><a href="#8-String" class="headerlink" title="8). [String]"></a>8). [String]</h3><p>指定正则表达式与方括号内 <strong>String 变量指定的任何字符匹配</strong>。</p><p>命令行：<code>awk &#39;/sm[a-h]/&#39; testfile</code></p><p>将具有 <code>sm</code> 后跟以字母顺序从 <code>a</code> 到 <code>h</code> 排列的任何字符的所有记录打印至标准输出。</p><p>此示例的输出是：smawley, andy</p><h3 id="9-String"><a href="#9-String" class="headerlink" title="9). [^ String]"></a>9). [^ String]</h3><p>在 [ ]（方括号）和在指定字符串开头的 ^ (插入记号) 指明<strong>正则表达式与方括号内的任何字符不匹配。</strong></p><p>命令行：<code>awk &#39;/sm\[^a-h]/&#39; testfile</code></p><p>打印至标准输出：smiley, allen smith, alan smithern, harry smithhern, anne smitters, alexis</p><h3 id="10"><a href="#10" class="headerlink" title="10). ~, !~"></a>10). ~, !~</h3><p>表示<strong>指定变量与正则表达式**</strong>匹配<strong>（~）或</strong>不匹配**（!~）的条件语句。</p><p>命令行：<code>awk &#39;$1 ~ /n/&#39; testfile</code></p><p>将第一个字段包含字符 <code>n</code> 的所有记录打印至标准输出。</p><p>此示例中的输出是：smithern, harry smithhern, anne</p><h3 id="11"><a href="#11" class="headerlink" title="11). ^"></a>11). ^</h3><p><strong>指定</strong>字段或记录的<strong>开头</strong>。</p><p>命令行： awk ‘$2 ~ /^h/‘ testfile</p><p>将把字符 <code>h</code> 作为第二个字段的第一个字符的所有记录打印至标准输出。</p><p>此示例中的输出是：smithern, harry</p><h3 id="12"><a href="#12" class="headerlink" title="12). $"></a>12). $</h3><p><strong>指定</strong>字段或记录的<strong>末尾</strong>。</p><p>命令行： awk ‘$2 ~ /y$/‘ testfile</p><p>将把字符 <code>y</code> 作为第二个字段的最后一个字符的所有记录打印至标准输出。</p><p>此示例中的输出是：smawley, andy smithern, harry</p><h3 id="13-（句号）"><a href="#13-（句号）" class="headerlink" title="13). .（句号）"></a>13). .（句号）</h3><p><strong>表示</strong>除了在空白末尾的终端换行字符以外的<strong>任何一个字符</strong>。</p><p>命令行： awk ‘/a..e/‘ testfile</p><p>将具有以两个字符隔开的字符 <code>a</code> 和 e 的所有记录打印至标准输出。</p><p>此示例中的输出是：smawley, andy smiley, allen smithhern, anne</p><h3 id="14-（星号）"><a href="#14-（星号）" class="headerlink" title="14). *（星号）"></a>14). *（星号）</h3><p>表示<strong>零个或更多的任意字符。</strong></p><p>命令行： awk ‘/a.*e/‘ testfile</p><p>将具有以零个或更多字符隔开的字符 <code>a</code> 和 e 的所有记录打印至标准输出。</p><p>此示例中的输出是：smawley, andy smiley, allen smithhern, anne smitters, alexis</p><h3 id="15-反斜杠"><a href="#15-反斜杠" class="headerlink" title="15). \ (反斜杠)"></a>15). \ (反斜杠)</h3><p>转义字符。当位于在扩展正则表达式中具有特殊含义的任何字符之前时，转义字符除去该字符的任何特殊含义。</p><p>例如，命令行： /a\/\//</p><p>将与模式 a // 匹配，因为反斜杠否定斜杠作为正则表达式定界符的通常含义。要将反斜杠本身指定为字符，则使用双反斜杠。有关反斜杠及其使用的更多信息，请参阅以下关于转义序列的内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWK工具书&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>XGB</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/XGB/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/XGB/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:55:10.052Z</updated>
    
    <content type="html"><![CDATA[<p>xgb包函数</p><span id="more"></span><h1 id="xgboost-sklearn-XGBClassifier"><a href="#xgboost-sklearn-XGBClassifier" class="headerlink" title="xgboost.sklearn.XGBClassifier"></a>xgboost.sklearn.XGBClassifier</h1><h2 id="f-score"><a href="#f-score" class="headerlink" title="f_score"></a>f_score</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost.sklearn <span class="keyword">import</span> XGBClassifier</span><br><span class="line"></span><br><span class="line">model = XGBClassifier(**params)</span><br><span class="line">model.fit(x_train, y_train, eval_set=watchlist,  <span class="comment"># 训练模型</span></span><br><span class="line">          eval_metric=<span class="string">&quot;logloss&quot;</span>,</span><br><span class="line">          early_stopping_rounds=<span class="number">30</span>,</span><br><span class="line">          verbose=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># feature importance 方法一</span></span><br><span class="line">importance =model.get_booster().get_fscore()  <span class="comment">#返回字典</span></span><br></pre></td></tr></table></figure><p>结果（特征分叉次数）：</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/XGB/XGB.assets/1565232108098.png" alt="1565232108098"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impo=model.feature_importances_ <span class="comment">#返回array</span></span><br></pre></td></tr></table></figure><p>结果（特征分叉次数占比）：</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/XGB/XGB.assets/1565232794674.png" alt="1565232794674"></p><h1 id="xgboost"><a href="#xgboost" class="headerlink" title="xgboost"></a>xgboost</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line">xgb_model = xgb.train (params, dtrain, num_boost_round, evals=watchlist, early_stopping_rounds=early_stopping_rounds, verbose_eval=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># feature importance</span></span><br><span class="line">importance =xgb_model.get_fscore() <span class="comment">#返回字典</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/XGB/XGB.assets/1565232255682.png" alt="1565232255682"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xgb包函数&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>final_cut_pro基础知识</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/final_cut_pro%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/final_cut_pro基础知识/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:50:02.090Z</updated>
    
    <content type="html"><![CDATA[<p>最常用的FCP操作</p><span id="more"></span><p>快捷键：</p><p>i</p><p>o</p><p>e</p><p>d</p><p>B:切割</p><p>A：选择</p><p>T：修建</p><p>cmmand+-</p><p>shif+z:自动缩放</p><p>ctrl+T: 基本字幕</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ul><li>资源库：最高文件夹</li><li>事件</li><li>项目：影片名字</li></ul><h1 id="插入快捷键"><a href="#插入快捷键" class="headerlink" title="插入快捷键"></a>插入快捷键</h1><p>选择素材，按快捷键</p><p>Q: 插到时间轴所在位置,有视频的话会在新时间线</p><p>W:插到当前事件轴位置，分隔</p><p><strong>E</strong>：插到时间线最后</p><p>D：覆盖到时间轴位置</p><h1 id="精修快捷键"><a href="#精修快捷键" class="headerlink" title="精修快捷键"></a>精修快捷键</h1><p>B: 切割</p><p>A：选择</p><p>shif：连续多选</p><p>右键生成复合片段：合并片段</p><h1 id="多轨道剪辑"><a href="#多轨道剪辑" class="headerlink" title="多轨道剪辑"></a>多轨道剪辑</h1><p><strong>主序列片段只有一个，移动主序列片段时会影响其他序列的片段</strong></p><h1 id="转场"><a href="#转场" class="headerlink" title="转场"></a>转场</h1><p>直接拖到两个片段之间，呈灰色即转场成功</p><p>可在检查器设置转场参数</p><h1 id="字幕"><a href="#字幕" class="headerlink" title="字幕"></a>字幕</h1><p>基本字幕</p><h1 id="音画匹配"><a href="#音画匹配" class="headerlink" title="音画匹配"></a>音画匹配</h1><ul><li>右键—&gt; 分离音频</li></ul><h1 id="关键帧"><a href="#关键帧" class="headerlink" title="关键帧"></a>关键帧</h1><pre><code>- 对某个属性打两个关键帧，可实现该属性过度</code></pre><h1 id="速率和方向"><a href="#速率和方向" class="headerlink" title="速率和方向"></a>速率和方向</h1><p>contrl+option+r: 调整速度</p><h1 id="聚焦-抠像-遮罩"><a href="#聚焦-抠像-遮罩" class="headerlink" title="聚焦 抠像 遮罩"></a>聚焦 抠像 遮罩</h1><p>聚焦：模糊分类中</p><h1 id="主要情节"><a href="#主要情节" class="headerlink" title="主要情节"></a>主要情节</h1><p>主要时间轴：右键—&gt; 从故事情节提取</p><p>非主要-》主要：右键—&gt; 覆盖至主要故事情节</p><h1 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h1><ul><li>合成异常</li><li>No</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最常用的FCP操作&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>VPN搭建</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/VPN%E6%90%AD%E5%BB%BA/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/VPN搭建/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:54:56.552Z</updated>
    
    <content type="html"><![CDATA[<p>科学搭建~~~</p><span id="more"></span><p> VPN搭建</p><p>[TOC]</p><p><a href="https://zoomyale.com/2016/vultr_and_ss/"><strong>https://zoomyale.com/2016/vultr_and_ss/</strong></a></p><h1 id="配置服务器shadowsocks"><a href="#配置服务器shadowsocks" class="headerlink" title="配置服务器shadowsocks"></a>配置服务器shadowsocks</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh <span class="comment">#从github下载脚本（点击github对应文件raw，新网页的链接）</span></span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks-all.sh  <span class="comment">#给执行权限</span></span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh">repositry 链接</a></p><ul><li>用python版本安装</li><li>不使用混淆插件</li><li>info在/etc/shadowsocks-python文件夹下</li><li>修改端口后要 检查服务器shadowsocks是否运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks-libev status</span><br></pre></td></tr></table></figure><p>置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>如果某天你的 ss 突然无法使用了，很可能就是端口被封了。</p><p>这时你可以直接在这里，将端口修改为 1-65535 间任意其他数字。编辑完成后，按 Ctrl + X ，再输入 Y 并回车确认退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure><p>需注意的是，如果你更新了配置文件，得重启 ss 才能生效。重启命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks-libev restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;科学搭建~~~&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>anaconda+tensorflow安装教程</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/anaconda+tensorflow%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/anaconda+tensorflow安装教程/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-04-12T09:04:26.832Z</updated>
    
    <content type="html"><![CDATA[<p>anaconda+tensorflow安装教程</p><span id="more"></span><p>[TOC]</p><h1 id="安装pip-conda-tensorflow"><a href="#安装pip-conda-tensorflow" class="headerlink" title="安装pip,conda,tensorflow"></a>安装pip,conda,tensorflow</h1><ol><li><p>安装pip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip --version #check id exists</span><br><span class="line"></span><br><span class="line">sudo easy_install pip #安装pip</span><br></pre></td></tr></table></figure><p>pip —version错误：ImportError: No module named typing</p></li><li><p>官网下载并安装anaconda,安装时勾选添加环境变量【非常重要，不然后续会出错】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> anaconda path 如果忘记勾选了，要配置环境变量</span></span><br><span class="line">vim ~/.bash_proflw</span><br><span class="line">export PATH=$PATH:/Users/hetianqi/opt/anaconda3/bin/</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>cmd中确认conda安装正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda -V</span><br></pre></td></tr></table></figure></li><li><p>创建新的虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#windows 的tensorflow只支持python3以上，3.6稳定，3.7和3.8都不稳定</span></span><br><span class="line">conda create -n python3.6 python=3.6 </span><br><span class="line">conda info -e</span><br><span class="line">conda env list</span><br><span class="line">conda activate python3.6  </span><br></pre></td></tr></table></figure></li><li><p>安装tensorflow</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow/">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/tensorflow/</a> 清华镜像，可查询tensorflow版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip+清华镜像</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow==2.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip+豆瓣镜像</span></span><br><span class="line">pip install -i https://pypi.douban.com/simple tensorflow==2.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># conda + </span></span><br><span class="line">conda install --channel https://conda.anaconda.org/anaconda tensorflow=2.0.0</span><br><span class="line"></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>在jupyterlab中使用tf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source activate 环境 #激活环境</span><br><span class="line">conda install ipykernel</span><br><span class="line">conda install ipython</span><br><span class="line">conda install jupyterlab</span><br><span class="line">ipython kernelspec install-self ––user</span><br><span class="line">python -m ipykernel install --user --name 环境名称 --display-name “环境名称” </span><br></pre></td></tr></table></figure></li></ol><ol><li><p>安装xgboost</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple XGBoost  <span class="comment">#win10</span></span><br><span class="line">conda install py-xgboost <span class="comment">#mac</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>安装torch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install torch===1.3.0 torchvision===0.4.1 -f https://download.pytorch.org/whl/torch_stable.html -i  https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure></li></ol><h1 id="安装scala-pyspark"><a href="#安装scala-pyspark" class="headerlink" title="安装scala,pyspark"></a>安装scala,pyspark</h1><ol><li><p>安装brew</p><p>在网上搜了很多brew安装方式，包括使用官网的方式都安装报错<br>Failed to connect to raw.githubusercontent.com port 443: Connection refused</p><p>可使用一下源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure></li><li><p>安装scala</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew search scala #查看可安装版本</span><br><span class="line">brew instal scala@2.12</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改~/.bash_profile</span></span><br><span class="line">export PATH=&quot;/usr/local/opt/scala@2.11/bin:$PATH</span><br><span class="line">scala -version #check是否安装成功</span><br></pre></td></tr></table></figure><p>报错： Error opening archive: Failed to open ‘/Users/hetianqi/Library/Caches/Homebrew/downloads/d1650a0762f1f057c43d5600d72a18d9aaa0c5da3cd172cac87ae9fcb6439bc0—openjdk-16.0.1.big_sur.bottle.tar.gz’</p><p>解决方法：export HOMEBREW_BOTTLE_DOMAIN=’’ </p><p>详细解释参考 <a href="https://zhuanlan.zhihu.com/p/383707713">https://zhuanlan.zhihu.com/p/383707713</a></p><blockquote><p>如果scala交互模式下方向键乱码，则在~/.bash_profile中添加</p><p>export TERM=xterm-color</p></blockquote></li><li><p>安装spark</p><p>a) 下载安装包 <a href="http://spark.apache.org/downloads.html">http://spark.apache.org/downloads.html</a></p></li></ol><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/anaconda+tensorflow%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/anaconda+tensorflow安装教程/image-20211013142113102.png" alt="image-20211013142113102" style="zoom:50%;"></p><p>​        b) 解压安装包，复制到路径 /usr/local/Cellar/</p><p>​        c) 修改~/.bash_profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">export SPARK_HOME=/usr/local/Cellar/spark/</span><br><span class="line">export PATH=$SPARK_HOME:$SPARK_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>​        d) check是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark-shell</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/anaconda+tensorflow%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/anaconda+tensorflow安装教程/image-20211013142621551.png" alt="image-20211013142621551" style="zoom:50%;"></p><ol><li>安装pyspark</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyspark</span><br></pre></td></tr></table></figure><ol><li><p>配置idea for scala and spark</p><p>Step1：建空maven项目</p><p>Step2:  建scala目录并mark as source</p><p>Step3: 下载scala插件：preference —&gt; pluging —&gt;scala</p><p>Step4: 增加框架支持：右击工程—&gt; add framework —&gt; scala</p><p>Step5: 添加apache jars: 右击工程 —&gt; open module settings —&gt; libraries —&gt; + java —&gt; browes —&gt; /usr/local/Cellar/spark/jars  (finder看不见这个文件夹可以 commmand + shift + G)</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;anaconda+tensorflow安装教程&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>hdfs常用命令</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/hdfs%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/hdfs常用命令/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:50:21.521Z</updated>
    
    <content type="html"><![CDATA[<p>hdfs常用操作</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">http://hadoop.apache.org/docs/r1.0.4/cn/hdfs_shell.html</span><br><span class="line">1.hdfs命令行</span><br><span class="line">    （1）查看帮助</span><br><span class="line">        hdfs dfs -help </span><br><span class="line">        </span><br><span class="line">    （2）查看当前目录信息</span><br><span class="line">        hdfs dfs -ls /</span><br><span class="line">        </span><br><span class="line">    （3）上传文件</span><br><span class="line">        hdfs dfs -put /本地路径 /hdfs路径</span><br><span class="line">        </span><br><span class="line">    （4）剪切文件</span><br><span class="line">        hdfs dfs -moveFromLocal a.txt /aa.txt</span><br><span class="line">        </span><br><span class="line">    （5）下载文件到本地</span><br><span class="line">        hdfs dfs -get /hdfs路径 /本地路径</span><br><span class="line">        </span><br><span class="line">    （6）合并下载</span><br><span class="line">        hdfs dfs -getmerge /hdfs路径文件夹 /合并后的文件</span><br><span class="line">        </span><br><span class="line">    （7）创建文件夹</span><br><span class="line">        hdfs dfs -mkdir /hello</span><br><span class="line">        </span><br><span class="line">    （8）创建多级文件夹</span><br><span class="line">        hdfs dfs -mkdir -p /hello/world</span><br><span class="line">        </span><br><span class="line">    （9）移动hdfs文件</span><br><span class="line">        hdfs dfs -mv /hdfs路径 /hdfs路径</span><br><span class="line">        </span><br><span class="line">    （10）复制hdfs文件</span><br><span class="line">        hdfs dfs -cp /hdfs路径 /hdfs路径</span><br><span class="line">        </span><br><span class="line">    （11）删除hdfs文件</span><br><span class="line">        hdfs dfs -rm /aa.txt</span><br><span class="line">        </span><br><span class="line">    （12）删除hdfs文件夹</span><br><span class="line">        hdfs dfs -rm -r /hello</span><br><span class="line">        </span><br><span class="line">    （13）查看hdfs中的文件</span><br><span class="line">        hdfs dfs -cat /文件</span><br><span class="line">        hdfs dfs -tail -f /文件</span><br><span class="line">        </span><br><span class="line">    （14）查看文件夹中有多少个文件</span><br><span class="line">        hdfs dfs -count /文件夹</span><br><span class="line">        </span><br><span class="line">    （15）查看hdfs的总空间</span><br><span class="line">        hdfs dfs -df /</span><br><span class="line">        hdfs dfs -df -h /</span><br><span class="line">        </span><br><span class="line">    （16）修改副本数    </span><br><span class="line">        hdfs dfs -setrep 1 /a.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hdfs常用操作&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>hive</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/hive/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/hive/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:50:37.791Z</updated>
    
    <content type="html"><![CDATA[<p>hive 常用操作</p><span id="more"></span><p>[TOC]</p><h1 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_name</span><br><span class="line">(a string comment <span class="string">&#x27;a&#x27;</span>,b string comment <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line">stored <span class="keyword">as</span> textfile;</span><br></pre></td></tr></table></figure><h1 id="增加map数量"><a href="#增加map数量" class="headerlink" title="增加map数量"></a>增加map数量</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set mapred.max.split.size=10000000; -- 决定每个map处理的最大的文件大小，单位为B</span><br><span class="line">set mapred.min.split.size.per.node=10000000; -- 节点中可以处理的最小的文件大小</span><br><span class="line">set mapred.min.split.size.per.rack=10000000; -- 机架中可以处理的最小的文件大小</span><br><span class="line">set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;---实现map中的数据合并需要设置下面的参数，集群默认就是这个格式</span><br></pre></td></tr></table></figure><h1 id="查询log"><a href="#查询log" class="headerlink" title="查询log"></a>查询log</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn logs -applicationId=application_1556066424096_26253 | less</span><br></pre></td></tr></table></figure><h1 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hivevar</span></span><br><span class="line">hive -d name=hetianqi -f temp.sql</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> name;</span><br><span class="line"><span class="comment">--set name=hetinaiq;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> name<span class="operator">=</span>$&#123;name&#125;</span><br></pre></td></tr></table></figure><h1 id="Hive中Create-table…-as-和-Create-table-…-like-的区别和使用注意"><a href="#Hive中Create-table…-as-和-Create-table-…-like-的区别和使用注意" class="headerlink" title="Hive中Create table… as 和 Create table … like 的区别和使用注意"></a>Hive中Create table… as 和 Create table … like 的区别和使用注意</h1><p><a href="https://blog.csdn.net/lzw2016/article/details/97811799">https://blog.csdn.net/lzw2016/article/details/97811799</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hive 常用操作&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>iterm奇淫技巧</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/iterm%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/iterm奇淫技巧/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:50:46.670Z</updated>
    
    <content type="html"><![CDATA[<p>item 配置</p><span id="more"></span><h1 id="1-修改tag名称"><a href="#1-修改tag名称" class="headerlink" title="1.修改tag名称"></a>1.修改tag名称</h1><p>快捷键 ： command+i  ，修改session name。</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/iterm%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/iterm奇淫技巧/image-20210901114300463.png" alt="image-20210901114300463" style="zoom:25%;"></p><p>右键-new tag 现在的tag就能显示自定义名称</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/iterm%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/iterm奇淫技巧/image-20210901114353748.png" alt="image-20210901114353748" style="zoom:25%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;item 配置&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>mathtype破解教程</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/mathtype%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/mathtype破解教程/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:51:24.161Z</updated>
    
    <content type="html"><![CDATA[<p>如题</p><span id="more"></span><ol><li><code>Windows + R</code> 然后输入<code>regedit.exe</code> 后确定，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20190426093524662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>来到目录<code>HKEY_CURRENT_USER\Software\Install Options</code> 下，删除图片中红线标出来的文件：<br><img src="https://img-blog.csdnimg.cn/20190426094144337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvdXdhbmxl,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>操作完上面的步骤后，重新打开MathType，又可以试用30天啦~</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/numpy/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/numpy/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:51:33.636Z</updated>
    
    <content type="html"><![CDATA[<p>numpy常用操作</p><span id="more"></span><h1 id="增加行或列"><a href="#增加行或列" class="headerlink" title="增加行或列"></a>增加行或列</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加列</span></span><br><span class="line">a=np.random.randn(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line">b=np.random.randn(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">c=np.column_stack((a,b))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加行</span></span><br><span class="line">a=np.random.randn(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line">b=np.random.randn(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line">c=np.row_stack((a,b))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;numpy常用操作&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>mac使用rz sz</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/mac%E4%BD%BF%E7%94%A8rz%20sz/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/mac使用rz sz/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:51:14.038Z</updated>
    
    <content type="html"><![CDATA[<p>mac配置rz sz</p><span id="more"></span><p>一、安装brew<br> <code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code><br> 二、安装iterm2<br> <code>brew cask install iterm2</code><br> 三、安装lrzsz<br> <code>sudo brew install lrzsz</code><br> 四、将下面2个脚本保存到 <code>/usr/local/bin/</code>下<br> 1.iterm2-recv-zmodem.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class="line"><span class="comment"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class="line"><span class="comment"># licensed under cc-wiki with attribution required </span></span><br><span class="line"><span class="comment"># Remainder of script public domain</span></span><br><span class="line"></span><br><span class="line">osascript -e <span class="string">&#x27;tell application &quot;iTerm2&quot; to version&#x27;</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NAME</span> = <span class="string">&quot;iTerm&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    FILE=`osascript -e <span class="string">&#x27;tell application &quot;iTerm&quot; to activate&#x27;</span> -e <span class="string">&#x27;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#x27;</span> -e <span class="string">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    FILE=`osascript -e <span class="string">&#x27;tell application &quot;iTerm2&quot; to activate&#x27;</span> -e <span class="string">&#x27;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#x27;</span> -e <span class="string">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Cancelled.</span><br><span class="line">    <span class="comment"># Send ZModem cancel</span></span><br><span class="line">    <span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span></span><br><span class="line">    /usr/<span class="built_in">local</span>/bin/rz -E -e -b</span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Sent \-\&gt; $FILE</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>2.iterm2-send-zmodem.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class="line"><span class="comment"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class="line"><span class="comment"># licensed under cc-wiki with attribution required </span></span><br><span class="line"><span class="comment"># Remainder of script public domain</span></span><br><span class="line"></span><br><span class="line">osascript -e <span class="string">&#x27;tell application &quot;iTerm2&quot; to version&#x27;</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NAME</span> = <span class="string">&quot;iTerm&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    FILE=`osascript -e <span class="string">&#x27;tell application &quot;iTerm&quot; to activate&#x27;</span> -e <span class="string">&#x27;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#x27;</span> -e <span class="string">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    FILE=`osascript -e <span class="string">&#x27;tell application &quot;iTerm2&quot; to activate&#x27;</span> -e <span class="string">&#x27;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#x27;</span> -e <span class="string">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Cancelled.</span><br><span class="line">    <span class="comment"># Send ZModem cancel</span></span><br><span class="line">    <span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    /usr/<span class="built_in">local</span>/bin/sz <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span> -e -b</span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Received $FILE</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>五、添加iTerm2 trigger</p><p>Item-profile-advanced-edit-default-add</p><p><img src="/Users/hetianqi/Library/Application Support/typora-user-images/image-20200403193423571.png" alt="image-20200403193423571"></p><blockquote><p>注意！！！</p><p>paramers一定要加绝对路径！！！</p></blockquote><p>配置项：</p><p>Regular expression      　　Action      　　　　　　　Parameters</p><p>/<em>/</em>B0100　　　　　　　　Run Silent Coprocess　　/usr/local/bin/iterm2-send-zmodem.sh</p><p>/<em>/</em>B00000000000000　  Run Silent Coprocess　　/usr/local/bin/iterm2-recv-zmodem.sh</p><p> 六：sudo</p><p>sudo chmod 777 /usr/local/bin/iterm2-*</p><p>配置完重启即可使用rz 和sz命令。</p><p>作者：小黑胖_<br>链接：<a href="https://www.jianshu.com/p/c23896b96b6c">https://www.jianshu.com/p/c23896b96b6c</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac配置rz sz&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>pandas</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/pandas/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/pandas/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:51:45.541Z</updated>
    
    <content type="html"><![CDATA[<p>pandas常用操作</p><span id="more"></span><p>[TOC]</p><h1 id="python调用shell"><a href="#python调用shell" class="headerlink" title="python调用shell"></a>python调用shell</h1><p>在python程序中调用shell命令，是件很酷且常用的事情……</p><p><a href="https://www.cnblogs.com/pengdonglin137/articles/8093409.html">https://www.cnblogs.com/pengdonglin137/articles/8093409.html</a></p><h2 id="os-system-command"><a href="#os-system-command" class="headerlink" title="os.system(command)"></a>os.system(command)</h2><p>  此函数会启动子进程，在子进程中执行command，并返回command命令执行完毕后的退出状态，如果command有执行内容，会在标准输出显示。这实际上是使用C标准库函数system()实现的。</p><blockquote><p>缺点：这个函数在执行command命令时需要重新打开一个终端，并且无法保存command命令的执行结果。<br>实例：os.system(‘ls -l *’)</p><h2 id="os-popen-command-mode"><a href="#os-popen-command-mode" class="headerlink" title="os.popen(command,mode)"></a>os.popen(command,mode)</h2></blockquote><p>打开一个与command进程之间的管道。这个函数的返回值是一个文件对象，可以读或者写(由mode决定，mode默认是’r’)。如果mode为’r’，可以使用此函数的返回值调用read()来获取command命令的执行结果。</p><p>os.system(cmd)或os.popen(cmd)，前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择。</p><p>实例：tmp = os.popen(‘ls -l *’).readlines()</p><h1 id="同时写入多个sheet"><a href="#同时写入多个sheet" class="headerlink" title="同时写入多个sheet"></a>同时写入多个sheet</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel_pd</span>(<span class="params">file, sheet, data</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    excel title: name /  age</span></span><br><span class="line"><span class="string">        df1 = &#123;</span></span><br><span class="line"><span class="string">        &#x27;name&#x27;: [1, 2, 3],</span></span><br><span class="line"><span class="string">        &#x27;age&#x27;: [1, 2, 3]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    pandas DataFrame  write to excel</span></span><br><span class="line"><span class="string">    :param file:  file_path + file_name</span></span><br><span class="line"><span class="string">    :param sheet: type：list</span></span><br><span class="line"><span class="string">    :param data: type: list  DataFrame</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    writer = pd.ExcelWriter(file)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sheet)):</span><br><span class="line">        df = pd.DataFrame(data[i])</span><br><span class="line">        df.to_excel(excel_writer=writer, sheet_name=sheet[i])</span><br><span class="line">    writer.save()</span><br><span class="line">    writer.close()</span><br><span class="line">    log.info(<span class="string">&#x27;写入数据完成！&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="按条件过滤行"><a href="#按条件过滤行" class="headerlink" title="按条件过滤行"></a>按条件过滤行</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[df[A] &gt; <span class="number">0</span>] <span class="comment">#选出A列&gt;0的行</span></span><br><span class="line">df[df[A]。isin([<span class="number">0</span>,<span class="number">1</span>])] <span class="comment">#选出A列中是0或1的行</span></span><br></pre></td></tr></table></figure><h1 id="读入"><a href="#读入" class="headerlink" title="读入"></a>读入</h1><p>import pandas as pd<br>df=pd.read_table(‘dddd.txt’,header=0,index_col=0,error_bad_lines=False,delimiter=’\t’)</p><h1 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h1><p>df.columns</p><h1 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.drop([<span class="string">&#x27;k&#x27;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>) <span class="comment">#删除k列</span></span><br></pre></td></tr></table></figure><h1 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h1><p>values={}<br>with open(‘fill_na.txt’) as f:<br>    for line in f:<br>        line = line.strip().split(‘:’)<br>        values[line[0]] = int(line[1])<br>df = df.fillna(value=values)<br>df = df.dropna(axis=0,how=’any’) #删除含有NULL的行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除指定列有空值的行</span></span><br><span class="line">df_ios_tmp=df_ios.dropna(subset=[列名],how=<span class="string">&#x27;all&#x27;</span>,inplace=<span class="literal">False</span>) <span class="comment">#how=all 或者 any</span></span><br></pre></td></tr></table></figure><h1 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sample(frac=<span class="number">1</span>).reset_index(drop=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="数据检查"><a href="#数据检查" class="headerlink" title="数据检查"></a>数据检查</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#datafram 每一列值unique数</span></span><br><span class="line">data_idfa.info(verbose=<span class="literal">True</span>, null_counts=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每一列均值 方差等</span></span><br><span class="line">data_idfa.describe()</span><br></pre></td></tr></table></figure><h1 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_ios.groupby([<span class="string">&#x27;y_flag&#x27;</span>], as_index=<span class="literal">False</span>)[<span class="string">&#x27;dt&#x27;</span>].count() <span class="comment">#聚合函数除了count还有sum,min,max等</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_ios.groupby([<span class="string">&#x27;dt_m&#x27;</span>,<span class="string">&#x27;y_flag&#x27;</span>], as_index=<span class="literal">False</span>)[<span class="string">&#x27;pin&#x27;</span>].count()</span><br></pre></td></tr></table></figure><h1 id="截取时间前几位"><a href="#截取时间前几位" class="headerlink" title="截取时间前几位"></a>截取时间前几位</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_ios[<span class="string">&#x27;dt_m&#x27;</span>]=df_ios[<span class="string">&#x27;dt&#x27;</span>].<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">7</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pandas常用操作&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>pandas常用命令</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/pandas%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/pandas常用命令/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-03-01T03:51:59.386Z</updated>
    
    <content type="html"><![CDATA[<p>10 minutes to pandas</p><span id="more"></span><p>[TOC]</p><h1 id="10-minutes-to-pandas"><a href="#10-minutes-to-pandas" class="headerlink" title="10 minutes to pandas"></a>10 minutes to pandas</h1><p>This is a short introduction to pandas, geared mainly for new users. You can see more complex recipes in the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html#cookbook">Cookbook</a>.</p><p>Customarily, we import as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import numpy as np</span><br><span class="line"></span><br><span class="line">In [2]: import pandas as pd</span><br></pre></td></tr></table></figure><h2 id="Object-creation"><a href="#Object-creation" class="headerlink" title="Object creation"></a>Object creation</h2><p>See the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dsintro">Data Structure Intro section</a>.</p><p>Creating a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series"><code>Series</code></a> by passing a list of values, letting pandas create a default integer index:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])</span><br><span class="line"></span><br><span class="line">In [4]: s</span><br><span class="line">Out[4]: </span><br><span class="line">0    1.0</span><br><span class="line">1    3.0</span><br><span class="line">2    5.0</span><br><span class="line">3    NaN</span><br><span class="line">4    6.0</span><br><span class="line">5    8.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>Creating a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a> by passing a NumPy array, with a datetime index and labeled columns:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [5]: dates = pd.date_range(&#x27;20130101&#x27;, periods=6)</span><br><span class="line"></span><br><span class="line">In [6]: dates</span><br><span class="line">Out[6]: </span><br><span class="line">DatetimeIndex([&#x27;2013-01-01&#x27;, &#x27;2013-01-02&#x27;, &#x27;2013-01-03&#x27;, &#x27;2013-01-04&#x27;,</span><br><span class="line">               &#x27;2013-01-05&#x27;, &#x27;2013-01-06&#x27;],</span><br><span class="line">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span><br><span class="line"></span><br><span class="line">In [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(&#x27;ABCD&#x27;))</span><br><span class="line"></span><br><span class="line">In [8]: df</span><br><span class="line">Out[8]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class="line">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br></pre></td></tr></table></figure><p>Creating a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a> by passing a dict of objects that can be converted to series-like.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [9]: df2 = pd.DataFrame(&#123;&#x27;A&#x27;: 1.,</span><br><span class="line">   ...:                     &#x27;B&#x27;: pd.Timestamp(&#x27;20130102&#x27;),</span><br><span class="line">   ...:                     &#x27;C&#x27;: pd.Series(1, index=list(range(4)), dtype=&#x27;float32&#x27;),</span><br><span class="line">   ...:                     &#x27;D&#x27;: np.array([3] * 4, dtype=&#x27;int32&#x27;),</span><br><span class="line">   ...:                     &#x27;E&#x27;: pd.Categorical([&quot;test&quot;, &quot;train&quot;, &quot;test&quot;, &quot;train&quot;]),</span><br><span class="line">   ...:                     &#x27;F&#x27;: &#x27;foo&#x27;&#125;)</span><br><span class="line">   ...: </span><br><span class="line"></span><br><span class="line">In [10]: df2</span><br><span class="line">Out[10]: </span><br><span class="line">     A          B    C  D      E    F</span><br><span class="line">0  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">1  1.0 2013-01-02  1.0  3  train  foo</span><br><span class="line">2  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">3  1.0 2013-01-02  1.0  3  train  foo</span><br></pre></td></tr></table></figure><p>The columns of the resulting <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a> have different <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-dtypes">dtypes</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [11]: df2.dtypes</span><br><span class="line">Out[11]: </span><br><span class="line">A           float64</span><br><span class="line">B    datetime64[ns]</span><br><span class="line">C           float32</span><br><span class="line">D             int32</span><br><span class="line">E          category</span><br><span class="line">F            object</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>If you’re using IPython, tab completion for column names (as well as public attributes) is automatically enabled. Here’s a subset of the attributes that will be completed:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [12]: df2.&lt;TAB&gt;  # noqa: E225, E999</span><br><span class="line">df2.A                  df2.bool</span><br><span class="line">df2.abs                df2.boxplot</span><br><span class="line">df2.add                df2.C</span><br><span class="line">df2.add_prefix         df2.clip</span><br><span class="line">df2.add_suffix         df2.columns</span><br><span class="line">df2.align              df2.copy</span><br><span class="line">df2.all                df2.count</span><br><span class="line">df2.any                df2.combine</span><br><span class="line">df2.append             df2.D</span><br><span class="line">df2.apply              df2.describe</span><br><span class="line">df2.applymap           df2.diff</span><br><span class="line">df2.B                  df2.duplicated</span><br></pre></td></tr></table></figure><p>As you can see, the columns <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code> are automatically tab completed. <code>E</code> and <code>F</code> are there as well; the rest of the attributes have been truncated for brevity.</p><h2 id="Viewing-data"><a href="#Viewing-data" class="headerlink" title="Viewing data"></a>Viewing data</h2><p>See the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics">Basics section</a>.</p><p>Here is how to view the top and bottom rows of the frame:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [13]: df.head()</span><br><span class="line">Out[13]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class="line"></span><br><span class="line">In [14]: df.tail(3)</span><br><span class="line">Out[14]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class="line">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br></pre></td></tr></table></figure><p>Display the index, columns:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [15]: df.index</span><br><span class="line">Out[15]: </span><br><span class="line">DatetimeIndex([&#x27;2013-01-01&#x27;, &#x27;2013-01-02&#x27;, &#x27;2013-01-03&#x27;, &#x27;2013-01-04&#x27;,</span><br><span class="line">               &#x27;2013-01-05&#x27;, &#x27;2013-01-06&#x27;],</span><br><span class="line">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span><br><span class="line"></span><br><span class="line">In [16]: df.columns</span><br><span class="line">Out[16]: Index([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;], dtype=&#x27;object&#x27;)</span><br></pre></td></tr></table></figure><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy"><code>DataFrame.to_numpy()</code></a> gives a NumPy representation of the underlying data. Note that this can be an expensive operation when your <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a> has columns with different data types, which comes down to a fundamental difference between pandas and NumPy: <strong>NumPy arrays have one dtype for the entire array, while pandas DataFrames have one dtype per column</strong>. When you call <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy"><code>DataFrame.to_numpy()</code></a>, pandas will find the NumPy dtype that can hold <em>all</em> of the dtypes in the DataFrame. This may end up being <code>object</code>, which requires casting every value to a Python object.</p><p>For <code>df</code>, our <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a> of all floating-point values, <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy"><code>DataFrame.to_numpy()</code></a> is fast and doesn’t require copying data.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [17]: df.to_numpy()</span><br><span class="line">Out[17]: </span><br><span class="line">array([[ 0.4691, -0.2829, -1.5091, -1.1356],</span><br><span class="line">       [ 1.2121, -0.1732,  0.1192, -1.0442],</span><br><span class="line">       [-0.8618, -2.1046, -0.4949,  1.0718],</span><br><span class="line">       [ 0.7216, -0.7068, -1.0396,  0.2719],</span><br><span class="line">       [-0.425 ,  0.567 ,  0.2762, -1.0874],</span><br><span class="line">       [-0.6737,  0.1136, -1.4784,  0.525 ]])</span><br></pre></td></tr></table></figure><p>For <code>df2</code>, the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a> with multiple dtypes, <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy"><code>DataFrame.to_numpy()</code></a> is relatively expensive.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [18]: df2.to_numpy()</span><br><span class="line">Out[18]: </span><br><span class="line">array([[1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;test&#x27;, &#x27;foo&#x27;],</span><br><span class="line">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;train&#x27;, &#x27;foo&#x27;],</span><br><span class="line">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;test&#x27;, &#x27;foo&#x27;],</span><br><span class="line">       [1.0, Timestamp(&#x27;2013-01-02 00:00:00&#x27;), 1.0, 3, &#x27;train&#x27;, &#x27;foo&#x27;]],</span><br><span class="line">      dtype=object)</span><br></pre></td></tr></table></figure><p>Note</p><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy"><code>DataFrame.to_numpy()</code></a> does <em>not</em> include the index or column labels in the output.</p><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe"><code>describe()</code></a> shows a quick statistic summary of your data:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [19]: df.describe()</span><br><span class="line">Out[19]: </span><br><span class="line">              A         B         C         D</span><br><span class="line">count  6.000000  6.000000  6.000000  6.000000</span><br><span class="line">mean   0.073711 -0.431125 -0.687758 -0.233103</span><br><span class="line">std    0.843157  0.922818  0.779887  0.973118</span><br><span class="line">min   -0.861849 -2.104569 -1.509059 -1.135632</span><br><span class="line">25%   -0.611510 -0.600794 -1.368714 -1.076610</span><br><span class="line">50%    0.022070 -0.228039 -0.767252 -0.386188</span><br><span class="line">75%    0.658444  0.041933 -0.034326  0.461706</span><br><span class="line">max    1.212112  0.567020  0.276232  1.071804</span><br></pre></td></tr></table></figure><p>Transposing your data:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [20]: df.T</span><br><span class="line">Out[20]: </span><br><span class="line">   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06</span><br><span class="line">A    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690</span><br><span class="line">B   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648</span><br><span class="line">C   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427</span><br><span class="line">D   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988</span><br></pre></td></tr></table></figure><p>Sorting by an axis:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [21]: df.sort_index(axis=1, ascending=False)</span><br><span class="line">Out[21]: </span><br><span class="line">                   D         C         B         A</span><br><span class="line">2013-01-01 -1.135632 -1.509059 -0.282863  0.469112</span><br><span class="line">2013-01-02 -1.044236  0.119209 -0.173215  1.212112</span><br><span class="line">2013-01-03  1.071804 -0.494929 -2.104569 -0.861849</span><br><span class="line">2013-01-04  0.271860 -1.039575 -0.706771  0.721555</span><br><span class="line">2013-01-05 -1.087401  0.276232  0.567020 -0.424972</span><br><span class="line">2013-01-06  0.524988 -1.478427  0.113648 -0.673690</span><br></pre></td></tr></table></figure><p>Sorting by values:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [22]: df.sort_values(by=&#x27;B&#x27;)</span><br><span class="line">Out[22]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class="line">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br></pre></td></tr></table></figure><h2 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h2><p>Note</p><p>While standard Python / Numpy expressions for selecting and setting are intuitive and come in handy for interactive work, for production code, we recommend the optimized pandas data access methods, <code>.at</code>, <code>.iat</code>, <code>.loc</code> and <code>.iloc</code>.</p><p>See the indexing documentation <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing">Indexing and Selecting Data</a> and <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced">MultiIndex / Advanced Indexing</a>.</p><h3 id="Getting"><a href="#Getting" class="headerlink" title="Getting"></a>Getting</h3><p>Selecting a single column, which yields a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series"><code>Series</code></a>, equivalent to <code>df.A</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [23]: df[&#x27;A&#x27;]</span><br><span class="line">Out[23]: </span><br><span class="line">2013-01-01    0.469112</span><br><span class="line">2013-01-02    1.212112</span><br><span class="line">2013-01-03   -0.861849</span><br><span class="line">2013-01-04    0.721555</span><br><span class="line">2013-01-05   -0.424972</span><br><span class="line">2013-01-06   -0.673690</span><br><span class="line">Freq: D, Name: A, dtype: float64</span><br></pre></td></tr></table></figure><p>Selecting via <code>[]</code>, which slices the rows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [24]: df[0:3]</span><br><span class="line">Out[24]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class="line"></span><br><span class="line">In [25]: df[&#x27;20130102&#x27;:&#x27;20130104&#x27;]</span><br><span class="line">Out[25]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br></pre></td></tr></table></figure><h3 id="Selection-by-label"><a href="#Selection-by-label" class="headerlink" title="Selection by label"></a>Selection by label</h3><p>See more in <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-label">Selection by Label</a>.</p><p>For getting a cross section using a label:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [26]: df.loc[dates[0]]</span><br><span class="line">Out[26]: </span><br><span class="line">A    0.469112</span><br><span class="line">B   -0.282863</span><br><span class="line">C   -1.509059</span><br><span class="line">D   -1.135632</span><br><span class="line">Name: 2013-01-01 00:00:00, dtype: float64</span><br></pre></td></tr></table></figure><p>Selecting on a multi-axis by label:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [27]: df.loc[:, [&#x27;A&#x27;, &#x27;B&#x27;]]</span><br><span class="line">Out[27]: </span><br><span class="line">                   A         B</span><br><span class="line">2013-01-01  0.469112 -0.282863</span><br><span class="line">2013-01-02  1.212112 -0.173215</span><br><span class="line">2013-01-03 -0.861849 -2.104569</span><br><span class="line">2013-01-04  0.721555 -0.706771</span><br><span class="line">2013-01-05 -0.424972  0.567020</span><br><span class="line">2013-01-06 -0.673690  0.113648</span><br></pre></td></tr></table></figure><p>Showing label slicing, both endpoints are <em>included</em>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [28]: df.loc[&#x27;20130102&#x27;:&#x27;20130104&#x27;, [&#x27;A&#x27;, &#x27;B&#x27;]]</span><br><span class="line">Out[28]: </span><br><span class="line">                   A         B</span><br><span class="line">2013-01-02  1.212112 -0.173215</span><br><span class="line">2013-01-03 -0.861849 -2.104569</span><br><span class="line">2013-01-04  0.721555 -0.706771</span><br></pre></td></tr></table></figure><p>Reduction in the dimensions of the returned object:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [29]: df.loc[&#x27;20130102&#x27;, [&#x27;A&#x27;, &#x27;B&#x27;]]</span><br><span class="line">Out[29]: </span><br><span class="line">A    1.212112</span><br><span class="line">B   -0.173215</span><br><span class="line">Name: 2013-01-02 00:00:00, dtype: float64</span><br></pre></td></tr></table></figure><p>For getting a scalar value:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [30]: df.loc[dates[0], &#x27;A&#x27;]</span><br><span class="line">Out[30]: 0.4691122999071863</span><br></pre></td></tr></table></figure><p>For getting fast access to a scalar (equivalent to the prior method):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [31]: df.at[dates[0], &#x27;A&#x27;]</span><br><span class="line">Out[31]: 0.4691122999071863</span><br></pre></td></tr></table></figure><h3 id="Selection-by-position"><a href="#Selection-by-position" class="headerlink" title="Selection by position"></a>Selection by position</h3><p>See more in <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-integer">Selection by Position</a>.</p><p>Select via the position of the passed integers:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [32]: df.iloc[3]</span><br><span class="line">Out[32]: </span><br><span class="line">A    0.721555</span><br><span class="line">B   -0.706771</span><br><span class="line">C   -1.039575</span><br><span class="line">D    0.271860</span><br><span class="line">Name: 2013-01-04 00:00:00, dtype: float64</span><br></pre></td></tr></table></figure><p>By integer slices, acting similar to numpy/python:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [33]: df.iloc[3:5, 0:2]</span><br><span class="line">Out[33]: </span><br><span class="line">                   A         B</span><br><span class="line">2013-01-04  0.721555 -0.706771</span><br><span class="line">2013-01-05 -0.424972  0.567020</span><br></pre></td></tr></table></figure><p>By lists of integer position locations, similar to the numpy/python style:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [34]: df.iloc[[1, 2, 4], [0, 2]]</span><br><span class="line">Out[34]: </span><br><span class="line">                   A         C</span><br><span class="line">2013-01-02  1.212112  0.119209</span><br><span class="line">2013-01-03 -0.861849 -0.494929</span><br><span class="line">2013-01-05 -0.424972  0.276232</span><br></pre></td></tr></table></figure><p>For slicing rows explicitly:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [35]: df.iloc[1:3, :]</span><br><span class="line">Out[35]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br></pre></td></tr></table></figure><p>For slicing columns explicitly:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [36]: df.iloc[:, 1:3]</span><br><span class="line">Out[36]: </span><br><span class="line">                   B         C</span><br><span class="line">2013-01-01 -0.282863 -1.509059</span><br><span class="line">2013-01-02 -0.173215  0.119209</span><br><span class="line">2013-01-03 -2.104569 -0.494929</span><br><span class="line">2013-01-04 -0.706771 -1.039575</span><br><span class="line">2013-01-05  0.567020  0.276232</span><br><span class="line">2013-01-06  0.113648 -1.478427</span><br></pre></td></tr></table></figure><p>For getting a value explicitly:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [37]: df.iloc[1, 1]</span><br><span class="line">Out[37]: -0.17321464905330858</span><br></pre></td></tr></table></figure><p>For getting fast access to a scalar (equivalent to the prior method):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [38]: df.iat[1, 1]</span><br><span class="line">Out[38]: -0.17321464905330858</span><br></pre></td></tr></table></figure><h3 id="Boolean-indexing"><a href="#Boolean-indexing" class="headerlink" title="Boolean indexing"></a>Boolean indexing</h3><p>Using a single column’s values to select data.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [39]: df[df[&#x27;A&#x27;] &gt; 0]</span><br><span class="line">Out[39]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br></pre></td></tr></table></figure><p>Selecting values from a DataFrame where a boolean condition is met.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [40]: df[df &gt; 0]</span><br><span class="line">Out[40]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-01  0.469112       NaN       NaN       NaN</span><br><span class="line">2013-01-02  1.212112       NaN  0.119209       NaN</span><br><span class="line">2013-01-03       NaN       NaN       NaN  1.071804</span><br><span class="line">2013-01-04  0.721555       NaN       NaN  0.271860</span><br><span class="line">2013-01-05       NaN  0.567020  0.276232       NaN</span><br><span class="line">2013-01-06       NaN  0.113648       NaN  0.524988</span><br></pre></td></tr></table></figure><p>Using the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html#pandas.Series.isin"><code>isin()</code></a> method for filtering:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [41]: df2 = df.copy()</span><br><span class="line"></span><br><span class="line">In [42]: df2[&#x27;E&#x27;] = [&#x27;one&#x27;, &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;, &#x27;three&#x27;]</span><br><span class="line"></span><br><span class="line">In [43]: df2</span><br><span class="line">Out[43]: </span><br><span class="line">                   A         B         C         D      E</span><br><span class="line">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four</span><br><span class="line">2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three</span><br><span class="line"></span><br><span class="line">In [44]: df2[df2[&#x27;E&#x27;].isin([&#x27;two&#x27;, &#x27;four&#x27;])]</span><br><span class="line">Out[44]: </span><br><span class="line">                   A         B         C         D     E</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four</span><br></pre></td></tr></table></figure><h3 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h3><p>Setting a new column automatically aligns the data by the indexes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range(&#x27;20130102&#x27;, periods=6))</span><br><span class="line"></span><br><span class="line">In [46]: s1</span><br><span class="line">Out[46]: </span><br><span class="line">2013-01-02    1</span><br><span class="line">2013-01-03    2</span><br><span class="line">2013-01-04    3</span><br><span class="line">2013-01-05    4</span><br><span class="line">2013-01-06    5</span><br><span class="line">2013-01-07    6</span><br><span class="line">Freq: D, dtype: int64</span><br><span class="line"></span><br><span class="line">In [47]: df[&#x27;F&#x27;] = s1</span><br></pre></td></tr></table></figure><p>Setting values by label:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [48]: df.at[dates[0], &#x27;A&#x27;] = 0</span><br></pre></td></tr></table></figure><p>Setting values by position:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [49]: df.iat[0, 1] = 0</span><br></pre></td></tr></table></figure><p>Setting by assigning with a NumPy array:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [50]: df.loc[:, &#x27;D&#x27;] = np.array([5] * len(df))</span><br></pre></td></tr></table></figure><p>The result of the prior setting operations.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [51]: df</span><br><span class="line">Out[51]: </span><br><span class="line">                   A         B         C  D    F</span><br><span class="line">2013-01-01  0.000000  0.000000 -1.509059  5  NaN</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209  5  1.0</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  5  3.0</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232  5  4.0</span><br><span class="line">2013-01-06 -0.673690  0.113648 -1.478427  5  5.0</span><br></pre></td></tr></table></figure><p>A <code>where</code> operation with setting.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [52]: df2 = df.copy()</span><br><span class="line"></span><br><span class="line">In [53]: df2[df2 &gt; 0] = -df2</span><br><span class="line"></span><br><span class="line">In [54]: df2</span><br><span class="line">Out[54]: </span><br><span class="line">                   A         B         C  D    F</span><br><span class="line">2013-01-01  0.000000  0.000000 -1.509059 -5  NaN</span><br><span class="line">2013-01-02 -1.212112 -0.173215 -0.119209 -5 -1.0</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929 -5 -2.0</span><br><span class="line">2013-01-04 -0.721555 -0.706771 -1.039575 -5 -3.0</span><br><span class="line">2013-01-05 -0.424972 -0.567020 -0.276232 -5 -4.0</span><br><span class="line">2013-01-06 -0.673690 -0.113648 -1.478427 -5 -5.0</span><br></pre></td></tr></table></figure><h2 id="Missing-data"><a href="#Missing-data" class="headerlink" title="Missing data"></a>Missing data</h2><p>pandas primarily uses the value <code>np.nan</code> to represent missing data. It is by default not included in computations. See the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html#missing-data">Missing Data section</a>.</p><p>Reindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + [&#x27;E&#x27;])</span><br><span class="line"></span><br><span class="line">In [56]: df1.loc[dates[0]:dates[1], &#x27;E&#x27;] = 1</span><br><span class="line"></span><br><span class="line">In [57]: df1</span><br><span class="line">Out[57]: </span><br><span class="line">                   A         B         C  D    F    E</span><br><span class="line">2013-01-01  0.000000  0.000000 -1.509059  5  NaN  1.0</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  NaN</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  NaN</span><br></pre></td></tr></table></figure><p>To drop any rows that have missing data.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [58]: df1.dropna(how=&#x27;any&#x27;)</span><br><span class="line">Out[58]: </span><br><span class="line">                   A         B         C  D    F    E</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0</span><br></pre></td></tr></table></figure><p>Filling missing data.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [59]: df1.fillna(value=5)</span><br><span class="line">Out[59]: </span><br><span class="line">                   A         B         C  D    F    E</span><br><span class="line">2013-01-01  0.000000  0.000000 -1.509059  5  5.0  1.0</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  5.0</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  5.0</span><br></pre></td></tr></table></figure><p>To get the boolean mask where values are <code>nan</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [60]: pd.isna(df1)</span><br><span class="line">Out[60]: </span><br><span class="line">                A      B      C      D      F      E</span><br><span class="line">2013-01-01  False  False  False  False   True  False</span><br><span class="line">2013-01-02  False  False  False  False  False  False</span><br><span class="line">2013-01-03  False  False  False  False  False   True</span><br><span class="line">2013-01-04  False  False  False  False  False   True</span><br></pre></td></tr></table></figure><h2 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h2><p>See the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-binop">Basic section on Binary Ops</a>.</p><h3 id="Stats"><a href="#Stats" class="headerlink" title="Stats"></a>Stats</h3><p>Operations in general <em>exclude</em> missing data.</p><p>Performing a descriptive statistic:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [61]: df.mean()</span><br><span class="line">Out[61]: </span><br><span class="line">A   -0.004474</span><br><span class="line">B   -0.383981</span><br><span class="line">C   -0.687758</span><br><span class="line">D    5.000000</span><br><span class="line">F    3.000000</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>Same operation on the other axis:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [62]: df.mean(1)</span><br><span class="line">Out[62]: </span><br><span class="line">2013-01-01    0.872735</span><br><span class="line">2013-01-02    1.431621</span><br><span class="line">2013-01-03    0.707731</span><br><span class="line">2013-01-04    1.395042</span><br><span class="line">2013-01-05    1.883656</span><br><span class="line">2013-01-06    1.592306</span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure><p>Operating with objects that have different dimensionality and need alignment. In addition, pandas automatically broadcasts along the specified dimension.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [63]: s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)</span><br><span class="line"></span><br><span class="line">In [64]: s</span><br><span class="line">Out[64]: </span><br><span class="line">2013-01-01    NaN</span><br><span class="line">2013-01-02    NaN</span><br><span class="line">2013-01-03    1.0</span><br><span class="line">2013-01-04    3.0</span><br><span class="line">2013-01-05    5.0</span><br><span class="line">2013-01-06    NaN</span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [65]: df.sub(s, axis=&#x27;index&#x27;)</span><br><span class="line">Out[65]: </span><br><span class="line">                   A         B         C    D    F</span><br><span class="line">2013-01-01       NaN       NaN       NaN  NaN  NaN</span><br><span class="line">2013-01-02       NaN       NaN       NaN  NaN  NaN</span><br><span class="line">2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0</span><br><span class="line">2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0</span><br><span class="line">2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0</span><br><span class="line">2013-01-06       NaN       NaN       NaN  NaN  NaN</span><br></pre></td></tr></table></figure><h3 id="Apply"><a href="#Apply" class="headerlink" title="Apply"></a>Apply</h3><p>Applying functions to the data:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [66]: df.apply(np.cumsum)</span><br><span class="line">Out[66]: </span><br><span class="line">                   A         B         C   D     F</span><br><span class="line">2013-01-01  0.000000  0.000000 -1.509059   5   NaN</span><br><span class="line">2013-01-02  1.212112 -0.173215 -1.389850  10   1.0</span><br><span class="line">2013-01-03  0.350263 -2.277784 -1.884779  15   3.0</span><br><span class="line">2013-01-04  1.071818 -2.984555 -2.924354  20   6.0</span><br><span class="line">2013-01-05  0.646846 -2.417535 -2.648122  25  10.0</span><br><span class="line">2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0</span><br><span class="line"></span><br><span class="line">In [67]: df.apply(lambda x: x.max() - x.min())</span><br><span class="line">Out[67]: </span><br><span class="line">A    2.073961</span><br><span class="line">B    2.671590</span><br><span class="line">C    1.785291</span><br><span class="line">D    0.000000</span><br><span class="line">F    4.000000</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="Histogramming"><a href="#Histogramming" class="headerlink" title="Histogramming"></a>Histogramming</h3><p>See more at <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-discretization">Histogramming and Discretization</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [68]: s = pd.Series(np.random.randint(0, 7, size=10))</span><br><span class="line"></span><br><span class="line">In [69]: s</span><br><span class="line">Out[69]: </span><br><span class="line">0    4</span><br><span class="line">1    2</span><br><span class="line">2    1</span><br><span class="line">3    2</span><br><span class="line">4    6</span><br><span class="line">5    4</span><br><span class="line">6    4</span><br><span class="line">7    6</span><br><span class="line">8    4</span><br><span class="line">9    4</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [70]: s.value_counts()</span><br><span class="line">Out[70]: </span><br><span class="line">4    5</span><br><span class="line">6    2</span><br><span class="line">2    2</span><br><span class="line">1    1</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="String-Methods"><a href="#String-Methods" class="headerlink" title="String Methods"></a>String Methods</h3><p>Series is equipped with a set of string processing methods in the str attribute that make it easy to operate on each element of the array, as in the code snippet below. Note that pattern-matching in str generally uses <a href="https://docs.python.org/3/library/re.html">regular expressions</a> by default (and in some cases always uses them). See more at <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html#text-string-methods">Vectorized String Methods</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [71]: s = pd.Series([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;Aaba&#x27;, &#x27;Baca&#x27;, np.nan, &#x27;CABA&#x27;, &#x27;dog&#x27;, &#x27;cat&#x27;])</span><br><span class="line"></span><br><span class="line">In [72]: s.str.lower()</span><br><span class="line">Out[72]: </span><br><span class="line">0       a</span><br><span class="line">1       b</span><br><span class="line">2       c</span><br><span class="line">3    aaba</span><br><span class="line">4    baca</span><br><span class="line">5     NaN</span><br><span class="line">6    caba</span><br><span class="line">7     dog</span><br><span class="line">8     cat</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h2 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h2><h3 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h3><p>pandas provides various facilities for easily combining together Series and DataFrame objects with various kinds of set logic for the indexes and relational algebra functionality in the case of join / merge-type operations.</p><p>See the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging">Merging section</a>.</p><p>Concatenating pandas objects together with <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html#pandas.concat"><code>concat()</code></a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [73]: df = pd.DataFrame(np.random.randn(10, 4))</span><br><span class="line"></span><br><span class="line">In [74]: df</span><br><span class="line">Out[74]: </span><br><span class="line">          0         1         2         3</span><br><span class="line">0 -0.548702  1.467327 -1.015962 -0.483075</span><br><span class="line">1  1.637550 -1.217659 -0.291519 -1.745505</span><br><span class="line">2 -0.263952  0.991460 -0.919069  0.266046</span><br><span class="line">3 -0.709661  1.669052  1.037882 -1.705775</span><br><span class="line">4 -0.919854 -0.042379  1.247642 -0.009920</span><br><span class="line">5  0.290213  0.495767  0.362949  1.548106</span><br><span class="line">6 -1.131345 -0.089329  0.337863 -0.945867</span><br><span class="line">7 -0.932132  1.956030  0.017587 -0.016692</span><br><span class="line">8 -0.575247  0.254161 -1.143704  0.215897</span><br><span class="line">9  1.193555 -0.077118 -0.408530 -0.862495</span><br><span class="line"></span><br><span class="line"># break it into pieces</span><br><span class="line">In [75]: pieces = [df[:3], df[3:7], df[7:]]</span><br><span class="line"></span><br><span class="line">In [76]: pd.concat(pieces)</span><br><span class="line">Out[76]: </span><br><span class="line">          0         1         2         3</span><br><span class="line">0 -0.548702  1.467327 -1.015962 -0.483075</span><br><span class="line">1  1.637550 -1.217659 -0.291519 -1.745505</span><br><span class="line">2 -0.263952  0.991460 -0.919069  0.266046</span><br><span class="line">3 -0.709661  1.669052  1.037882 -1.705775</span><br><span class="line">4 -0.919854 -0.042379  1.247642 -0.009920</span><br><span class="line">5  0.290213  0.495767  0.362949  1.548106</span><br><span class="line">6 -1.131345 -0.089329  0.337863 -0.945867</span><br><span class="line">7 -0.932132  1.956030  0.017587 -0.016692</span><br><span class="line">8 -0.575247  0.254161 -1.143704  0.215897</span><br><span class="line">9  1.193555 -0.077118 -0.408530 -0.862495</span><br></pre></td></tr></table></figure><p>Note</p><p>Adding a column to a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a> is relatively fast. However, adding a row requires a copy, and may be expensive. We recommend passing a pre-built list of records to the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a> constructor instead of building a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a> by iteratively appending records to it. See <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-concatenation">Appending to dataframe</a> for more.</p><h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><p>SQL style merges. See the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merging-join">Database style joining</a> section.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [77]: left = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;], &#x27;lval&#x27;: [1, 2]&#125;)</span><br><span class="line"></span><br><span class="line">In [78]: right = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;], &#x27;rval&#x27;: [4, 5]&#125;)</span><br><span class="line"></span><br><span class="line">In [79]: left</span><br><span class="line">Out[79]: </span><br><span class="line">   key  lval</span><br><span class="line">0  foo     1</span><br><span class="line">1  foo     2</span><br><span class="line"></span><br><span class="line">In [80]: right</span><br><span class="line">Out[80]: </span><br><span class="line">   key  rval</span><br><span class="line">0  foo     4</span><br><span class="line">1  foo     5</span><br><span class="line"></span><br><span class="line">In [81]: pd.merge(left, right, on=&#x27;key&#x27;)</span><br><span class="line">Out[81]: </span><br><span class="line">   key  lval  rval</span><br><span class="line">0  foo     1     4</span><br><span class="line">1  foo     1     5</span><br><span class="line">2  foo     2     4</span><br><span class="line">3  foo     2     5</span><br></pre></td></tr></table></figure><p>Another example that can be given is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [82]: left = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;], &#x27;lval&#x27;: [1, 2]&#125;)</span><br><span class="line"></span><br><span class="line">In [83]: right = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;], &#x27;rval&#x27;: [4, 5]&#125;)</span><br><span class="line"></span><br><span class="line">In [84]: left</span><br><span class="line">Out[84]: </span><br><span class="line">   key  lval</span><br><span class="line">0  foo     1</span><br><span class="line">1  bar     2</span><br><span class="line"></span><br><span class="line">In [85]: right</span><br><span class="line">Out[85]: </span><br><span class="line">   key  rval</span><br><span class="line">0  foo     4</span><br><span class="line">1  bar     5</span><br><span class="line"></span><br><span class="line">In [86]: pd.merge(left, right, on=&#x27;key&#x27;)</span><br><span class="line">Out[86]: </span><br><span class="line">   key  lval  rval</span><br><span class="line">0  foo     1     4</span><br><span class="line">1  bar     2     5</span><br></pre></td></tr></table></figure><h2 id="Grouping"><a href="#Grouping" class="headerlink" title="Grouping"></a>Grouping</h2><p>By “group by” we are referring to a process involving one or more of the following steps:</p><blockquote><ul><li><strong>Splitting</strong> the data into groups based on some criteria</li><li><strong>Applying</strong> a function to each group independently</li><li><strong>Combining</strong> the results into a data structure</li></ul></blockquote><p>See the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#groupby">Grouping section</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [87]: df = pd.DataFrame(&#123;&#x27;A&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;foo&#x27;, &#x27;bar&#x27;,</span><br><span class="line">   ....:                          &#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;foo&#x27;, &#x27;foo&#x27;],</span><br><span class="line">   ....:                    &#x27;B&#x27;: [&#x27;one&#x27;, &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;,</span><br><span class="line">   ....:                          &#x27;two&#x27;, &#x27;two&#x27;, &#x27;one&#x27;, &#x27;three&#x27;],</span><br><span class="line">   ....:                    &#x27;C&#x27;: np.random.randn(8),</span><br><span class="line">   ....:                    &#x27;D&#x27;: np.random.randn(8)&#125;)</span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [88]: df</span><br><span class="line">Out[88]: </span><br><span class="line">     A      B         C         D</span><br><span class="line">0  foo    one  1.346061 -1.577585</span><br><span class="line">1  bar    one  1.511763  0.396823</span><br><span class="line">2  foo    two  1.627081 -0.105381</span><br><span class="line">3  bar  three -0.990582 -0.532532</span><br><span class="line">4  foo    two -0.441652  1.453749</span><br><span class="line">5  bar    two  1.211526  1.208843</span><br><span class="line">6  foo    one  0.268520 -0.080952</span><br><span class="line">7  foo  three  0.024580 -0.264610</span><br></pre></td></tr></table></figure><p>Grouping and then applying the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum"><code>sum()</code></a> function to the resulting groups.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [89]: df.groupby(&#x27;A&#x27;).sum()</span><br><span class="line">Out[89]: </span><br><span class="line">            C         D</span><br><span class="line">A                      </span><br><span class="line">bar  1.732707  1.073134</span><br><span class="line">foo  2.824590 -0.574779</span><br></pre></td></tr></table></figure><p>Grouping by multiple columns forms a hierarchical index, and again we can apply the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum"><code>sum()</code></a> function.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [90]: df.groupby([&#x27;A&#x27;, &#x27;B&#x27;]).sum()</span><br><span class="line">Out[90]: </span><br><span class="line">                  C         D</span><br><span class="line">A   B                        </span><br><span class="line">bar one    1.511763  0.396823</span><br><span class="line">    three -0.990582 -0.532532</span><br><span class="line">    two    1.211526  1.208843</span><br><span class="line">foo one    1.614581 -1.658537</span><br><span class="line">    three  0.024580 -0.264610</span><br><span class="line">    two    1.185429  1.348368</span><br></pre></td></tr></table></figure><h2 id="Reshaping"><a href="#Reshaping" class="headerlink" title="Reshaping"></a>Reshaping</h2><p>See the sections on <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced-hierarchical">Hierarchical Indexing</a> and <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-stacking">Reshaping</a>.</p><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [91]: tuples = list(zip(*[[&#x27;bar&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;, &#x27;baz&#x27;,</span><br><span class="line">   ....:                      &#x27;foo&#x27;, &#x27;foo&#x27;, &#x27;qux&#x27;, &#x27;qux&#x27;],</span><br><span class="line">   ....:                     [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;one&#x27;, &#x27;two&#x27;,</span><br><span class="line">   ....:                      &#x27;one&#x27;, &#x27;two&#x27;, &#x27;one&#x27;, &#x27;two&#x27;]]))</span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [92]: index = pd.MultiIndex.from_tuples(tuples, names=[&#x27;first&#x27;, &#x27;second&#x27;])</span><br><span class="line"></span><br><span class="line">In [93]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[&#x27;A&#x27;, &#x27;B&#x27;])</span><br><span class="line"></span><br><span class="line">In [94]: df2 = df[:4]</span><br><span class="line"></span><br><span class="line">In [95]: df2</span><br><span class="line">Out[95]: </span><br><span class="line">                     A         B</span><br><span class="line">first second                    </span><br><span class="line">bar   one    -0.727965 -0.589346</span><br><span class="line">      two     0.339969 -0.693205</span><br><span class="line">baz   one    -0.339355  0.593616</span><br><span class="line">      two     0.884345  1.591431</span><br></pre></td></tr></table></figure><p>The <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack"><code>stack()</code></a> method “compresses” a level in the DataFrame’s columns.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [96]: stacked = df2.stack()</span><br><span class="line"></span><br><span class="line">In [97]: stacked</span><br><span class="line">Out[97]: </span><br><span class="line">first  second   </span><br><span class="line">bar    one     A   -0.727965</span><br><span class="line">               B   -0.589346</span><br><span class="line">       two     A    0.339969</span><br><span class="line">               B   -0.693205</span><br><span class="line">baz    one     A   -0.339355</span><br><span class="line">               B    0.593616</span><br><span class="line">       two     A    0.884345</span><br><span class="line">               B    1.591431</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>With a “stacked” DataFrame or Series (having a <code>MultiIndex</code> as the <code>index</code>), the inverse operation of <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack"><code>stack()</code></a> is <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack"><code>unstack()</code></a>, which by default unstacks the <strong>last level</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [98]: stacked.unstack()</span><br><span class="line">Out[98]: </span><br><span class="line">                     A         B</span><br><span class="line">first second                    </span><br><span class="line">bar   one    -0.727965 -0.589346</span><br><span class="line">      two     0.339969 -0.693205</span><br><span class="line">baz   one    -0.339355  0.593616</span><br><span class="line">      two     0.884345  1.591431</span><br><span class="line"></span><br><span class="line">In [99]: stacked.unstack(1)</span><br><span class="line">Out[99]: </span><br><span class="line">second        one       two</span><br><span class="line">first                      </span><br><span class="line">bar   A -0.727965  0.339969</span><br><span class="line">      B -0.589346 -0.693205</span><br><span class="line">baz   A -0.339355  0.884345</span><br><span class="line">      B  0.593616  1.591431</span><br><span class="line"></span><br><span class="line">In [100]: stacked.unstack(0)</span><br><span class="line">Out[100]: </span><br><span class="line">first          bar       baz</span><br><span class="line">second                      </span><br><span class="line">one    A -0.727965 -0.339355</span><br><span class="line">       B -0.589346  0.593616</span><br><span class="line">two    A  0.339969  0.884345</span><br><span class="line">       B -0.693205  1.591431</span><br></pre></td></tr></table></figure><h3 id="Pivot-tables"><a href="#Pivot-tables" class="headerlink" title="Pivot tables"></a>Pivot tables</h3><p>See the section on <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-pivot">Pivot Tables</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [101]: df = pd.DataFrame(&#123;&#x27;A&#x27;: [&#x27;one&#x27;, &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;] * 3,</span><br><span class="line">   .....:                    &#x27;B&#x27;: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;] * 4,</span><br><span class="line">   .....:                    &#x27;C&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;, &#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;bar&#x27;, &#x27;bar&#x27;] * 2,</span><br><span class="line">   .....:                    &#x27;D&#x27;: np.random.randn(12),</span><br><span class="line">   .....:                    &#x27;E&#x27;: np.random.randn(12)&#125;)</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [102]: df</span><br><span class="line">Out[102]: </span><br><span class="line">        A  B    C         D         E</span><br><span class="line">0     one  A  foo -1.202872  0.047609</span><br><span class="line">1     one  B  foo -1.814470 -0.136473</span><br><span class="line">2     two  C  foo  1.018601 -0.561757</span><br><span class="line">3   three  A  bar -0.595447 -1.623033</span><br><span class="line">4     one  B  bar  1.395433  0.029399</span><br><span class="line">5     one  C  bar -0.392670 -0.542108</span><br><span class="line">6     two  A  foo  0.007207  0.282696</span><br><span class="line">7   three  B  foo  1.928123 -0.087302</span><br><span class="line">8     one  C  foo -0.055224 -1.575170</span><br><span class="line">9     one  A  bar  2.395985  1.771208</span><br><span class="line">10    two  B  bar  1.552825  0.816482</span><br><span class="line">11  three  C  bar  0.166599  1.100230</span><br></pre></td></tr></table></figure><p>We can produce pivot tables from this data very easily:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [103]: pd.pivot_table(df, values=&#x27;D&#x27;, index=[&#x27;A&#x27;, &#x27;B&#x27;], columns=[&#x27;C&#x27;])</span><br><span class="line">Out[103]: </span><br><span class="line">C             bar       foo</span><br><span class="line">A     B                    </span><br><span class="line">one   A  2.395985 -1.202872</span><br><span class="line">      B  1.395433 -1.814470</span><br><span class="line">      C -0.392670 -0.055224</span><br><span class="line">three A -0.595447       NaN</span><br><span class="line">      B       NaN  1.928123</span><br><span class="line">      C  0.166599       NaN</span><br><span class="line">two   A       NaN  0.007207</span><br><span class="line">      B  1.552825       NaN</span><br><span class="line">      C       NaN  1.018601</span><br></pre></td></tr></table></figure><h2 id="Time-series"><a href="#Time-series" class="headerlink" title="Time series"></a>Time series</h2><p>pandas has simple, powerful, and efficient functionality for performing resampling operations during frequency conversion (e.g., converting secondly data into 5-minutely data). This is extremely common in, but not limited to, financial applications. See the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries">Time Series section</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [104]: rng = pd.date_range(&#x27;1/1/2012&#x27;, periods=100, freq=&#x27;S&#x27;)</span><br><span class="line"></span><br><span class="line">In [105]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [106]: ts.resample(&#x27;5Min&#x27;).sum()</span><br><span class="line">Out[106]: </span><br><span class="line">2012-01-01    24182</span><br><span class="line">Freq: 5T, dtype: int64</span><br></pre></td></tr></table></figure><p>Time zone representation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [107]: rng = pd.date_range(&#x27;3/6/2012 00:00&#x27;, periods=5, freq=&#x27;D&#x27;)</span><br><span class="line"></span><br><span class="line">In [108]: ts = pd.Series(np.random.randn(len(rng)), rng)</span><br><span class="line"></span><br><span class="line">In [109]: ts</span><br><span class="line">Out[109]: </span><br><span class="line">2012-03-06    1.857704</span><br><span class="line">2012-03-07   -1.193545</span><br><span class="line">2012-03-08    0.677510</span><br><span class="line">2012-03-09   -0.153931</span><br><span class="line">2012-03-10    0.520091</span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [110]: ts_utc = ts.tz_localize(&#x27;UTC&#x27;)</span><br><span class="line"></span><br><span class="line">In [111]: ts_utc</span><br><span class="line">Out[111]: </span><br><span class="line">2012-03-06 00:00:00+00:00    1.857704</span><br><span class="line">2012-03-07 00:00:00+00:00   -1.193545</span><br><span class="line">2012-03-08 00:00:00+00:00    0.677510</span><br><span class="line">2012-03-09 00:00:00+00:00   -0.153931</span><br><span class="line">2012-03-10 00:00:00+00:00    0.520091</span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure><p>Converting to another time zone:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [112]: ts_utc.tz_convert(&#x27;US/Eastern&#x27;)</span><br><span class="line">Out[112]: </span><br><span class="line">2012-03-05 19:00:00-05:00    1.857704</span><br><span class="line">2012-03-06 19:00:00-05:00   -1.193545</span><br><span class="line">2012-03-07 19:00:00-05:00    0.677510</span><br><span class="line">2012-03-08 19:00:00-05:00   -0.153931</span><br><span class="line">2012-03-09 19:00:00-05:00    0.520091</span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure><p>Converting between time span representations:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [113]: rng = pd.date_range(&#x27;1/1/2012&#x27;, periods=5, freq=&#x27;M&#x27;)</span><br><span class="line"></span><br><span class="line">In [114]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [115]: ts</span><br><span class="line">Out[115]: </span><br><span class="line">2012-01-31   -1.475051</span><br><span class="line">2012-02-29    0.722570</span><br><span class="line">2012-03-31   -0.322646</span><br><span class="line">2012-04-30   -1.601631</span><br><span class="line">2012-05-31    0.778033</span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [116]: ps = ts.to_period()</span><br><span class="line"></span><br><span class="line">In [117]: ps</span><br><span class="line">Out[117]: </span><br><span class="line">2012-01   -1.475051</span><br><span class="line">2012-02    0.722570</span><br><span class="line">2012-03   -0.322646</span><br><span class="line">2012-04   -1.601631</span><br><span class="line">2012-05    0.778033</span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [118]: ps.to_timestamp()</span><br><span class="line">Out[118]: </span><br><span class="line">2012-01-01   -1.475051</span><br><span class="line">2012-02-01    0.722570</span><br><span class="line">2012-03-01   -0.322646</span><br><span class="line">2012-04-01   -1.601631</span><br><span class="line">2012-05-01    0.778033</span><br><span class="line">Freq: MS, dtype: float64</span><br></pre></td></tr></table></figure><p>Converting between period and timestamp enables some convenient arithmetic functions to be used. In the following example, we convert a quarterly frequency with year ending in November to 9am of the end of the month following the quarter end:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [119]: prng = pd.period_range(&#x27;1990Q1&#x27;, &#x27;2000Q4&#x27;, freq=&#x27;Q-NOV&#x27;)</span><br><span class="line"></span><br><span class="line">In [120]: ts = pd.Series(np.random.randn(len(prng)), prng)</span><br><span class="line"></span><br><span class="line">In [121]: ts.index = (prng.asfreq(&#x27;M&#x27;, &#x27;e&#x27;) + 1).asfreq(&#x27;H&#x27;, &#x27;s&#x27;) + 9</span><br><span class="line"></span><br><span class="line">In [122]: ts.head()</span><br><span class="line">Out[122]: </span><br><span class="line">1990-03-01 09:00   -0.289342</span><br><span class="line">1990-06-01 09:00    0.233141</span><br><span class="line">1990-09-01 09:00   -0.223540</span><br><span class="line">1990-12-01 09:00    0.542054</span><br><span class="line">1991-03-01 09:00   -0.688585</span><br><span class="line">Freq: H, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="Categoricals"><a href="#Categoricals" class="headerlink" title="Categoricals"></a>Categoricals</h2><p>pandas can include categorical data in a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a>. For full docs, see the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#categorical">categorical introduction</a> and the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/arrays.html#api-arrays-categorical">API documentation</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [123]: df = pd.DataFrame(&#123;&quot;id&quot;: [1, 2, 3, 4, 5, 6],</span><br><span class="line">   .....:                    &quot;raw_grade&quot;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;e&#x27;]&#125;)</span><br><span class="line">   .....: </span><br></pre></td></tr></table></figure><p>Convert the raw grades to a categorical data type.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [124]: df[&quot;grade&quot;] = df[&quot;raw_grade&quot;].astype(&quot;category&quot;)</span><br><span class="line"></span><br><span class="line">In [125]: df[&quot;grade&quot;]</span><br><span class="line">Out[125]: </span><br><span class="line">0    a</span><br><span class="line">1    b</span><br><span class="line">2    b</span><br><span class="line">3    a</span><br><span class="line">4    a</span><br><span class="line">5    e</span><br><span class="line">Name: grade, dtype: category</span><br><span class="line">Categories (3, object): [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;]</span><br></pre></td></tr></table></figure><p>Rename the categories to more meaningful names (assigning to <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.categories.html#pandas.Series.cat.categories"><code>Series.cat.categories()</code></a> is in place!).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [126]: df[&quot;grade&quot;].cat.categories = [&quot;very good&quot;, &quot;good&quot;, &quot;very bad&quot;]</span><br></pre></td></tr></table></figure><p>Reorder the categories and simultaneously add the missing categories (methods under <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.cat.html#pandas.Series.cat"><code>Series.cat()</code></a> return a new <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series"><code>Series</code></a> by default).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [127]: df[&quot;grade&quot;] = df[&quot;grade&quot;].cat.set_categories([&quot;very bad&quot;, &quot;bad&quot;, &quot;medium&quot;,</span><br><span class="line">   .....:                                               &quot;good&quot;, &quot;very good&quot;])</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [128]: df[&quot;grade&quot;]</span><br><span class="line">Out[128]: </span><br><span class="line">0    very good</span><br><span class="line">1         good</span><br><span class="line">2         good</span><br><span class="line">3    very good</span><br><span class="line">4    very good</span><br><span class="line">5     very bad</span><br><span class="line">Name: grade, dtype: category</span><br><span class="line">Categories (5, object): [&#x27;very bad&#x27;, &#x27;bad&#x27;, &#x27;medium&#x27;, &#x27;good&#x27;, &#x27;very good&#x27;]</span><br></pre></td></tr></table></figure><p>Sorting is per order in the categories, not lexical order.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [129]: df.sort_values(by=&quot;grade&quot;)</span><br><span class="line">Out[129]: </span><br><span class="line">   id raw_grade      grade</span><br><span class="line">5   6         e   very bad</span><br><span class="line">1   2         b       good</span><br><span class="line">2   3         b       good</span><br><span class="line">0   1         a  very good</span><br><span class="line">3   4         a  very good</span><br><span class="line">4   5         a  very good</span><br></pre></td></tr></table></figure><p>Grouping by a categorical column also shows empty categories.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [130]: df.groupby(&quot;grade&quot;).size()</span><br><span class="line">Out[130]: </span><br><span class="line">grade</span><br><span class="line">very bad     1</span><br><span class="line">bad          0</span><br><span class="line">medium       0</span><br><span class="line">good         2</span><br><span class="line">very good    3</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h2 id="Plotting"><a href="#Plotting" class="headerlink" title="Plotting"></a>Plotting</h2><p>See the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization">Plotting</a> docs.</p><p>We use the standard convention for referencing the matplotlib API:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [131]: import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">In [132]: plt.close(&#x27;all&#x27;)</span><br><span class="line">In [133]: ts = pd.Series(np.random.randn(1000),</span><br><span class="line">   .....:                index=pd.date_range(&#x27;1/1/2000&#x27;, periods=1000))</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [134]: ts = ts.cumsum()</span><br><span class="line"></span><br><span class="line">In [135]: ts.plot()</span><br><span class="line">Out[135]: &lt;AxesSubplot:&gt;</span><br></pre></td></tr></table></figure><p><img src="https://pandas.pydata.org/pandas-docs/stable/_images/series_plot_basic.png" alt="../_images/series_plot_basic.png"></p><p>On a DataFrame, the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot"><code>plot()</code></a> method is a convenience to plot all of the columns with labels:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [136]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index,</span><br><span class="line">   .....:                   columns=[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;])</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [137]: df = df.cumsum()</span><br><span class="line"></span><br><span class="line">In [138]: plt.figure()</span><br><span class="line">Out[138]: &lt;Figure size 640x480 with 0 Axes&gt;</span><br><span class="line"></span><br><span class="line">In [139]: df.plot()</span><br><span class="line">Out[139]: &lt;AxesSubplot:&gt;</span><br><span class="line"></span><br><span class="line">In [140]: plt.legend(loc=&#x27;best&#x27;)</span><br><span class="line">Out[140]: &lt;matplotlib.legend.Legend at 0x7fbfb29f0670&gt;</span><br></pre></td></tr></table></figure><p><img src="https://pandas.pydata.org/pandas-docs/stable/_images/frame_plot_basic.png" alt="../_images/frame_plot_basic.png"></p><h2 id="Getting-data-in-out"><a href="#Getting-data-in-out" class="headerlink" title="Getting data in/out"></a>Getting data in/out</h2><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><p><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-store-in-csv">Writing to a csv file.</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [141]: df.to_csv(&#x27;foo.csv&#x27;)</span><br></pre></td></tr></table></figure><p><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-csv-table">Reading from a csv file.</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [142]: pd.read_csv(&#x27;foo.csv&#x27;)</span><br><span class="line">Out[142]: </span><br><span class="line">     Unnamed: 0          A          B          C          D</span><br><span class="line">0    2000-01-01   0.350262   0.843315   1.798556   0.782234</span><br><span class="line">1    2000-01-02  -0.586873   0.034907   1.923792  -0.562651</span><br><span class="line">2    2000-01-03  -1.245477  -0.963406   2.269575  -1.612566</span><br><span class="line">3    2000-01-04  -0.252830  -0.498066   3.176886  -1.275581</span><br><span class="line">4    2000-01-05  -1.044057   0.118042   2.768571   0.386039</span><br><span class="line">..          ...        ...        ...        ...        ...</span><br><span class="line">995  2002-09-22 -48.017654  31.474551  69.146374 -47.541670</span><br><span class="line">996  2002-09-23 -47.207912  32.627390  68.505254 -48.828331</span><br><span class="line">997  2002-09-24 -48.907133  31.990402  67.310924 -49.391051</span><br><span class="line">998  2002-09-25 -50.146062  33.716770  67.717434 -49.037577</span><br><span class="line">999  2002-09-26 -49.724318  33.479952  68.108014 -48.822030</span><br><span class="line"></span><br><span class="line">[1000 rows x 5 columns]</span><br></pre></td></tr></table></figure><h3 id="HDF5"><a href="#HDF5" class="headerlink" title="HDF5"></a>HDF5</h3><p>Reading and writing to <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-hdf5">HDFStores</a>.</p><p>Writing to a HDF5 Store.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [143]: df.to_hdf(&#x27;foo.h5&#x27;, &#x27;df&#x27;)</span><br></pre></td></tr></table></figure><p>Reading from a HDF5 Store.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [144]: pd.read_hdf(&#x27;foo.h5&#x27;, &#x27;df&#x27;)</span><br><span class="line">Out[144]: </span><br><span class="line">                    A          B          C          D</span><br><span class="line">2000-01-01   0.350262   0.843315   1.798556   0.782234</span><br><span class="line">2000-01-02  -0.586873   0.034907   1.923792  -0.562651</span><br><span class="line">2000-01-03  -1.245477  -0.963406   2.269575  -1.612566</span><br><span class="line">2000-01-04  -0.252830  -0.498066   3.176886  -1.275581</span><br><span class="line">2000-01-05  -1.044057   0.118042   2.768571   0.386039</span><br><span class="line">...               ...        ...        ...        ...</span><br><span class="line">2002-09-22 -48.017654  31.474551  69.146374 -47.541670</span><br><span class="line">2002-09-23 -47.207912  32.627390  68.505254 -48.828331</span><br><span class="line">2002-09-24 -48.907133  31.990402  67.310924 -49.391051</span><br><span class="line">2002-09-25 -50.146062  33.716770  67.717434 -49.037577</span><br><span class="line">2002-09-26 -49.724318  33.479952  68.108014 -48.822030</span><br><span class="line"></span><br><span class="line">[1000 rows x 4 columns]</span><br></pre></td></tr></table></figure><h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h3><p>Reading and writing to <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-excel">MS Excel</a>.</p><p>Writing to an excel file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [145]: df.to_excel(&#x27;foo.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;)</span><br></pre></td></tr></table></figure><p>Reading from an excel file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [146]: pd.read_excel(&#x27;foo.xlsx&#x27;, &#x27;Sheet1&#x27;, index_col=None, na_values=[&#x27;NA&#x27;])</span><br><span class="line">Out[146]: </span><br><span class="line">    Unnamed: 0          A          B          C          D</span><br><span class="line">0   2000-01-01   0.350262   0.843315   1.798556   0.782234</span><br><span class="line">1   2000-01-02  -0.586873   0.034907   1.923792  -0.562651</span><br><span class="line">2   2000-01-03  -1.245477  -0.963406   2.269575  -1.612566</span><br><span class="line">3   2000-01-04  -0.252830  -0.498066   3.176886  -1.275581</span><br><span class="line">4   2000-01-05  -1.044057   0.118042   2.768571   0.386039</span><br><span class="line">..         ...        ...        ...        ...        ...</span><br><span class="line">995 2002-09-22 -48.017654  31.474551  69.146374 -47.541670</span><br><span class="line">996 2002-09-23 -47.207912  32.627390  68.505254 -48.828331</span><br><span class="line">997 2002-09-24 -48.907133  31.990402  67.310924 -49.391051</span><br><span class="line">998 2002-09-25 -50.146062  33.716770  67.717434 -49.037577</span><br><span class="line">999 2002-09-26 -49.724318  33.479952  68.108014 -48.822030</span><br><span class="line"></span><br><span class="line">[1000 rows x 5 columns]</span><br></pre></td></tr></table></figure><h2 id="Gotchas"><a href="#Gotchas" class="headerlink" title="Gotchas"></a>Gotchas</h2><p>If you are attempting to perform an operation you might see an exception like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; if pd.Series([False, True, False]):</span><br><span class="line">...     print(&quot;I was true&quot;)</span><br><span class="line">Traceback</span><br><span class="line">    ...</span><br><span class="line">ValueError: The truth value of an array is ambiguous. Use a.empty, a.any() or a.all().</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;10 minutes to pandas&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>git基础操作笔记</title>
    <link href="http://tessiehe.github.io/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    <id>http://tessiehe.github.io/2022/03/01/0_代码相关/git基础操作笔记/</id>
    <published>2022-03-01T03:32:38.000Z</published>
    <updated>2022-04-06T03:01:56.642Z</updated>
    
    <content type="html"><![CDATA[<p>git工具书</p><span id="more"></span><p>[TOC]</p><h1 id="git-worktree"><a href="#git-worktree" class="headerlink" title="git worktree"></a>git worktree</h1><p><a href="https://zhuanlan.zhihu.com/p/92906230">Git屠龙技：使用Git Worktree并行开发测试</a></p><p>Git worktree严格意义上说已经不是一个新的功能了，它推出也已经好几年了，是在2015年7月发布的2.5版引入的。Worktree是链接到统一仓库的多个工作区（目录，树）。一个git仓库可以支持多个工作树，分别对应不同的分支。我们在git中通过”git init”或”git clone”创建一个（主）工作区（树）（main working tree）。<br>同理，我们使用git worktree创建一个（和工作区）不同目录的工作区（树），我们称之为为”链接工作区（树）（linked working tree）”。git仓库有一个主工作树（裸库）和零个或多个链接工作树。与重建的孤立的目录不同，链接工作树和主仓库直接就行分支一样是有机关联的，任何一个链接工作树的变更提交都在仓库内部。链接工作树用完后，可以直接通过git worktree remove删除。</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/image-20220402155722383.png" alt="image-20220402155722383" style="zoom:50%;"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git worktree add ../工作树目录 分支(commits ID)  <span class="comment">#在../工作树目录下，创建一套完整分支工作区</span></span><br><span class="line"></span><br><span class="line">git worktree list <span class="comment">#列出所有工作树  --porcelain 选项，可以列出更完整的哈希值和分支信息</span></span><br><span class="line"></span><br><span class="line">git worktree remove ... <span class="comment">#删除工作树，但只能删除干净的工作树（没有未跟踪文件）</span></span><br><span class="line"></span><br><span class="line">git worktree prune <span class="comment">#删除工作树信息，🙅不要轻易使用</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="merge时产生冲突"><a href="#merge时产生冲突" class="headerlink" title="merge时产生冲突"></a>merge时产生冲突</h1><h1 id="git删除远程文件或者文件夹"><a href="#git删除远程文件或者文件夹" class="headerlink" title="git删除远程文件或者文件夹"></a>git删除远程文件或者文件夹</h1><p>git删除远程文件夹或文件的方法</p><p><a href="https://www.cnblogs.com/xusir/p/4111723.html">https://www.cnblogs.com/xusir/p/4111723.html</a></p><p>由于本地修改了文件夹大全名大小写的原因，同步到git上并不区分大小写，造成了一些文件同步不了，所以要先把git远程库上文件夹删除掉，然后再重新同步</p><p>如下，我把src里的全部移除，但是本地文件还保留。</p><p>git rm -r -n —cached  <em>/src/\</em>      //-n：加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。</p><p>git rm -r —cached  <em>/src/\</em>      //最终执行命令. </p><p>git commit -m”移除src目录下所有文件的版本控制”    //提交 </p><p>git push origin master   //提交到远程服务器</p><p>若用git status命令查看，则/src/目录下文件出现在结果列表里， 我们不希望这个目录下的文件出现，则在项目根目录下，和.git 同级目录下，新建一个.gitignore文件，</p><p>把.gitignore提交到远程服务器。 则/src目录就不会被提交了。</p><h1 id="git基础操作"><a href="#git基础操作" class="headerlink" title="git基础操作"></a>git基础操作</h1><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/git基础操作笔记.assets\1541381811863.png" alt="1541381811863"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git init #在现有目录中初始化仓库</span><br><span class="line">git diff #查看已暂存和未暂存的修改</span><br><span class="line">git log #查看提交历史</span><br><span class="line">git reset HEAD [file] #取消暂存的文件</span><br><span class="line">git checkout --[file] #撤消对文件的修改</span><br><span class="line">git branch testing #建立分支</span><br><span class="line">git checkout testing #切换分支</span><br><span class="line">git merge #分支合并</span><br><span class="line">git remote #查看远程仓库名称</span><br><span class="line">git branch -r #查看远程分支的名称</span><br></pre></td></tr></table></figure><h2 id="crontab同步git仓库"><a href="#crontab同步git仓库" class="headerlink" title="crontab同步git仓库"></a>crontab同步git仓库</h2><p>添加远程仓库的时候使用https,并加入用户名、密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin http://hetianqi:htq0625HTQ%24@git.jd.com/jd_git/monitors.git</span><br></pre></td></tr></table></figure></p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 忽略子目录</span><br><span class="line">**/log/*</span><br><span class="line"></span><br><span class="line"># 忽略*.o和*.a文件</span><br><span class="line">*.[oa] </span><br><span class="line"></span><br><span class="line"># 忽略*.b和*.B文件，my.b除外</span><br><span class="line">*.[bB]</span><br><span class="line">!my.b</span><br><span class="line"></span><br><span class="line"># 忽略dbg文件和dbg目录(只要)</span><br><span class="line">dbg</span><br><span class="line"></span><br><span class="line"># 只忽略dbg目录，不忽略dbg文件</span><br><span class="line">dbg/</span><br><span class="line"></span><br><span class="line"># 只忽略dbg文件，不忽略dbg目录</span><br><span class="line">dbg</span><br><span class="line">!dbg/</span><br><span class="line"></span><br><span class="line"># 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内</span><br><span class="line"></span><br><span class="line">/dbg</span><br><span class="line"></span><br><span class="line"># 以&#x27;#&#x27;开始的行，被视为注释.</span><br><span class="line"></span><br><span class="line"> * ？：代表任意的一个字符</span><br><span class="line">    * ＊：代表任意数目的字符</span><br><span class="line">    * &#123;!ab&#125;：必须不是此类型</span><br><span class="line">    * &#123;ab,bb,cx&#125;：代表ab,bb,cx中任一类型即可</span><br><span class="line">    * [abc]：代表a,b,c中任一字符即可</span><br><span class="line">    * [ ^abc]：代表必须不是a,b,c中任一字符</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mac配置全局gitignore</span></span><br><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br><span class="line"></span><br><span class="line">vim ~/.gitignore_global</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> Mac OS X System Files</span></span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> emacs</span></span><br><span class="line">*~</span><br><span class="line"><span class="meta">[#</span><span class="bash">]*[<span class="comment">#]</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> Eclipse</span></span><br><span class="line">*.project</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> Logs and databases</span></span><br><span class="line">*.log</span><br><span class="line">*.dat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> remove SVN</span></span><br><span class="line">.svn</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> Xcode</span></span><br><span class="line">.*.swp</span><br><span class="line">.clang_complete</span><br><span class="line">*.xcodeproj/project.xcworkspace/</span><br><span class="line">*.xcodeproj/xcuserdata/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> IDEA</span></span><br><span class="line">**/build/*</span><br><span class="line">.idea/*</span><br><span class="line">*.iml</span><br><span class="line">**/out/*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> PYCHARM</span></span><br><span class="line">**/__pycache__/*</span><br><span class="line">**/.ipynb_checkpoints/*</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="fetch-和-pull的区别"><a href="#fetch-和-pull的区别" class="headerlink" title="fetch 和 pull的区别"></a>fetch 和 pull的区别</h2><p><a href="https://www.cnblogs.com/runnerjack/p/9342362.html">https://www.cnblogs.com/runnerjack/p/9342362.html</a><br>git fetch 命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch &lt;远程主机名&gt; //这个命令将某个远程主机的更新全部取回本地</span></span><br><span class="line">如果只想取回特定分支的更新，可以指定分支名：</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch &lt;远程主机名&gt; &lt;分支名&gt; //注意之间有空格</span></span><br><span class="line">最常见的命令如取回origin 主机的master 分支：</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin master</span></span><br><span class="line">取回更新后，会返回一个FETCH_HEAD ，指的是某个branch在服务器上的最新状态，我们可以在本地通过它查看刚取回的更新信息：</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p FETCH_HEAD</span></span><br><span class="line">前面提到，git pull 的过程可以理解为：</span><br><span class="line"></span><br><span class="line">git fetch origin master //从远程主机的master分支拉取最新内容 </span><br><span class="line">git merge FETCH_HEAD    //将拉取下来的最新内容合并到当前所在的分支中</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">即将远程主机的某个分支的更新取回，并与本地指定的分支合并，完整格式可表示为：</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></span><br><span class="line">如果远程分支是与当前分支合并，则冒号后面的部分可以省略：</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull origin next</span></span><br></pre></td></tr></table></figure></p><h2 id="按后缀添加文件"><a href="#按后缀添加文件" class="headerlink" title="按后缀添加文件"></a>按后缀添加文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#x27;*.py&#x27; -exec git add &#123;&#125; \;</span><br><span class="line">find . -name &#x27;*.sh&#x27; -exec git add &#123;&#125; \;</span><br><span class="line">find . -name &#x27;*.sql&#x27; -exec git add &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">find . -name &#x27;*.dump&#x27; -exec git add &#123;&#125; \;</span><br><span class="line">find . -name &#x27;*.ipynb&#x27; -exec git add &#123;&#125; \;</span><br><span class="line">find . -name &#x27;*.model&#x27; -exec git add &#123;&#125; \;</span><br><span class="line">find . -name &#x27;*.model&#x27; -exec git checkout &#123;&#125; </span><br><span class="line"></span><br><span class="line">find . -name &#x27;*.model&#x27; -exec git add &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find ./ -regex .*transform_5k/.*meta -exec git add &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find /notebook/rta_cvr_git/3_tfModels/application/MMOE/transform_5k/ -name &#x27;*&#x27; -exec git add &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="git切换关联的远程仓库"><a href="#git切换关联的远程仓库" class="headerlink" title="git切换关联的远程仓库"></a>git切换关联的远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 先删除关联</span><br><span class="line">git remote rm origin</span><br><span class="line">// 再关联新的地址</span><br><span class="line">git remote add origin XXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><h2 id="删除某些已经存在的索引及文件"><a href="#删除某些已经存在的索引及文件" class="headerlink" title="删除某些已经存在的索引及文件"></a>删除某些已经存在的索引及文件</h2><p>原理：对所有文件的commit log进行重写，排除掉某些文件即可。<br>命令如下：</p><ol><li>删除远程和本地索引</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch -f --tree-filter &#x27;rm -rf */.ipynb_checkpoints/*&#x27; HEAD</span><br></pre></td></tr></table></figure><p>当然，如果你还需要push到远端，就</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin master  --force #也可以是别的分支</span><br></pre></td></tr></table></figure><ol><li>删除远程文件：IDE里直接删除并commit</li><li>pull</li></ol><p>注意</p><p>1、其他分支也需要删除commit索引</p><h2 id="强制覆盖本地的代码"><a href="#强制覆盖本地的代码" class="headerlink" title="强制覆盖本地的代码"></a>强制覆盖本地的代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line"><span class="meta">#</span><span class="bash">然后，你有两个选择：</span></span><br><span class="line">git reset --hard origin/master</span><br><span class="line"><span class="meta">#</span><span class="bash">或者如果你在其他分支上：</span></span><br><span class="line">git reset --hard origin/&lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">说明：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git fetch从远程下载最新的，而不尝试合并或rebase任何东西。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">然后git reset将主分支重置为您刚刚获取的内容。 --hard选项更改工作树中的所有文件以匹配origin/master中的文件。</span></span><br></pre></td></tr></table></figure><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>  git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt; ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名， 第一个master是本地分支名，第二个master是远程分支名。</p><p><strong>Git push</strong></p><p>​        在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。</p><p>​    git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt; ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，</p><p>​    第一个master是本地分支名，第二个master是远程分支名。</p><p>​    <strong>1.1 git push origin master</strong></p><p>​        如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</p><p>​     <strong>1.2</strong> <strong>git push origin ：refs/for/master</strong> </p><p>　　如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin —delete master</p><p>​    <strong>1.3</strong> <strong>git push origin</strong></p><p>　　 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 </p><p>　<strong>1.4 git push</strong></p><p>　　如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</p><p>　<strong>1.5 git push 的其他命令</strong></p><p>　　这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：</p><p>　　　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，</p><p>　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式</p><p>　　　　　　如果想更改设置，可以使用git config命令。git config —global push.default matching OR git config —global push.default simple；可以使用git config -l 查看配置</p><p>　　　　（2） git push —all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</p><p>　　　　（3） git push —force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。</p><p>　　　　（4） git push origin —tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令</p><h2 id="本地repository关联到远程"><a href="#本地repository关联到远程" class="headerlink" title="本地repository关联到远程"></a>本地repository关联到远程</h2><h3 id="1-打开在你的项目文件夹，输入下面的命令"><a href="#1-打开在你的项目文件夹，输入下面的命令" class="headerlink" title="1. 打开在你的项目文件夹，输入下面的命令"></a>1. 打开在你的项目文件夹，输入下面的命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161117105613529-1331892400.png" alt="img"></p><p> 输完上面的命令，文件夹中会出现一个.git文件夹，如下图所示，其他的的文件也会出现蓝色小问号的标志</p><p> <img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161020175232498-1872971817.png" alt="img"></p><h3 id="2-添加所有文件"><a href="#2-添加所有文件" class="headerlink" title="2. 添加所有文件"></a>2. 添加所有文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>注意最后的点是有用的哦</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161117105642248-437211863.png" alt="img"></p><p> 输入完成后，文件夹如下所示</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161020175721045-34264600.png" alt="img"></p><h3 id="3-提交所有文件"><a href="#3-提交所有文件" class="headerlink" title="3. 提交所有文件"></a>3. 提交所有文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;这里是备注信息&quot; -a</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/git基础操作笔记.assets\643024-20161117105723982-456456864.png" alt="img"></p><p> 完成后，文件夹显示如下</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161020180119123-417194644.png" alt="img"></p><p>都会出现绿色的小对勾</p><h3 id="4-连接到远程仓库"><a href="#4-连接到远程仓库" class="headerlink" title="4. 连接到远程仓库"></a>4. 连接到远程仓库</h3><p>提前在你的github中新建一个仓库，操作如下</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161020180953357-871156867.png" alt="img"></p><p>建好后，取好项目名称，点击create repository按钮，完成仓库的建立</p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161020180830388-1568291414.png" alt="img"></p><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161026120125703-263387261.png" alt="img"></p><p>点击红色框出的小按钮，复制链接 </p><h3 id="5-连接远程仓库"><a href="#5-连接远程仓库" class="headerlink" title="5. 连接远程仓库"></a>5. 连接远程仓库</h3><p>在本地的命令框中输入下面的命令，即连接到了名为poster的仓库上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/OliveKong/poster.git </span><br></pre></td></tr></table></figure><p> <img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161117105800279-1083550297.png" alt="img"></p><h3 id="6-把本地项目推送到远程仓库"><a href="#6-把本地项目推送到远程仓库" class="headerlink" title="6.把本地项目推送到远程仓库"></a>6.把本地项目推送到远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master </span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/0_%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/643024-20161117105822107-1011418356.png" alt="img"></p><h2 id="git-ignore"><a href="#git-ignore" class="headerlink" title="git ignore"></a>git ignore</h2><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p><p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;update .gitignore&#x27;</span><br></pre></td></tr></table></figure><h1 id="git-工作流程"><a href="#git-工作流程" class="headerlink" title="git 工作流程"></a>git 工作流程</h1><p><a href="https://blog.csdn.net/zyw0713/article/details/80083431">https://blog.csdn.net/zyw0713/article/details/80083431</a></p><h2 id="主master分支"><a href="#主master分支" class="headerlink" title="主master分支"></a>主master分支</h2><h2 id="开发分支develop"><a href="#开发分支develop" class="headerlink" title="开发分支develop"></a>开发分支develop</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Git创建Develop分支的命令</span></span><br><span class="line">git checkout -b develop master  <span class="comment">#相当于 创建新分支：git branch branchName 切换到新分支：git checkout branchName</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将Develop分支发布到Master分支的命令</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure><p>—no-ff参数：默认情况下，Git执行”快进式合并”，会直接将Master分支指向Develop分支。强推。少用！！</p><h2 id="临时分支（功能feature，预发布release，fixbug）"><a href="#临时分支（功能feature，预发布release，fixbug）" class="headerlink" title="临时分支（功能feature，预发布release，fixbug）"></a>临时分支（功能feature，预发布release，fixbug）</h2><p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。</p><p>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p><ul><li><p>功能分支 （feature）</p></li><li><p>预发布分支 (release)</p></li><li><p>修补bug分支 (fixbug)</p></li></ul><p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个功能分支</span></span><br><span class="line">git checkout -b feature-x develop</span><br><span class="line"><span class="comment">#合并到develop分支</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除feature分支</span></span><br><span class="line">git branch -d feature-x</span><br></pre></td></tr></table></figure><h2 id="克隆其他分支"><a href="#克隆其他分支" class="headerlink" title="克隆其他分支"></a>克隆其他分支</h2><p>假设要clone dev分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> ........ <span class="comment">#把项目从远程clone到本地，默认clonemaster分支</span></span><br><span class="line">git pull origin dev:dev  <span class="comment">#把远程的dev分支拉到本地的dev分支。冒号前是远程分支名，冒号后是本地分支名</span></span><br></pre></td></tr></table></figure><h1 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h1><p>Added (新加入的需求)</p><p>　　Fixed： (修复bug )</p><p>　　Changed ：(完成的任务)</p><p>　　Updated： (完成的任务，或者由于第三方模块变化而做的变化)</p><p>　　Mod: 修改（Modify）</p><p>　　Add: a new module to have faster process, 表示新增（Add）</p><p>　　Rem: deprecate unused modules, 表示移除（Remove）</p><p>　　Ref: improved the implementation of module X, 表示重构（Refactory）</p><p>假如有 Issues 系统，其中可以包含 Issue 的 ID。比如：Issue #123456</p><h1 id="上传大文件失败"><a href="#上传大文件失败" class="headerlink" title="上传大文件失败"></a>上传大文件失败</h1><p>参考： <a href="https://blog.csdn.net/quiet_girl/article/details/79487966">https://blog.csdn.net/quiet_girl/article/details/79487966</a></p><p>git push 时，存在大文件会报错，即使删除大文件后，还会报错。主要是因为大文件存在没有被提交的commit记录里面。</p><p><strong>解决方案：删除有大文件的commit记录即可</strong></p><p>1、git status 查看未被传送到远程代码库的提交状态</p><p>2、git cherry -v 查看未被传送到远程代码库的提交描述和说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cc@lcc MyDoc$ git cherry -v </span><br><span class="line">+ 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12 kafka console消费失败</span><br><span class="line">+ 0f535fa58f413913c2c5ce37b85bf0803ea88f0b kafka console消费失败</span><br><span class="line">+ 3342e8c5db5c8d4533a70c80cf2a480ef0dd94f8 kafka console消费失败</span><br><span class="line">+ de978a99704e1bec6d2e81fcfd24900e6be43d8e kafka console消费失败</span><br><span class="line">+ f96a7d270c8d6a253530309a9f485a8d2a84befe kafka console消费失败</span><br><span class="line">+ 8ebe1f4d47845ddf21e7f14c031e73ec4f786722 drui io</span><br><span class="line">+ f8e4b51169d00242fff77aae182097cecbbff95a drui io</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、git reset commit_id 撤销未被传送到远程代码库的提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这里我选择第一个</span><br><span class="line">cc@lcc MyDoc$ git reset 0bd8c12c3b44c5d16ff6e9ce84d00230561b7f12</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>移除大文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lcc@lcc MyDoc$ git rm --cached *.pdf</span><br><span class="line"><span class="comment">#这里我直接移除所有的pdf文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后备份这些pdf文件 </span></span><br><span class="line">lcc@lcc MyDoc$ mv ./*/*.pdf ~/Downloads/</span><br></pre></td></tr></table></figure><h2 id="【git】全局配置和单个仓库的用户名邮箱配置"><a href="#【git】全局配置和单个仓库的用户名邮箱配置" class="headerlink" title="【git】全局配置和单个仓库的用户名邮箱配置"></a>【git】全局配置和单个仓库的用户名邮箱配置</h2><p>Git全局配置和单个仓库的用户名邮箱配置</p><p>学习git的时候, 大家刚开始使用之前都配置了一个全局的用户名和邮箱</p><p>$ git config —global user.name “github’s Name”</p><p>$ git config —global user.email “github@xx.com”</p><p>$ git config —list</p><p>如果你公司的项目是放在自建的gitlab上面, 如果你不进行配置用户名和邮箱的话, 则会使用全局的, 这个时候是错误的, 正确的做法是针对公司的项目, 在项目根目录下进行单独配置</p><p>$ git config user.name “gitlab’s Name”</p><p>$ git config user.email “gitlab@xx.com”</p><p>$ git config —list</p><p> git config —list查看当前配置, 在当前项目下面查看的配置是全局配置+当前项目的配置, 使用的时候会优先使用当前项目的配置</p><h1 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h1><h2 id="not-staged"><a href="#not-staged" class="headerlink" title="not staged"></a>not staged</h2><p>解决：如果已add .之后还是报这个问题，就是这几个目录下有git文件（这些git文件没有add）</p><h2 id="Please-commit-your-changes-or-stash-them-before-you-merge"><a href="#Please-commit-your-changes-or-stash-them-before-you-merge" class="headerlink" title="Please commit your changes or stash them before you merge."></a>Please commit your changes or stash them before you merge.</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="fatal-refusing-to-merge-unrelated-histories"><a href="#fatal-refusing-to-merge-unrelated-histories" class="headerlink" title="fatal: refusing to merge unrelated histories"></a>fatal: refusing to merge unrelated histories</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><h2 id="中文显示乱码"><a href="#中文显示乱码" class="headerlink" title="中文显示乱码"></a>中文显示乱码</h2><p><a href="https://blog.csdn.net/u012145252/article/details/81775362">https://blog.csdn.net/u012145252/article/details/81775362</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git工具书&lt;/p&gt;
    
    </summary>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/categories/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="default" scheme="http://tessiehe.github.io/tags/default/"/>
    
      <category term="代码相关" scheme="http://tessiehe.github.io/tags/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
</feed>
